//
// File: FlightMissionMode.cpp
//
// Code generated for Simulink model 'FlightMissionMode'.
//
// Model version                  : 2.62
// Simulink Coder version         : 9.6 (R2021b) 14-May-2021
// C/C++ source code generated on : Wed Feb 23 00:35:41 2022
//
// Target selection: ert.tlc
// Embedded hardware selection: ARM Compatible->ARM 64-bit (LLP64)
// Code generation objectives:
//    1. Safety precaution
//    2. Execution efficiency
//    3. RAM efficiency
//    4. ROM efficiency
// Validation result: Not run
//
#include "FlightMissionMode.h"
#include "FlightMissionMode_private.h"
#include "mod_ZflSpsmf.h"
#include "rt_atan2d_snf.h"
#include "rt_modd_snf.h"
#include "rt_mrdivide_U1d1x3_U2d3x3_Yd1x3_snf.h"
#include "rt_remd_snf.h"
#include "skip_to_last_equal_value_g4hWwl2B.h"
#include "skip_to_last_equal_value_rETCs5xJ.h"
#include "sum_4Il0TNcY.h"
#include "wrapToPi_eKulZbfm.h"

// Named constants for Chart: '<S178>/Chart'
const uint8_T FlightMissionMode_IN_Bottom{ 1U };

const uint8_T FlightMissionMode_IN_Init{ 1U };

const uint8_T FlightMissionMode_IN_Left{ 2U };

const uint8_T FlightMissionMode_IN_NO_ACTIVE_CHILD{ 0U };

const uint8_T FlightMissionMode_IN_Right{ 3U };

const uint8_T FlightMissionMode_IN_Running{ 2U };

const uint8_T FlightMissionMode_IN_Top{ 4U };

// Named constants for Chart: '<Root>/PreemptableMissionModeSelector'
const uint8_T FlightMissionMode_IN_CircDispNav{ 1U };

const uint8_T FlightMissionMode_IN_CircNav{ 2U };

const uint8_T FlightMissionMode_IN_CustomFrmnNav{ 3U };

const uint8_T FlightMissionMode_IN_HorzFrmnNav{ 4U };

const uint8_T FlightMissionMode_IN_NO_ACTIVE_CHILD_g{ 0U };

const uint8_T FlightMissionMode_IN_NewRunWay{ 5U };

const uint8_T FlightMissionMode_IN_ProtLine{ 6U };

const uint8_T FlightMissionMode_IN_RunWayNav{ 7U };

const uint8_T FlightMissionMode_IN_WaitToStart{ 8U };

const FixedWingGuidanceBus FlightMissionMode_rtZFixedWingGuidanceBus{
    0.0,                               // Height
    0.0,                               // AirSpeed
    0.0                                // HeadingAngle
} ;                                    // FixedWingGuidanceBus ground

// Forward declaration for local functions
static real_T FlightMissionMode_norm(const real_T x[2]);
static real_T FlightMissionMode_norm_i(const real_T x[3]);
static real_T FlightMissionMode_angdiff(real_T x, real_T y);

// Forward declaration for local functions
static void FlightMissionMode_emxInit_real_T(emxArray_real_T_FlightMissionMode_T
    **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_real_T
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_WaypointFollowerBase_getDistinctWpts(const real_T
    waypoints[30720], emxArray_real_T_FlightMissionMode_T *distinctWpts,
    DW_WaypointFollower_FlightMissionMode_T *localDW);
static real_T FlightMissionMode_norm_g(const real_T x[3]);
static void FlightMissionMode_emxFree_real_T(emxArray_real_T_FlightMissionMode_T
    **pEmxArray);

// Forward declaration for local functions
static real_T FlightMissionMode_norm_c(const real_T x[3]);

// Forward declaration for local functions
static void FlightMissionMode_merge(int32_T idx_data[], int32_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], int32_T
    xwork_data[]);
static void FlightMissionMode_sort(int32_T x_data[], const int32_T *x_size,
    int32_T idx_data[], int32_T *idx_size);
static void FlightMissionMode_do_vectors(real_T c_data[], int32_T c_size[2],
    int32_T ia_data[], int32_T *ia_size, int32_T *ib_size);
static void FlightMissionMode_do_vectors_h(const real_T b_data[], const int32_T *
    b_size, real_T c_data[], int32_T c_size[2], int32_T ia_data[], int32_T
    *ia_size, int32_T *ib_size);
static void FlightMissionMode_merge_c(int32_T idx_data[], real_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], real_T
    xwork_data[]);
static void FlightMissionMode_sort_a(real_T x_data[], const int32_T *x_size);
static void* FlightMissionMode_uavDubinsBuildable_uavDubinsBuildable(real_T
    airSpeed, real_T maxRollAngle, const real_T flightPathAngle[2], const real_T
    disabledPathTypes_data[], const int32_T *disabledPathTypes_size);
static boolean_T FlightMissionMode_strcmp(const char_T a_data[], const int32_T
    a_size[2]);
static boolean_T FlightMissionMode_strcmp_b(const char_T a_data[], const int32_T
    a_size[2]);
static void FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_o(const
    real_T varargin_1[4], const real_T varargin_2[4], real_T varargin_3, real_T
    varargin_4, real_T varargin_5, real_T varargin_6, const
    cell_wrap_1_FlightMissionMode_T varargin_7[4], const real_T varargin_8[4],
    uavDubinsPathSegment_FlightMissionMode_T *b_this);
static void FlightMissionMode_uavDubinsBuiltins_connect(const
    uavDubinsConnection_FlightMissionMode_T *obj, const real_T startPose[4],
    const real_T goalPose[4], real_T turningRadius, const real_T dpt_data[],
    const int32_T *dpt_size, uavDubinsPathSegment_FlightMissionMode_T
    *pathSegObjs, real_T *pathCosts);
static void FlightMissionMode_uavDubinsConnection_connect(const
    uavDubinsConnection_FlightMissionMode_T *obj, const real_T startPoses[4],
    const real_T goalPoses[4], uavDubinsPathSegment_FlightMissionMode_T
    *pathSegObjs, real_T *pathCosts);
static void FlightMissionMode_emxInit_real_T_d
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_strcmp_bk(const cell_wrap_1_FlightMissionMode_T a
    [4], boolean_T b_bool[4]);
static boolean_T FlightMissionMode_any(const boolean_T x[4]);
static void FlightMissionMode_useConstantDim(const real_T varargin_2_data[],
    const int32_T varargin_2_size[2], real_T varargout_1_data[], int32_T
    varargout_1_size[2]);
static void FlightMissionMode_emxInit_real_T1
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxFree_real_T_m
    (emxArray_real_T_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_emxEnsureCapacity_real_T1
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_eml_find(boolean_T x, int32_T i_data[], int32_T
    i_size[2]);
static boolean_T FlightMissionMode_strcmp_bkk(const char_T a_data[], const
    int32_T a_size[2]);
static void FlightMissionMode_emxInit_boolean_T1
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_boolean_T1
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxFree_boolean_T
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_wrapToPi(emxArray_real_T_FlightMissionMode_T
    *theta);
static boolean_T FlightMissionMode_strcmp_bkkf(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_bkkff(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_bkkffz(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_bkkffzb(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_bkkffzbu(const char_T a_data[], const
    int32_T a_size[2]);
static void FlightMissionMode_emxEnsureCapacity_real_T_d
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_mtimes(const emxArray_real_T_FlightMissionMode_T
    *A, const real_T B[4], emxArray_real_T_FlightMissionMode_T *C);
static void FlightMissionMode_uavDubinsPathSegment_interpolate(const real_T
    b_this_StartPose[4], const real_T b_this_GoalPose[4], real_T
    b_this_FlightPathAngle, real_T b_this_AirSpeed, real_T
    b_this_MinTurningRadius, real_T b_this_HelixRadius, const
    cell_wrap_1_FlightMissionMode_T b_this_MotionTypes[4], const real_T
    b_this_MotionLengths[4], real_T b_this_Length, real_T samples, real_T
    poses_data[], int32_T poses_size[2]);
static void FlightMissionMode_emxInit_int32_T
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_int32_T
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxInit_int32_T1
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_int32_T1
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxFree_int32_T
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_merge_co(emxArray_int32_T_FlightMissionMode_T *idx,
    emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T np, int32_T
    nq, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork);
static void FlightMissionMode_merge_block(emxArray_int32_T_FlightMissionMode_T
    *idx, emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T n,
    int32_T preSortLevel, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork);
static void FlightMissionMode_sort_ao(emxArray_real_T_FlightMissionMode_T *x);
static void FlightMissionMode_emxInit_boolean_T
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_boolean_T
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_eml_find_m(const
    emxArray_boolean_T_FlightMissionMode_T *x,
    emxArray_int32_T_FlightMissionMode_T *i);
static void FlightMissionMode_uavDubinsPathSegment_interpolate_c(const real_T
    b_this_StartPose[4], const real_T b_this_GoalPose[4], real_T
    b_this_FlightPathAngle, real_T b_this_AirSpeed, real_T
    b_this_MinTurningRadius, real_T b_this_HelixRadius, const
    cell_wrap_1_FlightMissionMode_T b_this_MotionTypes[4], const real_T
    b_this_MotionLengths[4], real_T b_this_Length,
    emxArray_real_T_FlightMissionMode_T *samples,
    emxArray_real_T_FlightMissionMode_T *poses);
static void FlightMissionMode_genSegWP(const
    uavDubinsConnection_FlightMissionMode_T *connectionObj, const real_T start[4],
    const real_T ende[4], emxArray_real_T_FlightMissionMode_T *segWayPoints);

// Forward declaration for local functions
static void FlightMissionMode_emxInit_real_T_i
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_merge_j(int32_T idx_data[], int32_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], int32_T
    xwork_data[]);
static void FlightMissionMode_sort_h(int32_T x_data[], const int32_T *x_size,
    int32_T idx_data[], int32_T *idx_size);
static void FlightMissionMode_do_vectors_o(real_T c_data[], int32_T c_size[2],
    int32_T ia_data[], int32_T *ia_size, int32_T *ib_size);
static void FlightMissionMode_do_vectors_on(const real_T b_data[], const int32_T
    *b_size, real_T c_data[], int32_T c_size[2], int32_T ia_data[], int32_T
    *ia_size, int32_T *ib_size);
static void FlightMissionMode_merge_j5(int32_T idx_data[], real_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], real_T
    xwork_data[]);
static void FlightMissionMode_sort_hn(real_T x_data[], const int32_T *x_size);
static void* FlightMissionMode_uavDubinsBuildable_uavDubinsBuildable_d(real_T
    airSpeed, real_T maxRollAngle, const real_T flightPathAngle[2], const real_T
    disabledPathTypes_data[], const int32_T *disabledPathTypes_size);
static boolean_T FlightMissionMode_strcmp_c(const char_T a_data[], const int32_T
    a_size[2]);
static boolean_T FlightMissionMode_strcmp_cl(const char_T a_data[], const
    int32_T a_size[2]);
static void FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_fc(const
    real_T varargin_1[4], const real_T varargin_2[4], real_T varargin_3, real_T
    varargin_4, real_T varargin_5, real_T varargin_6, const
    cell_wrap_10_FlightMissionMode_T varargin_7[4], const real_T varargin_8[4],
    uavDubinsPathSegment_FlightMissionMode_b_T *b_this);
static void FlightMissionMode_uavDubinsBuiltins_connect_l(const
    uavDubinsConnection_FlightMissionMode_T *obj, const real_T startPose[4],
    const real_T goalPose[4], real_T turningRadius, const real_T dpt_data[],
    const int32_T *dpt_size, uavDubinsPathSegment_FlightMissionMode_b_T
    *pathSegObjs, real_T *pathCosts);
static void FlightMissionMode_emxEnsureCapacity_real_T_a
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_strcmp_clp(const cell_wrap_10_FlightMissionMode_T
    a[4], boolean_T b_bool[4]);
static boolean_T FlightMissionMode_any_c(const boolean_T x[4]);
static void FlightMissionMode_useConstantDim_a(const real_T varargin_2_data[],
    const int32_T varargin_2_size[2], real_T varargout_1_data[], int32_T
    varargout_1_size[2]);
static void FlightMissionMode_emxInit_int32_T_j
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_int32_T_c
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxFree_real_T_c
    (emxArray_real_T_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_emxInit_int32_T1_l
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxInit_real_T1_g
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_real_T1_p
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxEnsureCapacity_int32_T1_h
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxFree_int32_T_k
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_merge_j5x(emxArray_int32_T_FlightMissionMode_T
    *idx, emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T np,
    int32_T nq, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork);
static void FlightMissionMode_merge_block_o(emxArray_int32_T_FlightMissionMode_T
    *idx, emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T n,
    int32_T preSortLevel, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork);
static void FlightMissionMode_sort_hnh(emxArray_real_T_FlightMissionMode_T *x);
static void FlightMissionMode_emxInit_boolean_T_k
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxFree_boolean_T_d
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_emxEnsureCapacity_boolean_T_p
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxInit_boolean_T1_k
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_boolean_T1_p
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_wrapToPi_b(emxArray_real_T_FlightMissionMode_T
    *theta);
static void FlightMissionMode_eml_find_p(const
    emxArray_boolean_T_FlightMissionMode_T *x,
    emxArray_int32_T_FlightMissionMode_T *i);
static boolean_T FlightMissionMode_strcmp_clpq(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_clpqq(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_clpqqk(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_clpqqko(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_clpqqkou(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_clpqqkoug(const char_T a_data[], const
    int32_T a_size[2]);
static void FlightMissionMode_mtimes_c(const emxArray_real_T_FlightMissionMode_T
    *A, const real_T B[4], emxArray_real_T_FlightMissionMode_T *C);
static void FlightMissionMode_uavDubinsPathSegment_interpolate_h(const real_T
    b_this_StartPose[4], const real_T b_this_GoalPose[4], real_T
    b_this_FlightPathAngle, real_T b_this_AirSpeed, real_T
    b_this_MinTurningRadius, real_T b_this_HelixRadius, const
    cell_wrap_10_FlightMissionMode_T b_this_MotionTypes[4], const real_T
    b_this_MotionLengths[4], real_T b_this_Length,
    emxArray_real_T_FlightMissionMode_T *samples,
    emxArray_real_T_FlightMissionMode_T *poses);
static void FlightMissionMode_genSegWP_b(const
    uavDubinsConnection_FlightMissionMode_T *connectionObj, const real_T start[4],
    const real_T ende[4], real_T numWPs, emxArray_real_T_FlightMissionMode_T
    *segWayPoints);

// Forward declaration for local functions
static void FlightMissionMode_exit_internal_GuidanceLogic
    (DW_FlightMissionMode_f_T *localDW);
static void FlightMissionMode_emxInit_real_T_h
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxFree_real_T_n
    (emxArray_real_T_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_emxInit_char_T(emxArray_char_T_FlightMissionMode_T
    **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxInitStruct_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T *pStruct);
static void FlightMissionMode_emxInitMatrix_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[4]);
static void FlightMissionMode_emxInitStruct_cell_wrap_2
    (cell_wrap_2_FlightMissionMode_T *pStruct);
static void FlightMissionMode_emxInitMatrix_cell_wrap_2
    (cell_wrap_2_FlightMissionMode_T pMatrix[500]);
static void FlightMissionMode_emxEnsureCapacity_char_T
    (emxArray_char_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxCopy_char_T(emxArray_char_T_FlightMissionMode_T
    **dst, emxArray_char_T_FlightMissionMode_T * const *src);
static void FlightMissionMode_emxCopyStruct_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T *dst, const
     cell_wrap_1_FlightMissionMode_i_T *src);
static void FlightMissionMode_emxFree_char_T(emxArray_char_T_FlightMissionMode_T
    **pEmxArray);
static void FlightMissionMode_emxFreeStruct_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T *pStruct);
static void FlightMissionMode_idx_motionType(cell_wrap_2_FlightMissionMode_T
    motionType1List[500], cell_wrap_2_FlightMissionMode_T motionType2List[500]);
static void FlightMissionMode_emxEnsureCapacity_real_T_c
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxReserve_real_T
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T numelToReserve);
static void FlightMissionMode_binary_expand_op_p(real_T clockAngleVertex_data[],
    const real_T numberGroup_data[], const real_T clockAngleInitial_data[],
    const int32_T clockAngleInitial_size[2], real_T b_b);
static void FlightMissionMode_emxInit_real_T1_o
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_real_T1_g
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_binary_expand_op(real_T varargin_1_data[], int32_T
    varargin_1_size[2], const real_T positionENUTarget[3], const real_T b_data[],
    const int32_T b_size[2], const emxArray_real_T_FlightMissionMode_T *x, const
    emxArray_real_T_FlightMissionMode_T *b_x, const real_T numberGroup_data[]);
static void FlightMissionMode_emxInit_uavDubinsPathSegment_10
    (emxArray_uavDubinsPathSegment_1_FlightMissionMode_T *pEmxArray);
static void FlightMissionMode_emxFreeMatrix_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[4]);
static void FlightMissionMode_emxFreeStruct_uavDubinsPathSegm
    (uavDubinsPathSegment_FlightMissionMode_g_T *pStruct);
static void FlightMissionMode_emxTrim_uavDubinsPathSegment_10
    (uavDubinsPathSegment_FlightMissionMode_g_T data[100], int32_T fromIndex,
     int32_T toIndex);
static void FlightMissionMode_emxInitStruct_uavDubinsPathSegm
    (uavDubinsPathSegment_FlightMissionMode_g_T *pStruct);
static void FlightMissionMode_emxExpand_uavDubinsPathSegment_
    (uavDubinsPathSegment_FlightMissionMode_g_T data[100], int32_T fromIndex,
     int32_T toIndex);
static void FlightMissionMode_emxEnsureCapacity_uavDubinsPath
    (uavDubinsPathSegment_FlightMissionMode_g_T data[100], const int32_T *size,
     int32_T oldNumel);
static void FlightMissionMode_emxInit_cell_wrap_1
    (emxArray_cell_wrap_1_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxInitStruct_uavDubinsConnecti
    (uavDubinsConnection_1_FlightMissionMode_T *pStruct);
static void FlightMissionMode_emxInitMatrix_uavDubinsConnecti
    (uavDubinsConnection_1_FlightMissionMode_T pMatrix[2]);
static void FlightMissionMode_uavDubinsPathSegment_set_StartPose
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this, const real_T
     startPose_data[], const int32_T startPose_size[2]);
static void FlightMissionMode_uavDubinsPathSegment_set_GoalPose
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this, const real_T
     goalPose_data[], const int32_T goalPose_size[2]);
static uavDubinsConnection_1_FlightMissionMode_T
    *FlightMissionMode_uavDubinsConnection_uavDubinsConnection
    (uavDubinsConnection_1_FlightMissionMode_T *b_this, real_T varargin_2,
     real_T varargin_4, const real_T varargin_6[2]);
static void FlightMissionMode_uavDubinsPathSegment_set_MotionTypes
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this, const
     cell_wrap_1_FlightMissionMode_i_T motionTypes[4]);
static void FlightMissionMode_emxInitMatrix_cell_wrap_11
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[27]);
static void FlightMissionMode_emxInitMatrix_cell_wrap_12
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[28]);
static void FlightMissionMode_emxFreeMatrix_cell_wrap_12
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[28]);
static void FlightMissionMode_emxFreeMatrix_cell_wrap_11
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[27]);
static void FlightMissionMode_emxInitStruct_uavDubinsPathSegm_f
    (uavDubinsPathSegment_1_FlightMissionMode_T *pStruct);
static void FlightMissionMode_emxInitMatrix_uavDubinsPathSegm
    (uavDubinsPathSegment_1_FlightMissionMode_T *pMatrix);
static void FlightMissionMode_emxInit_uint64_T
    (emxArray_uint64_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxFree_uint64_T
    (emxArray_uint64_T_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_emxInit_int32_T_k
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_int32_T_j
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxInit_int32_T1_lv
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_int32_T1_k
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxFree_int32_T_a
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_merge_b(int32_T idx_data[], int32_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], int32_T
    xwork_data[]);
static void FlightMissionMode_sort_m(int32_T x_data[], const int32_T *x_size,
    int32_T idx_data[], int32_T *idx_size);
static void FlightMissionMode_do_vectors_b(const
    emxArray_real_T_FlightMissionMode_T *b, real_T c_data[], int32_T c_size[2],
    int32_T ia_data[], int32_T *ia_size, int32_T *ib_size);
static void FlightMissionMode_do_vectors_bz(const real_T b_data[], const int32_T
    *b_size, real_T c_data[], int32_T c_size[2], int32_T ia_data[], int32_T
    *ia_size, int32_T *ib_size);
static void FlightMissionMode_emxEnsureCapacity_uint64_T
    (emxArray_uint64_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_merge_br(int32_T idx_data[], real_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], real_T
    xwork_data[]);
static void FlightMissionMode_sort_m04(real_T x_data[], const int32_T *x_size);
static void FlightMissionMode_emxInitMatrix_cell_wrap_21
    (cell_wrap_2_FlightMissionMode_T pMatrix[28]);
static void FlightMissionMode_emxCopyMatrix_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T dst[4], const
     cell_wrap_1_FlightMissionMode_i_T src[4]);
static void FlightMissionMode_emxCopyStruct_cell_wrap_2
    (cell_wrap_2_FlightMissionMode_T *dst, const cell_wrap_2_FlightMissionMode_T
     *src);
static void* FlightMissionMode_uavDubinsBuildable_uavDubinsBuildable_n(real_T
    airSpeed, real_T maxRollAngle, const real_T flightPathAngle[2], const real_T
    disabledPathTypes_data[], const int32_T *disabledPathTypes_size);
static void FlightMissionMode_emxFreeStruct_cell_wrap_2
    (cell_wrap_2_FlightMissionMode_T *pStruct);
static boolean_T FlightMissionMode_strcmp_o(const char_T a_data[], const int32_T
    a_size[2]);
static boolean_T FlightMissionMode_strcmp_op(const char_T a_data[], const
    int32_T a_size[2]);
static void FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_hr(const
    real_T varargin_1[4], const real_T varargin_2[4], real_T varargin_3, real_T
    varargin_4, real_T varargin_5, real_T varargin_6, const
    cell_wrap_1_FlightMissionMode_i_T varargin_7[4], const real_T varargin_8[4],
    uavDubinsPathSegment_1_FlightMissionMode_T *b_this);
static void FlightMissionMode_emxFreeMatrix_cell_wrap_21
    (cell_wrap_2_FlightMissionMode_T pMatrix[28]);
static void FlightMissionMode_uavDubinsBuiltins_connect_op(const
    uavDubinsConnection_1_FlightMissionMode_T *obj, const real_T startPose[4],
    const real_T goalPose[4], real_T turningRadius, const real_T dpt_data[],
    const int32_T *dpt_size, uavDubinsPathSegment_1_FlightMissionMode_T
    *pathSegObjs, real_T *pathCosts);
static void FlightMissionMode_uavDubinsConnection_connect_l(const
    uavDubinsConnection_1_FlightMissionMode_T *obj, const real_T
    startPoses_data[], const real_T goalPoses_data[],
    uavDubinsPathSegment_1_FlightMissionMode_T *pathSegObjs);
static void FlightMissionMode_uavDubinsPathSegment_set_StartPose_b
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this, const real_T startPose
     [4]);
static void FlightMissionMode_uavDubinsPathSegment_set_GoalPose_k
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this, const real_T goalPose[4]);
static void FlightMissionMode_uavDubinsPathSegment_set_MotionTypes_f
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this,
     cell_wrap_1_FlightMissionMode_i_T motionTypes[4]);
static void FlightMissionMode_emxFreeStruct_uavDubinsPathSegm_b
    (uavDubinsPathSegment_1_FlightMissionMode_T *pStruct);
static void FlightMissionMode_emxFreeMatrix_uavDubinsPathSegm
    (uavDubinsPathSegment_1_FlightMissionMode_T *pMatrix);
static void FlightMissionMode_emxFree_cell_wrap_1
    (emxArray_cell_wrap_1_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_emxFreeStruct_uavDubinsConnecti
    (uavDubinsConnection_1_FlightMissionMode_T *pStruct);
static void FlightMissionMode_emxFreeMatrix_uavDubinsConnecti
    (uavDubinsConnection_1_FlightMissionMode_T pMatrix[2]);
static void FlightMissionMode_strcmp_k(const char_T a_f1_data[], const int32_T
    a_f1_size[2], char_T a_f2, char_T a_f3, const char_T a_f4_data[], const
    int32_T a_f4_size[2], const cell_wrap_1_FlightMissionMode_i_T b[4],
    boolean_T b_bool[4]);
static boolean_T FlightMissionMode_any_i(const boolean_T x[4]);
static void FlightMissionMode_emxInit_cell_wrap_1_1x28
    (emxArray_cell_wrap_1_1x28_FlightMissionMode_T *pEmxArray);
static void FlightMissionMode_repmat(cell_wrap_1_FlightMissionMode_i_T b[27]);
static boolean_T FlightMissionMode_strcmp_kc(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc3(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35a(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35ai(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35ai0(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35ai04(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35ai04m(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35ai04mt(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35ai04mto(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35ai04mtol(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35ai04mtol1(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35ai04mtol1w(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kc35ai04mtol1wh(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_h(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_d(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_kd(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_i(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_a(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_at(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_e(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_j(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_bs(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_p(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_ch(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_g(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_o0(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static boolean_T FlightMissionMode_strcmp_i2(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen);
static void FlightMissionMode_get_match(const
    emxArray_char_T_FlightMissionMode_T *str, char_T match_data[], int32_T
    match_size[2], int32_T *nmatched);
static void FlightMissionMode_validatestring(const
    emxArray_char_T_FlightMissionMode_T *str, char_T out_data[], int32_T
    out_size[2]);
static boolean_T FlightMissionMode_strcmp_ga(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_hl(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_am(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_jj(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_f(const char_T b_data[], const int32_T
    b_size[2]);
static boolean_T FlightMissionMode_strcmp_l(const char_T b_data[], const int32_T
    b_size[2]);
static boolean_T FlightMissionMode_strcmp_gq(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_dt(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_l4(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_fe(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_ah(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_kj(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_oq(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_co(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_fx(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_jo(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_h4(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_on(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_ix(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_j1(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_ho(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_ii(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_n(const char_T b_data[], const int32_T
    b_size[2]);
static boolean_T FlightMissionMode_strcmp_o4(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_nb(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_jw(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_o4o(const char_T b_data[], const
    int32_T b_size[2]);
static boolean_T FlightMissionMode_strcmp_kl(const char_T b_data[], const
    int32_T b_size[2]);
static void FlightMissionMode_emxTrim_cell_wrap_1_1x28
    (cell_wrap_1_FlightMissionMode_i_T data[28], int32_T fromIndex, int32_T
     toIndex);
static void FlightMissionMode_emxExpand_cell_wrap_1_1x28
    (cell_wrap_1_FlightMissionMode_i_T data[28], int32_T fromIndex, int32_T
     toIndex);
static void FlightMissionMode_emxEnsureCapacity_cell_wrap_11
    (cell_wrap_1_FlightMissionMode_i_T data[28], const int32_T size[2], int32_T
     oldNumel);
static void FlightMissionMode_uniquePathTypes(const
    cell_wrap_1_FlightMissionMode_i_T disabledTypes[27],
    cell_wrap_1_FlightMissionMode_i_T uniqueDisabledTypes_data[], int32_T
    uniqueDisabledTypes_size[2]);
static void FlightMissionMode_emxTrim_cell_wrap_1
    (emxArray_cell_wrap_1_FlightMissionMode_T *emxArray, int32_T fromIndex,
     int32_T toIndex);
static void FlightMissionMode_emxExpand_cell_wrap_1
    (emxArray_cell_wrap_1_FlightMissionMode_T *emxArray, int32_T fromIndex,
     int32_T toIndex);
static void FlightMissionMode_emxEnsureCapacity_cell_wrap_1
    (emxArray_cell_wrap_1_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxFree_cell_wrap_1_1x28
    (emxArray_cell_wrap_1_1x28_FlightMissionMode_T *pEmxArray);
static uavDubinsConnection_1_FlightMissionMode_T
    *FlightMissionMode_uavDubinsConnection_uavDubinsConnection_f
    (uavDubinsConnection_1_FlightMissionMode_T *b_this, real_T varargin_2,
     real_T varargin_4, const real_T varargin_6[2], const
     cell_wrap_1_FlightMissionMode_i_T varargin_8[27]);
static void FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_h(const
    uavDubinsConnection_FlightMissionMode_a_T *varargin_1, const real_T
    varargin_2_data[], const int32_T varargin_2_size[2], const real_T
    varargin_3_data[], const int32_T varargin_3_size[2], const
    cell_wrap_1_FlightMissionMode_i_T varargin_4[4],
    uavDubinsPathSegment_FlightMissionMode_g_T *b_this);
static void FlightMissionMode_eml_float_colon(real_T d, real_T b,
    emxArray_real_T_FlightMissionMode_T *y);
static void FlightMissionMode_emxFree_uavDubinsPathSegment_10
    (emxArray_uavDubinsPathSegment_1_FlightMissionMode_T *pEmxArray);
static void FlightMissionMode_emxInit_int8_T(emxArray_int8_T_FlightMissionMode_T
    **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_int8_T
    (emxArray_int8_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxInit_cell_wrap_38_100
    (emxArray_cell_wrap_38_100_FlightMissionMode_T *pEmxArray);
static void FlightMissionMode_emxFreeStruct_cell_wrap_38
    (cell_wrap_38_FlightMissionMode_T *pStruct);
static void FlightMissionMode_emxTrim_cell_wrap_38_100
    (cell_wrap_38_FlightMissionMode_T data[100], int32_T fromIndex, int32_T
     toIndex);
static void FlightMissionMode_emxInitStruct_cell_wrap_38
    (cell_wrap_38_FlightMissionMode_T *pStruct);
static void FlightMissionMode_emxExpand_cell_wrap_38_100
    (cell_wrap_38_FlightMissionMode_T data[100], int32_T fromIndex, int32_T
     toIndex);
static void FlightMissionMode_emxEnsureCapacity_cell_wrap_38
    (cell_wrap_38_FlightMissionMode_T data[100], const int32_T *size, int32_T
     oldNumel);
static void FlightMissionMode_emxFree_int8_T(emxArray_int8_T_FlightMissionMode_T
    **pEmxArray);
static void FlightMissionMode_emxFree_cell_wrap_38_100
    (emxArray_cell_wrap_38_100_FlightMissionMode_T *pEmxArray);
static void FlightMissionMode_strcmp_nh(const cell_wrap_1_FlightMissionMode_i_T
    a[4], boolean_T b_bool[4]);
static void FlightMissionMode_useConstantDim_h(const real_T varargin_2_data[],
    const int32_T varargin_2_size[2], real_T varargout_1_data[], int32_T
    varargout_1_size[2]);
static void FlightMissionMode_merge_bri(emxArray_int32_T_FlightMissionMode_T
    *idx, emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T np,
    int32_T nq, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork);
static void FlightMissionMode_merge_block_b(emxArray_int32_T_FlightMissionMode_T
    *idx, emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T n,
    int32_T preSortLevel, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork);
static void FlightMissionMode_sort_mkw(emxArray_real_T_FlightMissionMode_T *x);
static void FlightMissionMode_nullAssignment(real_T x_data[], int32_T x_size[2],
    int32_T idx);
static void FlightMissionMode_emxInit_boolean_T_c
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxFree_boolean_T_n
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray);
static void FlightMissionMode_emxEnsureCapacity_boolean_T_f
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_emxInit_boolean_T1_g
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions);
static void FlightMissionMode_emxEnsureCapacity_boolean_T1_j
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel);
static void FlightMissionMode_wrapToPi_f(emxArray_real_T_FlightMissionMode_T
    *theta);
static void FlightMissionMode_eml_find_l(const
    emxArray_boolean_T_FlightMissionMode_T *x,
    emxArray_int32_T_FlightMissionMode_T *i);
static boolean_T FlightMissionMode_strcmp_op2l(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_op2lj(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_op2ljy(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_op2ljyn(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_op2ljyna(const char_T a_data[], const
    int32_T a_size[2]);
static boolean_T FlightMissionMode_strcmp_op2ljynac(const char_T a_data[], const
    int32_T a_size[2]);
static void FlightMissionMode_mtimes_g(const emxArray_real_T_FlightMissionMode_T
    *A, const real_T B[4], emxArray_real_T_FlightMissionMode_T *C);
static void FlightMissionMode_uavDubinsPathSegment_interpolate_p(const real_T
    b_this_StartPose_data[], const real_T b_this_GoalPose_data[], real_T
    b_this_FlightPathAngle, real_T b_this_AirSpeed, real_T
    b_this_MinTurningRadius, real_T b_this_HelixRadius, const
    cell_wrap_1_FlightMissionMode_i_T b_this_MotionTypes[4], const real_T
    b_this_MotionLengths[4], real_T b_this_Length,
    emxArray_real_T_FlightMissionMode_T *samples,
    emxArray_real_T_FlightMissionMode_T *poses);
static void FlightMissionMode_waypointListGen(const
    uavDubinsPathSegment_FlightMissionMode_g_T pathSegment_data[], const int32_T
    *pathSegment_size, real_T pathLength, const real_T
    pathLengthSegmentAccumulated_data[], const int32_T
    *pathLengthSegmentAccumulated_size, real_T lengthInitial,
    emxArray_real_T_FlightMissionMode_T *stateWP, real_T *lengthTerminal, real_T
    *lengthInitialNew);
static void FlightMissionMode_NewRunwayTrajGen(const
    uavDubinsConnection_FlightMissionMode_a_T *connectionObj, real_T
    lengthRacetrack, real_T numberUAV, real_T idxUAV, real_T angleJamming,
    real_T lengthRacetrackOrigin2Target, const real_T positionENUTarget[3],
    real_T clockAngleInitial_data[], int32_T clockAngleInitial_size[2], const
    real_T numberGroup_data[], const cell_wrap_1_FlightMissionMode_i_T
    motionType1[4], const cell_wrap_1_FlightMissionMode_i_T motionType2[4],
    real_T stateWaypoints[61440], DW_FlightMissionMode_f_T *localDW);
static void FlightMissionMode_emxFreeMatrix_cell_wrap_2
    (cell_wrap_2_FlightMissionMode_T pMatrix[500]);
static void FlightMissionMode_do_vectors_m(real_T c_data[], int32_T c_size[2],
    int32_T ia_data[], int32_T *ia_size, int32_T *ib_size);
static void FlightMissionMode_do_vectors_m3(const real_T b_data[], const int32_T
    *b_size, real_T c_data[], int32_T c_size[2], int32_T ia_data[], int32_T
    *ia_size, int32_T *ib_size);
static void FlightMissionMode_sort_mk(real_T x_data[], const int32_T *x_size);
static void FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_o3u(
    const real_T varargin_1[4], const real_T varargin_2[4], real_T varargin_3,
    real_T varargin_4, real_T varargin_5, real_T varargin_6, const
    cell_wrap_10_FlightMissionMode_T varargin_7[4], const real_T varargin_8[4],
    uavDubinsPathSegment_FlightMissionMode_b_T *b_this);
static void FlightMissionMode_uavDubinsBuiltins_connect_o(const
    uavDubinsConnection_FlightMissionMode_T *obj, const real_T startPose[4],
    const real_T goalPose[4], real_T turningRadius, const real_T dpt_data[],
    const int32_T *dpt_size, uavDubinsPathSegment_FlightMissionMode_b_T
    *pathSegObjs, real_T *pathCosts);
static void FlightMissionMode_strcmp_op2(const cell_wrap_10_FlightMissionMode_T
    a[4], boolean_T b_bool[4]);
static void FlightMissionMode_uavDubinsPathSegment_interpolate_f(const real_T
    b_this_StartPose[4], const real_T b_this_GoalPose[4], real_T
    b_this_FlightPathAngle, real_T b_this_AirSpeed, real_T
    b_this_MinTurningRadius, real_T b_this_HelixRadius, const
    cell_wrap_10_FlightMissionMode_T b_this_MotionTypes[4], const real_T
    b_this_MotionLengths[4], real_T b_this_Length,
    emxArray_real_T_FlightMissionMode_T *samples,
    emxArray_real_T_FlightMissionMode_T *poses);
static void FlightMissionMode_genSegWP_p(const
    uavDubinsConnection_FlightMissionMode_T *connectionObj, const real_T start[4],
    const real_T ende[4], real_T b_stepSize, emxArray_real_T_FlightMissionMode_T
    *segWayPoints);
static real_T FlightMissionMode_norm(const real_T x[2])
{
    real_T absxk;
    real_T scale;
    real_T t;
    real_T y;
    scale = 3.3121686421112381E-170;
    absxk = std::abs(x[0]);
    if (absxk > 3.3121686421112381E-170) {
        y = 1.0;
        scale = absxk;
    } else {
        t = absxk / 3.3121686421112381E-170;
        y = t * t;
    }

    absxk = std::abs(x[1]);
    if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
    } else {
        t = absxk / scale;
        y += t * t;
    }

    return scale * std::sqrt(y);
}

static real_T FlightMissionMode_norm_i(const real_T x[3])
{
    real_T absxk;
    real_T scale;
    real_T t;
    real_T y;
    scale = 3.3121686421112381E-170;
    absxk = std::abs(x[0]);
    if (absxk > 3.3121686421112381E-170) {
        y = 1.0;
        scale = absxk;
    } else {
        t = absxk / 3.3121686421112381E-170;
        y = t * t;
    }

    absxk = std::abs(x[1]);
    if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
    } else {
        t = absxk / scale;
        y += t * t;
    }

    absxk = std::abs(x[2]);
    if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
    } else {
        t = absxk / scale;
        y += t * t;
    }

    return scale * std::sqrt(y);
}

static real_T FlightMissionMode_angdiff(real_T x, real_T y)
{
    real_T delta;
    delta = y - x;
    if (std::abs(delta) > 3.1415926535897931) {
        real_T thetaWrap;
        if (std::isnan(delta + 3.1415926535897931) || std::isinf(delta +
                3.1415926535897931)) {
            thetaWrap = (rtNaN);
        } else if (delta + 3.1415926535897931 == 0.0) {
            thetaWrap = 0.0;
        } else {
            boolean_T rEQ0;
            thetaWrap = std::fmod(delta + 3.1415926535897931, 6.2831853071795862);
            rEQ0 = (thetaWrap == 0.0);
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (rEQ0) ^ 1))) {
                real_T q;
                q = std::abs((delta + 3.1415926535897931) / 6.2831853071795862);
                rEQ0 = static_cast<boolean_T>(static_cast<int32_T>((std::abs(q -
                    std::floor(q + 0.5)) > 2.2204460492503131E-16 * q) ^ 1));
            }

            if (rEQ0) {
                thetaWrap = 0.0;
            } else if (delta + 3.1415926535897931 < 0.0) {
                thetaWrap += 6.2831853071795862;
            }
        }

        if (static_cast<boolean_T>(static_cast<int32_T>((delta +
                3.1415926535897931 > 0.0) & (thetaWrap == 0.0)))) {
            thetaWrap = 6.2831853071795862;
        }

        delta = thetaWrap - 3.1415926535897931;
    }

    return delta;
}

// System initialize for atomic system:
void FlightMissionMode_OrbitFollower_Init(DW_OrbitFollower_FlightMissionMode_T
    *localDW)
{
    // Start for MATLABSystem: '<S36>/Orbit Follower'
    localDW->objisempty = true;
    localDW->obj.isInitialized = 1;
    localDW->obj.PrevResetSignal = 0.0;
    localDW->obj.NumCircles = 0.0;

    // InitializeConditions for MATLABSystem: '<S36>/Orbit Follower'
    localDW->obj.OrbitRadiusInternal = (rtNaN);
    localDW->obj.PrevResetSignal *= 0.0;
    localDW->obj.NumCircles *= 0.0;

    // Start for MATLABSystem: '<S36>/Orbit Follower'
    localDW->obj.PrevPosition[0] = 0.0;

    // InitializeConditions for MATLABSystem: '<S36>/Orbit Follower'
    localDW->obj.OrbitCenterInternal[0] = (rtNaN);
    localDW->obj.PrevPosition[0] *= 0.0;

    // Start for MATLABSystem: '<S36>/Orbit Follower'
    localDW->obj.PrevPosition[1] = 0.0;

    // InitializeConditions for MATLABSystem: '<S36>/Orbit Follower'
    localDW->obj.OrbitCenterInternal[1] = (rtNaN);
    localDW->obj.PrevPosition[1] *= 0.0;

    // Start for MATLABSystem: '<S36>/Orbit Follower'
    localDW->obj.PrevPosition[2] = 0.0;

    // InitializeConditions for MATLABSystem: '<S36>/Orbit Follower'
    localDW->obj.OrbitCenterInternal[2] = (rtNaN);
    localDW->obj.PrevPosition[2] *= 0.0;
    localDW->obj.StartFlag = true;
    localDW->obj.SelectTurnDirectionFlag = true;
    localDW->obj.TurnDirectionInternal = 1.0;
    localDW->obj.OrbitRadiusFlag = 0U;
    localDW->obj.LookaheadDistFlag = 0U;
}

// System reset for atomic system:
void FlightMissionMode_OrbitFollower_Reset(DW_OrbitFollower_FlightMissionMode_T *
    localDW)
{
    // InitializeConditions for MATLABSystem: '<S36>/Orbit Follower'
    localDW->obj.OrbitRadiusInternal = (rtNaN);
    localDW->obj.PrevResetSignal *= 0.0;
    localDW->obj.NumCircles *= 0.0;
    localDW->obj.OrbitCenterInternal[0] = (rtNaN);
    localDW->obj.PrevPosition[0] *= 0.0;
    localDW->obj.OrbitCenterInternal[1] = (rtNaN);
    localDW->obj.PrevPosition[1] *= 0.0;
    localDW->obj.OrbitCenterInternal[2] = (rtNaN);
    localDW->obj.PrevPosition[2] *= 0.0;
    localDW->obj.StartFlag = true;
    localDW->obj.SelectTurnDirectionFlag = true;
    localDW->obj.TurnDirectionInternal = 1.0;
    localDW->obj.OrbitRadiusFlag = 0U;
    localDW->obj.LookaheadDistFlag = 0U;
}

// Output and update for atomic system:
void FlightMissionMode_OrbitFollower(const real_T rtu_0[4], const real_T rtu_1[3],
    real_T rtu_2, real_T rtu_3, real_T rtu_4,
    DW_OrbitFollower_FlightMissionMode_T *localDW)
{
    real_T u[3];
    real_T v[3];
    real_T distToCenter_tmp[2];
    real_T rtu_0_0[2];
    real_T distToCenter;
    real_T rtu_0_tmp;
    real_T x2;
    real_T xyCenter_idx_0;
    int32_T b_exponent_0;
    int32_T b_exponent_1;

    // MATLABSystem: '<S36>/Orbit Follower'
    x2 = rtu_2;
    localDW->obj.OrbitRadiusFlag = 0U;
    if (rtu_2 <= 220.0) {
        x2 = 220.0;
        localDW->obj.OrbitRadiusFlag = 1U;
    }

    distToCenter = rtu_4;
    localDW->obj.LookaheadDistFlag = 0U;
    if (rtu_4 < 35.0) {
        distToCenter = 35.0;
        localDW->obj.LookaheadDistFlag = 1U;
    }

    xyCenter_idx_0 = rtu_0[0] - rtu_1[0];
    rtu_0_0[0] = xyCenter_idx_0;
    rtu_0_tmp = rtu_0[1] - rtu_1[1];
    rtu_0_0[1] = rtu_0_tmp;
    if (FlightMissionMode_norm(rtu_0_0) < 2.47032822920623E-323) {
        // MATLABSystem: '<S36>/Orbit Follower'
        localDW->OrbitFollower_o1[0] = x2 * std::cos(rtu_0[3]) + rtu_0[0];
        localDW->OrbitFollower_o1[1] = x2 * std::sin(rtu_0[3]) + rtu_0[1];
        localDW->OrbitFollower_o1[2] = rtu_1[2];

        // MATLABSystem: '<S36>/Orbit Follower'
        localDW->OrbitFollower_o2 = rtu_0[3];

        // MATLABSystem: '<S36>/Orbit Follower'
        localDW->OrbitFollower_o6 = localDW->obj.NumCircles;
    } else {
        real_T a;
        real_T absx;
        real_T turnVector_idx_1;
        int32_T b_exponent;
        boolean_T exitg1;
        boolean_T guard1{ false };

        boolean_T p;
        boolean_T p_0;
        p = false;
        p_0 = true;
        b_exponent = 0;
        exitg1 = false;
        while ((!exitg1) && (b_exponent < 3)) {
            if ((localDW->obj.OrbitCenterInternal[b_exponent] ==
                    rtu_1[b_exponent]) || (std::isnan
                    (localDW->obj.OrbitCenterInternal[b_exponent]) && std::isnan
                    (rtu_1[b_exponent]))) {
                b_exponent = static_cast<int32_T>(b_exponent + 1);
            } else {
                p_0 = false;
                exitg1 = true;
            }
        }

        if (p_0) {
            p = true;
        }

        guard1 = false;
        if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(p) ^
              1))) {
            guard1 = true;
        } else {
            p = false;
            if ((localDW->obj.OrbitRadiusInternal == x2) || (std::isnan
                    (localDW->obj.OrbitRadiusInternal) && std::isnan(x2))) {
                p = true;
            }

            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (p) ^ 1))) {
                guard1 = true;
            }
        }

        if (guard1) {
            localDW->obj.NumCircles = 0.0;
            localDW->obj.OrbitCenterInternal[0] = rtu_1[0];
            localDW->obj.OrbitCenterInternal[1] = rtu_1[1];
            localDW->obj.OrbitCenterInternal[2] = rtu_1[2];
            localDW->obj.OrbitRadiusInternal = x2;
            localDW->obj.SelectTurnDirectionFlag = true;
        }

        if (distToCenter >= x2) {
            localDW->obj.LookaheadDistance = 0.9 * x2;
        } else {
            localDW->obj.LookaheadDistance = distToCenter;
        }

        distToCenter_tmp[0] = xyCenter_idx_0;
        distToCenter_tmp[1] = rtu_0_tmp;
        distToCenter = std::sqrt(rtu_0_tmp * rtu_0_tmp + xyCenter_idx_0 *
            xyCenter_idx_0);
        turnVector_idx_1 = x2 + localDW->obj.LookaheadDistance;
        a = std::abs(turnVector_idx_1);
        p = static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(std::
            isinf(a)) ^ 1));
        p_0 = static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
            (std::isnan(a)) ^ 1));
        if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(p)
                & static_cast<int32_T>(p_0)))) {
            if (a <= 2.2250738585072014E-308) {
                absx = 4.94065645841247E-324;
            } else {
                frexp(a, &b_exponent_0);
                absx = std::ldexp(1.0, static_cast<int32_T>(b_exponent_0 - 53));
            }
        } else {
            absx = (rtNaN);
        }

        guard1 = false;
        if (distToCenter >= turnVector_idx_1 - 5.0 * absx) {
            guard1 = true;
        } else {
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (p) & static_cast<int32_T>(p_0)))) {
                if (a <= 2.2250738585072014E-308) {
                    absx = 4.94065645841247E-324;
                } else {
                    frexp(a, &b_exponent_1);
                    absx = std::ldexp(1.0, static_cast<int32_T>(b_exponent_1 -
                                       53));
                }
            } else {
                absx = (rtNaN);
            }

            if (distToCenter <= (x2 - localDW->obj.LookaheadDistance) + 5.0 *
                    absx) {
                guard1 = true;
            } else {
                real_T distToCenter_tmp_0;
                real_T u_tmp;
                real_T v_tmp;
                real_T x2_tmp;
                if (localDW->obj.StartFlag) {
                    localDW->obj.PrevPosition[0] = rtu_0[0];
                    localDW->obj.PrevPosition[1] = rtu_0[1];
                    localDW->obj.StartFlag = false;
                }

                rtu_0_0[0] = xyCenter_idx_0;
                rtu_0_0[1] = rtu_0_tmp;
                absx = FlightMissionMode_norm(rtu_0_0);
                turnVector_idx_1 = localDW->obj.LookaheadDistance *
                    localDW->obj.LookaheadDistance;
                a = ((turnVector_idx_1 - x2 * x2) + absx * absx) / (2.0 * absx);
                x2_tmp = rtu_1[0] - rtu_0[0];
                x2 = x2_tmp * a / absx + rtu_0[0];
                distToCenter_tmp_0 = rtu_1[1] - rtu_0[1];
                distToCenter = distToCenter_tmp_0 * a / absx + rtu_0[1];
                a = std::sqrt(turnVector_idx_1 - a * a);
                turnVector_idx_1 = distToCenter_tmp_0 * a / absx;
                distToCenter_tmp[0] = x2 - turnVector_idx_1;
                distToCenter_tmp[1] = turnVector_idx_1 + x2;
                x2 = x2_tmp * a / absx;
                absx = x2 + distToCenter;
                distToCenter -= x2;
                if ((rtu_3 == 0.0) && (static_cast<boolean_T>
                                       (static_cast<int32_T>(static_cast<int32_T>
                        (localDW->obj.SelectTurnDirectionFlag) ^ 1)))) {
                    x2 = localDW->obj.TurnDirectionInternal;
                } else {
                    x2 = rtu_3;
                }

                a = localDW->obj.PrevPosition[0] - rtu_1[0];
                turnVector_idx_1 = localDW->obj.PrevPosition[1] - rtu_1[1];
                u[0] = a;
                u[1] = turnVector_idx_1;
                u[2] = 0.0;
                v[0] = xyCenter_idx_0;
                v[1] = rtu_0_tmp;
                v[2] = 0.0;
                if (x2 < 0.0) {
                    u[0] = xyCenter_idx_0;
                    v[0] = a;
                    u[1] = rtu_0_tmp;
                    v[1] = turnVector_idx_1;
                    u[2] = 0.0;
                    v[2] = 0.0;
                    x2 = -1.0;
                } else if (x2 > 0.0) {
                    x2 = 1.0;
                } else if (x2 == 0.0) {
                    x2 = 0.0;
                } else {
                    x2 = (rtNaN);
                }

                a = FlightMissionMode_norm_i(u);
                rtu_0_tmp = FlightMissionMode_norm_i(v);
                xyCenter_idx_0 = u[0] / a;
                turnVector_idx_1 = v[0] / rtu_0_tmp;
                u_tmp = u[1] / a;
                v_tmp = v[1] / rtu_0_tmp;
                localDW->obj.PrevPosition[0] = rtu_0[0];
                localDW->obj.PrevPosition[1] = rtu_0[1];
                localDW->obj.PrevPosition[2] = rtu_0[2];
                localDW->obj.NumCircles += rt_atan2d_snf(xyCenter_idx_0 * v_tmp
                    - turnVector_idx_1 * u_tmp, (xyCenter_idx_0 *
                    turnVector_idx_1 + u_tmp * v_tmp) + 0.0 / a * (0.0 /
                    rtu_0_tmp)) / 2.0 / 3.1415926535897931;

                // MATLABSystem: '<S36>/Orbit Follower'
                localDW->OrbitFollower_o6 = localDW->obj.NumCircles;
                switch (static_cast<int32_T>(x2)) {
                  case 1:
                    if ((distToCenter_tmp[0] - rtu_0[0]) * distToCenter_tmp_0 -
                            (absx - rtu_0[1]) * x2_tmp > 0.0) {
                        xyCenter_idx_0 = distToCenter_tmp[0];
                        distToCenter = absx;
                    } else {
                        xyCenter_idx_0 = distToCenter_tmp[1];
                    }
                    break;

                  case -1:
                    if ((distToCenter_tmp[0] - rtu_0[0]) * distToCenter_tmp_0 -
                            (absx - rtu_0[1]) * x2_tmp < 0.0) {
                        xyCenter_idx_0 = distToCenter_tmp[0];
                        distToCenter = absx;
                    } else {
                        xyCenter_idx_0 = distToCenter_tmp[1];
                    }
                    break;

                  default:
                    if (std::abs(FlightMissionMode_angdiff(rt_atan2d_snf(absx -
                            rtu_0[1], distToCenter_tmp[0] - rtu_0[0]), rtu_0[3]))
                        < std::abs(FlightMissionMode_angdiff(rt_atan2d_snf
                            (distToCenter - rtu_0[1], distToCenter_tmp[1] -
                             rtu_0[0]), rtu_0[3]))) {
                        xyCenter_idx_0 = distToCenter_tmp[0];
                        distToCenter = absx;
                    } else {
                        xyCenter_idx_0 = distToCenter_tmp[1];
                    }

                    if ((xyCenter_idx_0 - rtu_0[0]) * distToCenter_tmp_0 -
                            (distToCenter - rtu_0[1]) * x2_tmp > 0.0) {
                        localDW->obj.TurnDirectionInternal = 1.0;
                    } else {
                        localDW->obj.TurnDirectionInternal = -1.0;
                    }

                    localDW->obj.SelectTurnDirectionFlag = false;
                    break;
                }
            }
        }

        if (guard1) {
            a = FlightMissionMode_norm(distToCenter_tmp);
            xyCenter_idx_0 = xyCenter_idx_0 / a * x2 + rtu_1[0];
            distToCenter = rtu_0_tmp / a * x2 + rtu_1[1];

            // MATLABSystem: '<S36>/Orbit Follower'
            localDW->OrbitFollower_o6 = localDW->obj.NumCircles;
        }

        // MATLABSystem: '<S36>/Orbit Follower'
        localDW->OrbitFollower_o1[0] = xyCenter_idx_0;
        localDW->OrbitFollower_o1[1] = distToCenter;
        localDW->OrbitFollower_o1[2] = rtu_1[2];

        // MATLABSystem: '<S36>/Orbit Follower'
        localDW->OrbitFollower_o2 = rt_atan2d_snf(distToCenter - rtu_0[1],
            xyCenter_idx_0 - rtu_0[0]);
    }

    // End of MATLABSystem: '<S36>/Orbit Follower'
}

// System initialize for atomic system:
void FlightMissionMode_RotateATMissionHdg_Init
    (DW_RotateATMissionHdg_FlightMissionMode_T *localDW)
{
    // Start for MATLABSystem: '<S122>/RotateATMissionHdg'
    localDW->objisempty = true;
    localDW->obj.isInitialized = 1;
}

// Output and update for atomic system:
void FlightMissionMode_RotateATMissionHdg(const real_T rtu_0[3],
    DW_RotateATMissionHdg_FlightMissionMode_T *localDW)
{
    real_T out[9];
    real_T ct_idx_0;
    real_T ct_idx_1;
    real_T ct_idx_2;
    real_T out_tmp;
    real_T out_tmp_0;
    real_T st_idx_0;
    real_T st_idx_1;
    real_T st_idx_2;

    // MATLABSystem: '<S122>/RotateATMissionHdg'
    ct_idx_0 = std::cos(rtu_0[0]);
    ct_idx_1 = std::cos(rtu_0[1]);
    ct_idx_2 = std::cos(rtu_0[2]);
    st_idx_0 = std::sin(rtu_0[0]);
    st_idx_1 = std::sin(rtu_0[1]);
    st_idx_2 = std::sin(rtu_0[2]);
    out[0] = ct_idx_0 * ct_idx_1;
    out_tmp = st_idx_1 * st_idx_2;
    out[3] = out_tmp * ct_idx_0 - st_idx_0 * ct_idx_2;
    out_tmp_0 = st_idx_1 * ct_idx_2;
    out[6] = out_tmp_0 * ct_idx_0 + st_idx_0 * st_idx_2;
    out[1] = st_idx_0 * ct_idx_1;
    out[4] = out_tmp * st_idx_0 + ct_idx_0 * ct_idx_2;
    out[7] = out_tmp_0 * st_idx_0 - ct_idx_0 * st_idx_2;
    out[2] = -st_idx_1;
    out[5] = ct_idx_1 * st_idx_2;
    out[8] = ct_idx_1 * ct_idx_2;

    // MATLABSystem: '<S122>/RotateATMissionHdg'
    std::memcpy(&localDW->RotateATMissionHdg[0], &out[0], static_cast<uint32_T>
                (9U * sizeof(real_T)));
}

//
// Output and update for atomic system:
//    '<S122>/biasNED'
//    '<S65>/biasNED1'
//    '<S283>/biasNED'
//
void FlightMissionMode_biasNED(const real_T rtu_MissionNED[3], const real_T
    rtu_IndivRotWP[30720], real_T rty_nedWayPoint[30720],
    DW_biasNED_FlightMissionMode_T *localDW)
{
    int32_T jcol;

    // MATLAB Function 'biasNED': '<S172>:1'
    // '<S172>:1:4'
    for (jcol = 0; jcol < 3; jcol++) {
        int32_T ibmat;
        ibmat = static_cast<int32_T>(jcol * 10240);
        for (int32_T itilerow{0}; itilerow < 10240; itilerow++) {
            localDW->b[static_cast<int32_T>(ibmat + itilerow)] =
                rtu_MissionNED[jcol];
        }
    }

    for (jcol = 0; jcol < 10240; jcol++) {
        rty_nedWayPoint[jcol] = rtu_IndivRotWP[static_cast<int32_T>(jcol + 10240)]
            + localDW->b[jcol];
        rty_nedWayPoint[static_cast<int32_T>(jcol + 10240)] = localDW->b[
            static_cast<int32_T>(jcol + 10240)] + rtu_IndivRotWP[jcol];
        rty_nedWayPoint[static_cast<int32_T>(jcol + 20480)] = rtu_IndivRotWP[
            static_cast<int32_T>(jcol + 20480)] + localDW->b[static_cast<int32_T>
            (jcol + 20480)];
    }
}

static void FlightMissionMode_emxInit_real_T(emxArray_real_T_FlightMissionMode_T
    **pEmxArray, int32_T numDimensions)
{
    emxArray_real_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_real_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (real_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_real_T
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(real_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (real_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (real_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_WaypointFollowerBase_getDistinctWpts(const real_T
    waypoints[30720], emxArray_real_T_FlightMissionMode_T *distinctWpts,
    DW_WaypointFollower_FlightMissionMode_T *localDW)
{
    int32_T i1;
    int32_T i2;
    int32_T j;
    for (i1 = 0; i1 < 3; i1++) {
        for (i2 = 0; i2 < 10239; i2++) {
            j = static_cast<int32_T>(static_cast<int32_T>(10240 * i1) + i2);
            localDW->x[j] = (waypoints[static_cast<int32_T>(static_cast<int32_T>
                              (static_cast<int32_T>(i2 + 2) +
                               static_cast<int32_T>(10240 * i1)) - 1)] !=
                             waypoints[j]);
        }

        localDW->x[static_cast<int32_T>(static_cast<int32_T>(10240 * i1) + 10239)]
            = true;
    }

    i1 = 0;
    i2 = 20480;
    for (j = 0; j < 10240; j++) {
        int32_T ix;
        boolean_T exitg1;
        localDW->b[j] = false;
        i1 = static_cast<int32_T>(i1 + 1);
        i2 = static_cast<int32_T>(i2 + 1);
        ix = i1;
        exitg1 = false;
        while ((!exitg1) && (ix <= i2)) {
            if (localDW->x[static_cast<int32_T>(ix - 1)]) {
                localDW->b[j] = true;
                exitg1 = true;
            } else {
                ix = static_cast<int32_T>(ix + 10240);
            }
        }
    }

    i1 = 0;
    for (i2 = 0; i2 < 10240; i2++) {
        if (localDW->b[i2]) {
            i1 = static_cast<int32_T>(i1 + 1);
        }
    }

    j = i1;
    i1 = 0;
    for (i2 = 0; i2 < 10240; i2++) {
        if (localDW->b[i2]) {
            localDW->c_data[i1] = static_cast<int16_T>(static_cast<int32_T>(i2 +
                1));
            i1 = static_cast<int32_T>(i1 + 1);
        }
    }

    i1 = static_cast<int32_T>(distinctWpts->size[0] * distinctWpts->size[1]);
    distinctWpts->size[0] = j;
    distinctWpts->size[1] = 3;
    FlightMissionMode_emxEnsureCapacity_real_T(distinctWpts, i1);
    for (i1 = 0; i1 < 3; i1++) {
        for (i2 = 0; i2 <= static_cast<int32_T>(j - 1); i2++) {
            distinctWpts->data[static_cast<int32_T>(i2 + static_cast<int32_T>
                (distinctWpts->size[0] * i1))] = waypoints[static_cast<int32_T>(
                static_cast<int32_T>(static_cast<int32_T>(10240 * i1) +
                static_cast<int32_T>(localDW->c_data[i2])) - 1)];
        }
    }
}

static real_T FlightMissionMode_norm_g(const real_T x[3])
{
    real_T absxk;
    real_T scale;
    real_T t;
    real_T y;
    scale = 3.3121686421112381E-170;
    absxk = std::abs(x[0]);
    if (absxk > 3.3121686421112381E-170) {
        y = 1.0;
        scale = absxk;
    } else {
        t = absxk / 3.3121686421112381E-170;
        y = t * t;
    }

    absxk = std::abs(x[1]);
    if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
    } else {
        t = absxk / scale;
        y += t * t;
    }

    absxk = std::abs(x[2]);
    if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
    } else {
        t = absxk / scale;
        y += t * t;
    }

    return scale * std::sqrt(y);
}

static void FlightMissionMode_emxFree_real_T(emxArray_real_T_FlightMissionMode_T
    **pEmxArray)
{
    if (*pEmxArray != (emxArray_real_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (real_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)nullptr;
    }
}

// System initialize for atomic system:
void FlightMissionMode_WaypointFollower_Init
    (DW_WaypointFollower_FlightMissionMode_T *localDW)
{
    // Start for MATLABSystem: '<S118>/Waypoint Follower'
    localDW->obj.LastWaypointFlag = false;
    localDW->obj.StartFlag = true;
    localDW->obj.LookaheadFactor = 1.01;
    localDW->objisempty = true;
    localDW->obj.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S118>/Waypoint Follower'
    localDW->obj.WaypointIndex = 1.0;
    for (int32_T i{0}; i < 30720; i++) {
        // InitializeConditions for MATLABSystem: '<S118>/Waypoint Follower'
        localDW->obj.WaypointsInternal[i] = (rtNaN);
    }
}

// System reset for atomic system:
void FlightMissionMode_WaypointFollower_Reset
    (DW_WaypointFollower_FlightMissionMode_T *localDW)
{
    // InitializeConditions for MATLABSystem: '<S118>/Waypoint Follower'
    localDW->obj.WaypointIndex = 1.0;
    for (int32_T i{0}; i < 30720; i++) {
        localDW->obj.WaypointsInternal[i] = (rtNaN);
    }

    // End of InitializeConditions for MATLABSystem: '<S118>/Waypoint Follower'
}

// Output and update for atomic system:
void FlightMissionMode_WaypointFollower(const real_T rtu_0[4], const real_T
    rtu_1[30720], real_T rtu_2, DW_WaypointFollower_FlightMissionMode_T *localDW)
{
    emxArray_real_T_FlightMissionMode_T *b_waypointsIn;
    emxArray_real_T_FlightMissionMode_T *waypoints;
    real_T appendedWaypoints_data[6];
    real_T b_waypointsIn_0[3];
    real_T rtu_0_0[3];
    real_T lambda;
    real_T r_idx_0;
    real_T r_idx_1;
    real_T r_idx_2;
    int32_T b_exponent;
    int32_T b_exponent_0;
    int32_T b_k;
    int32_T loop_ub;
    boolean_T exitg1;
    boolean_T p;
    boolean_T p_0;

    // MATLABSystem: '<S118>/Waypoint Follower'
    lambda = rtu_2;
    localDW->obj.LookaheadDistFlag = 0U;
    if (rtu_2 < 0.1) {
        lambda = 0.1;
        localDW->obj.LookaheadDistFlag = 1U;
    }

    localDW->obj.InitialPose[0] = 0.0;
    localDW->obj.InitialPose[1] = 0.0;
    localDW->obj.InitialPose[2] = 0.0;
    localDW->obj.InitialPose[3] = 0.0;
    for (b_k = 0; b_k < 30720; b_k++) {
        localDW->paddedWaypts[b_k] = (rtNaN);
    }

    for (b_k = 0; b_k < 3; b_k++) {
        for (loop_ub = 0; loop_ub < 10240; loop_ub++) {
            localDW->paddedWaypts[static_cast<int32_T>(static_cast<int32_T>(
                static_cast<int32_T>(loop_ub + 1) + static_cast<int32_T>(10240 *
                b_k)) - 1)] = rtu_1[static_cast<int32_T>(static_cast<int32_T>
                (10240 * b_k) + loop_ub)];
        }
    }

    p = false;
    p_0 = true;
    b_k = 0;
    exitg1 = false;
    while ((!exitg1) && (b_k < 30720)) {
        if ((localDW->obj.WaypointsInternal[b_k] == localDW->paddedWaypts[b_k]) ||
            (std::isnan(localDW->obj.WaypointsInternal[b_k]) && std::isnan
                (localDW->paddedWaypts[b_k]))) {
            b_k = static_cast<int32_T>(b_k + 1);
        } else {
            p_0 = false;
            exitg1 = true;
        }
    }

    if (p_0) {
        p = true;
    }

    if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(p) ^ 1)))
    {
        std::memcpy(&localDW->obj.WaypointsInternal[0], &localDW->paddedWaypts[0],
                    static_cast<uint32_T>(30720U * sizeof(real_T)));
        localDW->obj.WaypointIndex = 1.0;
    }

    FlightMissionMode_emxInit_real_T(&b_waypointsIn, 2);

    // MATLABSystem: '<S118>/Waypoint Follower'
    FlightMissionMode_WaypointFollowerBase_getDistinctWpts(rtu_1, b_waypointsIn,
        localDW);
    localDW->obj.NumWaypoints = static_cast<real_T>(b_waypointsIn->size[0]);
    localDW->obj.LookaheadDistance = lambda;
    FlightMissionMode_emxInit_real_T(&waypoints, 2);

    // MATLABSystem: '<S118>/Waypoint Follower'
    if (b_waypointsIn->size[0] == 0) {
        // MATLABSystem: '<S118>/Waypoint Follower'
        localDW->WaypointFollower_o1[0] = lambda * std::cos(rtu_0[3]) + rtu_0[0];
        localDW->WaypointFollower_o1[1] = lambda * std::sin(rtu_0[3]) + rtu_0[1];
        localDW->WaypointFollower_o1[2] = lambda * 0.0 + rtu_0[2];

        // MATLABSystem: '<S118>/Waypoint Follower'
        localDW->WaypointFollower_o2 = rtu_0[3];

        // MATLABSystem: '<S118>/Waypoint Follower'
        localDW->WaypointFollower_o5 = 1U;
    } else {
        boolean_T guard1{ false };

        guard1 = false;
        if (b_waypointsIn->size[0] == 1) {
            if (localDW->obj.StartFlag) {
                localDW->obj.InitialPose[0] = rtu_0[0];
                localDW->obj.InitialPose[1] = rtu_0[1];
                localDW->obj.InitialPose[2] = rtu_0[2];
                localDW->obj.InitialPose[3] = rtu_0[3];
            }

            b_waypointsIn_0[0] = b_waypointsIn->data[0] - rtu_0[0];
            b_waypointsIn_0[1] = b_waypointsIn->data[1] - rtu_0[1];
            b_waypointsIn_0[2] = b_waypointsIn->data[2] - rtu_0[2];
            if (FlightMissionMode_norm_g(b_waypointsIn_0) <
                    1.4901161193847656E-8) {
                // MATLABSystem: '<S118>/Waypoint Follower'
                localDW->WaypointFollower_o1[0] = lambda * std::cos(rtu_0[3]) +
                    rtu_0[0];
                localDW->WaypointFollower_o1[1] = lambda * std::sin(rtu_0[3]) +
                    rtu_0[1];
                localDW->WaypointFollower_o1[2] = lambda * 0.0 + rtu_0[2];

                // MATLABSystem: '<S118>/Waypoint Follower'
                localDW->WaypointFollower_o2 = rtu_0[3];

                // MATLABSystem: '<S118>/Waypoint Follower'
                localDW->WaypointFollower_o5 = 1U;
                localDW->obj.StartFlag = false;
            } else {
                localDW->obj.StartFlag = false;
                for (b_k = 0; b_k < 3; b_k++) {
                    appendedWaypoints_data[static_cast<int32_T>(b_k << 1)] =
                        localDW->obj.InitialPose[b_k];
                    appendedWaypoints_data[static_cast<int32_T>(1 + static_cast<
                        int32_T>(b_k << 1))] = b_waypointsIn->data
                        [static_cast<int32_T>(b_waypointsIn->size[0] * b_k)];
                }

                localDW->obj.NumWaypoints = 2.0;
                b_k = static_cast<int32_T>(waypoints->size[0] * waypoints->size
                    [1]);
                waypoints->size[0] = 2;
                waypoints->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T(waypoints, b_k);
                for (b_k = 0; b_k < 6; b_k++) {
                    waypoints->data[b_k] = appendedWaypoints_data[b_k];
                }

                guard1 = true;
            }
        } else {
            b_k = static_cast<int32_T>(waypoints->size[0] * waypoints->size[1]);
            waypoints->size[0] = b_waypointsIn->size[0];
            waypoints->size[1] = 3;
            FlightMissionMode_emxEnsureCapacity_real_T(waypoints, b_k);
            loop_ub = static_cast<int32_T>(b_waypointsIn->size[0] * 3);
            for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
                waypoints->data[b_k] = b_waypointsIn->data[b_k];
            }

            guard1 = true;
        }

        if (guard1) {
            real_T b;
            real_T b_tmp_idx_2_tmp;
            real_T lambda_tmp;
            real_T rtu_0_tmp;
            real_T waypoints_tmp;
            real_T waypoints_tmp_0;
            real_T waypoints_tmp_1;
            boolean_T guard2{ false };

            p = false;
            if (localDW->obj.WaypointIndex == localDW->obj.NumWaypoints) {
                p = true;
            }

            if (p) {
                localDW->obj.LastWaypointFlag = true;
                localDW->obj.WaypointIndex--;
            }

            rtu_0_0[0] = rtu_0[0] - waypoints->data[static_cast<int32_T>(
                static_cast<int32_T>(localDW->obj.WaypointIndex + 1.0) - 1)];
            rtu_0_0[1] = rtu_0[1] - waypoints->data[static_cast<int32_T>(
                static_cast<int32_T>(static_cast<int32_T>
                (localDW->obj.WaypointIndex + 1.0) + waypoints->size[0]) - 1)];
            rtu_0_0[2] = rtu_0[2] - waypoints->data[static_cast<int32_T>(
                static_cast<int32_T>(static_cast<int32_T>
                (localDW->obj.WaypointIndex + 1.0) + static_cast<int32_T>
                (waypoints->size[0] << 1)) - 1)];
            guard2 = false;
            if (FlightMissionMode_norm_g(rtu_0_0) <= 100.0) {
                guard2 = true;
            } else {
                r_idx_0 = waypoints->data[static_cast<int32_T>
                    (static_cast<int32_T>(localDW->obj.WaypointIndex + 1.0) - 1)];
                b_waypointsIn_0[0] = rtu_0[0] - r_idx_0;
                rtu_0_0[0] = r_idx_0 - waypoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(localDW->obj.WaypointIndex) - 1)];
                r_idx_0 = waypoints->data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (localDW->obj.WaypointIndex + 1.0) + waypoints->size[0]) -
                     1)];
                b_waypointsIn_0[1] = rtu_0[1] - r_idx_0;
                rtu_0_0[1] = r_idx_0 - waypoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>
                    (localDW->obj.WaypointIndex) + waypoints->size[0]) - 1)];
                b_waypointsIn_0[2] = rtu_0[2] - waypoints->data
                    [static_cast<int32_T>(static_cast<int32_T>
                    (static_cast<int32_T>(localDW->obj.WaypointIndex + 1.0) +
                     static_cast<int32_T>(waypoints->size[0] << 1)) - 1)];
                rtu_0_0[2] = waypoints->data[static_cast<int32_T>(static_cast<
                    int32_T>(static_cast<int32_T>(localDW->obj.WaypointIndex +
                    1.0) + static_cast<int32_T>(waypoints->size[0] << 1)) - 1)]
                    - waypoints->data[static_cast<int32_T>(static_cast<int32_T>(
                    static_cast<int32_T>(waypoints->size[0] << 1) +
                    static_cast<int32_T>(localDW->obj.WaypointIndex)) - 1)];
                lambda = FlightMissionMode_norm_g(rtu_0_0);
                b = FlightMissionMode_norm_g(b_waypointsIn_0);
                waypoints_tmp = waypoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(localDW->obj.WaypointIndex) - 1)];
                r_idx_0 = waypoints->data[static_cast<int32_T>
                    (static_cast<int32_T>(localDW->obj.WaypointIndex + 1.0) - 1)];
                waypoints_tmp_0 = waypoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>
                    (localDW->obj.WaypointIndex) + waypoints->size[0]) - 1)];
                r_idx_1 = waypoints->data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (localDW->obj.WaypointIndex + 1.0) + waypoints->size[0]) -
                     1)];
                waypoints_tmp_1 = waypoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>(waypoints->size[0]
                    << 1) + static_cast<int32_T>(localDW->obj.WaypointIndex)) -
                    1)];
                r_idx_2 = waypoints->data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (localDW->obj.WaypointIndex + 1.0) + static_cast<int32_T>
                      (waypoints->size[0] << 1)) - 1)];
                lambda = ((r_idx_0 - waypoints_tmp) / lambda * (b_waypointsIn_0
                           [0] / b) + (r_idx_1 - waypoints_tmp_0) / lambda *
                          (b_waypointsIn_0[1] / b)) + (r_idx_2 - waypoints_tmp_1)
                    / lambda * (b_waypointsIn_0[2] / b);
                if (lambda < 0.0) {
                    lambda = -1.0;
                } else if (lambda > 0.0) {
                    lambda = 1.0;
                } else if (lambda == 0.0) {
                    lambda = 0.0;
                } else {
                    lambda = (rtNaN);
                }

                if (lambda >= 0.0) {
                    guard2 = true;
                } else {
                    b_waypointsIn_0[0] = waypoints_tmp;
                    b_waypointsIn_0[1] = waypoints_tmp_0;
                    b_waypointsIn_0[2] = waypoints_tmp_1;
                }
            }

            if (guard2) {
                localDW->obj.WaypointIndex++;
                p = false;
                if (localDW->obj.WaypointIndex == localDW->obj.NumWaypoints) {
                    p = true;
                }

                if (p) {
                    localDW->obj.LastWaypointFlag = true;
                    localDW->obj.WaypointIndex--;
                }

                b_waypointsIn_0[0] = waypoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(localDW->obj.WaypointIndex) - 1)];
                r_idx_0 = waypoints->data[static_cast<int32_T>
                    (static_cast<int32_T>(localDW->obj.WaypointIndex + 1.0) - 1)];
                b_waypointsIn_0[1] = waypoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>
                    (localDW->obj.WaypointIndex) + waypoints->size[0]) - 1)];
                r_idx_1 = waypoints->data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (localDW->obj.WaypointIndex + 1.0) + waypoints->size[0]) -
                     1)];
                b_waypointsIn_0[2] = waypoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>(waypoints->size[0]
                    << 1) + static_cast<int32_T>(localDW->obj.WaypointIndex)) -
                    1)];
                r_idx_2 = waypoints->data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (localDW->obj.WaypointIndex + 1.0) + static_cast<int32_T>
                      (waypoints->size[0] << 1)) - 1)];
            }

            waypoints_tmp = r_idx_0 - b_waypointsIn_0[0];
            b = rtu_0[0] - b_waypointsIn_0[0];
            waypoints_tmp_0 = r_idx_1 - b_waypointsIn_0[1];
            rtu_0_tmp = rtu_0[1] - b_waypointsIn_0[1];
            waypoints_tmp_1 = r_idx_2 - b_waypointsIn_0[2];
            lambda_tmp = rtu_0[2] - b_waypointsIn_0[2];
            lambda = ((rtu_0_tmp * waypoints_tmp_0 + b * waypoints_tmp) +
                      lambda_tmp * waypoints_tmp_1) / ((waypoints_tmp_0 *
                waypoints_tmp_0 + waypoints_tmp * waypoints_tmp) +
                waypoints_tmp_1 * waypoints_tmp_1);
            if (lambda < 0.0) {
                rtu_0_0[0] = b;
                rtu_0_0[1] = rtu_0_tmp;
                rtu_0_0[2] = lambda_tmp;
                lambda = FlightMissionMode_norm_g(rtu_0_0);
            } else if (lambda > 1.0) {
                rtu_0_0[0] = rtu_0[0] - r_idx_0;
                rtu_0_0[1] = rtu_0[1] - r_idx_1;
                rtu_0_0[2] = rtu_0[2] - r_idx_2;
                lambda = FlightMissionMode_norm_g(rtu_0_0);
            } else {
                rtu_0_0[0] = rtu_0[0] - (lambda * waypoints_tmp +
                    b_waypointsIn_0[0]);
                rtu_0_0[1] = rtu_0[1] - (lambda * waypoints_tmp_0 +
                    b_waypointsIn_0[1]);
                rtu_0_0[2] = rtu_0[2] - (lambda * waypoints_tmp_1 +
                    b_waypointsIn_0[2]);
                lambda = FlightMissionMode_norm_g(rtu_0_0);
            }

            if (localDW->obj.LastWaypointFlag) {
                lambda = (((rtu_0[0] - b_waypointsIn_0[0]) * (r_idx_0 -
                            b_waypointsIn_0[0]) + (rtu_0[1] - b_waypointsIn_0[1])
                           * (r_idx_1 - b_waypointsIn_0[1])) + (rtu_0[2] -
                           b_waypointsIn_0[2]) * (r_idx_2 - b_waypointsIn_0[2]))
                    / (((r_idx_0 - b_waypointsIn_0[0]) * (r_idx_0 -
                         b_waypointsIn_0[0]) + (r_idx_1 - b_waypointsIn_0[1]) *
                        (r_idx_1 - b_waypointsIn_0[1])) + (r_idx_2 -
                        b_waypointsIn_0[2]) * (r_idx_2 - b_waypointsIn_0[2]));
                rtu_0_0[0] = rtu_0[0] - (lambda * waypoints_tmp +
                    b_waypointsIn_0[0]);
                rtu_0_0[1] = rtu_0[1] - (lambda * waypoints_tmp_0 +
                    b_waypointsIn_0[1]);
                rtu_0_0[2] = rtu_0[2] - (lambda * waypoints_tmp_1 +
                    b_waypointsIn_0[2]);
                lambda = FlightMissionMode_norm_g(rtu_0_0);
            }

            lambda_tmp = std::abs(lambda);
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (static_cast<boolean_T>(static_cast<int32_T>
                    (static_cast<int32_T>(std::isinf(lambda_tmp)) ^ 1))) &
                    static_cast<int32_T>(static_cast<boolean_T>
                    (static_cast<int32_T>(static_cast<int32_T>(std::isnan
                      (lambda_tmp)) ^ 1)))))) {
                if (lambda_tmp <= 2.2250738585072014E-308) {
                    b = 4.94065645841247E-324;
                    lambda_tmp = 4.94065645841247E-324;
                } else {
                    frexp(lambda_tmp, &b_exponent);
                    b = std::ldexp(1.0, static_cast<int32_T>(b_exponent - 53));
                    frexp(lambda_tmp, &b_exponent_0);
                    lambda_tmp = std::ldexp(1.0, static_cast<int32_T>
                                            (b_exponent_0 - 53));
                }
            } else {
                b = (rtNaN);
                lambda_tmp = (rtNaN);
            }

            if (localDW->obj.LookaheadDistance <= std::fmax(std::sqrt(b), 5.0 *
                    lambda_tmp) + lambda) {
                localDW->obj.LookaheadDistance = localDW->obj.LookaheadFactor *
                    lambda;
            }

            lambda = b_waypointsIn_0[0] - rtu_0[0];
            lambda_tmp = b_waypointsIn_0[1] - rtu_0[1];
            rtu_0_tmp = ((r_idx_0 - b_waypointsIn_0[0]) * (r_idx_0 -
                          b_waypointsIn_0[0]) + (r_idx_1 - b_waypointsIn_0[1]) *
                         (r_idx_1 - b_waypointsIn_0[1])) + (r_idx_2 -
                b_waypointsIn_0[2]) * (r_idx_2 - b_waypointsIn_0[2]);
            b_tmp_idx_2_tmp = b_waypointsIn_0[2] - rtu_0[2];
            b = ((waypoints_tmp * lambda + waypoints_tmp_0 * lambda_tmp) +
                 waypoints_tmp_1 * b_tmp_idx_2_tmp) * 2.0;
            lambda_tmp = std::sqrt(b * b - (((lambda * lambda + lambda_tmp *
                lambda_tmp) + b_tmp_idx_2_tmp * b_tmp_idx_2_tmp) -
                                    localDW->obj.LookaheadDistance *
                                    localDW->obj.LookaheadDistance) * (4.0 *
                                    rtu_0_tmp));
            lambda = std::fmax((-b + lambda_tmp) / 2.0 / rtu_0_tmp, (-b -
                                lambda_tmp) / 2.0 / rtu_0_tmp);
            rtu_0_tmp = (1.0 - lambda) * b_waypointsIn_0[0] + lambda * r_idx_0;

            // MATLABSystem: '<S118>/Waypoint Follower'
            localDW->WaypointFollower_o1[0] = rtu_0_tmp;
            r_idx_0 = rtu_0_tmp;
            rtu_0_tmp = (1.0 - lambda) * b_waypointsIn_0[1] + lambda * r_idx_1;

            // MATLABSystem: '<S118>/Waypoint Follower'
            localDW->WaypointFollower_o1[1] = rtu_0_tmp;
            localDW->WaypointFollower_o1[2] = (1.0 - lambda) * b_waypointsIn_0[2]
                + lambda * r_idx_2;

            // MATLABSystem: '<S118>/Waypoint Follower'
            localDW->WaypointFollower_o2 = rt_atan2d_snf(rtu_0_tmp - rtu_0[1],
                r_idx_0 - rtu_0[0]);

            // MATLABSystem: '<S118>/Waypoint Follower'
            localDW->WaypointFollower_o5 = 0U;
            p = false;
            if (localDW->obj.LastWaypointFlag) {
                p = true;
            }

            if (p) {
                // MATLABSystem: '<S118>/Waypoint Follower'
                localDW->WaypointFollower_o5 = 1U;
            }

            localDW->obj.LastWaypointFlag = false;
        }
    }

    FlightMissionMode_emxFree_real_T(&b_waypointsIn);
    FlightMissionMode_emxFree_real_T(&waypoints);
}

static real_T FlightMissionMode_norm_c(const real_T x[3])
{
    real_T absxk;
    real_T scale;
    real_T t;
    real_T y;
    scale = 3.3121686421112381E-170;
    absxk = std::abs(x[0]);
    if (absxk > 3.3121686421112381E-170) {
        y = 1.0;
        scale = absxk;
    } else {
        t = absxk / 3.3121686421112381E-170;
        y = t * t;
    }

    absxk = std::abs(x[1]);
    if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
    } else {
        t = absxk / scale;
        y += t * t;
    }

    absxk = std::abs(x[2]);
    if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
    } else {
        t = absxk / scale;
        y += t * t;
    }

    return scale * std::sqrt(y);
}

// System initialize for atomic system:
void FlightMissionMode_WaypointFollower_m_Init
    (DW_WaypointFollower_FlightMissionMode_l_T *localDW)
{
    // Start for MATLABSystem: '<S205>/Waypoint Follower'
    localDW->obj.LastWaypointFlag = false;
    localDW->obj.StartFlag = true;
    localDW->obj.LookaheadFactor = 1.01;
    localDW->objisempty = true;
    localDW->obj.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S205>/Waypoint Follower'
    localDW->obj.WaypointIndex = 1.0;
    for (int32_T i{0}; i < 300; i++) {
        // InitializeConditions for MATLABSystem: '<S205>/Waypoint Follower'
        localDW->obj.WaypointsInternal[i] = (rtNaN);
    }
}

// System reset for atomic system:
void FlightMissionMode_WaypointFollower_j_Reset
    (DW_WaypointFollower_FlightMissionMode_l_T *localDW)
{
    // InitializeConditions for MATLABSystem: '<S205>/Waypoint Follower'
    localDW->obj.WaypointIndex = 1.0;
    for (int32_T i{0}; i < 300; i++) {
        localDW->obj.WaypointsInternal[i] = (rtNaN);
    }

    // End of InitializeConditions for MATLABSystem: '<S205>/Waypoint Follower'
}

// Output and update for atomic system:
void FlightMissionMode_WaypointFollower_e(const real_T rtu_0[4], const real_T
    rtu_1[300], real_T rtu_2, DW_WaypointFollower_FlightMissionMode_l_T *localDW)
{
    real_T b_waypointsIn_data[300];
    real_T waypoints_data[300];
    real_T appendedWaypoints_data[6];
    real_T b_waypointsIn[3];
    real_T rtu_0_0[3];
    real_T lambda;
    real_T r_idx_0;
    real_T r_idx_1;
    real_T r_idx_2;
    int32_T b_exponent;
    int32_T b_exponent_0;
    int32_T b_k;
    int32_T i1;
    int32_T i2;
    int32_T ix;
    int8_T c_data[100];
    boolean_T x[300];
    boolean_T b[100];
    boolean_T exitg1;
    boolean_T p;
    boolean_T p_0;

    // MATLABSystem: '<S205>/Waypoint Follower'
    lambda = rtu_2;
    localDW->obj.LookaheadDistFlag = 0U;
    if (rtu_2 < 0.1) {
        lambda = 0.1;
        localDW->obj.LookaheadDistFlag = 1U;
    }

    localDW->obj.InitialPose[0] = 0.0;
    localDW->obj.InitialPose[1] = 0.0;
    localDW->obj.InitialPose[2] = 0.0;
    localDW->obj.InitialPose[3] = 0.0;
    p = false;
    p_0 = true;
    b_k = 0;
    exitg1 = false;
    while ((!exitg1) && (b_k < 300)) {
        if ((localDW->obj.WaypointsInternal[b_k] == rtu_1[b_k]) || (std::isnan
                (localDW->obj.WaypointsInternal[b_k]) && std::isnan(rtu_1[b_k])))
        {
            b_k = static_cast<int32_T>(b_k + 1);
        } else {
            p_0 = false;
            exitg1 = true;
        }
    }

    if (p_0) {
        p = true;
    }

    if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(p) ^ 1)))
    {
        std::memcpy(&localDW->obj.WaypointsInternal[0], &rtu_1[0],
                    static_cast<uint32_T>(300U * sizeof(real_T)));
        localDW->obj.WaypointIndex = 1.0;
    }

    for (b_k = 0; b_k < 3; b_k++) {
        for (i1 = 0; i1 < 99; i1++) {
            b_waypointsIn_data[static_cast<int32_T>(i1 + static_cast<int32_T>
                (100 * b_k))] = rtu_1[static_cast<int32_T>(static_cast<int32_T>(
                static_cast<int32_T>(i1 + 2) + static_cast<int32_T>(100 * b_k))
                - 1)];
        }
    }

    b_waypointsIn_data[99] = (rtNaN);
    b_waypointsIn_data[199] = (rtNaN);
    b_waypointsIn_data[299] = (rtNaN);
    for (b_k = 0; b_k < 300; b_k++) {
        x[b_k] = (rtu_1[b_k] != b_waypointsIn_data[b_k]);
    }

    i1 = 0;
    i2 = 200;
    for (b_k = 0; b_k < 100; b_k++) {
        b[b_k] = false;
        i1 = static_cast<int32_T>(i1 + 1);
        i2 = static_cast<int32_T>(i2 + 1);
        ix = i1;
        exitg1 = false;
        while ((!exitg1) && (ix <= i2)) {
            if (x[static_cast<int32_T>(ix - 1)]) {
                b[b_k] = true;
                exitg1 = true;
            } else {
                ix = static_cast<int32_T>(ix + 100);
            }
        }
    }

    i1 = 0;
    for (b_k = 0; b_k < 100; b_k++) {
        if (b[b_k]) {
            i1 = static_cast<int32_T>(i1 + 1);
        }
    }

    ix = i1;
    i1 = 0;
    for (b_k = 0; b_k < 100; b_k++) {
        if (b[b_k]) {
            c_data[i1] = static_cast<int8_T>(static_cast<int32_T>(b_k + 1));
            i1 = static_cast<int32_T>(i1 + 1);
        }
    }

    for (b_k = 0; b_k < 3; b_k++) {
        for (i1 = 0; i1 <= static_cast<int32_T>(ix - 1); i1++) {
            b_waypointsIn_data[static_cast<int32_T>(i1 + static_cast<int32_T>(ix
                * b_k))] = rtu_1[static_cast<int32_T>(static_cast<int32_T>(
                static_cast<int32_T>(100 * b_k) + static_cast<int32_T>(c_data[i1]))
                - 1)];
        }
    }

    localDW->obj.NumWaypoints = static_cast<real_T>(ix);
    localDW->obj.LookaheadDistance = lambda;
    if (ix == 0) {
        // MATLABSystem: '<S205>/Waypoint Follower'
        localDW->WaypointFollower_o1[0] = lambda * std::cos(rtu_0[3]) + rtu_0[0];
        localDW->WaypointFollower_o1[1] = lambda * std::sin(rtu_0[3]) + rtu_0[1];
        localDW->WaypointFollower_o1[2] = lambda * 0.0 + rtu_0[2];
        lambda = rtu_0[3];

        // MATLABSystem: '<S205>/Waypoint Follower'
        localDW->WaypointFollower_o3 = rtu_0[3];

        // MATLABSystem: '<S205>/Waypoint Follower'
        localDW->WaypointFollower_o5 = 1U;
    } else {
        boolean_T guard1{ false };

        guard1 = false;
        if (ix == 1) {
            if (localDW->obj.StartFlag) {
                localDW->obj.InitialPose[0] = rtu_0[0];
                localDW->obj.InitialPose[1] = rtu_0[1];
                localDW->obj.InitialPose[2] = rtu_0[2];
                localDW->obj.InitialPose[3] = rtu_0[3];
            }

            b_waypointsIn[0] = b_waypointsIn_data[0] - rtu_0[0];
            b_waypointsIn[1] = b_waypointsIn_data[1] - rtu_0[1];
            b_waypointsIn[2] = b_waypointsIn_data[2] - rtu_0[2];
            if (FlightMissionMode_norm_c(b_waypointsIn) < 1.4901161193847656E-8)
            {
                // MATLABSystem: '<S205>/Waypoint Follower'
                localDW->WaypointFollower_o1[0] = lambda * std::cos(rtu_0[3]) +
                    rtu_0[0];
                localDW->WaypointFollower_o1[1] = lambda * std::sin(rtu_0[3]) +
                    rtu_0[1];
                localDW->WaypointFollower_o1[2] = lambda * 0.0 + rtu_0[2];
                lambda = rtu_0[3];

                // MATLABSystem: '<S205>/Waypoint Follower'
                localDW->WaypointFollower_o3 = rtu_0[3];

                // MATLABSystem: '<S205>/Waypoint Follower'
                localDW->WaypointFollower_o5 = 1U;
                localDW->obj.StartFlag = false;
            } else {
                localDW->obj.StartFlag = false;
                for (b_k = 0; b_k < 3; b_k++) {
                    appendedWaypoints_data[static_cast<int32_T>(b_k << 1)] =
                        localDW->obj.InitialPose[b_k];
                    for (i1 = 0; i1 <= static_cast<int32_T>(ix - 1); i1++) {
                        appendedWaypoints_data[static_cast<int32_T>
                            (static_cast<int32_T>(i1 + static_cast<int32_T>(b_k <<
                               1)) + 1)] = b_waypointsIn_data
                            [static_cast<int32_T>(static_cast<int32_T>(ix * b_k)
                            + i1)];
                    }
                }

                localDW->obj.NumWaypoints = 2.0;
                ix = 2;
                for (b_k = 0; b_k < 6; b_k++) {
                    waypoints_data[b_k] = appendedWaypoints_data[b_k];
                }

                guard1 = true;
            }
        } else {
            i2 = static_cast<int32_T>(ix * 3);
            for (b_k = 0; b_k <= static_cast<int32_T>(i2 - 1); b_k++) {
                waypoints_data[b_k] = b_waypointsIn_data[b_k];
            }

            guard1 = true;
        }

        if (guard1) {
            real_T b_0;
            real_T b_tmp_idx_2_tmp;
            real_T lambda_tmp;
            real_T rtu_0_tmp;
            real_T waypoints_tmp;
            real_T waypoints_tmp_0;
            real_T waypoints_tmp_1;
            boolean_T guard2{ false };

            p = false;
            if (localDW->obj.WaypointIndex == localDW->obj.NumWaypoints) {
                p = true;
            }

            if (p) {
                localDW->obj.LastWaypointFlag = true;
                localDW->obj.WaypointIndex--;
            }

            rtu_0_0[0] = rtu_0[0] - waypoints_data[static_cast<int32_T>(
                static_cast<int32_T>(localDW->obj.WaypointIndex + 1.0) - 1)];
            rtu_0_0[1] = rtu_0[1] - waypoints_data[static_cast<int32_T>(
                static_cast<int32_T>(static_cast<int32_T>
                (localDW->obj.WaypointIndex + 1.0) + ix) - 1)];
            rtu_0_0[2] = rtu_0[2] - waypoints_data[static_cast<int32_T>(
                static_cast<int32_T>(static_cast<int32_T>
                (localDW->obj.WaypointIndex + 1.0) + static_cast<int32_T>(ix <<
                1)) - 1)];
            guard2 = false;
            if (FlightMissionMode_norm_c(rtu_0_0) <= 100.0) {
                guard2 = true;
            } else {
                r_idx_0 = waypoints_data[static_cast<int32_T>
                    (static_cast<int32_T>(localDW->obj.WaypointIndex + 1.0) - 1)];
                b_waypointsIn[0] = rtu_0[0] - r_idx_0;
                rtu_0_0[0] = r_idx_0 - waypoints_data[static_cast<int32_T>(
                    static_cast<int32_T>(localDW->obj.WaypointIndex) - 1)];
                r_idx_0 = waypoints_data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (localDW->obj.WaypointIndex + 1.0) + ix) - 1)];
                b_waypointsIn[1] = rtu_0[1] - r_idx_0;
                rtu_0_0[1] = r_idx_0 - waypoints_data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>
                    (localDW->obj.WaypointIndex) + ix) - 1)];
                r_idx_2 = waypoints_data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (localDW->obj.WaypointIndex + 1.0) + static_cast<int32_T>
                      (ix << 1)) - 1)];
                b_waypointsIn[2] = rtu_0[2] - r_idx_2;
                rtu_0_tmp = waypoints_data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>(ix << 1) +
                      static_cast<int32_T>(localDW->obj.WaypointIndex)) - 1)];
                rtu_0_0[2] = r_idx_2 - rtu_0_tmp;
                lambda = FlightMissionMode_norm_c(rtu_0_0);
                b_0 = FlightMissionMode_norm_c(b_waypointsIn);
                waypoints_tmp = waypoints_data[static_cast<int32_T>(static_cast<
                    int32_T>(localDW->obj.WaypointIndex) - 1)];
                r_idx_0 = waypoints_data[static_cast<int32_T>
                    (static_cast<int32_T>(localDW->obj.WaypointIndex + 1.0) - 1)];
                waypoints_tmp_0 = waypoints_data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>
                    (localDW->obj.WaypointIndex) + ix) - 1)];
                r_idx_1 = waypoints_data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (localDW->obj.WaypointIndex + 1.0) + ix) - 1)];
                lambda = ((r_idx_0 - waypoints_tmp) / lambda * (b_waypointsIn[0]
                           / b_0) + (r_idx_1 - waypoints_tmp_0) / lambda *
                          (b_waypointsIn[1] / b_0)) + (r_idx_2 - rtu_0_tmp) /
                    lambda * (b_waypointsIn[2] / b_0);
                if (lambda < 0.0) {
                    lambda = -1.0;
                } else if (lambda > 0.0) {
                    lambda = 1.0;
                } else if (lambda == 0.0) {
                    lambda = 0.0;
                } else {
                    lambda = (rtNaN);
                }

                if (lambda >= 0.0) {
                    guard2 = true;
                } else {
                    b_waypointsIn[0] = waypoints_tmp;
                    b_waypointsIn[1] = waypoints_tmp_0;
                    b_waypointsIn[2] = rtu_0_tmp;
                }
            }

            if (guard2) {
                localDW->obj.WaypointIndex++;
                p = false;
                if (localDW->obj.WaypointIndex == localDW->obj.NumWaypoints) {
                    p = true;
                }

                if (p) {
                    localDW->obj.LastWaypointFlag = true;
                    localDW->obj.WaypointIndex--;
                }

                b_waypointsIn[0] = waypoints_data[static_cast<int32_T>(
                    static_cast<int32_T>(localDW->obj.WaypointIndex) - 1)];
                r_idx_0 = waypoints_data[static_cast<int32_T>
                    (static_cast<int32_T>(localDW->obj.WaypointIndex + 1.0) - 1)];
                b_waypointsIn[1] = waypoints_data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>
                    (localDW->obj.WaypointIndex) + ix) - 1)];
                r_idx_1 = waypoints_data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (localDW->obj.WaypointIndex + 1.0) + ix) - 1)];
                b_waypointsIn[2] = waypoints_data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>(ix << 1) +
                    static_cast<int32_T>(localDW->obj.WaypointIndex)) - 1)];
                r_idx_2 = waypoints_data[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (localDW->obj.WaypointIndex + 1.0) + static_cast<int32_T>
                      (ix << 1)) - 1)];
            }

            waypoints_tmp = r_idx_0 - b_waypointsIn[0];
            b_0 = rtu_0[0] - b_waypointsIn[0];
            waypoints_tmp_0 = r_idx_1 - b_waypointsIn[1];
            rtu_0_tmp = rtu_0[1] - b_waypointsIn[1];
            waypoints_tmp_1 = r_idx_2 - b_waypointsIn[2];
            lambda_tmp = rtu_0[2] - b_waypointsIn[2];
            lambda = ((rtu_0_tmp * waypoints_tmp_0 + b_0 * waypoints_tmp) +
                      lambda_tmp * waypoints_tmp_1) / ((waypoints_tmp_0 *
                waypoints_tmp_0 + waypoints_tmp * waypoints_tmp) +
                waypoints_tmp_1 * waypoints_tmp_1);
            if (lambda < 0.0) {
                rtu_0_0[0] = b_0;
                rtu_0_0[1] = rtu_0_tmp;
                rtu_0_0[2] = lambda_tmp;
                lambda = FlightMissionMode_norm_c(rtu_0_0);
            } else if (lambda > 1.0) {
                rtu_0_0[0] = rtu_0[0] - r_idx_0;
                rtu_0_0[1] = rtu_0[1] - r_idx_1;
                rtu_0_0[2] = rtu_0[2] - r_idx_2;
                lambda = FlightMissionMode_norm_c(rtu_0_0);
            } else {
                rtu_0_0[0] = rtu_0[0] - (lambda * waypoints_tmp + b_waypointsIn
                    [0]);
                rtu_0_0[1] = rtu_0[1] - (lambda * waypoints_tmp_0 +
                    b_waypointsIn[1]);
                rtu_0_0[2] = rtu_0[2] - (lambda * waypoints_tmp_1 +
                    b_waypointsIn[2]);
                lambda = FlightMissionMode_norm_c(rtu_0_0);
            }

            if (localDW->obj.LastWaypointFlag) {
                lambda = (((rtu_0[0] - b_waypointsIn[0]) * (r_idx_0 -
                            b_waypointsIn[0]) + (rtu_0[1] - b_waypointsIn[1]) *
                           (r_idx_1 - b_waypointsIn[1])) + (rtu_0[2] -
                           b_waypointsIn[2]) * (r_idx_2 - b_waypointsIn[2])) /
                    (((r_idx_0 - b_waypointsIn[0]) * (r_idx_0 - b_waypointsIn[0])
                      + (r_idx_1 - b_waypointsIn[1]) * (r_idx_1 - b_waypointsIn
                       [1])) + (r_idx_2 - b_waypointsIn[2]) * (r_idx_2 -
                      b_waypointsIn[2]));
                rtu_0_0[0] = rtu_0[0] - (lambda * waypoints_tmp + b_waypointsIn
                    [0]);
                rtu_0_0[1] = rtu_0[1] - (lambda * waypoints_tmp_0 +
                    b_waypointsIn[1]);
                rtu_0_0[2] = rtu_0[2] - (lambda * waypoints_tmp_1 +
                    b_waypointsIn[2]);
                lambda = FlightMissionMode_norm_c(rtu_0_0);
            }

            lambda_tmp = std::abs(lambda);
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (static_cast<boolean_T>(static_cast<int32_T>
                    (static_cast<int32_T>(std::isinf(lambda_tmp)) ^ 1))) &
                    static_cast<int32_T>(static_cast<boolean_T>
                    (static_cast<int32_T>(static_cast<int32_T>(std::isnan
                      (lambda_tmp)) ^ 1)))))) {
                if (lambda_tmp <= 2.2250738585072014E-308) {
                    b_0 = 4.94065645841247E-324;
                    lambda_tmp = 4.94065645841247E-324;
                } else {
                    frexp(lambda_tmp, &b_exponent);
                    b_0 = std::ldexp(1.0, static_cast<int32_T>(b_exponent - 53));
                    frexp(lambda_tmp, &b_exponent_0);
                    lambda_tmp = std::ldexp(1.0, static_cast<int32_T>
                                            (b_exponent_0 - 53));
                }
            } else {
                b_0 = (rtNaN);
                lambda_tmp = (rtNaN);
            }

            if (localDW->obj.LookaheadDistance <= std::fmax(std::sqrt(b_0), 5.0 *
                 lambda_tmp) + lambda) {
                localDW->obj.LookaheadDistance = localDW->obj.LookaheadFactor *
                    lambda;
            }

            lambda = b_waypointsIn[0] - rtu_0[0];
            lambda_tmp = b_waypointsIn[1] - rtu_0[1];
            rtu_0_tmp = ((r_idx_0 - b_waypointsIn[0]) * (r_idx_0 -
                          b_waypointsIn[0]) + (r_idx_1 - b_waypointsIn[1]) *
                         (r_idx_1 - b_waypointsIn[1])) + (r_idx_2 -
                b_waypointsIn[2]) * (r_idx_2 - b_waypointsIn[2]);
            b_tmp_idx_2_tmp = b_waypointsIn[2] - rtu_0[2];
            b_0 = ((waypoints_tmp * lambda + waypoints_tmp_0 * lambda_tmp) +
                   waypoints_tmp_1 * b_tmp_idx_2_tmp) * 2.0;
            lambda_tmp = std::sqrt(b_0 * b_0 - (((lambda * lambda + lambda_tmp *
                lambda_tmp) + b_tmp_idx_2_tmp * b_tmp_idx_2_tmp) -
                                    localDW->obj.LookaheadDistance *
                                    localDW->obj.LookaheadDistance) * (4.0 *
                                    rtu_0_tmp));
            lambda = std::fmax((-b_0 + lambda_tmp) / 2.0 / rtu_0_tmp, (-b_0 -
                                lambda_tmp) / 2.0 / rtu_0_tmp);
            rtu_0_tmp = (1.0 - lambda) * b_waypointsIn[0] + lambda * r_idx_0;

            // MATLABSystem: '<S205>/Waypoint Follower'
            localDW->WaypointFollower_o1[0] = rtu_0_tmp;
            r_idx_0 = rtu_0_tmp;
            rtu_0_tmp = (1.0 - lambda) * b_waypointsIn[1] + lambda * r_idx_1;

            // MATLABSystem: '<S205>/Waypoint Follower'
            localDW->WaypointFollower_o1[1] = rtu_0_tmp;
            localDW->WaypointFollower_o1[2] = (1.0 - lambda) * b_waypointsIn[2]
                + lambda * r_idx_2;
            lambda = rt_atan2d_snf(rtu_0_tmp - rtu_0[1], r_idx_0 - rtu_0[0]);

            // MATLABSystem: '<S205>/Waypoint Follower'
            localDW->WaypointFollower_o3 = lambda;

            // MATLABSystem: '<S205>/Waypoint Follower'
            localDW->WaypointFollower_o5 = 0U;
            p = false;
            if (localDW->obj.LastWaypointFlag) {
                p = true;
            }

            if (p) {
                // MATLABSystem: '<S205>/Waypoint Follower'
                localDW->WaypointFollower_o5 = 1U;
            }

            localDW->obj.LastWaypointFlag = false;
        }
    }

    // MATLABSystem: '<S205>/Waypoint Follower'
    localDW->WaypointFollower_o2 = lambda;

    // MATLABSystem: '<S205>/Waypoint Follower'
    localDW->WaypointFollower_o4 = localDW->obj.LookaheadDistFlag;
}

//
// System initialize for atomic system:
//    '<S175>/SegmentSwitch'
//    '<S216>/SegmentSwitch'
//
void FlightMissionMode_SegmentSwitch_Init(real_T rty_LookAheadPoint[3], real_T
    *rty_DesiredCourse, RunWayLineSegment *rty_Status,
    DW_SegmentSwitch_FlightMissionMode_T *localDW)
{
    // Start for SwitchCase: '<S178>/Switch Case'
    localDW->SwitchCase_ActiveSubsystem = -1;

    // SystemInitialize for Chart: '<S178>/Chart'
    *rty_Status = RunWayLineSegment_None;

    // SystemInitialize for IfAction SubSystem: '<S178>/Left'

    // Constant: '<S205>/LookAheadDis'
    FlightMissionMode_WaypointFollower_m_Init(&localDW->WaypointFollower);

    // End of SystemInitialize for SubSystem: '<S178>/Left'

    // SystemInitialize for IfAction SubSystem: '<S178>/Top'

    // Constant: '<S207>/LookAheadDis'
    FlightMissionMode_WaypointFollower_m_Init(&localDW->WaypointFollower_k);

    // End of SystemInitialize for SubSystem: '<S178>/Top'

    // SystemInitialize for IfAction SubSystem: '<S178>/Right'

    // Constant: '<S206>/LookAheadDis'
    FlightMissionMode_WaypointFollower_m_Init(&localDW->WaypointFollower_n);

    // End of SystemInitialize for SubSystem: '<S178>/Right'

    // SystemInitialize for IfAction SubSystem: '<S178>/Bottom'

    // Constant: '<S202>/LookAheadDis'
    FlightMissionMode_WaypointFollower_m_Init(&localDW->WaypointFollower_i);

    // End of SystemInitialize for SubSystem: '<S178>/Bottom'

    // SystemInitialize for IfAction SubSystem: '<S178>/Initial'

    // Constant: '<S204>/LookAheadDis'
    FlightMissionMode_WaypointFollower_m_Init(&localDW->WaypointFollower_e);

    // End of SystemInitialize for SubSystem: '<S178>/Initial'

    // SystemInitialize for Merge: '<S178>/MergeDesiredCourse'
    *rty_DesiredCourse = 0.0;

    // SystemInitialize for Merge: '<S178>/MergeLookAheadP'
    rty_LookAheadPoint[0] = 0.0;
    rty_LookAheadPoint[1] = 0.0;
    rty_LookAheadPoint[2] = 0.0;
}

//
// System reset for atomic system:
//    '<S175>/SegmentSwitch'
//    '<S216>/SegmentSwitch'
//
void FlightMissionMode_SegmentSwitch_Reset(RunWayLineSegment *rty_Status,
    DW_SegmentSwitch_FlightMissionMode_T *localDW)
{
    // InitializeConditions for Memory: '<S178>/Memory'
    localDW->Memory_PreviousInput = 0.0;

    // SystemReset for Chart: '<S178>/Chart'
    localDW->temporalCounter_i1 = 0U;
    localDW->is_Running = FlightMissionMode_IN_NO_ACTIVE_CHILD;
    localDW->is_active_c3_PathPlanning = 0U;
    localDW->is_c3_PathPlanning = FlightMissionMode_IN_NO_ACTIVE_CHILD;
    *rty_Status = RunWayLineSegment_None;
}

//
// Disable for atomic system:
//    '<S175>/SegmentSwitch'
//    '<S216>/SegmentSwitch'
//
void FlightMissionMode_SegmentSwitch_Disable
    (DW_SegmentSwitch_FlightMissionMode_T *localDW)
{
    // Disable for SwitchCase: '<S178>/Switch Case'
    localDW->SwitchCase_ActiveSubsystem = -1;
}

//
// Outputs for atomic system:
//    '<S175>/SegmentSwitch'
//    '<S216>/SegmentSwitch'
//
void FlightMissionMode_SegmentSwitch(const int32_T *rtu_Reset, const real_T
    rtu_Pose[4], const real_T rtu_RawWaypoint[1500], real_T rty_LookAheadPoint[3],
    real_T *rty_DesiredCourse, RunWayLineSegment *rty_Status, real_T
    rtp_LookAheadDis, DW_SegmentSwitch_FlightMissionMode_T *localDW)
{
    // local block i/o variables
    real_T rtb_Selector[300];
    real_T rtb_Selector_a[300];
    real_T rtb_Selector_h[300];
    real_T rtb_Selector_o[300];
    real_T rtb_Selector_a0[300];
    int8_T rtAction;
    int8_T rtPrevAction;

    // Chart: '<S178>/Chart' incorporates:
    //   Memory: '<S178>/Memory'

    if (static_cast<uint32_T>(localDW->temporalCounter_i1) < 7U) {
        localDW->temporalCounter_i1 = static_cast<uint8_T>(static_cast<uint32_T>
            (static_cast<uint32_T>(localDW->temporalCounter_i1) + 1U));
    }

    // Gateway: SegmentSwitch/Chart
    // During: SegmentSwitch/Chart
    if (static_cast<uint32_T>(localDW->is_active_c3_PathPlanning) == 0U) {
        // Entry: SegmentSwitch/Chart
        localDW->is_active_c3_PathPlanning = 1U;

        // Entry Internal: SegmentSwitch/Chart
        // Transition: '<S203>:2'
        localDW->is_c3_PathPlanning = FlightMissionMode_IN_Init;
        localDW->temporalCounter_i1 = 0U;
        *rty_Status = RunWayLineSegment_Init;
    } else if (localDW->is_c3_PathPlanning == FlightMissionMode_IN_Init) {
        // During 'Init': '<S203>:1'
        if (static_cast<boolean_T>(static_cast<int32_T>((static_cast<uint32_T>
                (localDW->temporalCounter_i1) >= 5U) &
                (localDW->Memory_PreviousInput == 1.0)))) {
            // Transition: '<S203>:4'
            localDW->is_c3_PathPlanning = FlightMissionMode_IN_Running;
            localDW->is_Running = FlightMissionMode_IN_Left;
            *rty_Status = RunWayLineSegment_Left;
        }

        // During 'Running': '<S203>:5'
    } else if (*rtu_Reset != 0) {
        // Transition: '<S203>:15'
        // Exit Internal 'Running': '<S203>:5'
        localDW->is_Running = FlightMissionMode_IN_NO_ACTIVE_CHILD;
        localDW->is_c3_PathPlanning = FlightMissionMode_IN_Init;
        localDW->temporalCounter_i1 = 0U;
        *rty_Status = RunWayLineSegment_Init;
    } else {
        switch (localDW->is_Running) {
          case FlightMissionMode_IN_Bottom:
            // During 'Bottom': '<S203>:13'
            if (localDW->Memory_PreviousInput == 1.0) {
                // Transition: '<S203>:8'
                localDW->is_Running = FlightMissionMode_IN_Left;
                *rty_Status = RunWayLineSegment_Left;
            }
            break;

          case FlightMissionMode_IN_Left:
            // During 'Left': '<S203>:11'
            if (localDW->Memory_PreviousInput == 1.0) {
                // Transition: '<S203>:7'
                localDW->is_Running = FlightMissionMode_IN_Top;
                *rty_Status = RunWayLineSegment_Top;
            }
            break;

          case FlightMissionMode_IN_Right:
            // During 'Right': '<S203>:14'
            if (localDW->Memory_PreviousInput == 1.0) {
                // Transition: '<S203>:10'
                localDW->is_Running = FlightMissionMode_IN_Bottom;
                *rty_Status = RunWayLineSegment_Bottom;
            }
            break;

          default:
            // During 'Top': '<S203>:12'
            if (localDW->Memory_PreviousInput == 1.0) {
                // Transition: '<S203>:9'
                localDW->is_Running = FlightMissionMode_IN_Right;
                *rty_Status = RunWayLineSegment_Right;
            }
            break;
        }
    }

    // End of Chart: '<S178>/Chart'

    // SwitchCase: '<S178>/Switch Case' incorporates:
    //   Constant: '<S202>/LookAheadDis'
    //   Constant: '<S204>/LookAheadDis'
    //   Constant: '<S205>/LookAheadDis'
    //   Constant: '<S206>/LookAheadDis'
    //   Constant: '<S207>/LookAheadDis'

    rtPrevAction = localDW->SwitchCase_ActiveSubsystem;
    switch (*rty_Status) {
      case RunWayLineSegment_Left:
        rtAction = 0;
        break;

      case RunWayLineSegment_Top:
        rtAction = 1;
        break;

      case RunWayLineSegment_Right:
        rtAction = 2;
        break;

      case RunWayLineSegment_Bottom:
        rtAction = 3;
        break;

      case RunWayLineSegment_Init:
        rtAction = 4;
        break;

      default:
        rtAction = 5;
        break;
    }

    localDW->SwitchCase_ActiveSubsystem = rtAction;
    switch (rtAction) {
      case 0:
        if (static_cast<int32_T>(rtAction) != static_cast<int32_T>(rtPrevAction))
        {
            // SystemReset for IfAction SubSystem: '<S178>/Left' incorporates:
            //   ActionPort: '<S205>/Action Port'

            // SystemReset for SwitchCase: '<S178>/Switch Case'
            FlightMissionMode_WaypointFollower_j_Reset
                (&localDW->WaypointFollower);

            // End of SystemReset for SubSystem: '<S178>/Left'
        }

        // Outputs for IfAction SubSystem: '<S178>/Left' incorporates:
        //   ActionPort: '<S205>/Action Port'

        for (int32_T i{0}; i < 3; i++) {
            // Selector: '<S205>/Selector'
            std::memcpy(&rtb_Selector_a0[static_cast<int32_T>(i * 100)],
                        &rtu_RawWaypoint[static_cast<int32_T>(i * 100)],
                        static_cast<uint32_T>(100U * sizeof(real_T)));
        }

        FlightMissionMode_WaypointFollower_e(rtu_Pose, rtb_Selector_a0,
            rtp_LookAheadDis, &localDW->WaypointFollower);

        // Merge: '<S178>/MergeStatus' incorporates:
        //   Constant: '<S205>/LookAheadDis'
        //   DataTypeConversion: '<S205>/Cast To Double'
        //   SignalConversion generated from: '<S205>/Waypoint Follower'

        localDW->MergeStatus = static_cast<real_T>
            (localDW->WaypointFollower.WaypointFollower_o5);

        // SignalConversion generated from: '<S205>/Waypoint Follower' incorporates:
        //   MATLABSystem: '<S205>/Waypoint Follower'

        rty_LookAheadPoint[0] = localDW->WaypointFollower.WaypointFollower_o1[0];
        rty_LookAheadPoint[1] = localDW->WaypointFollower.WaypointFollower_o1[1];
        rty_LookAheadPoint[2] = localDW->WaypointFollower.WaypointFollower_o1[2];

        // SignalConversion generated from: '<S205>/Waypoint Follower'
        *rty_DesiredCourse = localDW->WaypointFollower.WaypointFollower_o2;

        // End of Outputs for SubSystem: '<S178>/Left'
        break;

      case 1:
        if (static_cast<int32_T>(rtAction) != static_cast<int32_T>(rtPrevAction))
        {
            // SystemReset for IfAction SubSystem: '<S178>/Top' incorporates:
            //   ActionPort: '<S207>/Action Port'

            // SystemReset for SwitchCase: '<S178>/Switch Case'
            FlightMissionMode_WaypointFollower_j_Reset
                (&localDW->WaypointFollower_k);

            // End of SystemReset for SubSystem: '<S178>/Top'
        }

        // Outputs for IfAction SubSystem: '<S178>/Top' incorporates:
        //   ActionPort: '<S207>/Action Port'

        for (int32_T i{0}; i < 3; i++) {
            // Selector: '<S207>/Selector'
            std::memcpy(&rtb_Selector_o[static_cast<int32_T>(i * 100)],
                        &rtu_RawWaypoint[static_cast<int32_T>
                        (static_cast<int32_T>(i * 100) + 300)],
                        static_cast<uint32_T>(100U * sizeof(real_T)));
        }

        FlightMissionMode_WaypointFollower_e(rtu_Pose, rtb_Selector_o,
            rtp_LookAheadDis, &localDW->WaypointFollower_k);

        // Merge: '<S178>/MergeStatus' incorporates:
        //   Constant: '<S207>/LookAheadDis'
        //   DataTypeConversion: '<S207>/Cast To Double'
        //   SignalConversion generated from: '<S207>/Waypoint Follower'

        localDW->MergeStatus = static_cast<real_T>
            (localDW->WaypointFollower_k.WaypointFollower_o5);

        // SignalConversion generated from: '<S207>/Waypoint Follower' incorporates:
        //   MATLABSystem: '<S207>/Waypoint Follower'

        rty_LookAheadPoint[0] = localDW->WaypointFollower_k.WaypointFollower_o1
            [0];
        rty_LookAheadPoint[1] = localDW->WaypointFollower_k.WaypointFollower_o1
            [1];
        rty_LookAheadPoint[2] = localDW->WaypointFollower_k.WaypointFollower_o1
            [2];

        // SignalConversion generated from: '<S207>/Waypoint Follower'
        *rty_DesiredCourse = localDW->WaypointFollower_k.WaypointFollower_o2;

        // End of Outputs for SubSystem: '<S178>/Top'
        break;

      case 2:
        if (static_cast<int32_T>(rtAction) != static_cast<int32_T>(rtPrevAction))
        {
            // SystemReset for IfAction SubSystem: '<S178>/Right' incorporates:
            //   ActionPort: '<S206>/Action Port'

            // SystemReset for SwitchCase: '<S178>/Switch Case'
            FlightMissionMode_WaypointFollower_j_Reset
                (&localDW->WaypointFollower_n);

            // End of SystemReset for SubSystem: '<S178>/Right'
        }

        // Outputs for IfAction SubSystem: '<S178>/Right' incorporates:
        //   ActionPort: '<S206>/Action Port'

        for (int32_T i{0}; i < 3; i++) {
            // Selector: '<S206>/Selector'
            std::memcpy(&rtb_Selector_h[static_cast<int32_T>(i * 100)],
                        &rtu_RawWaypoint[static_cast<int32_T>
                        (static_cast<int32_T>(i * 100) + 600)],
                        static_cast<uint32_T>(100U * sizeof(real_T)));
        }

        FlightMissionMode_WaypointFollower_e(rtu_Pose, rtb_Selector_h,
            rtp_LookAheadDis, &localDW->WaypointFollower_n);

        // Merge: '<S178>/MergeStatus' incorporates:
        //   Constant: '<S206>/LookAheadDis'
        //   DataTypeConversion: '<S206>/Cast To Double'
        //   SignalConversion generated from: '<S206>/Waypoint Follower'

        localDW->MergeStatus = static_cast<real_T>
            (localDW->WaypointFollower_n.WaypointFollower_o5);

        // SignalConversion generated from: '<S206>/Waypoint Follower' incorporates:
        //   MATLABSystem: '<S206>/Waypoint Follower'

        rty_LookAheadPoint[0] = localDW->WaypointFollower_n.WaypointFollower_o1
            [0];
        rty_LookAheadPoint[1] = localDW->WaypointFollower_n.WaypointFollower_o1
            [1];
        rty_LookAheadPoint[2] = localDW->WaypointFollower_n.WaypointFollower_o1
            [2];

        // SignalConversion generated from: '<S206>/Waypoint Follower'
        *rty_DesiredCourse = localDW->WaypointFollower_n.WaypointFollower_o2;

        // End of Outputs for SubSystem: '<S178>/Right'
        break;

      case 3:
        if (static_cast<int32_T>(rtAction) != static_cast<int32_T>(rtPrevAction))
        {
            // SystemReset for IfAction SubSystem: '<S178>/Bottom' incorporates:
            //   ActionPort: '<S202>/Action Port'

            // SystemReset for SwitchCase: '<S178>/Switch Case'
            FlightMissionMode_WaypointFollower_j_Reset
                (&localDW->WaypointFollower_i);

            // End of SystemReset for SubSystem: '<S178>/Bottom'
        }

        // Outputs for IfAction SubSystem: '<S178>/Bottom' incorporates:
        //   ActionPort: '<S202>/Action Port'

        for (int32_T i{0}; i < 3; i++) {
            // Selector: '<S202>/Selector'
            std::memcpy(&rtb_Selector_a[static_cast<int32_T>(i * 100)],
                        &rtu_RawWaypoint[static_cast<int32_T>
                        (static_cast<int32_T>(i * 100) + 900)],
                        static_cast<uint32_T>(100U * sizeof(real_T)));
        }

        FlightMissionMode_WaypointFollower_e(rtu_Pose, rtb_Selector_a,
            rtp_LookAheadDis, &localDW->WaypointFollower_i);

        // Merge: '<S178>/MergeStatus' incorporates:
        //   Constant: '<S202>/LookAheadDis'
        //   DataTypeConversion: '<S202>/Cast To Double'
        //   SignalConversion generated from: '<S202>/Waypoint Follower'

        localDW->MergeStatus = static_cast<real_T>
            (localDW->WaypointFollower_i.WaypointFollower_o5);

        // SignalConversion generated from: '<S202>/Waypoint Follower' incorporates:
        //   MATLABSystem: '<S202>/Waypoint Follower'

        rty_LookAheadPoint[0] = localDW->WaypointFollower_i.WaypointFollower_o1
            [0];
        rty_LookAheadPoint[1] = localDW->WaypointFollower_i.WaypointFollower_o1
            [1];
        rty_LookAheadPoint[2] = localDW->WaypointFollower_i.WaypointFollower_o1
            [2];

        // SignalConversion generated from: '<S202>/Waypoint Follower'
        *rty_DesiredCourse = localDW->WaypointFollower_i.WaypointFollower_o2;

        // End of Outputs for SubSystem: '<S178>/Bottom'
        break;

      case 4:
        if (static_cast<int32_T>(rtAction) != static_cast<int32_T>(rtPrevAction))
        {
            // SystemReset for IfAction SubSystem: '<S178>/Initial' incorporates:
            //   ActionPort: '<S204>/Action Port'

            // SystemReset for SwitchCase: '<S178>/Switch Case'
            FlightMissionMode_WaypointFollower_j_Reset
                (&localDW->WaypointFollower_e);

            // End of SystemReset for SubSystem: '<S178>/Initial'
        }

        // Outputs for IfAction SubSystem: '<S178>/Initial' incorporates:
        //   ActionPort: '<S204>/Action Port'

        for (int32_T i{0}; i < 3; i++) {
            // Selector: '<S204>/Selector'
            std::memcpy(&rtb_Selector[static_cast<int32_T>(i * 100)],
                        &rtu_RawWaypoint[static_cast<int32_T>(static_cast<
                         int32_T>(i * 100) + 1200)], static_cast<uint32_T>(100U *
                         sizeof(real_T)));
        }

        FlightMissionMode_WaypointFollower_e(rtu_Pose, rtb_Selector,
            rtp_LookAheadDis, &localDW->WaypointFollower_e);

        // Merge: '<S178>/MergeStatus' incorporates:
        //   Constant: '<S204>/LookAheadDis'
        //   DataTypeConversion: '<S204>/Cast To Double'
        //   SignalConversion generated from: '<S204>/Waypoint Follower'

        localDW->MergeStatus = static_cast<real_T>
            (localDW->WaypointFollower_e.WaypointFollower_o5);

        // SignalConversion generated from: '<S204>/Waypoint Follower' incorporates:
        //   MATLABSystem: '<S204>/Waypoint Follower'

        rty_LookAheadPoint[0] = localDW->WaypointFollower_e.WaypointFollower_o1
            [0];
        rty_LookAheadPoint[1] = localDW->WaypointFollower_e.WaypointFollower_o1
            [1];
        rty_LookAheadPoint[2] = localDW->WaypointFollower_e.WaypointFollower_o1
            [2];

        // SignalConversion generated from: '<S204>/Waypoint Follower'
        *rty_DesiredCourse = localDW->WaypointFollower_e.WaypointFollower_o2;

        // End of Outputs for SubSystem: '<S178>/Initial'
        break;
    }

    // End of SwitchCase: '<S178>/Switch Case'
}

//
// Update for atomic system:
//    '<S175>/SegmentSwitch'
//    '<S216>/SegmentSwitch'
//
void FlightMissionMode_SegmentSwitch_Update(DW_SegmentSwitch_FlightMissionMode_T
    *localDW)
{
    // Update for Memory: '<S178>/Memory'
    localDW->Memory_PreviousInput = localDW->MergeStatus;
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_merge(int32_T idx_data[], int32_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], int32_T
    xwork_data[])
{
    if (nq != 0) {
        int32_T iout;
        int32_T n;
        int32_T n_tmp;
        int32_T q;
        n_tmp = static_cast<int32_T>(np + nq);
        for (q = 0; q <= static_cast<int32_T>(n_tmp - 1); q =
                static_cast<int32_T>(q + 1)) {
            iout = static_cast<int32_T>(offset + q);
            iwork_data[q] = idx_data[iout];
            xwork_data[q] = x_data[iout];
        }

        n = 0;
        q = np;
        iout = static_cast<int32_T>(offset - 1);
        int32_T exitg1;
        do {
            exitg1 = 0;
            iout = static_cast<int32_T>(iout + 1);
            if (xwork_data[n] <= xwork_data[q]) {
                idx_data[iout] = iwork_data[n];
                x_data[iout] = xwork_data[n];
                if (static_cast<int32_T>(n + 1) < np) {
                    n = static_cast<int32_T>(n + 1);
                } else {
                    exitg1 = 1;
                }
            } else {
                idx_data[iout] = iwork_data[q];
                x_data[iout] = xwork_data[q];
                if (static_cast<int32_T>(q + 1) < n_tmp) {
                    q = static_cast<int32_T>(q + 1);
                } else {
                    q = static_cast<int32_T>(iout - n);
                    while (static_cast<int32_T>(n + 1) <= np) {
                        iout = static_cast<int32_T>(static_cast<int32_T>(q + n)
                            + 1);
                        idx_data[iout] = iwork_data[n];
                        x_data[iout] = xwork_data[n];
                        n = static_cast<int32_T>(n + 1);
                    }

                    exitg1 = 1;
                }
            }
        } while (exitg1 == 0);
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_sort(int32_T x_data[], const int32_T *x_size,
    int32_T idx_data[], int32_T *idx_size)
{
    int32_T b_idx_data[28];
    int32_T b_x_data[28];
    int32_T vwork_data[28];
    int32_T xwork_data[28];
    int32_T x4[4];
    int32_T b;
    int32_T c_k;
    int32_T dim;
    int32_T vstride;
    int32_T vwork_size_idx_0;
    int8_T idx4[4];
    int8_T perm[4];
    dim = 2;
    if (*x_size != 1) {
        dim = 1;
        b = static_cast<int32_T>(*x_size - 1);
    } else {
        b = 0;
    }

    vwork_size_idx_0 = static_cast<int32_T>(b + 1);
    *idx_size = *x_size;
    vstride = 1;
    c_k = 0;
    while (c_k <= static_cast<int32_T>(dim - 2)) {
        vstride = static_cast<int32_T>(vstride * *x_size);
        c_k = 1;
    }

    for (dim = 0; dim <= static_cast<int32_T>(vstride - 1); dim =
            static_cast<int32_T>(dim + 1)) {
        int32_T nQuartets;
        for (nQuartets = 0; nQuartets <= b; nQuartets = static_cast<int32_T>
                (nQuartets + 1)) {
            vwork_data[nQuartets] = x_data[static_cast<int32_T>
                (static_cast<int32_T>(nQuartets * vstride) + dim)];
        }

        for (c_k = 0; c_k <= static_cast<int32_T>(vwork_size_idx_0 - 1); c_k++)
        {
            b_x_data[c_k] = vwork_data[c_k];
        }

        nQuartets = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
        for (c_k = 0; c_k <= static_cast<int32_T>(nQuartets - 1); c_k++) {
            b_idx_data[c_k] = 0;
        }

        if (vwork_size_idx_0 != 0) {
            int32_T nLeft;
            int32_T nQuartets_tmp;
            int32_T nTail;
            int32_T tailOffset;
            nQuartets = static_cast<int32_T>(static_cast<int8_T>
                (vwork_size_idx_0));
            for (c_k = 0; c_k <= static_cast<int32_T>(nQuartets - 1); c_k++) {
                b_idx_data[c_k] = 0;
            }

            x4[0] = 0;
            idx4[0] = 0;
            x4[1] = 0;
            idx4[1] = 0;
            x4[2] = 0;
            idx4[2] = 0;
            x4[3] = 0;
            idx4[3] = 0;
            nQuartets_tmp = static_cast<int32_T>(vwork_size_idx_0 >> 2);
            for (nLeft = 0; nLeft <= static_cast<int32_T>(nQuartets_tmp - 1);
                    nLeft = static_cast<int32_T>(nLeft + 1)) {
                int32_T i3;
                int32_T i4;
                int32_T tmp;
                tailOffset = static_cast<int32_T>(nLeft << 2);
                idx4[0] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    1));
                idx4[1] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    2));
                idx4[2] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    3));
                idx4[3] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    4));
                x4[0] = b_x_data[tailOffset];
                x4[1] = b_x_data[static_cast<int32_T>(tailOffset + 1)];
                x4[2] = b_x_data[static_cast<int32_T>(tailOffset + 2)];
                x4[3] = b_x_data[static_cast<int32_T>(tailOffset + 3)];
                if (b_x_data[tailOffset] <= b_x_data[static_cast<int32_T>
                        (tailOffset + 1)]) {
                    nTail = 1;
                    nQuartets = 2;
                } else {
                    nTail = 2;
                    nQuartets = 1;
                }

                if (b_x_data[static_cast<int32_T>(tailOffset + 2)] <= b_x_data[
                        static_cast<int32_T>(tailOffset + 3)]) {
                    i3 = 3;
                    i4 = 4;
                } else {
                    i3 = 4;
                    i4 = 3;
                }

                c_k = x4[static_cast<int32_T>(nTail - 1)];
                tmp = x4[static_cast<int32_T>(i3 - 1)];
                if (c_k <= tmp) {
                    c_k = x4[static_cast<int32_T>(nQuartets - 1)];
                    if (c_k <= tmp) {
                        perm[0] = static_cast<int8_T>(nTail);
                        perm[1] = static_cast<int8_T>(nQuartets);
                        perm[2] = static_cast<int8_T>(i3);
                        perm[3] = static_cast<int8_T>(i4);
                    } else if (c_k <= x4[static_cast<int32_T>(i4 - 1)]) {
                        perm[0] = static_cast<int8_T>(nTail);
                        perm[1] = static_cast<int8_T>(i3);
                        perm[2] = static_cast<int8_T>(nQuartets);
                        perm[3] = static_cast<int8_T>(i4);
                    } else {
                        perm[0] = static_cast<int8_T>(nTail);
                        perm[1] = static_cast<int8_T>(i3);
                        perm[2] = static_cast<int8_T>(i4);
                        perm[3] = static_cast<int8_T>(nQuartets);
                    }
                } else {
                    tmp = x4[static_cast<int32_T>(i4 - 1)];
                    if (c_k <= tmp) {
                        if (x4[static_cast<int32_T>(nQuartets - 1)] <= tmp) {
                            perm[0] = static_cast<int8_T>(i3);
                            perm[1] = static_cast<int8_T>(nTail);
                            perm[2] = static_cast<int8_T>(nQuartets);
                            perm[3] = static_cast<int8_T>(i4);
                        } else {
                            perm[0] = static_cast<int8_T>(i3);
                            perm[1] = static_cast<int8_T>(nTail);
                            perm[2] = static_cast<int8_T>(i4);
                            perm[3] = static_cast<int8_T>(nQuartets);
                        }
                    } else {
                        perm[0] = static_cast<int8_T>(i3);
                        perm[1] = static_cast<int8_T>(i4);
                        perm[2] = static_cast<int8_T>(nTail);
                        perm[3] = static_cast<int8_T>(nQuartets);
                    }
                }

                b_idx_data[tailOffset] = static_cast<int32_T>(idx4
                    [static_cast<int32_T>(static_cast<int32_T>(perm[0]) - 1)]);
                b_idx_data[static_cast<int32_T>(tailOffset + 1)] =
                    static_cast<int32_T>(idx4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[1]) - 1)]);
                b_idx_data[static_cast<int32_T>(tailOffset + 2)] =
                    static_cast<int32_T>(idx4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[2]) - 1)]);
                b_idx_data[static_cast<int32_T>(tailOffset + 3)] =
                    static_cast<int32_T>(idx4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[3]) - 1)]);
                b_x_data[tailOffset] = x4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[0]) - 1)];
                b_x_data[static_cast<int32_T>(tailOffset + 1)] = x4[static_cast<
                    int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                b_x_data[static_cast<int32_T>(tailOffset + 2)] = x4[static_cast<
                    int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                b_x_data[static_cast<int32_T>(tailOffset + 3)] = x4[static_cast<
                    int32_T>(static_cast<int32_T>(perm[3]) - 1)];
            }

            nQuartets = static_cast<int32_T>(nQuartets_tmp << 2);
            nLeft = static_cast<int32_T>(vwork_size_idx_0 - nQuartets);
            if (nLeft > 0) {
                for (tailOffset = 0; tailOffset <= static_cast<int32_T>(nLeft -
                        1); tailOffset = static_cast<int32_T>(tailOffset + 1)) {
                    c_k = static_cast<int32_T>(nQuartets + tailOffset);
                    idx4[tailOffset] = static_cast<int8_T>(static_cast<int32_T>
                        (c_k + 1));
                    x4[tailOffset] = b_x_data[c_k];
                }

                perm[1] = 0;
                perm[2] = 0;
                perm[3] = 0;
                switch (nLeft) {
                  case 1:
                    perm[0] = 1;
                    break;

                  case 2:
                    if (x4[0] <= x4[1]) {
                        perm[0] = 1;
                        perm[1] = 2;
                    } else {
                        perm[0] = 2;
                        perm[1] = 1;
                    }
                    break;

                  default:
                    if (x4[0] <= x4[1]) {
                        if (x4[1] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 2;
                            perm[2] = 3;
                        } else if (x4[0] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 3;
                            perm[2] = 2;
                        } else {
                            perm[0] = 3;
                            perm[1] = 1;
                            perm[2] = 2;
                        }
                    } else if (x4[0] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 1;
                        perm[2] = 3;
                    } else if (x4[1] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 3;
                        perm[2] = 1;
                    } else {
                        perm[0] = 3;
                        perm[1] = 2;
                        perm[2] = 1;
                    }
                    break;
                }

                for (tailOffset = 0; tailOffset <= static_cast<int32_T>(nLeft -
                        1); tailOffset = static_cast<int32_T>(tailOffset + 1)) {
                    c_k = static_cast<int32_T>(static_cast<int32_T>
                        (perm[tailOffset]) - 1);
                    nTail = static_cast<int32_T>(nQuartets + tailOffset);
                    b_idx_data[nTail] = static_cast<int32_T>(idx4[c_k]);
                    b_x_data[nTail] = x4[c_k];
                }
            }

            if (vwork_size_idx_0 > 1) {
                nQuartets = static_cast<int32_T>(static_cast<int8_T>
                    (vwork_size_idx_0));
                for (c_k = 0; c_k <= static_cast<int32_T>(nQuartets - 1); c_k++)
                {
                    vwork_data[c_k] = 0;
                }

                for (c_k = 0; c_k <= static_cast<int32_T>(vwork_size_idx_0 - 1);
                     c_k++) {
                    xwork_data[c_k] = 0;
                }

                nLeft = nQuartets_tmp;
                nQuartets = 4;
                while (nLeft > 1) {
                    if (static_cast<uint32_T>(static_cast<uint32_T>(nLeft) & 1U)
                        != 0U) {
                        nLeft = static_cast<int32_T>(nLeft - 1);
                        tailOffset = static_cast<int32_T>(nQuartets * nLeft);
                        nTail = static_cast<int32_T>(vwork_size_idx_0 -
                            tailOffset);
                        if (nTail > nQuartets) {
                            FlightMissionMode_merge(b_idx_data, b_x_data,
                                                    tailOffset, nQuartets,
                                                    static_cast<int32_T>(nTail -
                                nQuartets), vwork_data, xwork_data);
                        }
                    }

                    tailOffset = static_cast<int32_T>(nQuartets << 1);
                    nLeft = static_cast<int32_T>(nLeft >> 1);
                    for (nTail = 0; nTail <= static_cast<int32_T>(nLeft - 1);
                            nTail = static_cast<int32_T>(nTail + 1)) {
                        FlightMissionMode_merge(b_idx_data, b_x_data,
                                                static_cast<int32_T>(nTail *
                            tailOffset), nQuartets, nQuartets, vwork_data,
                                                xwork_data);
                    }

                    nQuartets = tailOffset;
                }

                if (vwork_size_idx_0 > nQuartets) {
                    FlightMissionMode_merge(b_idx_data, b_x_data, 0, nQuartets,
                                            static_cast<int32_T>
                                            (vwork_size_idx_0 - nQuartets),
                                            vwork_data, xwork_data);
                }
            }
        }

        for (c_k = 0; c_k <= static_cast<int32_T>(vwork_size_idx_0 - 1); c_k++)
        {
            vwork_data[c_k] = b_x_data[c_k];
        }

        for (nQuartets = 0; nQuartets <= b; nQuartets = static_cast<int32_T>
                (nQuartets + 1)) {
            c_k = static_cast<int32_T>(static_cast<int32_T>(nQuartets * vstride)
                + dim);
            x_data[c_k] = b_x_data[nQuartets];
            idx_data[c_k] = b_idx_data[nQuartets];
        }
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_do_vectors(real_T c_data[], int32_T c_size[2],
    int32_T ia_data[], int32_T *ia_size, int32_T *ib_size)
{
    static const real_T b_a[28]{ 6.384265086E+9, 6.384265284E+9, 6.384480708E+9,
        6.384480906E+9, 6.384473283E+9, 6.384263997E+9, 2.1067690282E+11,
        2.10676902826E+11, 2.10677124976E+11, 2.10677124982E+11,
        2.10677124751E+11, 2.10676902787E+11, 2.10680747748E+11,
        2.10680754288E+11, 2.10687863274E+11, 2.10687869814E+11,
        2.10687618255E+11, 2.10680711811E+11, 6.384264226E+9, 6.384264232E+9,
        6.384264001E+9, 6.38447332E+9, 6.384473281E+9, 6.384473314E+9,
        6.384265282E+9, 6.384480904E+9, 6.38426509E+9, 6.384480712E+9 };

    static const int32_T e[28]{ 6, 21, 19, 20, 1, 27, 25, 2, 23, 5, 24, 22, 3,
        28, 26, 4, 12, 7, 8, 11, 9, 10, 18, 13, 14, 17, 15, 16 };

    static const int8_T f[28]{ 6, 21, 19, 20, 1, 27, 25, 2, 23, 5, 24, 22, 3, 28,
        26, 4, 12, 7, 8, 11, 9, 10, 18, 13, 14, 17, 15, 16 };

    emxArray_int32_T_28_FlightMissionMode_T ia_data_0;
    int32_T a;
    int32_T iafirst;
    int32_T ialast;
    int32_T nc;
    int32_T nia;
    c_size[0] = 1;
    *ib_size = 0;
    nc = 0;
    nia = -1;
    iafirst = 0;
    ialast = 1;
    while (ialast <= 28) {
        a = ialast;
        skip_to_last_equal_value_g4hWwl2B(&a, b_a, e);
        nc = static_cast<int32_T>(nc + 1);
        nia = static_cast<int32_T>(nia + 1);
        ia_data[nia] = static_cast<int32_T>(f[iafirst]);
        ialast = static_cast<int32_T>(a + 1);
        iafirst = a;
    }

    if (1 > static_cast<int32_T>(nia + 1)) {
        iafirst = -1;
    } else {
        iafirst = nia;
    }

    *ia_size = static_cast<int32_T>(iafirst + 1);
    FlightMissionMode_sort(ia_data, ia_size, ia_data_0.data, &ia_data_0.size);
    for (iafirst = 0; iafirst <= nia; iafirst = static_cast<int32_T>(iafirst + 1))
    {
        c_data[iafirst] = b_a[static_cast<int32_T>(ia_data[iafirst] - 1)];
    }

    if (1 > nc) {
        c_size[1] = 0;
    } else {
        c_size[1] = nc;
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_do_vectors_h(const real_T b_data[], const int32_T *
    b_size, real_T c_data[], int32_T c_size[2], int32_T ia_data[], int32_T
    *ia_size, int32_T *ib_size)
{
    emxArray_int32_T_28_FlightMissionMode_T ia_data_0;
    real_T tmp[28];
    int32_T bperm_data[28];
    int32_T iwork_data[28];
    int32_T b_k;
    int32_T i;
    int32_T i2;
    int32_T i_0;
    int32_T j;
    int32_T k;
    int32_T kEnd;
    int32_T n;
    int32_T pEnd;
    int32_T qEnd;
    c_size[0] = 1;
    *ib_size = 0;
    i = static_cast<int32_T>(static_cast<int8_T>(*b_size));
    for (i_0 = 0; i_0 <= static_cast<int32_T>(i - 1); i_0++) {
        bperm_data[i_0] = 0;
    }

    if (*b_size != 0) {
        for (i = 1; i <= static_cast<int32_T>(static_cast<int32_T>(*b_size + 1)
                - 2); i = static_cast<int32_T>(i + 2)) {
            if (b_data[static_cast<int32_T>(i - 1)] <= b_data[i]) {
                bperm_data[static_cast<int32_T>(i - 1)] = i;
                bperm_data[i] = static_cast<int32_T>(i + 1);
            } else {
                bperm_data[static_cast<int32_T>(i - 1)] = static_cast<int32_T>(i
                    + 1);
                bperm_data[i] = i;
            }
        }

        if (static_cast<uint32_T>(static_cast<uint32_T>(*b_size) & 1U) != 0U) {
            bperm_data[static_cast<int32_T>(*b_size - 1)] = *b_size;
        }

        i = 2;
        while (i < static_cast<int32_T>(static_cast<int32_T>(*b_size + 1) - 1))
        {
            i2 = static_cast<int32_T>(i << 1);
            j = 1;
            pEnd = static_cast<int32_T>(i + 1);
            while (pEnd < static_cast<int32_T>(*b_size + 1)) {
                int32_T c_k;
                int32_T q;
                n = j;
                q = pEnd;
                qEnd = static_cast<int32_T>(j + i2);
                if (qEnd > static_cast<int32_T>(*b_size + 1)) {
                    qEnd = static_cast<int32_T>(*b_size + 1);
                }

                c_k = 0;
                kEnd = static_cast<int32_T>(qEnd - j);
                while (static_cast<int32_T>(c_k + 1) <= kEnd) {
                    int32_T tmp_0;
                    i_0 = bperm_data[static_cast<int32_T>(q - 1)];
                    tmp_0 = bperm_data[static_cast<int32_T>(n - 1)];
                    if (b_data[static_cast<int32_T>(tmp_0 - 1)] <= b_data[
                            static_cast<int32_T>(i_0 - 1)]) {
                        iwork_data[c_k] = tmp_0;
                        n = static_cast<int32_T>(n + 1);
                        if (n == pEnd) {
                            while (q < qEnd) {
                                c_k = static_cast<int32_T>(c_k + 1);
                                iwork_data[c_k] = bperm_data[static_cast<int32_T>
                                    (q - 1)];
                                q = static_cast<int32_T>(q + 1);
                            }
                        }
                    } else {
                        iwork_data[c_k] = i_0;
                        q = static_cast<int32_T>(q + 1);
                        if (q == qEnd) {
                            while (n < pEnd) {
                                c_k = static_cast<int32_T>(c_k + 1);
                                iwork_data[c_k] = bperm_data[static_cast<int32_T>
                                    (n - 1)];
                                n = static_cast<int32_T>(n + 1);
                            }
                        }
                    }

                    c_k = static_cast<int32_T>(c_k + 1);
                }

                for (pEnd = 0; pEnd <= static_cast<int32_T>(kEnd - 1); pEnd =
                        static_cast<int32_T>(pEnd + 1)) {
                    bperm_data[static_cast<int32_T>(static_cast<int32_T>(j +
                        pEnd) - 1)] = iwork_data[pEnd];
                }

                j = qEnd;
                pEnd = static_cast<int32_T>(qEnd + i);
            }

            i = i2;
        }
    }

    n = 0;
    i = -1;
    i2 = 0;
    j = 1;
    qEnd = 1;
    while ((j <= 28) && (qEnd <= *b_size)) {
        real_T ak;
        real_T b_absx;
        real_T bk;
        boolean_T exitg1;
        kEnd = j;
        for (i_0 = 0; i_0 < 28; i_0++) {
            tmp[i_0] = static_cast<real_T>(i_0) + 1.0;
            iwork_data[i_0] = static_cast<int32_T>(i_0 + 1);
        }

        ak = skip_to_last_equal_value_g4hWwl2B(&kEnd, tmp, iwork_data);
        j = kEnd;
        pEnd = qEnd;
        bk = b_data[static_cast<int32_T>(bperm_data[static_cast<int32_T>(qEnd -
            1)] - 1)];
        exitg1 = false;
        while ((!exitg1) && (pEnd < *b_size)) {
            b_absx = std::abs(bk / 2.0);
            if (b_absx <= 2.2250738585072014E-308) {
                b_absx = 4.94065645841247E-324;
            } else {
                frexp(b_absx, &b_k);
                b_absx = std::ldexp(1.0, static_cast<int32_T>(b_k - 53));
            }

            if (std::abs(bk - b_data[static_cast<int32_T>(bperm_data[pEnd] - 1)])
                < b_absx) {
                pEnd = static_cast<int32_T>(pEnd + 1);
            } else {
                exitg1 = true;
            }
        }

        qEnd = pEnd;
        b_absx = std::abs(bk / 2.0);
        if (b_absx <= 2.2250738585072014E-308) {
            b_absx = 4.94065645841247E-324;
        } else {
            frexp(b_absx, &k);
            b_absx = std::ldexp(1.0, static_cast<int32_T>(k - 53));
        }

        if (std::abs(bk - ak) < b_absx) {
            j = static_cast<int32_T>(kEnd + 1);
            i2 = kEnd;
            qEnd = static_cast<int32_T>(pEnd + 1);
        } else if (ak < bk) {
            n = static_cast<int32_T>(n + 1);
            i = static_cast<int32_T>(i + 1);
            ia_data[i] = static_cast<int32_T>(i2 + 1);
            j = static_cast<int32_T>(kEnd + 1);
            i2 = kEnd;
        } else {
            qEnd = static_cast<int32_T>(pEnd + 1);
        }
    }

    while (j <= 28) {
        b_k = j;
        for (i_0 = 0; i_0 < 28; i_0++) {
            tmp[i_0] = static_cast<real_T>(i_0) + 1.0;
            iwork_data[i_0] = static_cast<int32_T>(i_0 + 1);
        }

        skip_to_last_equal_value_g4hWwl2B(&b_k, tmp, iwork_data);
        n = static_cast<int32_T>(n + 1);
        i = static_cast<int32_T>(i + 1);
        ia_data[i] = static_cast<int32_T>(i2 + 1);
        j = static_cast<int32_T>(b_k + 1);
        i2 = b_k;
    }

    if (1 > static_cast<int32_T>(i + 1)) {
        i2 = -1;
    } else {
        i2 = i;
    }

    *ia_size = static_cast<int32_T>(i2 + 1);
    FlightMissionMode_sort(ia_data, ia_size, ia_data_0.data, &ia_data_0.size);
    for (b_k = 0; b_k <= i; b_k = static_cast<int32_T>(b_k + 1)) {
        c_data[b_k] = static_cast<real_T>(static_cast<int32_T>(ia_data[b_k] - 1))
            + 1.0;
    }

    if (1 > n) {
        c_size[1] = 0;
    } else {
        c_size[1] = n;
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_merge_c(int32_T idx_data[], real_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], real_T
    xwork_data[])
{
    if (nq != 0) {
        int32_T iout;
        int32_T n;
        int32_T n_tmp;
        int32_T q;
        n_tmp = static_cast<int32_T>(np + nq);
        for (q = 0; q <= static_cast<int32_T>(n_tmp - 1); q =
                static_cast<int32_T>(q + 1)) {
            iout = static_cast<int32_T>(offset + q);
            iwork_data[q] = idx_data[iout];
            xwork_data[q] = x_data[iout];
        }

        n = 0;
        q = np;
        iout = static_cast<int32_T>(offset - 1);
        int32_T exitg1;
        do {
            exitg1 = 0;
            iout = static_cast<int32_T>(iout + 1);
            if (xwork_data[n] <= xwork_data[q]) {
                idx_data[iout] = iwork_data[n];
                x_data[iout] = xwork_data[n];
                if (static_cast<int32_T>(n + 1) < np) {
                    n = static_cast<int32_T>(n + 1);
                } else {
                    exitg1 = 1;
                }
            } else {
                idx_data[iout] = iwork_data[q];
                x_data[iout] = xwork_data[q];
                if (static_cast<int32_T>(q + 1) < n_tmp) {
                    q = static_cast<int32_T>(q + 1);
                } else {
                    q = static_cast<int32_T>(iout - n);
                    while (static_cast<int32_T>(n + 1) <= np) {
                        iout = static_cast<int32_T>(static_cast<int32_T>(q + n)
                            + 1);
                        idx_data[iout] = iwork_data[n];
                        x_data[iout] = xwork_data[n];
                        n = static_cast<int32_T>(n + 1);
                    }

                    exitg1 = 1;
                }
            }
        } while (exitg1 == 0);
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_sort_a(real_T x_data[], const int32_T *x_size)
{
    real_T b_x_data[28];
    real_T vwork_data[28];
    real_T x4[4];
    int32_T idx_data[28];
    int32_T iwork_data[28];
    int32_T b;
    int32_T dim;
    int32_T n;
    int32_T vstride;
    int32_T vwork_size_idx_0;
    int8_T idx4[4];
    int8_T perm[4];
    dim = 2;
    if (*x_size != 1) {
        dim = 1;
        b = static_cast<int32_T>(*x_size - 1);
    } else {
        b = 0;
    }

    vwork_size_idx_0 = static_cast<int32_T>(b + 1);
    vstride = 1;
    n = 0;
    while (n <= static_cast<int32_T>(dim - 2)) {
        vstride = static_cast<int32_T>(vstride * *x_size);
        n = 1;
    }

    for (dim = 0; dim <= static_cast<int32_T>(vstride - 1); dim =
            static_cast<int32_T>(dim + 1)) {
        for (n = 0; n <= b; n = static_cast<int32_T>(n + 1)) {
            vwork_data[n] = x_data[static_cast<int32_T>(static_cast<int32_T>(n *
                vstride) + dim)];
        }

        for (n = 0; n <= static_cast<int32_T>(vwork_size_idx_0 - 1); n++) {
            b_x_data[n] = vwork_data[n];
        }

        if (vwork_size_idx_0 != 0) {
            int32_T ib;
            int32_T nPairs;
            int32_T nTail;
            ib = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
            for (n = 0; n <= static_cast<int32_T>(ib - 1); n++) {
                idx_data[n] = 0;
            }

            x4[0] = 0.0;
            idx4[0] = 0;
            x4[1] = 0.0;
            idx4[1] = 0;
            x4[2] = 0.0;
            idx4[2] = 0;
            x4[3] = 0.0;
            idx4[3] = 0;
            ib = 0;
            for (nPairs = 0; nPairs <= static_cast<int32_T>(vwork_size_idx_0 - 1);
                 nPairs = static_cast<int32_T>(nPairs + 1)) {
                ib = static_cast<int32_T>(ib + 1);
                idx4[static_cast<int32_T>(ib - 1)] = static_cast<int8_T>(
                    static_cast<int32_T>(nPairs + 1));
                x4[static_cast<int32_T>(ib - 1)] = b_x_data[nPairs];
                if (ib == 4) {
                    real_T tmp;
                    real_T tmp_0;
                    int32_T i4;
                    if (x4[0] <= x4[1]) {
                        ib = 1;
                        nTail = 2;
                    } else {
                        ib = 2;
                        nTail = 1;
                    }

                    if (x4[2] <= x4[3]) {
                        n = 3;
                        i4 = 4;
                    } else {
                        n = 4;
                        i4 = 3;
                    }

                    tmp = x4[static_cast<int32_T>(ib - 1)];
                    tmp_0 = x4[static_cast<int32_T>(n - 1)];
                    if (tmp <= tmp_0) {
                        tmp = x4[static_cast<int32_T>(nTail - 1)];
                        if (tmp <= tmp_0) {
                            perm[0] = static_cast<int8_T>(ib);
                            perm[1] = static_cast<int8_T>(nTail);
                            perm[2] = static_cast<int8_T>(n);
                            perm[3] = static_cast<int8_T>(i4);
                        } else if (tmp <= x4[static_cast<int32_T>(i4 - 1)]) {
                            perm[0] = static_cast<int8_T>(ib);
                            perm[1] = static_cast<int8_T>(n);
                            perm[2] = static_cast<int8_T>(nTail);
                            perm[3] = static_cast<int8_T>(i4);
                        } else {
                            perm[0] = static_cast<int8_T>(ib);
                            perm[1] = static_cast<int8_T>(n);
                            perm[2] = static_cast<int8_T>(i4);
                            perm[3] = static_cast<int8_T>(nTail);
                        }
                    } else {
                        tmp_0 = x4[static_cast<int32_T>(i4 - 1)];
                        if (tmp <= tmp_0) {
                            if (x4[static_cast<int32_T>(nTail - 1)] <= tmp_0) {
                                perm[0] = static_cast<int8_T>(n);
                                perm[1] = static_cast<int8_T>(ib);
                                perm[2] = static_cast<int8_T>(nTail);
                                perm[3] = static_cast<int8_T>(i4);
                            } else {
                                perm[0] = static_cast<int8_T>(n);
                                perm[1] = static_cast<int8_T>(ib);
                                perm[2] = static_cast<int8_T>(i4);
                                perm[3] = static_cast<int8_T>(nTail);
                            }
                        } else {
                            perm[0] = static_cast<int8_T>(n);
                            perm[1] = static_cast<int8_T>(i4);
                            perm[2] = static_cast<int8_T>(ib);
                            perm[3] = static_cast<int8_T>(nTail);
                        }
                    }

                    idx_data[static_cast<int32_T>(nPairs - 3)] =
                        static_cast<int32_T>(idx4[static_cast<int32_T>(
                        static_cast<int32_T>(perm[0]) - 1)]);
                    idx_data[static_cast<int32_T>(nPairs - 2)] =
                        static_cast<int32_T>(idx4[static_cast<int32_T>(
                        static_cast<int32_T>(perm[1]) - 1)]);
                    idx_data[static_cast<int32_T>(nPairs - 1)] =
                        static_cast<int32_T>(idx4[static_cast<int32_T>(
                        static_cast<int32_T>(perm[2]) - 1)]);
                    idx_data[nPairs] = static_cast<int32_T>(idx4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[3]) - 1)]);
                    b_x_data[static_cast<int32_T>(nPairs - 3)] = x4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[0]) - 1)];
                    b_x_data[static_cast<int32_T>(nPairs - 2)] = x4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                    b_x_data[static_cast<int32_T>(nPairs - 1)] = x4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                    b_x_data[nPairs] = x4[static_cast<int32_T>
                        (static_cast<int32_T>(perm[3]) - 1)];
                    ib = 0;
                }
            }

            if (ib > 0) {
                perm[1] = 0;
                perm[2] = 0;
                perm[3] = 0;
                switch (ib) {
                  case 1:
                    perm[0] = 1;
                    break;

                  case 2:
                    if (x4[0] <= x4[1]) {
                        perm[0] = 1;
                        perm[1] = 2;
                    } else {
                        perm[0] = 2;
                        perm[1] = 1;
                    }
                    break;

                  default:
                    if (x4[0] <= x4[1]) {
                        if (x4[1] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 2;
                            perm[2] = 3;
                        } else if (x4[0] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 3;
                            perm[2] = 2;
                        } else {
                            perm[0] = 3;
                            perm[1] = 1;
                            perm[2] = 2;
                        }
                    } else if (x4[0] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 1;
                        perm[2] = 3;
                    } else if (x4[1] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 3;
                        perm[2] = 1;
                    } else {
                        perm[0] = 3;
                        perm[1] = 2;
                        perm[2] = 1;
                    }
                    break;
                }

                for (nPairs = 0; nPairs <= static_cast<int32_T>(ib - 1); nPairs =
                     static_cast<int32_T>(nPairs + 1)) {
                    nTail = static_cast<int32_T>(static_cast<int32_T>
                        (perm[nPairs]) - 1);
                    n = static_cast<int32_T>(static_cast<int32_T>
                        (vwork_size_idx_0 - ib) + nPairs);
                    idx_data[n] = static_cast<int32_T>(idx4[nTail]);
                    b_x_data[n] = x4[nTail];
                }
            }

            if (vwork_size_idx_0 > 1) {
                ib = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
                for (n = 0; n <= static_cast<int32_T>(ib - 1); n++) {
                    iwork_data[n] = 0;
                }

                for (n = 0; n <= static_cast<int32_T>(vwork_size_idx_0 - 1); n++)
                {
                    vwork_data[n] = 0.0;
                }

                nPairs = static_cast<int32_T>(vwork_size_idx_0 >> 2);
                n = 4;
                while (nPairs > 1) {
                    if (static_cast<uint32_T>(static_cast<uint32_T>(nPairs) & 1U)
                        != 0U) {
                        nPairs = static_cast<int32_T>(nPairs - 1);
                        ib = static_cast<int32_T>(n * nPairs);
                        nTail = static_cast<int32_T>(vwork_size_idx_0 - ib);
                        if (nTail > n) {
                            FlightMissionMode_merge_c(idx_data, b_x_data, ib, n,
                                static_cast<int32_T>(nTail - n), iwork_data,
                                vwork_data);
                        }
                    }

                    ib = static_cast<int32_T>(n << 1);
                    nPairs = static_cast<int32_T>(nPairs >> 1);
                    for (nTail = 0; nTail <= static_cast<int32_T>(nPairs - 1);
                            nTail = static_cast<int32_T>(nTail + 1)) {
                        FlightMissionMode_merge_c(idx_data, b_x_data,
                            static_cast<int32_T>(nTail * ib), n, n, iwork_data,
                            vwork_data);
                    }

                    n = ib;
                }

                if (vwork_size_idx_0 > n) {
                    FlightMissionMode_merge_c(idx_data, b_x_data, 0, n,
                        static_cast<int32_T>(vwork_size_idx_0 - n), iwork_data,
                        vwork_data);
                }
            }
        }

        for (n = 0; n <= static_cast<int32_T>(vwork_size_idx_0 - 1); n++) {
            vwork_data[n] = b_x_data[n];
        }

        for (n = 0; n <= b; n = static_cast<int32_T>(n + 1)) {
            x_data[static_cast<int32_T>(dim + static_cast<int32_T>(n * vstride))]
                = b_x_data[n];
        }
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void* FlightMissionMode_uavDubinsBuildable_uavDubinsBuildable(real_T
    airSpeed, real_T maxRollAngle, const real_T flightPathAngle[2], const real_T
    disabledPathTypes_data[], const int32_T *disabledPathTypes_size)
{
    real_T b_disabledPathTypes_data[28];
    real_T b_flightPathAngle[2];
    int32_T loop_ub;
    b_flightPathAngle[0] = flightPathAngle[0];
    b_flightPathAngle[1] = flightPathAngle[1];
    loop_ub = *disabledPathTypes_size;
    for (int32_T i{0}; i <= static_cast<int32_T>(loop_ub - 1); i++) {
        b_disabledPathTypes_data[i] = disabledPathTypes_data[i];
    }

    return uavDubinsConnectionObj(airSpeed, maxRollAngle, &b_flightPathAngle[0],
        &b_disabledPathTypes_data[0], static_cast<uint32_T>
        (*disabledPathTypes_size));
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static boolean_T FlightMissionMode_strcmp(const char_T a_data[], const int32_T
    a_size[2])
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[2]{ 'H', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a_data[kstr]))
                                           & 127)] != b[static_cast<int32_T>
                        (c[kstr])]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static boolean_T FlightMissionMode_strcmp_b(const char_T a_data[], const int32_T
    a_size[2])
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[2]{ 'H', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a_data[kstr]))
                                           & 127)] != b[static_cast<int32_T>
                        (c[kstr])]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_o(const
    real_T varargin_1[4], const real_T varargin_2[4], real_T varargin_3, real_T
    varargin_4, real_T varargin_5, real_T varargin_6, const
    cell_wrap_1_FlightMissionMode_T varargin_7[4], const real_T varargin_8[4],
    uavDubinsPathSegment_FlightMissionMode_T *b_this)
{
    static const char_T d[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
        'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',
        'Z', '[', '\\', ']', '^', '_', '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
        'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', '\x7f' };

    real_T thetaWrap;
    int32_T k;
    b_this->MinTurningRadius = varargin_5;
    b_this->StartPose[0] = varargin_1[0];
    b_this->StartPose[1] = varargin_1[1];
    b_this->StartPose[2] = varargin_1[2];
    thetaWrap = mod_ZflSpsmf(varargin_1[3]);
    b_this->StartPose[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (varargin_1[3] > 0.0)))) {
        b_this->StartPose[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->StartPose[3]);
    b_this->GoalPose[0] = varargin_2[0];
    b_this->GoalPose[1] = varargin_2[1];
    b_this->GoalPose[2] = varargin_2[2];
    thetaWrap = mod_ZflSpsmf(varargin_2[3]);
    b_this->GoalPose[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (varargin_2[3] > 0.0)))) {
        b_this->GoalPose[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->GoalPose[3]);
    b_this->AirSpeed = varargin_4;
    b_this->HelixRadius = varargin_6;
    b_this->FlightPathAngle = varargin_3;
    b_this->MotionLengths[0] = varargin_8[0];
    b_this->MotionTypes[0] = varargin_7[0];
    b_this->MotionLengths[1] = varargin_8[1];
    b_this->MotionTypes[1] = varargin_7[1];
    b_this->MotionLengths[2] = varargin_8[2];
    b_this->MotionTypes[2] = varargin_7[2];
    b_this->MotionLengths[3] = varargin_8[3];
    b_this->MotionTypes[3] = varargin_7[3];
    b_this->MotionTypes[0].f1.size[0] = 1;
    b_this->MotionTypes[0].f1.size[1] = varargin_7[0].f1.size[1];
    for (k = 0; k <= static_cast<int32_T>(varargin_7[0].f1.size[1] - 1); k =
            static_cast<int32_T>(k + 1)) {
        b_this->MotionTypes[0].f1.data[k] = d[static_cast<int32_T>(static_cast<
            uint8_T>(varargin_7[0].f1.data[k]))];
    }

    b_this->MotionTypes[1].f1.size[0] = 1;
    b_this->MotionTypes[1].f1.size[1] = 1;
    b_this->MotionTypes[1].f1.data[0] = d[static_cast<int32_T>
        (static_cast<int32_T>(static_cast<uint8_T>(varargin_7[1].f1.data[0])) &
         127)];
    b_this->MotionTypes[2].f1.size[0] = 1;
    b_this->MotionTypes[2].f1.size[1] = 1;
    b_this->MotionTypes[2].f1.data[0] = d[static_cast<int32_T>
        (static_cast<int32_T>(static_cast<uint8_T>(varargin_7[2].f1.data[0])) &
         127)];
    b_this->MotionTypes[3].f1.size[0] = 1;
    b_this->MotionTypes[3].f1.size[1] = varargin_7[3].f1.size[1];
    for (k = 0; k <= static_cast<int32_T>(varargin_7[3].f1.size[1] - 1); k =
            static_cast<int32_T>(k + 1)) {
        b_this->MotionTypes[3].f1.data[k] = d[static_cast<int32_T>
            (static_cast<uint8_T>(varargin_7[3].f1.data[k]))];
    }

    if (FlightMissionMode_strcmp(b_this->MotionTypes[0].f1.data,
            b_this->MotionTypes[0].f1.size)) {
        b_this->MotionTypes[0].f1.size[0] = 1;
        b_this->MotionTypes[0].f1.size[1] = 2;
        b_this->MotionTypes[0].f1.data[0] = 'H';
        b_this->MotionTypes[0].f1.data[1] = 'l';
    } else if (FlightMissionMode_strcmp_b(b_this->MotionTypes[0].f1.data,
                b_this->MotionTypes[0].f1.size)) {
        b_this->MotionTypes[0].f1.size[0] = 1;
        b_this->MotionTypes[0].f1.size[1] = 2;
        b_this->MotionTypes[0].f1.data[0] = 'H';
        b_this->MotionTypes[0].f1.data[1] = 'r';
    } else if (FlightMissionMode_strcmp_b(b_this->MotionTypes[3].f1.data,
                b_this->MotionTypes[3].f1.size)) {
        b_this->MotionTypes[3].f1.size[0] = 1;
        b_this->MotionTypes[3].f1.size[1] = 2;
        b_this->MotionTypes[3].f1.data[0] = 'H';
        b_this->MotionTypes[3].f1.data[1] = 'r';
    } else if (FlightMissionMode_strcmp(b_this->MotionTypes[3].f1.data,
                b_this->MotionTypes[3].f1.size)) {
        b_this->MotionTypes[3].f1.size[0] = 1;
        b_this->MotionTypes[3].f1.size[1] = 2;
        b_this->MotionTypes[3].f1.data[0] = 'H';
        b_this->MotionTypes[3].f1.data[1] = 'l';
    }

    b_this->Length = ((varargin_8[0] + varargin_8[1]) + varargin_8[2]) +
        varargin_8[3];
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_uavDubinsBuiltins_connect(const
    uavDubinsConnection_FlightMissionMode_T *obj, const real_T startPose[4],
    const real_T goalPose[4], real_T turningRadius, const real_T dpt_data[],
    const int32_T *dpt_size, uavDubinsPathSegment_FlightMissionMode_T
    *pathSegObjs, real_T *pathCosts)
{
    void* b_obj_UAVDubinsBuildableObj;
    cell_wrap_1_FlightMissionMode_T ac;
    cell_wrap_1_FlightMissionMode_T ad;
    cell_wrap_1_FlightMissionMode_T ae;
    cell_wrap_1_FlightMissionMode_T af;
    cell_wrap_1_FlightMissionMode_T bc;
    cell_wrap_1_FlightMissionMode_T bd;
    cell_wrap_1_FlightMissionMode_T be;
    cell_wrap_1_FlightMissionMode_T bf;
    cell_wrap_1_FlightMissionMode_T cc;
    cell_wrap_1_FlightMissionMode_T cd;
    cell_wrap_1_FlightMissionMode_T ce;
    cell_wrap_1_FlightMissionMode_T cf;
    cell_wrap_1_FlightMissionMode_T dc;
    cell_wrap_1_FlightMissionMode_T dd;
    cell_wrap_1_FlightMissionMode_T de;
    cell_wrap_1_FlightMissionMode_T df;
    cell_wrap_1_FlightMissionMode_T ec;
    cell_wrap_1_FlightMissionMode_T ed;
    cell_wrap_1_FlightMissionMode_T ee;
    cell_wrap_1_FlightMissionMode_T ef;
    cell_wrap_1_FlightMissionMode_T fc;
    cell_wrap_1_FlightMissionMode_T fd;
    cell_wrap_1_FlightMissionMode_T fe;
    cell_wrap_1_FlightMissionMode_T ff;
    cell_wrap_1_FlightMissionMode_T gc;
    cell_wrap_1_FlightMissionMode_T gd;
    cell_wrap_1_FlightMissionMode_T ge;
    cell_wrap_1_FlightMissionMode_T gf;
    cell_wrap_1_FlightMissionMode_T hc;
    cell_wrap_1_FlightMissionMode_T hd;
    cell_wrap_1_FlightMissionMode_T he;
    cell_wrap_1_FlightMissionMode_T hf;
    cell_wrap_1_FlightMissionMode_T ib;
    cell_wrap_1_FlightMissionMode_T ic;
    cell_wrap_1_FlightMissionMode_T id;
    cell_wrap_1_FlightMissionMode_T ie;
    cell_wrap_1_FlightMissionMode_T jb;
    cell_wrap_1_FlightMissionMode_T jc;
    cell_wrap_1_FlightMissionMode_T jd;
    cell_wrap_1_FlightMissionMode_T je;
    cell_wrap_1_FlightMissionMode_T jf;
    cell_wrap_1_FlightMissionMode_T kb;
    cell_wrap_1_FlightMissionMode_T kc;
    cell_wrap_1_FlightMissionMode_T kd;
    cell_wrap_1_FlightMissionMode_T ke;
    cell_wrap_1_FlightMissionMode_T kf;
    cell_wrap_1_FlightMissionMode_T lb;
    cell_wrap_1_FlightMissionMode_T lc;
    cell_wrap_1_FlightMissionMode_T ld;
    cell_wrap_1_FlightMissionMode_T le;
    cell_wrap_1_FlightMissionMode_T lf;
    cell_wrap_1_FlightMissionMode_T mb;
    cell_wrap_1_FlightMissionMode_T mc;
    cell_wrap_1_FlightMissionMode_T md;
    cell_wrap_1_FlightMissionMode_T me;
    cell_wrap_1_FlightMissionMode_T mf;
    cell_wrap_1_FlightMissionMode_T nb;
    cell_wrap_1_FlightMissionMode_T nc;
    cell_wrap_1_FlightMissionMode_T nd;
    cell_wrap_1_FlightMissionMode_T ne;
    cell_wrap_1_FlightMissionMode_T nf;
    cell_wrap_1_FlightMissionMode_T ob;
    cell_wrap_1_FlightMissionMode_T oc;
    cell_wrap_1_FlightMissionMode_T od;
    cell_wrap_1_FlightMissionMode_T oe;
    cell_wrap_1_FlightMissionMode_T of;
    cell_wrap_1_FlightMissionMode_T pb;
    cell_wrap_1_FlightMissionMode_T pc;
    cell_wrap_1_FlightMissionMode_T pd;
    cell_wrap_1_FlightMissionMode_T pe;
    cell_wrap_1_FlightMissionMode_T pf;
    cell_wrap_1_FlightMissionMode_T qb;
    cell_wrap_1_FlightMissionMode_T qc;
    cell_wrap_1_FlightMissionMode_T qd;
    cell_wrap_1_FlightMissionMode_T qe;
    cell_wrap_1_FlightMissionMode_T qf;
    cell_wrap_1_FlightMissionMode_T rb;
    cell_wrap_1_FlightMissionMode_T rc;
    cell_wrap_1_FlightMissionMode_T rd;
    cell_wrap_1_FlightMissionMode_T re;
    cell_wrap_1_FlightMissionMode_T rf;
    cell_wrap_1_FlightMissionMode_T sb;
    cell_wrap_1_FlightMissionMode_T sc;
    cell_wrap_1_FlightMissionMode_T sd;
    cell_wrap_1_FlightMissionMode_T se;
    cell_wrap_1_FlightMissionMode_T sf;
    cell_wrap_1_FlightMissionMode_T tb;
    cell_wrap_1_FlightMissionMode_T tc;
    cell_wrap_1_FlightMissionMode_T td;
    cell_wrap_1_FlightMissionMode_T te;
    cell_wrap_1_FlightMissionMode_T tf;
    cell_wrap_1_FlightMissionMode_T ub;
    cell_wrap_1_FlightMissionMode_T uc;
    cell_wrap_1_FlightMissionMode_T ud;
    cell_wrap_1_FlightMissionMode_T ue;
    cell_wrap_1_FlightMissionMode_T uf;
    cell_wrap_1_FlightMissionMode_T vb;
    cell_wrap_1_FlightMissionMode_T vc;
    cell_wrap_1_FlightMissionMode_T vd;
    cell_wrap_1_FlightMissionMode_T ve;
    cell_wrap_1_FlightMissionMode_T wb;
    cell_wrap_1_FlightMissionMode_T wc;
    cell_wrap_1_FlightMissionMode_T wd;
    cell_wrap_1_FlightMissionMode_T we;
    cell_wrap_1_FlightMissionMode_T xb;
    cell_wrap_1_FlightMissionMode_T xc;
    cell_wrap_1_FlightMissionMode_T xd;
    cell_wrap_1_FlightMissionMode_T xe;
    cell_wrap_1_FlightMissionMode_T yb;
    cell_wrap_1_FlightMissionMode_T yc;
    cell_wrap_1_FlightMissionMode_T yd;
    cell_wrap_1_FlightMissionMode_T ye;
    cell_wrap_22_FlightMissionMode_T motionTypes[28];
    cell_wrap_22_FlightMissionMode_T b;
    real_T g[16];
    real_T ml[16];
    real_T ml1[16];
    real_T s[16];
    real_T b_goalPose[4];
    real_T b_startPose[4];
    real_T ml1_0[4];
    real_T b_a;
    real_T b_fpa;
    real_T h;
    real_T mt;
    real_T mtr;
    ib.f1.size[0] = 1;
    ib.f1.size[1] = 1;
    ib.f1.data[0] = 'L';
    jb.f1.size[0] = 1;
    jb.f1.size[1] = 1;
    jb.f1.data[0] = 'S';
    kb.f1.size[0] = 1;
    kb.f1.size[1] = 1;
    kb.f1.data[0] = 'L';
    lb.f1.size[0] = 1;
    lb.f1.size[1] = 1;
    lb.f1.data[0] = 'N';
    b.f1[0] = ib;
    b.f1[1] = jb;
    b.f1[2] = kb;
    b.f1[3] = lb;
    mb.f1.size[0] = 1;
    mb.f1.size[1] = 1;
    mb.f1.data[0] = 'L';
    nb.f1.size[0] = 1;
    nb.f1.size[1] = 1;
    nb.f1.data[0] = 'S';
    ob.f1.size[0] = 1;
    ob.f1.size[1] = 1;
    ob.f1.data[0] = 'R';
    pb.f1.size[0] = 1;
    pb.f1.size[1] = 1;
    pb.f1.data[0] = 'N';
    qb.f1.size[0] = 1;
    qb.f1.size[1] = 1;
    qb.f1.data[0] = 'R';
    rb.f1.size[0] = 1;
    rb.f1.size[1] = 1;
    rb.f1.data[0] = 'S';
    sb.f1.size[0] = 1;
    sb.f1.size[1] = 1;
    sb.f1.data[0] = 'L';
    tb.f1.size[0] = 1;
    tb.f1.size[1] = 1;
    tb.f1.data[0] = 'N';
    ub.f1.size[0] = 1;
    ub.f1.size[1] = 1;
    ub.f1.data[0] = 'R';
    vb.f1.size[0] = 1;
    vb.f1.size[1] = 1;
    vb.f1.data[0] = 'S';
    wb.f1.size[0] = 1;
    wb.f1.size[1] = 1;
    wb.f1.data[0] = 'R';
    xb.f1.size[0] = 1;
    xb.f1.size[1] = 1;
    xb.f1.data[0] = 'N';
    yb.f1.size[0] = 1;
    yb.f1.size[1] = 1;
    yb.f1.data[0] = 'R';
    ac.f1.size[0] = 1;
    ac.f1.size[1] = 1;
    ac.f1.data[0] = 'L';
    bc.f1.size[0] = 1;
    bc.f1.size[1] = 1;
    bc.f1.data[0] = 'R';
    cc.f1.size[0] = 1;
    cc.f1.size[1] = 1;
    cc.f1.data[0] = 'N';
    dc.f1.size[0] = 1;
    dc.f1.size[1] = 1;
    dc.f1.data[0] = 'L';
    ec.f1.size[0] = 1;
    ec.f1.size[1] = 1;
    ec.f1.data[0] = 'R';
    fc.f1.size[0] = 1;
    fc.f1.size[1] = 1;
    fc.f1.data[0] = 'L';
    gc.f1.size[0] = 1;
    gc.f1.size[1] = 1;
    gc.f1.data[0] = 'N';
    hc.f1.size[0] = 1;
    hc.f1.size[1] = 2;
    ic.f1.size[0] = 1;
    ic.f1.size[1] = 1;
    ic.f1.data[0] = 'L';
    jc.f1.size[0] = 1;
    jc.f1.size[1] = 1;
    jc.f1.data[0] = 'S';
    kc.f1.size[0] = 1;
    kc.f1.size[1] = 1;
    kc.f1.data[0] = 'L';
    lc.f1.size[0] = 1;
    lc.f1.size[1] = 2;
    mc.f1.size[0] = 1;
    mc.f1.size[1] = 1;
    mc.f1.data[0] = 'L';
    nc.f1.size[0] = 1;
    nc.f1.size[1] = 1;
    nc.f1.data[0] = 'S';
    oc.f1.size[0] = 1;
    oc.f1.size[1] = 1;
    oc.f1.data[0] = 'R';
    pc.f1.size[0] = 1;
    pc.f1.size[1] = 2;
    qc.f1.size[0] = 1;
    qc.f1.size[1] = 1;
    qc.f1.data[0] = 'R';
    rc.f1.size[0] = 1;
    rc.f1.size[1] = 1;
    rc.f1.data[0] = 'S';
    sc.f1.size[0] = 1;
    sc.f1.size[1] = 1;
    sc.f1.data[0] = 'L';
    tc.f1.size[0] = 1;
    tc.f1.size[1] = 2;
    uc.f1.size[0] = 1;
    uc.f1.size[1] = 1;
    uc.f1.data[0] = 'R';
    vc.f1.size[0] = 1;
    vc.f1.size[1] = 1;
    vc.f1.data[0] = 'S';
    wc.f1.size[0] = 1;
    wc.f1.size[1] = 1;
    wc.f1.data[0] = 'R';
    xc.f1.size[0] = 1;
    xc.f1.size[1] = 2;
    yc.f1.size[0] = 1;
    yc.f1.size[1] = 1;
    yc.f1.data[0] = 'R';
    ad.f1.size[0] = 1;
    ad.f1.size[1] = 1;
    ad.f1.data[0] = 'L';
    bd.f1.size[0] = 1;
    bd.f1.size[1] = 1;
    bd.f1.data[0] = 'R';
    cd.f1.size[0] = 1;
    cd.f1.size[1] = 2;
    dd.f1.size[0] = 1;
    dd.f1.size[1] = 1;
    dd.f1.data[0] = 'L';
    ed.f1.size[0] = 1;
    ed.f1.size[1] = 1;
    ed.f1.data[0] = 'R';
    fd.f1.size[0] = 1;
    fd.f1.size[1] = 1;
    fd.f1.data[0] = 'L';
    gd.f1.size[0] = 1;
    gd.f1.size[1] = 1;
    gd.f1.data[0] = 'L';
    hd.f1.size[0] = 1;
    hd.f1.size[1] = 1;
    hd.f1.data[0] = 'S';
    id.f1.size[0] = 1;
    id.f1.size[1] = 1;
    id.f1.data[0] = 'L';
    jd.f1.size[0] = 1;
    jd.f1.size[1] = 2;
    kd.f1.size[0] = 1;
    kd.f1.size[1] = 1;
    kd.f1.data[0] = 'L';
    ld.f1.size[0] = 1;
    ld.f1.size[1] = 1;
    ld.f1.data[0] = 'S';
    md.f1.size[0] = 1;
    md.f1.size[1] = 1;
    md.f1.data[0] = 'R';
    nd.f1.size[0] = 1;
    nd.f1.size[1] = 2;
    od.f1.size[0] = 1;
    od.f1.size[1] = 1;
    od.f1.data[0] = 'R';
    pd.f1.size[0] = 1;
    pd.f1.size[1] = 1;
    pd.f1.data[0] = 'S';
    qd.f1.size[0] = 1;
    qd.f1.size[1] = 1;
    qd.f1.data[0] = 'L';
    rd.f1.size[0] = 1;
    rd.f1.size[1] = 2;
    sd.f1.size[0] = 1;
    sd.f1.size[1] = 1;
    sd.f1.data[0] = 'R';
    td.f1.size[0] = 1;
    td.f1.size[1] = 1;
    td.f1.data[0] = 'S';
    ud.f1.size[0] = 1;
    ud.f1.size[1] = 1;
    ud.f1.data[0] = 'R';
    vd.f1.size[0] = 1;
    vd.f1.size[1] = 2;
    wd.f1.size[0] = 1;
    wd.f1.size[1] = 1;
    wd.f1.data[0] = 'R';
    xd.f1.size[0] = 1;
    xd.f1.size[1] = 1;
    xd.f1.data[0] = 'L';
    yd.f1.size[0] = 1;
    yd.f1.size[1] = 1;
    yd.f1.data[0] = 'R';
    ae.f1.size[0] = 1;
    ae.f1.size[1] = 2;
    be.f1.size[0] = 1;
    be.f1.size[1] = 1;
    be.f1.data[0] = 'L';
    ce.f1.size[0] = 1;
    ce.f1.size[1] = 1;
    ce.f1.data[0] = 'R';
    de.f1.size[0] = 1;
    de.f1.size[1] = 1;
    de.f1.data[0] = 'L';
    ee.f1.size[0] = 1;
    ee.f1.size[1] = 2;
    hc.f1.data[0] = 'H';
    lc.f1.data[0] = 'H';
    pc.f1.data[0] = 'H';
    tc.f1.data[0] = 'H';
    xc.f1.data[0] = 'H';
    cd.f1.data[0] = 'H';
    jd.f1.data[0] = 'H';
    nd.f1.data[0] = 'H';
    rd.f1.data[0] = 'H';
    vd.f1.data[0] = 'H';
    ae.f1.data[0] = 'H';
    ee.f1.data[0] = 'H';
    hc.f1.data[1] = 'l';
    lc.f1.data[1] = 'l';
    pc.f1.data[1] = 'r';
    tc.f1.data[1] = 'r';
    xc.f1.data[1] = 'r';
    cd.f1.data[1] = 'l';
    jd.f1.data[1] = 'l';
    nd.f1.data[1] = 'r';
    rd.f1.data[1] = 'l';
    vd.f1.data[1] = 'r';
    ae.f1.data[1] = 'r';
    ee.f1.data[1] = 'l';
    fe.f1.size[0] = 1;
    fe.f1.size[1] = 1;
    fe.f1.data[0] = 'L';
    ge.f1.size[0] = 1;
    ge.f1.size[1] = 1;
    ge.f1.data[0] = 'R';
    he.f1.size[0] = 1;
    he.f1.size[1] = 1;
    he.f1.data[0] = 'S';
    ie.f1.size[0] = 1;
    ie.f1.size[1] = 1;
    ie.f1.data[0] = 'L';
    je.f1.size[0] = 1;
    je.f1.size[1] = 1;
    je.f1.data[0] = 'L';
    ke.f1.size[0] = 1;
    ke.f1.size[1] = 1;
    ke.f1.data[0] = 'R';
    le.f1.size[0] = 1;
    le.f1.size[1] = 1;
    le.f1.data[0] = 'S';
    me.f1.size[0] = 1;
    me.f1.size[1] = 1;
    me.f1.data[0] = 'R';
    ne.f1.size[0] = 1;
    ne.f1.size[1] = 1;
    ne.f1.data[0] = 'L';
    oe.f1.size[0] = 1;
    oe.f1.size[1] = 1;
    oe.f1.data[0] = 'R';
    pe.f1.size[0] = 1;
    pe.f1.size[1] = 1;
    pe.f1.data[0] = 'L';
    qe.f1.size[0] = 1;
    qe.f1.size[1] = 1;
    qe.f1.data[0] = 'R';
    re.f1.size[0] = 1;
    re.f1.size[1] = 1;
    re.f1.data[0] = 'R';
    se.f1.size[0] = 1;
    se.f1.size[1] = 1;
    se.f1.data[0] = 'L';
    te.f1.size[0] = 1;
    te.f1.size[1] = 1;
    te.f1.data[0] = 'S';
    ue.f1.size[0] = 1;
    ue.f1.size[1] = 1;
    ue.f1.data[0] = 'R';
    ve.f1.size[0] = 1;
    ve.f1.size[1] = 1;
    ve.f1.data[0] = 'R';
    we.f1.size[0] = 1;
    we.f1.size[1] = 1;
    we.f1.data[0] = 'L';
    xe.f1.size[0] = 1;
    xe.f1.size[1] = 1;
    xe.f1.data[0] = 'R';
    ye.f1.size[0] = 1;
    ye.f1.size[1] = 1;
    ye.f1.data[0] = 'L';
    af.f1.size[0] = 1;
    af.f1.size[1] = 1;
    af.f1.data[0] = 'R';
    bf.f1.size[0] = 1;
    bf.f1.size[1] = 1;
    bf.f1.data[0] = 'L';
    cf.f1.size[0] = 1;
    cf.f1.size[1] = 1;
    cf.f1.data[0] = 'S';
    df.f1.size[0] = 1;
    df.f1.size[1] = 1;
    df.f1.data[0] = 'L';
    ef.f1.size[0] = 1;
    ef.f1.size[1] = 1;
    ef.f1.data[0] = 'L';
    ff.f1.size[0] = 1;
    ff.f1.size[1] = 1;
    ff.f1.data[0] = 'S';
    gf.f1.size[0] = 1;
    gf.f1.size[1] = 1;
    gf.f1.data[0] = 'R';
    hf.f1.size[0] = 1;
    hf.f1.size[1] = 1;
    hf.f1.data[0] = 'L';
    jf.f1.size[0] = 1;
    jf.f1.size[1] = 1;
    jf.f1.data[0] = 'R';
    kf.f1.size[0] = 1;
    kf.f1.size[1] = 1;
    kf.f1.data[0] = 'S';
    lf.f1.size[0] = 1;
    lf.f1.size[1] = 1;
    lf.f1.data[0] = 'R';
    mf.f1.size[0] = 1;
    mf.f1.size[1] = 1;
    mf.f1.data[0] = 'L';
    nf.f1.size[0] = 1;
    nf.f1.size[1] = 1;
    nf.f1.data[0] = 'L';
    of.f1.size[0] = 1;
    of.f1.size[1] = 1;
    of.f1.data[0] = 'S';
    pf.f1.size[0] = 1;
    pf.f1.size[1] = 1;
    pf.f1.data[0] = 'L';
    qf.f1.size[0] = 1;
    qf.f1.size[1] = 1;
    qf.f1.data[0] = 'R';
    rf.f1.size[0] = 1;
    rf.f1.size[1] = 1;
    rf.f1.data[0] = 'R';
    sf.f1.size[0] = 1;
    sf.f1.size[1] = 1;
    sf.f1.data[0] = 'S';
    tf.f1.size[0] = 1;
    tf.f1.size[1] = 1;
    tf.f1.data[0] = 'L';
    uf.f1.size[0] = 1;
    uf.f1.size[1] = 1;
    uf.f1.data[0] = 'R';
    motionTypes[0] = b;
    b_obj_UAVDubinsBuildableObj =
        FlightMissionMode_uavDubinsBuildable_uavDubinsBuildable(obj->AirSpeed,
        obj->MaxRollAngle, obj->FlightPathAngleLimit, dpt_data, dpt_size);
    b_startPose[0] = startPose[0];
    b_goalPose[0] = goalPose[0];
    b_startPose[1] = startPose[1];
    b_goalPose[1] = goalPose[1];
    b_startPose[2] = startPose[2];
    b_goalPose[2] = goalPose[2];
    b_startPose[3] = startPose[3];
    b_goalPose[3] = goalPose[3];
    uavDubinsDistanceCodegen_real64(b_obj_UAVDubinsBuildableObj, &b_startPose[0],
        1U, &b_goalPose[0], 1U, true, turningRadius, &s[0], &g[0], &b_fpa, &b_a,
        &mtr, &h, &mt, &ml[0]);
    for (int32_T i{0}; i < 4; i++) {
        int32_T ml1_tmp;
        ml1_tmp = static_cast<int32_T>(i << 2);
        ml1[ml1_tmp] = ml[i];
        ml1[static_cast<int32_T>(ml1_tmp + 1)] = ml[static_cast<int32_T>(i + 4)];
        ml1[static_cast<int32_T>(ml1_tmp + 2)] = ml[static_cast<int32_T>(i + 8)];
        ml1[static_cast<int32_T>(ml1_tmp + 3)] = ml[static_cast<int32_T>(i + 12)];
    }

    if (mt + 1.0 == 2.0) {
        motionTypes[0].f1[0] = mb;
        motionTypes[0].f1[1] = nb;
        motionTypes[0].f1[2] = ob;
        motionTypes[0].f1[3] = pb;
    }

    if (mt + 1.0 == 3.0) {
        motionTypes[0].f1[0] = qb;
        motionTypes[0].f1[1] = rb;
        motionTypes[0].f1[2] = sb;
        motionTypes[0].f1[3] = tb;
    }

    if (mt + 1.0 == 4.0) {
        motionTypes[0].f1[0] = ub;
        motionTypes[0].f1[1] = vb;
        motionTypes[0].f1[2] = wb;
        motionTypes[0].f1[3] = xb;
    }

    if (mt + 1.0 == 5.0) {
        motionTypes[0].f1[0] = yb;
        motionTypes[0].f1[1] = ac;
        motionTypes[0].f1[2] = bc;
        motionTypes[0].f1[3] = cc;
    }

    if (mt + 1.0 == 6.0) {
        motionTypes[0].f1[0] = dc;
        motionTypes[0].f1[1] = ec;
        motionTypes[0].f1[2] = fc;
        motionTypes[0].f1[3] = gc;
    }

    if (mt + 1.0 == 7.0) {
        motionTypes[0].f1[0] = hc;
        motionTypes[0].f1[1] = ic;
        motionTypes[0].f1[2] = jc;
        motionTypes[0].f1[3] = kc;
    }

    if (mt + 1.0 == 8.0) {
        motionTypes[0].f1[0] = lc;
        motionTypes[0].f1[1] = mc;
        motionTypes[0].f1[2] = nc;
        motionTypes[0].f1[3] = oc;
    }

    if (mt + 1.0 == 9.0) {
        motionTypes[0].f1[0] = pc;
        motionTypes[0].f1[1] = qc;
        motionTypes[0].f1[2] = rc;
        motionTypes[0].f1[3] = sc;
    }

    if (mt + 1.0 == 10.0) {
        motionTypes[0].f1[0] = tc;
        motionTypes[0].f1[1] = uc;
        motionTypes[0].f1[2] = vc;
        motionTypes[0].f1[3] = wc;
    }

    if (mt + 1.0 == 11.0) {
        motionTypes[0].f1[0] = xc;
        motionTypes[0].f1[1] = yc;
        motionTypes[0].f1[2] = ad;
        motionTypes[0].f1[3] = bd;
    }

    if (mt + 1.0 == 12.0) {
        motionTypes[0].f1[0] = cd;
        motionTypes[0].f1[1] = dd;
        motionTypes[0].f1[2] = ed;
        motionTypes[0].f1[3] = fd;
    }

    if (mt + 1.0 == 13.0) {
        motionTypes[0].f1[0] = gd;
        motionTypes[0].f1[1] = hd;
        motionTypes[0].f1[2] = id;
        motionTypes[0].f1[3] = jd;
    }

    if (mt + 1.0 == 14.0) {
        motionTypes[0].f1[0] = kd;
        motionTypes[0].f1[1] = ld;
        motionTypes[0].f1[2] = md;
        motionTypes[0].f1[3] = nd;
    }

    if (mt + 1.0 == 15.0) {
        motionTypes[0].f1[0] = od;
        motionTypes[0].f1[1] = pd;
        motionTypes[0].f1[2] = qd;
        motionTypes[0].f1[3] = rd;
    }

    if (mt + 1.0 == 16.0) {
        motionTypes[0].f1[0] = sd;
        motionTypes[0].f1[1] = td;
        motionTypes[0].f1[2] = ud;
        motionTypes[0].f1[3] = vd;
    }

    if (mt + 1.0 == 17.0) {
        motionTypes[0].f1[0] = wd;
        motionTypes[0].f1[1] = xd;
        motionTypes[0].f1[2] = yd;
        motionTypes[0].f1[3] = ae;
    }

    if (mt + 1.0 == 18.0) {
        motionTypes[0].f1[0] = be;
        motionTypes[0].f1[1] = ce;
        motionTypes[0].f1[2] = de;
        motionTypes[0].f1[3] = ee;
    }

    if (mt + 1.0 == 19.0) {
        motionTypes[0].f1[0] = fe;
        motionTypes[0].f1[1] = ge;
        motionTypes[0].f1[2] = he;
        motionTypes[0].f1[3] = ie;
    }

    if (mt + 1.0 == 20.0) {
        motionTypes[0].f1[0] = je;
        motionTypes[0].f1[1] = ke;
        motionTypes[0].f1[2] = le;
        motionTypes[0].f1[3] = me;
    }

    if (mt + 1.0 == 21.0) {
        motionTypes[0].f1[0] = ne;
        motionTypes[0].f1[1] = oe;
        motionTypes[0].f1[2] = pe;
        motionTypes[0].f1[3] = qe;
    }

    if (mt + 1.0 == 22.0) {
        motionTypes[0].f1[0] = re;
        motionTypes[0].f1[1] = se;
        motionTypes[0].f1[2] = te;
        motionTypes[0].f1[3] = ue;
    }

    if (mt + 1.0 == 23.0) {
        motionTypes[0].f1[0] = ve;
        motionTypes[0].f1[1] = we;
        motionTypes[0].f1[2] = xe;
        motionTypes[0].f1[3] = ye;
    }

    if (mt + 1.0 == 24.0) {
        motionTypes[0].f1[0] = af;
        motionTypes[0].f1[1] = bf;
        motionTypes[0].f1[2] = cf;
        motionTypes[0].f1[3] = df;
    }

    if (mt + 1.0 == 25.0) {
        motionTypes[0].f1[0] = ef;
        motionTypes[0].f1[1] = ff;
        motionTypes[0].f1[2] = gf;
        motionTypes[0].f1[3] = hf;
    }

    if (mt + 1.0 == 26.0) {
        motionTypes[0].f1[0] = jf;
        motionTypes[0].f1[1] = kf;
        motionTypes[0].f1[2] = lf;
        motionTypes[0].f1[3] = mf;
    }

    if (mt + 1.0 == 27.0) {
        motionTypes[0].f1[0] = nf;
        motionTypes[0].f1[1] = of;
        motionTypes[0].f1[2] = pf;
        motionTypes[0].f1[3] = qf;
    }

    if (mt + 1.0 == 28.0) {
        motionTypes[0].f1[0] = rf;
        motionTypes[0].f1[1] = sf;
        motionTypes[0].f1[2] = tf;
        motionTypes[0].f1[3] = uf;
    }

    b_startPose[0] = s[0];
    b_goalPose[0] = g[0];
    ml1_0[0] = ml1[0];
    b_startPose[1] = s[1];
    b_goalPose[1] = g[1];
    ml1_0[1] = ml1[4];
    b_startPose[2] = s[2];
    b_goalPose[2] = g[2];
    ml1_0[2] = ml1[8];
    b_startPose[3] = s[3];
    b_goalPose[3] = g[3];
    ml1_0[3] = ml1[12];
    FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_o(b_startPose,
        b_goalPose, b_fpa, b_a, mtr, h, motionTypes[0].f1, ml1_0, pathSegObjs);
    ml1_0[0] = ml1[0];
    ml1_0[1] = ml1[4];
    ml1_0[2] = ml1[8];
    ml1_0[3] = ml1[12];
    *pathCosts = sum_4Il0TNcY(ml1_0);
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_uavDubinsConnection_connect(const
    uavDubinsConnection_FlightMissionMode_T *obj, const real_T startPoses[4],
    const real_T goalPoses[4], uavDubinsPathSegment_FlightMissionMode_T
    *pathSegObjs, real_T *pathCosts)
{
    real_T a__1_data[28];
    real_T iia_data_0[28];
    int32_T iia_data[28];
    int32_T a__1_size[2];
    int32_T ib_size;
    int32_T iia_size;
    int32_T iia_size_0;
    FlightMissionMode_do_vectors(a__1_data, a__1_size, iia_data, &iia_size,
        &ib_size);
    iia_size_0 = iia_size;
    for (ib_size = 0; ib_size <= static_cast<int32_T>(iia_size - 1); ib_size++)
    {
        iia_data_0[ib_size] = static_cast<real_T>(iia_data[ib_size]);
    }

    FlightMissionMode_do_vectors_h(iia_data_0, &iia_size_0, a__1_data, a__1_size,
        iia_data, &iia_size, &ib_size);
    for (ib_size = 0; ib_size <= static_cast<int32_T>(iia_size - 1); ib_size++)
    {
        iia_data_0[ib_size] = static_cast<real_T>(iia_data[ib_size]);
    }

    FlightMissionMode_sort_a(iia_data_0, &iia_size);
    for (ib_size = 0; ib_size <= static_cast<int32_T>(iia_size - 1); ib_size++)
    {
        a__1_data[ib_size] = iia_data_0[ib_size] - 1.0;
    }

    FlightMissionMode_uavDubinsBuiltins_connect(obj, startPoses, goalPoses,
        obj->MinTurningRadius, a__1_data, &iia_size, pathSegObjs, pathCosts);
}

static void FlightMissionMode_emxInit_real_T_d
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_real_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_real_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (real_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_strcmp_bk(const cell_wrap_1_FlightMissionMode_T a
    [4], boolean_T b_bool[4])
{
    b_bool[0] = false;
    if ((a[0].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[0].f1.data[0] != 'N') ^ 1)))) {
        b_bool[0] = true;
    }

    b_bool[1] = false;
    if ((a[1].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[1].f1.data[0] != 'N') ^ 1)))) {
        b_bool[1] = true;
    }

    b_bool[2] = false;
    if ((a[2].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[2].f1.data[0] != 'N') ^ 1)))) {
        b_bool[2] = true;
    }

    b_bool[3] = false;
    if ((a[3].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[3].f1.data[0] != 'N') ^ 1)))) {
        b_bool[3] = true;
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static boolean_T FlightMissionMode_any(const boolean_T x[4])
{
    int32_T k;
    boolean_T exitg1;
    boolean_T y;
    y = false;
    k = 0;
    exitg1 = false;
    while ((!exitg1) && (k < 4)) {
        if (x[k]) {
            y = true;
            exitg1 = true;
        } else {
            k = static_cast<int32_T>(k + 1);
        }
    }

    return y;
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_useConstantDim(const real_T varargin_2_data[],
    const int32_T varargin_2_size[2], real_T varargout_1_data[], int32_T
    varargout_1_size[2])
{
    int32_T loop_ub;
    varargout_1_size[0] = 1;
    varargout_1_size[1] = varargin_2_size[1];
    loop_ub = static_cast<int32_T>(varargin_2_size[1] - 1);
    for (int32_T varargout_1_data_tmp{0}; varargout_1_data_tmp <= loop_ub;
            varargout_1_data_tmp++) {
        varargout_1_data[varargout_1_data_tmp] =
            varargin_2_data[varargout_1_data_tmp];
    }

    for (loop_ub = 0; loop_ub <= static_cast<int32_T>(varargin_2_size[1] - 2);
            loop_ub = static_cast<int32_T>(loop_ub + 1)) {
        varargout_1_data[static_cast<int32_T>(loop_ub + 1)] +=
            varargout_1_data[loop_ub];
    }
}

static void FlightMissionMode_emxInit_real_T1
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_real_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_real_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (real_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxFree_real_T_m
    (emxArray_real_T_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_real_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (real_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)nullptr;
    }
}

static void FlightMissionMode_emxEnsureCapacity_real_T1
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(real_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (real_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (real_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_eml_find(boolean_T x, int32_T i_data[], int32_T
    i_size[2])
{
    if (x) {
        i_size[0] = 1;
        i_size[1] = 1;
        i_data[0] = 1;
    } else {
        i_size[0] = 0;
        i_size[1] = 0;
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static boolean_T FlightMissionMode_strcmp_bkk(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'N') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

static void FlightMissionMode_emxInit_boolean_T1
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_boolean_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_boolean_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_boolean_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (boolean_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_boolean_T1
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(boolean_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (boolean_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (boolean_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxFree_boolean_T
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_boolean_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (boolean_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_boolean_T_FlightMissionMode_T *)nullptr;
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_wrapToPi(emxArray_real_T_FlightMissionMode_T
    *theta)
{
    emxArray_boolean_T_FlightMissionMode_T *x;
    emxArray_real_T_FlightMissionMode_T *y;
    int32_T b_k;
    int32_T loop_ub;
    boolean_T b_y;
    boolean_T exitg1;
    FlightMissionMode_emxInit_real_T1(&y, 1);
    b_k = y->size[0];
    y->size[0] = theta->size[0];
    FlightMissionMode_emxEnsureCapacity_real_T1(y, b_k);
    for (b_k = 0; b_k <= static_cast<int32_T>(theta->size[0] - 1); b_k =
            static_cast<int32_T>(b_k + 1)) {
        y->data[b_k] = std::abs(theta->data[b_k]);
    }

    FlightMissionMode_emxInit_boolean_T1(&x, 1);
    b_k = x->size[0];
    x->size[0] = y->size[0];
    FlightMissionMode_emxEnsureCapacity_boolean_T1(x, b_k);
    loop_ub = y->size[0];
    for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
        x->data[b_k] = (y->data[b_k] > 3.1415926535897931);
    }

    b_y = false;
    b_k = 1;
    exitg1 = false;
    while ((!exitg1) && (b_k <= x->size[0])) {
        if (x->data[static_cast<int32_T>(b_k - 1)]) {
            b_y = true;
            exitg1 = true;
        } else {
            b_k = static_cast<int32_T>(b_k + 1);
        }
    }

    if (b_y) {
        b_k = y->size[0];
        y->size[0] = theta->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T1(y, b_k);
        loop_ub = theta->size[0];
        for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
            y->data[b_k] = theta->data[b_k] + 3.1415926535897931;
        }

        b_k = theta->size[0];
        theta->size[0] = y->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T1(theta, b_k);
        for (b_k = 0; b_k <= static_cast<int32_T>(y->size[0] - 1); b_k =
                static_cast<int32_T>(b_k + 1)) {
            theta->data[b_k] = mod_ZflSpsmf(y->data[b_k]);
        }

        b_k = x->size[0];
        x->size[0] = theta->size[0];
        FlightMissionMode_emxEnsureCapacity_boolean_T1(x, b_k);
        loop_ub = theta->size[0];
        for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
            x->data[b_k] = (theta->data[b_k] == 0.0);
        }

        for (b_k = 0; b_k <= static_cast<int32_T>(x->size[0] - 1); b_k =
                static_cast<int32_T>(b_k + 1)) {
            if (static_cast<boolean_T>(static_cast<int32_T>((y->data[b_k] > 0.0)
                  & static_cast<int32_T>(x->data[b_k])))) {
                theta->data[b_k] = 6.2831853071795862;
            }
        }

        loop_ub = theta->size[0];
        for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
            theta->data[b_k] -= 3.1415926535897931;
        }
    }

    FlightMissionMode_emxFree_boolean_T(&x);
    FlightMissionMode_emxFree_real_T_m(&y);
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static boolean_T FlightMissionMode_strcmp_bkkf(const char_T a_data[], const
    int32_T a_size[2])
{
    static const char_T b[2]{ 'H', 'l' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (a_data[kstr] != b[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static boolean_T FlightMissionMode_strcmp_bkkff(const char_T a_data[], const
    int32_T a_size[2])
{
    static const char_T b[2]{ 'H', 'r' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (a_data[kstr] != b[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static boolean_T FlightMissionMode_strcmp_bkkffz(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'L') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static boolean_T FlightMissionMode_strcmp_bkkffzb(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'R') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static boolean_T FlightMissionMode_strcmp_bkkffzbu(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'S') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

static void FlightMissionMode_emxEnsureCapacity_real_T_d
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(real_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (real_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (real_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_mtimes(const emxArray_real_T_FlightMissionMode_T
    *A, const real_T B[4], emxArray_real_T_FlightMissionMode_T *C)
{
    int32_T i;
    int32_T m;
    m = A->size[0];
    i = static_cast<int32_T>(C->size[0] * C->size[1]);
    C->size[0] = A->size[0];
    C->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_real_T_d(C, i);
    for (i = 0; i <= static_cast<int32_T>(m - 1); i = static_cast<int32_T>(i + 1))
    {
        C->data[i] = A->data[static_cast<int32_T>(A->size[0] + i)] * B[1] +
            A->data[i] * B[0];
    }

    for (i = 0; i <= static_cast<int32_T>(m - 1); i = static_cast<int32_T>(i + 1))
    {
        C->data[static_cast<int32_T>(m + i)] = A->data[static_cast<int32_T>
            (A->size[0] + i)] * B[3] + A->data[i] * B[2];
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_interpolate(const real_T
    b_this_StartPose[4], const real_T b_this_GoalPose[4], real_T
    b_this_FlightPathAngle, real_T b_this_AirSpeed, real_T
    b_this_MinTurningRadius, real_T b_this_HelixRadius, const
    cell_wrap_1_FlightMissionMode_T b_this_MotionTypes[4], const real_T
    b_this_MotionLengths[4], real_T b_this_Length, real_T samples, real_T
    poses_data[], int32_T poses_size[2])
{
    emxArray_real_T_FlightMissionMode_T *S;
    emxArray_real_T_FlightMissionMode_T *c_x;
    emxArray_real_T_FlightMissionMode_T *d_x;
    emxArray_real_T_FlightMissionMode_T *p;
    real_T ns_data[12];
    real_T state[6];
    real_T TransformMatrix[4];
    real_T tempMotionLength_data[4];
    real_T transLength_data[4];
    real_T S_data[2];
    real_T tempSamples_data[2];
    real_T z_data[2];
    int32_T tempMotionLength_size[2];
    int32_T transLength_size[2];
    int32_T o_data;
    boolean_T tmp[4];
    poses_size[0] = 0;
    poses_size[1] = 6;
    if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(std::
            isnan(b_this_Length)) ^ 1))) {
        real_T intermediateLength;
        real_T samples_tmp;
        real_T tempStartPose_idx_2;
        int32_T count;
        int32_T loop_ub;
        int32_T ns_size_idx_0;
        int32_T tempMotionLength_data_tmp;
        tempStartPose_idx_2 = -b_this_StartPose[2];
        poses_size[0] = 1;
        poses_size[1] = 6;
        for (count = 0; count < 6; count++) {
            poses_data[count] = 0.0;
        }

        samples_tmp = std::cos(std::abs(b_this_FlightPathAngle));
        samples *= samples_tmp;
        TransformMatrix[0] = b_this_MotionLengths[0] * samples_tmp;
        TransformMatrix[1] = b_this_MotionLengths[1] * samples_tmp;
        TransformMatrix[2] = b_this_MotionLengths[2] * samples_tmp;
        tempMotionLength_size[0] = 1;
        tempMotionLength_size[1] = 4;
        tempMotionLength_data[0] = TransformMatrix[0];
        tempMotionLength_data[1] = TransformMatrix[1];
        tempMotionLength_data[2] = TransformMatrix[2];
        tempMotionLength_data[3] = b_this_MotionLengths[3] * samples_tmp;
        FlightMissionMode_strcmp_bk(b_this_MotionTypes, tmp);
        if (FlightMissionMode_any(tmp)) {
            tempMotionLength_size[0] = 1;
            tempMotionLength_size[1] = 3;
            tempMotionLength_data[0] = TransformMatrix[0];
            tempMotionLength_data[1] = TransformMatrix[1];
            tempMotionLength_data[2] = TransformMatrix[2];
        }

        FlightMissionMode_useConstantDim(tempMotionLength_data,
            tempMotionLength_size, transLength_data, transLength_size);
        intermediateLength = 0.0;
        state[0] = b_this_StartPose[0];
        state[1] = -b_this_StartPose[1];
        state[3] = -b_this_StartPose[3];
        tempMotionLength_data_tmp = 0;
        FlightMissionMode_emxInit_real_T1(&c_x, 1);
        FlightMissionMode_emxInit_real_T1(&d_x, 1);
        FlightMissionMode_emxInit_real_T_d(&p, 2);
        FlightMissionMode_emxInit_real_T_d(&S, 2);
        while (tempMotionLength_data_tmp <= static_cast<int32_T>
                (tempMotionLength_size[1] - 1)) {
            boolean_T x;
            if (static_cast<int32_T>(tempMotionLength_data_tmp + 1) == 1) {
                x = static_cast<boolean_T>(static_cast<int32_T>((samples <=
                    (intermediateLength + tempMotionLength_data[0]) + 1.0E-6) &
                    (samples >= intermediateLength)));
            } else {
                x = static_cast<boolean_T>(static_cast<int32_T>((samples <=
                    (intermediateLength +
                     tempMotionLength_data[tempMotionLength_data_tmp]) + 1.0E-6)
                    & (samples > intermediateLength)));
            }

            FlightMissionMode_eml_find(x, &o_data, transLength_size);
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (FlightMissionMode_strcmp_bkk
                     (b_this_MotionTypes[tempMotionLength_data_tmp].f1.data,
                      b_this_MotionTypes[tempMotionLength_data_tmp].f1.size)) ^
                    1))) {
                real_T TransformMatrix_tmp;
                real_T TransformMatrix_tmp_0;
                real_T radius;
                int32_T tempSamples_size_idx_0;
                radius = b_this_MinTurningRadius;
                if (FlightMissionMode_strcmp_bkkf
                        (b_this_MotionTypes[tempMotionLength_data_tmp].f1.data,
                         b_this_MotionTypes[tempMotionLength_data_tmp].f1.size))
                {
                    radius = b_this_HelixRadius;
                } else if (FlightMissionMode_strcmp_bkkff
                           (b_this_MotionTypes[tempMotionLength_data_tmp].
                            f1.data,
                            b_this_MotionTypes[tempMotionLength_data_tmp].
                            f1.size)) {
                    radius = b_this_HelixRadius;
                }

                count = 0;
                tempSamples_size_idx_0 = 1;
                tempSamples_data[0] = 0.0;
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           ((transLength_size[0] != 0) &
                                            (transLength_size[1] != 0)))) {
                    tempSamples_size_idx_0 = 2;
                    tempSamples_data[1] = 0.0;
                    count = 1;
                    tempSamples_data[0] = samples;
                    samples = -1.0;
                }

                tempSamples_data[count] =
                    transLength_data[tempMotionLength_data_tmp];
                for (count = 0; count <= static_cast<int32_T>
                        (tempSamples_size_idx_0 - 1); count++) {
                    S_data[count] = (tempSamples_data[count] -
                                     intermediateLength) / radius;
                }

                ns_size_idx_0 = tempSamples_size_idx_0;
                loop_ub = static_cast<int32_T>(static_cast<int32_T>
                    (tempSamples_size_idx_0 * 6) - 1);
                for (count = 0; count <= loop_ub; count++) {
                    ns_data[count] = 0.0;
                }

                for (count = 0; count <= static_cast<int32_T>
                        (tempSamples_size_idx_0 - 1); count++) {
                    z_data[count] = tempStartPose_idx_2 + tempSamples_data[count];
                }

                TransformMatrix_tmp = std::sin(state[3]);
                TransformMatrix_tmp_0 = std::cos(state[3]);
                TransformMatrix[0] = TransformMatrix_tmp_0;
                TransformMatrix[2] = TransformMatrix_tmp;
                TransformMatrix[1] = -TransformMatrix_tmp;
                TransformMatrix[3] = TransformMatrix_tmp_0;
                if (b_this_Length != 0.0) {
                    TransformMatrix_tmp = -b_this_GoalPose[2] -
                        tempStartPose_idx_2;
                    TransformMatrix_tmp_0 = b_this_Length * samples_tmp;
                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        z_data[count] = tempSamples_data[count] /
                            TransformMatrix_tmp_0 * TransformMatrix_tmp +
                            tempStartPose_idx_2;
                    }
                }

                for (count = 0; count <= static_cast<int32_T>
                        (tempSamples_size_idx_0 - 1); count++) {
                    tempSamples_data[count] = b_this_FlightPathAngle;
                }

                if (FlightMissionMode_strcmp_bkkf
                        (b_this_MotionTypes[tempMotionLength_data_tmp].f1.data,
                         b_this_MotionTypes[tempMotionLength_data_tmp].f1.size) ||
                    FlightMissionMode_strcmp_bkkffz
                        (b_this_MotionTypes[tempMotionLength_data_tmp].f1.data,
                         b_this_MotionTypes[tempMotionLength_data_tmp].f1.size))
                {
                    real_T state_0;
                    real_T state_1;
                    ns_size_idx_0 = c_x->size[0];
                    c_x->size[0] = tempSamples_size_idx_0;
                    FlightMissionMode_emxEnsureCapacity_real_T1(c_x,
                        ns_size_idx_0);
                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        c_x->data[count] = S_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count =
                            static_cast<int32_T>(count + 1)) {
                        c_x->data[count] = std::sin(c_x->data[count]);
                    }

                    ns_size_idx_0 = d_x->size[0];
                    d_x->size[0] = tempSamples_size_idx_0;
                    FlightMissionMode_emxEnsureCapacity_real_T1(d_x,
                        ns_size_idx_0);
                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        d_x->data[count] = S_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count =
                            static_cast<int32_T>(count + 1)) {
                        d_x->data[count] = std::cos(d_x->data[count]);
                    }

                    ns_size_idx_0 = static_cast<int32_T>(S->size[0] * S->size[1]);
                    S->size[0] = c_x->size[0];
                    S->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_d(S,
                        ns_size_idx_0);
                    loop_ub = c_x->size[0];
                    for (count = 0; count <= static_cast<int32_T>(loop_ub - 1);
                            count++) {
                        S->data[count] = c_x->data[count];
                    }

                    loop_ub = d_x->size[0];
                    for (count = 0; count <= static_cast<int32_T>(loop_ub - 1);
                            count++) {
                        S->data[static_cast<int32_T>(count + c_x->size[0])] =
                            1.0 - d_x->data[count];
                    }

                    FlightMissionMode_mtimes(S, TransformMatrix, p);
                    TransformMatrix_tmp = -rt_atan2d_snf(b_this_AirSpeed *
                        b_this_AirSpeed, 9.8 * radius);
                    TransformMatrix_tmp_0 = state[0];
                    state_0 = state[1];
                    state_1 = state[3];
                    loop_ub = p->size[0];
                    ns_size_idx_0 = p->size[0];
                    for (count = 0; count <= static_cast<int32_T>(loop_ub - 1);
                            count++) {
                        ns_data[count] = p->data[count] * radius +
                            TransformMatrix_tmp_0;
                        ns_data[static_cast<int32_T>(count + ns_size_idx_0)] =
                            p->data[static_cast<int32_T>(count + p->size[0])] *
                            radius + state_0;
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 << 1))] = z_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 * 3))] = state_1 + S_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 << 2))] = tempSamples_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 * 5))] = TransformMatrix_tmp;
                    }
                } else if (FlightMissionMode_strcmp_bkkff
                           (b_this_MotionTypes[tempMotionLength_data_tmp].
                            f1.data,
                            b_this_MotionTypes[tempMotionLength_data_tmp].
                            f1.size) || FlightMissionMode_strcmp_bkkffzb
                           (b_this_MotionTypes[tempMotionLength_data_tmp].
                            f1.data,
                            b_this_MotionTypes[tempMotionLength_data_tmp].
                            f1.size)) {
                    real_T state_0;
                    real_T state_1;
                    ns_size_idx_0 = c_x->size[0];
                    c_x->size[0] = tempSamples_size_idx_0;
                    FlightMissionMode_emxEnsureCapacity_real_T1(c_x,
                        ns_size_idx_0);
                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        c_x->data[count] = S_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count =
                            static_cast<int32_T>(count + 1)) {
                        c_x->data[count] = std::sin(c_x->data[count]);
                    }

                    ns_size_idx_0 = d_x->size[0];
                    d_x->size[0] = tempSamples_size_idx_0;
                    FlightMissionMode_emxEnsureCapacity_real_T1(d_x,
                        ns_size_idx_0);
                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        d_x->data[count] = S_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count =
                            static_cast<int32_T>(count + 1)) {
                        d_x->data[count] = std::cos(d_x->data[count]);
                    }

                    ns_size_idx_0 = static_cast<int32_T>(S->size[0] * S->size[1]);
                    S->size[0] = c_x->size[0];
                    S->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_d(S,
                        ns_size_idx_0);
                    loop_ub = c_x->size[0];
                    for (count = 0; count <= static_cast<int32_T>(loop_ub - 1);
                            count++) {
                        S->data[count] = c_x->data[count];
                    }

                    loop_ub = d_x->size[0];
                    for (count = 0; count <= static_cast<int32_T>(loop_ub - 1);
                            count++) {
                        S->data[static_cast<int32_T>(count + c_x->size[0])] =
                            d_x->data[count] - 1.0;
                    }

                    FlightMissionMode_mtimes(S, TransformMatrix, p);
                    TransformMatrix_tmp = rt_atan2d_snf(b_this_AirSpeed *
                        b_this_AirSpeed, 9.8 * radius);
                    TransformMatrix_tmp_0 = state[0];
                    state_0 = state[1];
                    state_1 = state[3];
                    loop_ub = p->size[0];
                    ns_size_idx_0 = p->size[0];
                    for (count = 0; count <= static_cast<int32_T>(loop_ub - 1);
                            count++) {
                        ns_data[count] = p->data[count] * radius +
                            TransformMatrix_tmp_0;
                        ns_data[static_cast<int32_T>(count + ns_size_idx_0)] =
                            p->data[static_cast<int32_T>(count + p->size[0])] *
                            radius + state_0;
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 << 1))] = z_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 * 3))] = state_1 - S_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 << 2))] = tempSamples_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 * 5))] = TransformMatrix_tmp;
                    }
                } else if (FlightMissionMode_strcmp_bkkffzbu
                           (b_this_MotionTypes[tempMotionLength_data_tmp].
                            f1.data,
                            b_this_MotionTypes[tempMotionLength_data_tmp].
                            f1.size)) {
                    real_T state_0;
                    ns_size_idx_0 = static_cast<int32_T>(S->size[0] * S->size[1]);
                    S->size[0] = tempSamples_size_idx_0;
                    S->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_d(S,
                        ns_size_idx_0);
                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        S->data[count] = S_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        S->data[static_cast<int32_T>(count +
                            tempSamples_size_idx_0)] = 0.0;
                    }

                    FlightMissionMode_mtimes(S, TransformMatrix, p);
                    TransformMatrix_tmp_0 = state[0];
                    state_0 = state[1];
                    loop_ub = p->size[0];
                    ns_size_idx_0 = p->size[0];
                    for (count = 0; count <= static_cast<int32_T>(loop_ub - 1);
                            count++) {
                        ns_data[count] = p->data[count] * radius +
                            TransformMatrix_tmp_0;
                        ns_data[static_cast<int32_T>(count + ns_size_idx_0)] =
                            p->data[static_cast<int32_T>(count + p->size[0])] *
                            radius + state_0;
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 << 1))] = z_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 * 3))] = state[3];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 << 2))] = tempSamples_data[count];
                    }

                    for (count = 0; count <= static_cast<int32_T>
                            (tempSamples_size_idx_0 - 1); count++) {
                        ns_data[static_cast<int32_T>(count + static_cast<int32_T>
                            (ns_size_idx_0 * 5))] = 0.0;
                    }
                }

                if (static_cast<boolean_T>(static_cast<int32_T>
                                           ((transLength_size[0] != 0) &
                                            (transLength_size[1] != 0)))) {
                    if (1 > static_cast<int32_T>(ns_size_idx_0 - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = 0;
                    }

                    if (0 <= loop_ub) {
                        for (count = 0; count < 6; count++) {
                            poses_data[count] = ns_data[static_cast<int32_T>
                                (ns_size_idx_0 * count)];
                        }
                    }

                    if (1 > static_cast<int32_T>(ns_size_idx_0 - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = 0;
                    }

                    if (0 <= loop_ub) {
                        poses_data[0] = ns_data[0];
                    }

                    if (1 > static_cast<int32_T>(ns_size_idx_0 - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = 0;
                    }

                    if (0 <= loop_ub) {
                        poses_data[1] = -ns_data[ns_size_idx_0];
                    }

                    if (1 > static_cast<int32_T>(ns_size_idx_0 - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = 0;
                    }

                    if (0 <= loop_ub) {
                        poses_data[2] = -ns_data[static_cast<int32_T>
                            (ns_size_idx_0 << 1)];
                    }

                    if (1 > static_cast<int32_T>(ns_size_idx_0 - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = 0;
                    }

                    if (0 <= loop_ub) {
                        poses_data[3] = -ns_data[static_cast<int32_T>
                            (ns_size_idx_0 * 3)];
                    }
                }

                for (count = 0; count < 6; count++) {
                    state[count] = ns_data[static_cast<int32_T>
                        (static_cast<int32_T>(static_cast<int32_T>(ns_size_idx_0
                           * count) + ns_size_idx_0) - 1)];
                }
            }

            intermediateLength +=
                tempMotionLength_data[tempMotionLength_data_tmp];
            tempMotionLength_data_tmp = static_cast<int32_T>
                (tempMotionLength_data_tmp + 1);
        }

        FlightMissionMode_emxFree_real_T_m(&S);
        FlightMissionMode_emxFree_real_T_m(&p);
        FlightMissionMode_emxFree_real_T_m(&d_x);
        ns_size_idx_0 = c_x->size[0];
        c_x->size[0] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T1(c_x, ns_size_idx_0);
        c_x->data[0] = poses_data[3];
        FlightMissionMode_wrapToPi(c_x);
        loop_ub = c_x->size[0];
        for (count = 0; count <= static_cast<int32_T>(loop_ub - 1); count++) {
            poses_data[3] = c_x->data[count];
        }

        FlightMissionMode_emxFree_real_T_m(&c_x);
    }
}

static void FlightMissionMode_emxInit_int32_T
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_int32_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_int32_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_int32_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (int32_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_int32_T
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(int32_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (int32_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (int32_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxInit_int32_T1
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_int32_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_int32_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_int32_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (int32_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_int32_T1
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(int32_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (int32_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (int32_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxFree_int32_T
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_int32_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (int32_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_int32_T_FlightMissionMode_T *)nullptr;
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_merge_co(emxArray_int32_T_FlightMissionMode_T *idx,
    emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T np, int32_T
    nq, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork)
{
    if (nq != 0) {
        int32_T iout;
        int32_T n;
        int32_T n_tmp;
        int32_T q;
        n_tmp = static_cast<int32_T>(np + nq);
        for (q = 0; q <= static_cast<int32_T>(n_tmp - 1); q =
                static_cast<int32_T>(q + 1)) {
            iout = static_cast<int32_T>(offset + q);
            iwork->data[q] = idx->data[iout];
            xwork->data[q] = x->data[iout];
        }

        n = 0;
        q = np;
        iout = static_cast<int32_T>(offset - 1);
        int32_T exitg1;
        do {
            exitg1 = 0;
            iout = static_cast<int32_T>(iout + 1);
            if (xwork->data[n] <= xwork->data[q]) {
                idx->data[iout] = iwork->data[n];
                x->data[iout] = xwork->data[n];
                if (static_cast<int32_T>(n + 1) < np) {
                    n = static_cast<int32_T>(n + 1);
                } else {
                    exitg1 = 1;
                }
            } else {
                idx->data[iout] = iwork->data[q];
                x->data[iout] = xwork->data[q];
                if (static_cast<int32_T>(q + 1) < n_tmp) {
                    q = static_cast<int32_T>(q + 1);
                } else {
                    q = static_cast<int32_T>(iout - n);
                    while (static_cast<int32_T>(n + 1) <= np) {
                        n_tmp = static_cast<int32_T>(static_cast<int32_T>(q + n)
                            + 1);
                        idx->data[n_tmp] = iwork->data[n];
                        x->data[n_tmp] = xwork->data[n];
                        n = static_cast<int32_T>(n + 1);
                    }

                    exitg1 = 1;
                }
            }
        } while (exitg1 == 0);
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_merge_block(emxArray_int32_T_FlightMissionMode_T
    *idx, emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T n,
    int32_T preSortLevel, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork)
{
    int32_T bLen;
    int32_T nPairs;
    nPairs = static_cast<int32_T>(n >> preSortLevel);
    bLen = static_cast<int32_T>(1 << preSortLevel);
    while (nPairs > 1) {
        int32_T nTail;
        int32_T tailOffset;
        if (static_cast<uint32_T>(static_cast<uint32_T>(nPairs) & 1U) != 0U) {
            nPairs = static_cast<int32_T>(nPairs - 1);
            tailOffset = static_cast<int32_T>(bLen * nPairs);
            nTail = static_cast<int32_T>(n - tailOffset);
            if (nTail > bLen) {
                FlightMissionMode_merge_co(idx, x, static_cast<int32_T>(offset +
                    tailOffset), bLen, static_cast<int32_T>(nTail - bLen), iwork,
                    xwork);
            }
        }

        tailOffset = static_cast<int32_T>(bLen << 1);
        nPairs = static_cast<int32_T>(nPairs >> 1);
        for (nTail = 0; nTail <= static_cast<int32_T>(nPairs - 1); nTail =
                static_cast<int32_T>(nTail + 1)) {
            FlightMissionMode_merge_co(idx, x, static_cast<int32_T>(offset +
                static_cast<int32_T>(nTail * tailOffset)), bLen, bLen, iwork,
                xwork);
        }

        bLen = tailOffset;
    }

    if (n > bLen) {
        FlightMissionMode_merge_co(idx, x, offset, bLen, static_cast<int32_T>(n
            - bLen), iwork, xwork);
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_sort_ao(emxArray_real_T_FlightMissionMode_T *x)
{
    emxArray_int32_T_FlightMissionMode_T *idx;
    emxArray_int32_T_FlightMissionMode_T *iwork;
    emxArray_real_T_FlightMissionMode_T *b_x;
    emxArray_real_T_FlightMissionMode_T *xwork;
    real_T b_xwork[256];
    real_T x4[4];
    int32_T b_iwork[256];
    int32_T idx4[4];
    int32_T b_iwork_tmp;
    int32_T nBlocks;
    int32_T wOffset;
    int8_T perm[4];
    FlightMissionMode_emxInit_real_T_d(&b_x, 2);
    b_iwork_tmp = static_cast<int32_T>(b_x->size[0] * b_x->size[1]);
    b_x->size[0] = 1;
    b_x->size[1] = x->size[1];
    FlightMissionMode_emxEnsureCapacity_real_T_d(b_x, b_iwork_tmp);
    nBlocks = static_cast<int32_T>(x->size[1] - 1);
    for (wOffset = 0; wOffset <= nBlocks; wOffset++) {
        b_x->data[wOffset] = x->data[wOffset];
    }

    if (x->size[1] != 0) {
        int32_T bLen;
        int32_T bLen2;
        int32_T i1;
        int32_T ib;
        int32_T n;
        int32_T nPairs;
        int32_T q;
        FlightMissionMode_emxInit_int32_T(&idx, 2);
        b_iwork_tmp = static_cast<int32_T>(idx->size[0] * idx->size[1]);
        idx->size[0] = 1;
        idx->size[1] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_int32_T(idx, b_iwork_tmp);
        nBlocks = static_cast<int32_T>(x->size[1] - 1);
        for (wOffset = 0; wOffset <= nBlocks; wOffset++) {
            idx->data[wOffset] = 0;
        }

        b_iwork_tmp = static_cast<int32_T>(b_x->size[0] * b_x->size[1]);
        b_x->size[0] = 1;
        b_x->size[1] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_real_T_d(b_x, b_iwork_tmp);
        nBlocks = static_cast<int32_T>(x->size[1] - 1);
        for (wOffset = 0; wOffset <= nBlocks; wOffset++) {
            b_x->data[wOffset] = x->data[wOffset];
        }

        FlightMissionMode_emxInit_int32_T1(&iwork, 1);
        FlightMissionMode_emxInit_real_T1(&xwork, 1);
        n = x->size[1];
        x4[0] = 0.0;
        idx4[0] = 0;
        x4[1] = 0.0;
        idx4[1] = 0;
        x4[2] = 0.0;
        idx4[2] = 0;
        x4[3] = 0.0;
        idx4[3] = 0;
        nBlocks = x->size[1];
        b_iwork_tmp = xwork->size[0];
        xwork->size[0] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_real_T1(xwork, b_iwork_tmp);
        for (wOffset = 0; wOffset <= static_cast<int32_T>(nBlocks - 1); wOffset
                ++) {
            xwork->data[wOffset] = 0.0;
        }

        nBlocks = 0;
        ib = 0;
        for (wOffset = 0; wOffset <= static_cast<int32_T>(n - 1); wOffset =
                static_cast<int32_T>(wOffset + 1)) {
            if (std::isnan(b_x->data[wOffset])) {
                q = static_cast<int32_T>(static_cast<int32_T>(n - nBlocks) - 1);
                idx->data[q] = static_cast<int32_T>(wOffset + 1);
                xwork->data[q] = b_x->data[wOffset];
                nBlocks = static_cast<int32_T>(nBlocks + 1);
            } else {
                ib = static_cast<int32_T>(ib + 1);
                idx4[static_cast<int32_T>(ib - 1)] = static_cast<int32_T>
                    (wOffset + 1);
                x4[static_cast<int32_T>(ib - 1)] = b_x->data[wOffset];
                if (ib == 4) {
                    real_T tmp;
                    real_T tmp_0;
                    ib = static_cast<int32_T>(wOffset - nBlocks);
                    if (x4[0] <= x4[1]) {
                        i1 = 1;
                        bLen = 2;
                    } else {
                        i1 = 2;
                        bLen = 1;
                    }

                    if (x4[2] <= x4[3]) {
                        bLen2 = 3;
                        nPairs = 4;
                    } else {
                        bLen2 = 4;
                        nPairs = 3;
                    }

                    tmp = x4[static_cast<int32_T>(i1 - 1)];
                    tmp_0 = x4[static_cast<int32_T>(bLen2 - 1)];
                    if (tmp <= tmp_0) {
                        tmp = x4[static_cast<int32_T>(bLen - 1)];
                        if (tmp <= tmp_0) {
                            perm[0] = static_cast<int8_T>(i1);
                            perm[1] = static_cast<int8_T>(bLen);
                            perm[2] = static_cast<int8_T>(bLen2);
                            perm[3] = static_cast<int8_T>(nPairs);
                        } else if (tmp <= x4[static_cast<int32_T>(nPairs - 1)])
                        {
                            perm[0] = static_cast<int8_T>(i1);
                            perm[1] = static_cast<int8_T>(bLen2);
                            perm[2] = static_cast<int8_T>(bLen);
                            perm[3] = static_cast<int8_T>(nPairs);
                        } else {
                            perm[0] = static_cast<int8_T>(i1);
                            perm[1] = static_cast<int8_T>(bLen2);
                            perm[2] = static_cast<int8_T>(nPairs);
                            perm[3] = static_cast<int8_T>(bLen);
                        }
                    } else {
                        tmp_0 = x4[static_cast<int32_T>(nPairs - 1)];
                        if (tmp <= tmp_0) {
                            if (x4[static_cast<int32_T>(bLen - 1)] <= tmp_0) {
                                perm[0] = static_cast<int8_T>(bLen2);
                                perm[1] = static_cast<int8_T>(i1);
                                perm[2] = static_cast<int8_T>(bLen);
                                perm[3] = static_cast<int8_T>(nPairs);
                            } else {
                                perm[0] = static_cast<int8_T>(bLen2);
                                perm[1] = static_cast<int8_T>(i1);
                                perm[2] = static_cast<int8_T>(nPairs);
                                perm[3] = static_cast<int8_T>(bLen);
                            }
                        } else {
                            perm[0] = static_cast<int8_T>(bLen2);
                            perm[1] = static_cast<int8_T>(nPairs);
                            perm[2] = static_cast<int8_T>(i1);
                            perm[3] = static_cast<int8_T>(bLen);
                        }
                    }

                    idx->data[static_cast<int32_T>(ib - 3)] = idx4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[0]) - 1)];
                    idx->data[static_cast<int32_T>(ib - 2)] = idx4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                    idx->data[static_cast<int32_T>(ib - 1)] = idx4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                    idx->data[ib] = idx4[static_cast<int32_T>
                        (static_cast<int32_T>(perm[3]) - 1)];
                    b_x->data[static_cast<int32_T>(ib - 3)] = x4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[0]) - 1)];
                    b_x->data[static_cast<int32_T>(ib - 2)] = x4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                    b_x->data[static_cast<int32_T>(ib - 1)] = x4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                    b_x->data[ib] = x4[static_cast<int32_T>(static_cast<int32_T>
                        (perm[3]) - 1)];
                    ib = 0;
                }
            }
        }

        wOffset = static_cast<int32_T>(static_cast<int32_T>(x->size[1] - nBlocks)
            - 1);
        if (ib > 0) {
            perm[1] = 0;
            perm[2] = 0;
            perm[3] = 0;
            switch (ib) {
              case 1:
                perm[0] = 1;
                break;

              case 2:
                if (x4[0] <= x4[1]) {
                    perm[0] = 1;
                    perm[1] = 2;
                } else {
                    perm[0] = 2;
                    perm[1] = 1;
                }
                break;

              default:
                if (x4[0] <= x4[1]) {
                    if (x4[1] <= x4[2]) {
                        perm[0] = 1;
                        perm[1] = 2;
                        perm[2] = 3;
                    } else if (x4[0] <= x4[2]) {
                        perm[0] = 1;
                        perm[1] = 3;
                        perm[2] = 2;
                    } else {
                        perm[0] = 3;
                        perm[1] = 1;
                        perm[2] = 2;
                    }
                } else if (x4[0] <= x4[2]) {
                    perm[0] = 2;
                    perm[1] = 1;
                    perm[2] = 3;
                } else if (x4[1] <= x4[2]) {
                    perm[0] = 2;
                    perm[1] = 3;
                    perm[2] = 1;
                } else {
                    perm[0] = 3;
                    perm[1] = 2;
                    perm[2] = 1;
                }
                break;
            }

            for (i1 = 0; i1 <= static_cast<int32_T>(ib - 1); i1 =
                    static_cast<int32_T>(i1 + 1)) {
                q = static_cast<int32_T>(static_cast<int32_T>(perm[i1]) - 1);
                b_iwork_tmp = static_cast<int32_T>(static_cast<int32_T>(
                    static_cast<int32_T>(wOffset - ib) + i1) + 1);
                idx->data[b_iwork_tmp] = idx4[q];
                b_x->data[b_iwork_tmp] = x4[q];
            }
        }

        ib = static_cast<int32_T>(static_cast<int32_T>(nBlocks >> 1) + 1);
        for (i1 = 1; static_cast<int32_T>(i1 - 1) <= static_cast<int32_T>(ib - 2);
             i1 = static_cast<int32_T>(i1 + 1)) {
            bLen2 = static_cast<int32_T>(wOffset + i1);
            bLen = idx->data[bLen2];
            q = static_cast<int32_T>(n - i1);
            idx->data[bLen2] = idx->data[q];
            idx->data[q] = bLen;
            b_x->data[bLen2] = xwork->data[q];
            b_x->data[q] = xwork->data[bLen2];
        }

        if (static_cast<uint32_T>(static_cast<uint32_T>(nBlocks) & 1U) != 0U) {
            n = static_cast<int32_T>(wOffset + ib);
            b_x->data[n] = xwork->data[n];
        }

        n = x->size[1];
        b_iwork_tmp = iwork->size[0];
        iwork->size[0] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_int32_T1(iwork, b_iwork_tmp);
        for (wOffset = 0; wOffset <= static_cast<int32_T>(n - 1); wOffset++) {
            iwork->data[wOffset] = 0;
        }

        n = static_cast<int32_T>(x->size[1] - nBlocks);
        wOffset = 2;
        if (n > 1) {
            if (x->size[1] >= 256) {
                nBlocks = static_cast<int32_T>(n >> 8);
                if (nBlocks > 0) {
                    for (ib = 0; ib <= static_cast<int32_T>(nBlocks - 1); ib =
                            static_cast<int32_T>(ib + 1)) {
                        i1 = static_cast<int32_T>(static_cast<int32_T>(ib << 8)
                            - 1);
                        for (wOffset = 0; wOffset < 6; wOffset++) {
                            bLen = static_cast<int32_T>(1 << static_cast<int32_T>
                                (wOffset + 2));
                            bLen2 = static_cast<int32_T>(bLen << 1);
                            nPairs = static_cast<int32_T>(256 >>
                                static_cast<int32_T>(wOffset + 3));
                            for (int32_T e_k{0}; e_k <= static_cast<int32_T>
                                    (nPairs - 1); e_k = static_cast<int32_T>(e_k
                                  + 1)) {
                                int32_T blockOffset;
                                int32_T p;
                                blockOffset = static_cast<int32_T>
                                    (static_cast<int32_T>(e_k * bLen2) + i1);
                                for (p = 0; p <= static_cast<int32_T>(bLen2 - 1);
                                     p = static_cast<int32_T>(p + 1)) {
                                    b_iwork_tmp = static_cast<int32_T>(
                                        static_cast<int32_T>(blockOffset + p) +
                                        1);
                                    b_iwork[p] = idx->data[b_iwork_tmp];
                                    b_xwork[p] = b_x->data[b_iwork_tmp];
                                }

                                p = 0;
                                q = bLen;
                                int32_T exitg1;
                                do {
                                    exitg1 = 0;
                                    blockOffset = static_cast<int32_T>
                                        (blockOffset + 1);
                                    if (b_xwork[p] <= b_xwork[q]) {
                                        idx->data[blockOffset] = b_iwork[p];
                                        b_x->data[blockOffset] = b_xwork[p];
                                        if (static_cast<int32_T>(p + 1) < bLen)
                                        {
                                            p = static_cast<int32_T>(p + 1);
                                        } else {
                                            exitg1 = 1;
                                        }
                                    } else {
                                        idx->data[blockOffset] = b_iwork[q];
                                        b_x->data[blockOffset] = b_xwork[q];
                                        if (static_cast<int32_T>(q + 1) < bLen2)
                                        {
                                            q = static_cast<int32_T>(q + 1);
                                        } else {
                                            blockOffset = static_cast<int32_T>
                                                (blockOffset - p);
                                            while (static_cast<int32_T>(p + 1) <=
                                                   bLen) {
                                                b_iwork_tmp =
                                                    static_cast<int32_T>(
                                                    static_cast<int32_T>
                                                    (blockOffset + p) + 1);
                                                idx->data[b_iwork_tmp] =
                                                    b_iwork[p];
                                                b_x->data[b_iwork_tmp] =
                                                    b_xwork[p];
                                                p = static_cast<int32_T>(p + 1);
                                            }

                                            exitg1 = 1;
                                        }
                                    }
                                } while (exitg1 == 0);
                            }
                        }
                    }

                    nBlocks = static_cast<int32_T>(nBlocks << 8);
                    wOffset = static_cast<int32_T>(n - nBlocks);
                    if (wOffset > 0) {
                        FlightMissionMode_merge_block(idx, b_x, nBlocks, wOffset,
                            2, iwork, xwork);
                    }

                    wOffset = 8;
                }
            }

            FlightMissionMode_merge_block(idx, b_x, 0, n, wOffset, iwork, xwork);
        }

        FlightMissionMode_emxFree_real_T_m(&xwork);
        FlightMissionMode_emxFree_int32_T(&iwork);
        FlightMissionMode_emxFree_int32_T(&idx);
    }

    b_iwork_tmp = static_cast<int32_T>(x->size[0] * x->size[1]);
    x->size[0] = 1;
    x->size[1] = b_x->size[1];
    FlightMissionMode_emxEnsureCapacity_real_T_d(x, b_iwork_tmp);
    nBlocks = b_x->size[1];
    for (wOffset = 0; wOffset <= static_cast<int32_T>(nBlocks - 1); wOffset++) {
        x->data[wOffset] = b_x->data[wOffset];
    }

    FlightMissionMode_emxFree_real_T_m(&b_x);
}

static void FlightMissionMode_emxInit_boolean_T
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_boolean_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_boolean_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_boolean_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (boolean_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_boolean_T
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(boolean_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (boolean_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (boolean_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_eml_find_m(const
    emxArray_boolean_T_FlightMissionMode_T *x,
    emxArray_int32_T_FlightMissionMode_T *i)
{
    int32_T idx;
    int32_T ii;
    int32_T nx;
    boolean_T exitg1;
    nx = x->size[1];
    idx = 0;
    ii = static_cast<int32_T>(i->size[0] * i->size[1]);
    i->size[0] = 1;
    i->size[1] = x->size[1];
    FlightMissionMode_emxEnsureCapacity_int32_T(i, ii);
    ii = 0;
    exitg1 = false;
    while ((!exitg1) && (ii <= static_cast<int32_T>(nx - 1))) {
        if (x->data[ii]) {
            idx = static_cast<int32_T>(idx + 1);
            i->data[static_cast<int32_T>(idx - 1)] = static_cast<int32_T>(ii + 1);
            if (idx >= nx) {
                exitg1 = true;
            } else {
                ii = static_cast<int32_T>(ii + 1);
            }
        } else {
            ii = static_cast<int32_T>(ii + 1);
        }
    }

    if (x->size[1] == 1) {
        if (idx == 0) {
            i->size[0] = 1;
            i->size[1] = 0;
        }
    } else if (1 > idx) {
        i->size[1] = 0;
    } else {
        ii = static_cast<int32_T>(i->size[0] * i->size[1]);
        i->size[1] = idx;
        FlightMissionMode_emxEnsureCapacity_int32_T(i, ii);
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_interpolate_c(const real_T
    b_this_StartPose[4], const real_T b_this_GoalPose[4], real_T
    b_this_FlightPathAngle, real_T b_this_AirSpeed, real_T
    b_this_MinTurningRadius, real_T b_this_HelixRadius, const
    cell_wrap_1_FlightMissionMode_T b_this_MotionTypes[4], const real_T
    b_this_MotionLengths[4], real_T b_this_Length,
    emxArray_real_T_FlightMissionMode_T *samples,
    emxArray_real_T_FlightMissionMode_T *poses)
{
    emxArray_boolean_T_FlightMissionMode_T *tempSamplesIndex;
    emxArray_boolean_T_FlightMissionMode_T *tempSamplesIndex_0;
    emxArray_int32_T_FlightMissionMode_T *ab;
    emxArray_real_T_FlightMissionMode_T *S;
    emxArray_real_T_FlightMissionMode_T *S_0;
    emxArray_real_T_FlightMissionMode_T *d_x;
    emxArray_real_T_FlightMissionMode_T *ns;
    emxArray_real_T_FlightMissionMode_T *p;
    emxArray_real_T_FlightMissionMode_T *tempSamples;
    emxArray_real_T_FlightMissionMode_T *z;
    real_T state[6];
    real_T TransformMatrix[4];
    real_T tempMotionLength_data[4];
    real_T transLength_data[4];
    int32_T tempMotionLength_size[2];
    int32_T transLength_size[2];
    boolean_T tmp[4];
    poses->size[0] = 0;
    poses->size[1] = 6;
    if ((static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(std::
            isnan(b_this_Length)) ^ 1))) && (samples->size[1] != 0)) {
        real_T b_b_tmp;
        real_T intermediateLength;
        real_T startIndex;
        real_T tempStartPose_idx_2;
        int32_T loop_ub;
        int32_T poses_0;
        int32_T tempMotionLength_data_tmp;
        tempStartPose_idx_2 = -b_this_StartPose[2];
        tempMotionLength_data_tmp = static_cast<int32_T>(poses->size[0] *
            poses->size[1]);
        poses->size[0] = samples->size[1];
        poses->size[1] = 6;
        FlightMissionMode_emxEnsureCapacity_real_T_d(poses,
            tempMotionLength_data_tmp);
        loop_ub = static_cast<int32_T>(static_cast<int32_T>(samples->size[1] * 6)
            - 1);
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <= loop_ub;
             tempMotionLength_data_tmp++) {
            poses->data[tempMotionLength_data_tmp] = 0.0;
        }

        b_b_tmp = std::cos(std::abs(b_this_FlightPathAngle));
        tempMotionLength_data_tmp = static_cast<int32_T>(samples->size[0] *
            samples->size[1]);
        samples->size[0] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_d(samples,
            tempMotionLength_data_tmp);
        loop_ub = static_cast<int32_T>(samples->size[1] - 1);
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <= loop_ub;
             tempMotionLength_data_tmp++) {
            samples->data[tempMotionLength_data_tmp] *= b_b_tmp;
        }

        TransformMatrix[0] = b_this_MotionLengths[0] * b_b_tmp;
        TransformMatrix[1] = b_this_MotionLengths[1] * b_b_tmp;
        TransformMatrix[2] = b_this_MotionLengths[2] * b_b_tmp;
        tempMotionLength_size[0] = 1;
        tempMotionLength_size[1] = 4;
        tempMotionLength_data[0] = TransformMatrix[0];
        tempMotionLength_data[1] = TransformMatrix[1];
        tempMotionLength_data[2] = TransformMatrix[2];
        tempMotionLength_data[3] = b_this_MotionLengths[3] * b_b_tmp;
        FlightMissionMode_strcmp_bk(b_this_MotionTypes, tmp);
        if (FlightMissionMode_any(tmp)) {
            tempMotionLength_size[0] = 1;
            tempMotionLength_size[1] = 3;
            tempMotionLength_data[0] = TransformMatrix[0];
            tempMotionLength_data[1] = TransformMatrix[1];
            tempMotionLength_data[2] = TransformMatrix[2];
        }

        FlightMissionMode_useConstantDim(tempMotionLength_data,
            tempMotionLength_size, transLength_data, transLength_size);
        FlightMissionMode_sort_ao(samples);
        intermediateLength = 0.0;
        startIndex = 1.0;
        state[0] = b_this_StartPose[0];
        state[1] = -b_this_StartPose[1];
        state[3] = -b_this_StartPose[3];
        poses_0 = 0;
        FlightMissionMode_emxInit_boolean_T(&tempSamplesIndex, 2);
        FlightMissionMode_emxInit_real_T1(&tempSamples, 1);
        FlightMissionMode_emxInit_real_T1(&S, 1);
        FlightMissionMode_emxInit_real_T_d(&ns, 2);
        FlightMissionMode_emxInit_real_T1(&z, 1);
        FlightMissionMode_emxInit_real_T_d(&p, 2);
        FlightMissionMode_emxInit_real_T1(&d_x, 1);
        FlightMissionMode_emxInit_int32_T(&ab, 2);
        FlightMissionMode_emxInit_boolean_T(&tempSamplesIndex_0, 2);
        FlightMissionMode_emxInit_real_T_d(&S_0, 2);
        while (poses_0 <= static_cast<int32_T>(tempMotionLength_size[1] - 1)) {
            real_T radius;
            real_T samples_0;
            if (static_cast<int32_T>(poses_0 + 1) == 1) {
                tempMotionLength_data_tmp = static_cast<int32_T>
                    (tempSamplesIndex->size[0] * tempSamplesIndex->size[1]);
                tempSamplesIndex->size[0] = 1;
                tempSamplesIndex->size[1] = samples->size[1];
                FlightMissionMode_emxEnsureCapacity_boolean_T(tempSamplesIndex,
                    tempMotionLength_data_tmp);
                loop_ub = static_cast<int32_T>(samples->size[1] - 1);
                radius = (intermediateLength + tempMotionLength_data[0]) +
                    1.0E-6;
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     loop_ub; tempMotionLength_data_tmp++) {
                    samples_0 = samples->data[tempMotionLength_data_tmp];
                    tempSamplesIndex->data[tempMotionLength_data_tmp] =
                        static_cast<boolean_T>(static_cast<int32_T>((samples_0 >=
                        intermediateLength) & (samples_0 <= radius)));
                }
            } else {
                tempMotionLength_data_tmp = static_cast<int32_T>
                    (tempSamplesIndex->size[0] * tempSamplesIndex->size[1]);
                tempSamplesIndex->size[0] = 1;
                tempSamplesIndex->size[1] = samples->size[1];
                FlightMissionMode_emxEnsureCapacity_boolean_T(tempSamplesIndex,
                    tempMotionLength_data_tmp);
                loop_ub = static_cast<int32_T>(samples->size[1] - 1);
                radius = (intermediateLength + tempMotionLength_data[poses_0]) +
                    1.0E-6;
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     loop_ub; tempMotionLength_data_tmp++) {
                    samples_0 = samples->data[tempMotionLength_data_tmp];
                    tempSamplesIndex->data[tempMotionLength_data_tmp] =
                        static_cast<boolean_T>(static_cast<int32_T>((samples_0 >
                        intermediateLength) & (samples_0 <= radius)));
                }
            }

            tempMotionLength_data_tmp = static_cast<int32_T>
                (tempSamplesIndex_0->size[0] * tempSamplesIndex_0->size[1]);
            tempSamplesIndex_0->size[0] = 1;
            tempSamplesIndex_0->size[1] = tempSamplesIndex->size[1];
            FlightMissionMode_emxEnsureCapacity_boolean_T(tempSamplesIndex_0,
                tempMotionLength_data_tmp);
            loop_ub = tempSamplesIndex->size[1];
            for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                    static_cast<int32_T>(loop_ub - 1); tempMotionLength_data_tmp
                    ++) {
                tempSamplesIndex_0->data[tempMotionLength_data_tmp] =
                    tempSamplesIndex->data[tempMotionLength_data_tmp];
            }

            FlightMissionMode_eml_find_m(tempSamplesIndex_0, ab);
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (FlightMissionMode_strcmp_bkk(b_this_MotionTypes[poses_0].
                    f1.data, b_this_MotionTypes[poses_0].f1.size)) ^ 1))) {
                real_T TransformMatrix_tmp;
                int32_T count;
                int32_T tempMotionLength_data_tmp_0;
                radius = b_this_MinTurningRadius;
                if (FlightMissionMode_strcmp_bkkf(b_this_MotionTypes[poses_0].
                        f1.data, b_this_MotionTypes[poses_0].f1.size)) {
                    radius = b_this_HelixRadius;
                } else if (FlightMissionMode_strcmp_bkkff
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size)) {
                    radius = b_this_HelixRadius;
                }

                count = 0;
                tempMotionLength_data_tmp = tempSamples->size[0];
                tempSamples->size[0] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T1(tempSamples,
                    tempMotionLength_data_tmp);
                tempSamples->data[0] = 0.0;
                if (ab->size[1] != 0) {
                    tempMotionLength_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = static_cast<int32_T>(ab->size[1] + 1);
                    FlightMissionMode_emxEnsureCapacity_real_T1(tempSamples,
                        tempMotionLength_data_tmp);
                    loop_ub = ab->size[1];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] = 0.0;
                    }

                    count = ab->size[1];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] =
                            samples->data[static_cast<int32_T>(ab->
                            data[tempMotionLength_data_tmp] - 1)];
                    }

                    count = ab->size[1];
                    loop_ub = static_cast<int32_T>(ab->size[1] - 1);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        samples->data[static_cast<int32_T>(ab->
                            data[tempMotionLength_data_tmp] - 1)] = -1.0;
                    }
                }

                tempSamples->data[count] = transLength_data[poses_0];
                tempMotionLength_data_tmp = S->size[0];
                S->size[0] = tempSamples->size[0];
                FlightMissionMode_emxEnsureCapacity_real_T1(S,
                    tempMotionLength_data_tmp);
                loop_ub = tempSamples->size[0];
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     static_cast<int32_T>(loop_ub - 1);
                        tempMotionLength_data_tmp++) {
                    S->data[tempMotionLength_data_tmp] = (tempSamples->
                        data[tempMotionLength_data_tmp] - intermediateLength) /
                        radius;
                }

                tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0] *
                    ns->size[1]);
                ns->size[0] = S->size[0];
                ns->size[1] = 6;
                FlightMissionMode_emxEnsureCapacity_real_T_d(ns,
                    tempMotionLength_data_tmp);
                loop_ub = static_cast<int32_T>(static_cast<int32_T>(S->size[0] *
                    6) - 1);
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     loop_ub; tempMotionLength_data_tmp++) {
                    ns->data[tempMotionLength_data_tmp] = 0.0;
                }

                tempMotionLength_data_tmp = z->size[0];
                z->size[0] = tempSamples->size[0];
                FlightMissionMode_emxEnsureCapacity_real_T1(z,
                    tempMotionLength_data_tmp);
                loop_ub = tempSamples->size[0];
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     static_cast<int32_T>(loop_ub - 1);
                        tempMotionLength_data_tmp++) {
                    z->data[tempMotionLength_data_tmp] = tempStartPose_idx_2 +
                        tempSamples->data[tempMotionLength_data_tmp];
                }

                samples_0 = std::sin(state[3]);
                TransformMatrix_tmp = std::cos(state[3]);
                TransformMatrix[0] = TransformMatrix_tmp;
                TransformMatrix[2] = samples_0;
                TransformMatrix[1] = -samples_0;
                TransformMatrix[3] = TransformMatrix_tmp;
                if (b_this_Length != 0.0) {
                    samples_0 = -b_this_GoalPose[2] - tempStartPose_idx_2;
                    TransformMatrix_tmp = b_this_Length * b_b_tmp;
                    tempMotionLength_data_tmp = z->size[0];
                    z->size[0] = tempSamples->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1(z,
                        tempMotionLength_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        z->data[tempMotionLength_data_tmp] = tempSamples->
                            data[tempMotionLength_data_tmp] /
                            TransformMatrix_tmp * samples_0 +
                            tempStartPose_idx_2;
                    }
                }

                if (FlightMissionMode_strcmp_bkkf(b_this_MotionTypes[poses_0].
                        f1.data, b_this_MotionTypes[poses_0].f1.size) ||
                        FlightMissionMode_strcmp_bkkffz
                        (b_this_MotionTypes[poses_0].f1.data,
                         b_this_MotionTypes[poses_0].f1.size)) {
                    real_T state_0;
                    real_T state_1;
                    tempMotionLength_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1(tempSamples,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        tempSamples->data[count] = std::sin(tempSamples->
                            data[count]);
                    }

                    tempMotionLength_data_tmp = d_x->size[0];
                    d_x->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1(d_x,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        d_x->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        d_x->data[count] = std::cos(d_x->data[count]);
                    }

                    tempMotionLength_data_tmp = static_cast<int32_T>(S_0->size[0]
                        * S_0->size[1]);
                    S_0->size[0] = tempSamples->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_d(S_0,
                        tempMotionLength_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[tempMotionLength_data_tmp] = tempSamples->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = d_x->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + tempSamples->size[0])] = 1.0 - d_x->
                            data[tempMotionLength_data_tmp];
                    }

                    FlightMissionMode_mtimes(S_0, TransformMatrix, p);
                    samples_0 = rt_atan2d_snf(b_this_AirSpeed * b_this_AirSpeed,
                        9.8 * radius);
                    TransformMatrix_tmp = state[0];
                    state_0 = state[1];
                    state_1 = state[3];
                    count = S->size[0];
                    tempMotionLength_data_tmp_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0]
                        * ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_d(ns,
                        tempMotionLength_data_tmp);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[tempMotionLength_data_tmp] = p->
                            data[tempMotionLength_data_tmp] * radius +
                            TransformMatrix_tmp;
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + ns->size[0])] = p->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + p->size[0])] * radius +
                            state_0;
                    }

                    loop_ub = z->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 3))] = state_1
                            + S->data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (tempMotionLength_data_tmp_0 - 1);
                            tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 5))] =
                            -samples_0;
                    }
                } else if (FlightMissionMode_strcmp_bkkff
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size) ||
                           FlightMissionMode_strcmp_bkkffzb
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size)) {
                    real_T state_0;
                    real_T state_1;
                    tempMotionLength_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1(tempSamples,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        tempSamples->data[count] = std::sin(tempSamples->
                            data[count]);
                    }

                    tempMotionLength_data_tmp = d_x->size[0];
                    d_x->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1(d_x,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        d_x->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        d_x->data[count] = std::cos(d_x->data[count]);
                    }

                    tempMotionLength_data_tmp = static_cast<int32_T>(S_0->size[0]
                        * S_0->size[1]);
                    S_0->size[0] = tempSamples->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_d(S_0,
                        tempMotionLength_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[tempMotionLength_data_tmp] = tempSamples->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = d_x->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + tempSamples->size[0])] = d_x->
                            data[tempMotionLength_data_tmp] - 1.0;
                    }

                    FlightMissionMode_mtimes(S_0, TransformMatrix, p);
                    samples_0 = rt_atan2d_snf(b_this_AirSpeed * b_this_AirSpeed,
                        9.8 * radius);
                    TransformMatrix_tmp = state[0];
                    state_0 = state[1];
                    state_1 = state[3];
                    count = S->size[0];
                    tempMotionLength_data_tmp_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0]
                        * ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_d(ns,
                        tempMotionLength_data_tmp);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[tempMotionLength_data_tmp] = p->
                            data[tempMotionLength_data_tmp] * radius +
                            TransformMatrix_tmp;
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + ns->size[0])] = p->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + p->size[0])] * radius +
                            state_0;
                    }

                    loop_ub = z->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 3))] = state_1
                            - S->data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (tempMotionLength_data_tmp_0 - 1);
                            tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 5))] =
                            samples_0;
                    }
                } else if (FlightMissionMode_strcmp_bkkffzbu
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size)) {
                    real_T state_0;
                    int32_T S_idx_0;
                    count = S->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(S_0->size[0]
                        * S_0->size[1]);
                    S_0->size[0] = S->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_d(S_0,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + S->size[0])] = 0.0;
                    }

                    FlightMissionMode_mtimes(S_0, TransformMatrix, p);
                    TransformMatrix_tmp = state[0];
                    state_0 = state[1];
                    count = S->size[0];
                    tempMotionLength_data_tmp_0 = S->size[0];
                    S_idx_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0]
                        * ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_d(ns,
                        tempMotionLength_data_tmp);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[tempMotionLength_data_tmp] = p->
                            data[tempMotionLength_data_tmp] * radius +
                            TransformMatrix_tmp;
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + ns->size[0])] = p->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + p->size[0])] * radius +
                            state_0;
                    }

                    loop_ub = z->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 3))] = state[3];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (tempMotionLength_data_tmp_0 - 1);
                            tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (S_idx_0 - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 5))] = 0.0;
                    }
                }

                if (ab->size[1] != 0) {
                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp < 6;
                            tempMotionLength_data_tmp++) {
                        for (tempMotionLength_data_tmp_0 = 0;
                                tempMotionLength_data_tmp_0 <= loop_ub;
                                tempMotionLength_data_tmp_0++) {
                            poses->data[static_cast<int32_T>(static_cast<int32_T>
                                (static_cast<int32_T>(count +
                                tempMotionLength_data_tmp_0) +
                                 static_cast<int32_T>(poses->size[0] *
                                tempMotionLength_data_tmp)) - 1)] = ns->data[
                                static_cast<int32_T>(static_cast<int32_T>
                                (ns->size[0] * tempMotionLength_data_tmp) +
                                tempMotionLength_data_tmp_0)];
                        }
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>
                            (count + tempMotionLength_data_tmp) - 1)] = ns->
                            data[tempMotionLength_data_tmp];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count +
                            tempMotionLength_data_tmp) + poses->size[0]) - 1)] =
                            -ns->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + ns->size[0])];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count +
                            tempMotionLength_data_tmp) + static_cast<int32_T>
                            (poses->size[0] << 1)) - 1)] = -ns->data[
                            static_cast<int32_T>(static_cast<int32_T>(ns->size[0]
                            << 1) + tempMotionLength_data_tmp)];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count +
                            tempMotionLength_data_tmp) + static_cast<int32_T>
                            (poses->size[0] * 3)) - 1)] = -ns->data[static_cast<
                            int32_T>(static_cast<int32_T>(ns->size[0] * 3) +
                                     tempMotionLength_data_tmp)];
                    }
                }

                count = ns->size[0];
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <
                        6; tempMotionLength_data_tmp++) {
                    state[tempMotionLength_data_tmp] = ns->data
                        [static_cast<int32_T>(static_cast<int32_T>
                        (static_cast<int32_T>(ns->size[0] *
                        tempMotionLength_data_tmp) + count) - 1)];
                }

                startIndex += static_cast<real_T>(ab->size[1]);
            }

            intermediateLength += tempMotionLength_data[poses_0];
            poses_0 = static_cast<int32_T>(poses_0 + 1);
        }

        FlightMissionMode_emxFree_real_T_m(&S_0);
        FlightMissionMode_emxFree_boolean_T(&tempSamplesIndex_0);
        FlightMissionMode_emxFree_int32_T(&ab);
        FlightMissionMode_emxFree_real_T_m(&d_x);
        FlightMissionMode_emxFree_real_T_m(&p);
        FlightMissionMode_emxFree_real_T_m(&z);
        FlightMissionMode_emxFree_real_T_m(&ns);
        FlightMissionMode_emxFree_real_T_m(&S);
        FlightMissionMode_emxFree_boolean_T(&tempSamplesIndex);
        loop_ub = poses->size[0];
        tempMotionLength_data_tmp = tempSamples->size[0];
        tempSamples->size[0] = poses->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T1(tempSamples,
            tempMotionLength_data_tmp);
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                static_cast<int32_T>(loop_ub - 1); tempMotionLength_data_tmp++)
        {
            tempSamples->data[tempMotionLength_data_tmp] = poses->data[
                static_cast<int32_T>(static_cast<int32_T>(poses->size[0] * 3) +
                tempMotionLength_data_tmp)];
        }

        FlightMissionMode_wrapToPi(tempSamples);
        loop_ub = tempSamples->size[0];
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                static_cast<int32_T>(loop_ub - 1); tempMotionLength_data_tmp++)
        {
            poses->data[static_cast<int32_T>(tempMotionLength_data_tmp +
                static_cast<int32_T>(poses->size[0] * 3))] = tempSamples->
                data[tempMotionLength_data_tmp];
        }

        FlightMissionMode_emxFree_real_T_m(&tempSamples);
    }
}

// Function for MATLAB Function: '<S179>/StartPointGenerator'
static void FlightMissionMode_genSegWP(const
    uavDubinsConnection_FlightMissionMode_T *connectionObj, const real_T start[4],
    const real_T ende[4], emxArray_real_T_FlightMissionMode_T *segWayPoints)
{
    emxArray_real_T_FlightMissionMode_T *lengths;
    emxArray_real_T_FlightMissionMode_T *poses;
    uavDubinsPathSegment_FlightMissionMode_T pathSegObj;
    real_T a__2;
    int32_T k;
    int32_T n;
    int32_T nm1d2;

    // '<S209>:1:47'
    FlightMissionMode_uavDubinsConnection_connect(connectionObj, start, ende,
        &pathSegObj, &a__2);

    // '<S209>:1:50'
    a__2 = pathSegObj.Length / 100.0;

    // '<S209>:1:51'
    FlightMissionMode_emxInit_real_T_d(&lengths, 2);
    if (std::isnan(a__2)) {
        nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
        lengths->size[0] = 1;
        lengths->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_d(lengths, nm1d2);
        lengths->data[0] = (rtNaN);
    } else if (std::isnan(pathSegObj.Length)) {
        nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
        lengths->size[0] = 1;
        lengths->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_d(lengths, nm1d2);
        lengths->data[0] = (rtNaN);
    } else if (a__2 == 0.0) {
        lengths->size[0] = 1;
        lengths->size[1] = 0;
    } else if ((0.0 < pathSegObj.Length) && (a__2 < 0.0)) {
        lengths->size[0] = 1;
        lengths->size[1] = 0;
    } else if ((pathSegObj.Length < 0.0) && (a__2 > 0.0)) {
        lengths->size[0] = 1;
        lengths->size[1] = 0;
    } else {
        boolean_T guard1{ false };

        guard1 = false;
        if (std::isinf(pathSegObj.Length)) {
            if (std::isinf(a__2)) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_d(lengths, nm1d2);
                lengths->data[0] = (rtNaN);
            } else if (0.0 == pathSegObj.Length) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_d(lengths, nm1d2);
                lengths->data[0] = (rtNaN);
            } else {
                guard1 = true;
            }
        } else {
            guard1 = true;
        }

        if (guard1) {
            if (std::isinf(a__2)) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_d(lengths, nm1d2);
                lengths->data[0] = 0.0;
            } else if (std::floor(a__2) == a__2) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                k = static_cast<int32_T>(std::floor(pathSegObj.Length / a__2));
                lengths->size[1] = static_cast<int32_T>(k + 1);
                FlightMissionMode_emxEnsureCapacity_real_T_d(lengths, nm1d2);
                for (n = 0; n <= k; n++) {
                    lengths->data[n] = a__2 * static_cast<real_T>(n);
                }
            } else {
                real_T apnd;
                real_T cdiff;
                real_T ndbl;
                ndbl = std::floor(pathSegObj.Length / a__2 + 0.5);
                apnd = ndbl * a__2;
                if (a__2 > 0.0) {
                    cdiff = apnd - pathSegObj.Length;
                } else {
                    cdiff = pathSegObj.Length - apnd;
                }

                if (std::abs(cdiff) < 4.4408920985006262E-16 * std::fmax(0.0,
                        std::abs(pathSegObj.Length))) {
                    ndbl++;
                    apnd = pathSegObj.Length;
                } else if (cdiff > 0.0) {
                    apnd = (ndbl - 1.0) * a__2;
                } else {
                    ndbl++;
                }

                if (ndbl >= 0.0) {
                    n = static_cast<int32_T>(static_cast<int32_T>(ndbl) - 1);
                } else {
                    n = -1;
                }

                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = static_cast<int32_T>(n + 1);
                FlightMissionMode_emxEnsureCapacity_real_T_d(lengths, nm1d2);
                if (static_cast<int32_T>(n + 1) > 0) {
                    lengths->data[0] = 0.0;
                    if (static_cast<int32_T>(n + 1) > 1) {
                        lengths->data[n] = apnd;
                        nm1d2 = static_cast<int32_T>(n / 2);
                        for (k = 1; static_cast<int32_T>(k - 1) <=
                                static_cast<int32_T>(nm1d2 - 2); k =
                                static_cast<int32_T>(k + 1)) {
                            ndbl = static_cast<real_T>(k) * a__2;
                            lengths->data[k] = ndbl;
                            lengths->data[static_cast<int32_T>(n - k)] = apnd -
                                ndbl;
                        }

                        if (static_cast<int32_T>(nm1d2 << 1) == n) {
                            lengths->data[nm1d2] = apnd / 2.0;
                        } else {
                            ndbl = static_cast<real_T>(nm1d2) * a__2;
                            lengths->data[nm1d2] = ndbl;
                            lengths->data[static_cast<int32_T>(nm1d2 + 1)] =
                                apnd - ndbl;
                        }
                    }
                }
            }
        }
    }

    FlightMissionMode_emxInit_real_T_d(&poses, 2);

    // '<S209>:1:54'
    FlightMissionMode_uavDubinsPathSegment_interpolate_c(pathSegObj.StartPose,
        pathSegObj.GoalPose, pathSegObj.FlightPathAngle, pathSegObj.AirSpeed,
        pathSegObj.MinTurningRadius, pathSegObj.HelixRadius,
        pathSegObj.MotionTypes, pathSegObj.MotionLengths, pathSegObj.Length,
        lengths, poses);

    // '<S209>:1:55'
    k = poses->size[0];
    nm1d2 = static_cast<int32_T>(segWayPoints->size[0] * segWayPoints->size[1]);
    segWayPoints->size[0] = poses->size[0];
    segWayPoints->size[1] = 3;
    FlightMissionMode_emxEnsureCapacity_real_T_d(segWayPoints, nm1d2);
    FlightMissionMode_emxFree_real_T_m(&lengths);
    for (n = 0; n < 3; n++) {
        for (nm1d2 = 0; nm1d2 <= static_cast<int32_T>(k - 1); nm1d2++) {
            segWayPoints->data[static_cast<int32_T>(nm1d2 + static_cast<int32_T>
                (segWayPoints->size[0] * n))] = poses->data[static_cast<int32_T>
                (static_cast<int32_T>(poses->size[0] * n) + nm1d2)];
        }
    }

    FlightMissionMode_emxFree_real_T_m(&poses);
}

//
// Output and update for atomic system:
//    '<S179>/StartPointGenerator'
//    '<S220>/StartPointGenerator'
//
void FlightMissionMode_StartPointGenerator(real_T rtu_Length, real_T
    rtu_RunWayUAV, real_T rtu_PosIDX, real_T rty_initWayPoint[300], real_T
    rty_startPose[5])
{
    static const int8_T c[5]{ 0, 1, 2, 3, 5 };

    emxArray_real_T_FlightMissionMode_T *d;
    emxArray_real_T_FlightMissionMode_T *dummyinitWayPoint;
    uavDubinsConnection_FlightMissionMode_T lobj_0_DubinsObj;
    uavDubinsPathSegment_FlightMissionMode_T pathSegObj;
    real_T midpose_data[6];
    real_T LUp_0[5];
    real_T tmp[5];
    real_T LDp[4];
    real_T LUp[4];
    real_T InterUAVLength;
    real_T PosIDX;
    int32_T midpose_size[2];
    int32_T i;
    int32_T i_0;
    int32_T loop_ub;

    // MATLAB Function 'StartPointGenerator': '<S209>:1'
    // '<S209>:1:3'
    lobj_0_DubinsObj.FlightPathAngleLimit[0] = -0.175;
    lobj_0_DubinsObj.FlightPathAngleLimit[1] = 0.175;
    lobj_0_DubinsObj.MaxRollAngle = 0.3490658503988659;
    lobj_0_DubinsObj.AirSpeed = 35.0;
    lobj_0_DubinsObj.MinTurningRadius = 343.43467743182782;

    // '<S209>:1:6'
    LUp[0] = 0.0;
    LUp[1] = rtu_Length / 2.0;
    LUp[2] = 0.0;
    LUp[3] = 1.5707963267948966;

    // '<S209>:1:7'
    LDp[0] = 0.0;
    LDp[1] = -rtu_Length / 2.0;
    LDp[2] = 0.0;
    LDp[3] = 1.5707963267948966;

    // '<S209>:1:9'
    FlightMissionMode_uavDubinsConnection_connect(&lobj_0_DubinsObj, LUp, LDp,
        &pathSegObj, &InterUAVLength);

    // '<S209>:1:10'
    // '<S209>:1:12'
    InterUAVLength = (pathSegObj.Length + rtu_Length) / rtu_RunWayUAV;

    // '<S209>:1:15'
    // '<S209>:1:16'
    // '<S209>:1:19'
    PosIDX = (rtu_PosIDX - ((rtu_RunWayUAV - std::floor(pathSegObj.Length /
                 InterUAVLength)) - 1.0)) - 1.0;

    // '<S209>:1:23'
    FlightMissionMode_emxInit_real_T_d(&dummyinitWayPoint, 2);
    FlightMissionMode_emxInit_real_T_d(&d, 2);
    if (PosIDX > 0.0) {
        // '<S209>:1:26'
        // '<S209>:1:28'
        FlightMissionMode_uavDubinsPathSegment_interpolate(pathSegObj.StartPose,
            pathSegObj.GoalPose, pathSegObj.FlightPathAngle, pathSegObj.AirSpeed,
            pathSegObj.MinTurningRadius, pathSegObj.HelixRadius,
            pathSegObj.MotionTypes, pathSegObj.MotionLengths, pathSegObj.Length,
            InterUAVLength * PosIDX, midpose_data, midpose_size);

        // '<S209>:1:29'
        // '<S209>:1:30'
        for (i = 0; i < 5; i++) {
            rty_startPose[i] = midpose_data[static_cast<int32_T>(midpose_size[0]
                * static_cast<int32_T>(c[i]))];
        }

        // '<S209>:1:31'
        LUp[0] = midpose_data[0];
        LUp[1] = midpose_data[midpose_size[0]];
        LUp[2] = midpose_data[static_cast<int32_T>(midpose_size[0] << 1)];
        LUp[3] = midpose_data[static_cast<int32_T>(midpose_size[0] * 3)];
        FlightMissionMode_genSegWP(&lobj_0_DubinsObj, LUp, LDp, d);
        i = static_cast<int32_T>(dummyinitWayPoint->size[0] *
            dummyinitWayPoint->size[1]);
        dummyinitWayPoint->size[0] = static_cast<int32_T>(d->size[0] + 1);
        dummyinitWayPoint->size[1] = 3;
        FlightMissionMode_emxEnsureCapacity_real_T_d(dummyinitWayPoint, i);
        loop_ub = d->size[0];
        for (i = 0; i < 3; i++) {
            dummyinitWayPoint->data[static_cast<int32_T>(dummyinitWayPoint->
                size[0] * i)] = 0.0;
            for (i_0 = 0; i_0 <= static_cast<int32_T>(loop_ub - 1); i_0++) {
                dummyinitWayPoint->data[static_cast<int32_T>(static_cast<int32_T>
                    (i_0 + static_cast<int32_T>(dummyinitWayPoint->size[0] * i))
                    + 1)] = d->data[static_cast<int32_T>(static_cast<int32_T>
                    (d->size[0] * i) + i_0)];
            }
        }
    } else {
        // '<S209>:1:35'
        LUp_0[0] = 0.0;
        LUp_0[1] = LUp[1];
        LUp_0[2] = 0.0;
        LUp_0[3] = 1.5707963267948966;
        LUp_0[4] = 0.0;
        tmp[0] = 0.0;
        tmp[1] = PosIDX * InterUAVLength;
        tmp[2] = 0.0;
        tmp[3] = 0.0;
        tmp[4] = 0.0;
        for (i = 0; i < 5; i++) {
            rty_startPose[i] = LUp_0[i] + tmp[i];
        }

        // '<S209>:1:36'
        FlightMissionMode_genSegWP(&lobj_0_DubinsObj, LUp, LDp, d);
        i = static_cast<int32_T>(dummyinitWayPoint->size[0] *
            dummyinitWayPoint->size[1]);
        dummyinitWayPoint->size[0] = static_cast<int32_T>(d->size[0] + 1);
        dummyinitWayPoint->size[1] = 3;
        FlightMissionMode_emxEnsureCapacity_real_T_d(dummyinitWayPoint, i);
        loop_ub = d->size[0];
        for (i = 0; i < 3; i++) {
            dummyinitWayPoint->data[static_cast<int32_T>(dummyinitWayPoint->
                size[0] * i)] = 0.0;
            for (i_0 = 0; i_0 <= static_cast<int32_T>(loop_ub - 1); i_0++) {
                dummyinitWayPoint->data[static_cast<int32_T>(static_cast<int32_T>
                    (i_0 + static_cast<int32_T>(dummyinitWayPoint->size[0] * i))
                    + 1)] = d->data[static_cast<int32_T>(static_cast<int32_T>
                    (d->size[0] * i) + i_0)];
            }
        }
    }

    FlightMissionMode_emxFree_real_T_m(&d);

    // '<S209>:1:40'
    loop_ub = static_cast<int32_T>(dummyinitWayPoint->size[0] - 100);
    for (i = 0; i < 3; i++) {
        for (i_0 = 0; i_0 < 100; i_0++) {
            rty_initWayPoint[static_cast<int32_T>(i_0 + static_cast<int32_T>(100
                * i))] = dummyinitWayPoint->data[static_cast<int32_T>(
                static_cast<int32_T>(i_0 + loop_ub) + static_cast<int32_T>
                (dummyinitWayPoint->size[0] * i))];
        }
    }

    FlightMissionMode_emxFree_real_T_m(&dummyinitWayPoint);
}

//
// Output and update for atomic system:
//    '<S210>/minus'
//    '<S251>/minus'
//
void FlightMissionMode_minus(const real_T rtu_uP[300], const real_T rtu_uN[3],
    real_T rty_y[300])
{
    int32_T jcol;

    // MATLAB Function 'minus': '<S214>:1'
    // '<S214>:1:3'
    for (jcol = 0; jcol < 3; jcol++) {
        int32_T ibmat;
        ibmat = static_cast<int32_T>(jcol * 100);
        for (int32_T itilerow{0}; itilerow < 100; itilerow++) {
            rty_y[static_cast<int32_T>(ibmat + itilerow)] = rtu_uN[jcol];
        }
    }

    for (jcol = 0; jcol < 300; jcol++) {
        rty_y[jcol] = rtu_uP[jcol] - rty_y[jcol];
    }
}

//
// Output and update for atomic system:
//    '<S210>/biasNED'
//    '<S251>/biasNED'
//
void FlightMissionMode_biasNED_j(const real_T rtu_MissionNED[3], const real_T
    rtu_IndivRotWP[300], real_T rty_nedWayPoint[300])
{
    real_T b[300];
    int32_T jcol;

    // MATLAB Function 'biasNED': '<S213>:1'
    // '<S213>:1:4'
    for (jcol = 0; jcol < 3; jcol++) {
        int32_T ibmat;
        ibmat = static_cast<int32_T>(jcol * 100);
        for (int32_T itilerow{0}; itilerow < 100; itilerow++) {
            b[static_cast<int32_T>(ibmat + itilerow)] = rtu_MissionNED[jcol];
        }
    }

    for (jcol = 0; jcol < 100; jcol++) {
        rty_nedWayPoint[jcol] = rtu_IndivRotWP[static_cast<int32_T>(jcol + 100)]
            + b[jcol];
        rty_nedWayPoint[static_cast<int32_T>(jcol + 100)] = b
            [static_cast<int32_T>(jcol + 100)] + rtu_IndivRotWP[jcol];
        rty_nedWayPoint[static_cast<int32_T>(jcol + 200)] = rtu_IndivRotWP[
            static_cast<int32_T>(jcol + 200)] + b[static_cast<int32_T>(jcol +
            200)];
    }
}

static void FlightMissionMode_emxInit_real_T_i
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_real_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_real_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (real_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_merge_j(int32_T idx_data[], int32_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], int32_T
    xwork_data[])
{
    if (nq != 0) {
        int32_T iout;
        int32_T n;
        int32_T n_tmp;
        int32_T q;
        n_tmp = static_cast<int32_T>(np + nq);
        for (q = 0; q <= static_cast<int32_T>(n_tmp - 1); q =
                static_cast<int32_T>(q + 1)) {
            iout = static_cast<int32_T>(offset + q);
            iwork_data[q] = idx_data[iout];
            xwork_data[q] = x_data[iout];
        }

        n = 0;
        q = np;
        iout = static_cast<int32_T>(offset - 1);
        int32_T exitg1;
        do {
            exitg1 = 0;
            iout = static_cast<int32_T>(iout + 1);
            if (xwork_data[n] <= xwork_data[q]) {
                idx_data[iout] = iwork_data[n];
                x_data[iout] = xwork_data[n];
                if (static_cast<int32_T>(n + 1) < np) {
                    n = static_cast<int32_T>(n + 1);
                } else {
                    exitg1 = 1;
                }
            } else {
                idx_data[iout] = iwork_data[q];
                x_data[iout] = xwork_data[q];
                if (static_cast<int32_T>(q + 1) < n_tmp) {
                    q = static_cast<int32_T>(q + 1);
                } else {
                    q = static_cast<int32_T>(iout - n);
                    while (static_cast<int32_T>(n + 1) <= np) {
                        iout = static_cast<int32_T>(static_cast<int32_T>(q + n)
                            + 1);
                        idx_data[iout] = iwork_data[n];
                        x_data[iout] = xwork_data[n];
                        n = static_cast<int32_T>(n + 1);
                    }

                    exitg1 = 1;
                }
            }
        } while (exitg1 == 0);
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_sort_h(int32_T x_data[], const int32_T *x_size,
    int32_T idx_data[], int32_T *idx_size)
{
    int32_T b_idx_data[28];
    int32_T b_x_data[28];
    int32_T vwork_data[28];
    int32_T xwork_data[28];
    int32_T x4[4];
    int32_T b;
    int32_T c_k;
    int32_T dim;
    int32_T vstride;
    int32_T vwork_size_idx_0;
    int8_T idx4[4];
    int8_T perm[4];
    dim = 2;
    if (*x_size != 1) {
        dim = 1;
        b = static_cast<int32_T>(*x_size - 1);
    } else {
        b = 0;
    }

    vwork_size_idx_0 = static_cast<int32_T>(b + 1);
    *idx_size = *x_size;
    vstride = 1;
    c_k = 0;
    while (c_k <= static_cast<int32_T>(dim - 2)) {
        vstride = static_cast<int32_T>(vstride * *x_size);
        c_k = 1;
    }

    for (dim = 0; dim <= static_cast<int32_T>(vstride - 1); dim =
            static_cast<int32_T>(dim + 1)) {
        int32_T nQuartets;
        for (nQuartets = 0; nQuartets <= b; nQuartets = static_cast<int32_T>
                (nQuartets + 1)) {
            vwork_data[nQuartets] = x_data[static_cast<int32_T>
                (static_cast<int32_T>(nQuartets * vstride) + dim)];
        }

        for (c_k = 0; c_k <= static_cast<int32_T>(vwork_size_idx_0 - 1); c_k++)
        {
            b_x_data[c_k] = vwork_data[c_k];
        }

        nQuartets = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
        for (c_k = 0; c_k <= static_cast<int32_T>(nQuartets - 1); c_k++) {
            b_idx_data[c_k] = 0;
        }

        if (vwork_size_idx_0 != 0) {
            int32_T nLeft;
            int32_T nQuartets_tmp;
            int32_T nTail;
            int32_T tailOffset;
            nQuartets = static_cast<int32_T>(static_cast<int8_T>
                (vwork_size_idx_0));
            for (c_k = 0; c_k <= static_cast<int32_T>(nQuartets - 1); c_k++) {
                b_idx_data[c_k] = 0;
            }

            x4[0] = 0;
            idx4[0] = 0;
            x4[1] = 0;
            idx4[1] = 0;
            x4[2] = 0;
            idx4[2] = 0;
            x4[3] = 0;
            idx4[3] = 0;
            nQuartets_tmp = static_cast<int32_T>(vwork_size_idx_0 >> 2);
            for (nLeft = 0; nLeft <= static_cast<int32_T>(nQuartets_tmp - 1);
                    nLeft = static_cast<int32_T>(nLeft + 1)) {
                int32_T i3;
                int32_T i4;
                int32_T tmp;
                tailOffset = static_cast<int32_T>(nLeft << 2);
                idx4[0] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    1));
                idx4[1] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    2));
                idx4[2] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    3));
                idx4[3] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    4));
                x4[0] = b_x_data[tailOffset];
                x4[1] = b_x_data[static_cast<int32_T>(tailOffset + 1)];
                x4[2] = b_x_data[static_cast<int32_T>(tailOffset + 2)];
                x4[3] = b_x_data[static_cast<int32_T>(tailOffset + 3)];
                if (b_x_data[tailOffset] <= b_x_data[static_cast<int32_T>
                        (tailOffset + 1)]) {
                    nTail = 1;
                    nQuartets = 2;
                } else {
                    nTail = 2;
                    nQuartets = 1;
                }

                if (b_x_data[static_cast<int32_T>(tailOffset + 2)] <= b_x_data[
                        static_cast<int32_T>(tailOffset + 3)]) {
                    i3 = 3;
                    i4 = 4;
                } else {
                    i3 = 4;
                    i4 = 3;
                }

                c_k = x4[static_cast<int32_T>(nTail - 1)];
                tmp = x4[static_cast<int32_T>(i3 - 1)];
                if (c_k <= tmp) {
                    c_k = x4[static_cast<int32_T>(nQuartets - 1)];
                    if (c_k <= tmp) {
                        perm[0] = static_cast<int8_T>(nTail);
                        perm[1] = static_cast<int8_T>(nQuartets);
                        perm[2] = static_cast<int8_T>(i3);
                        perm[3] = static_cast<int8_T>(i4);
                    } else if (c_k <= x4[static_cast<int32_T>(i4 - 1)]) {
                        perm[0] = static_cast<int8_T>(nTail);
                        perm[1] = static_cast<int8_T>(i3);
                        perm[2] = static_cast<int8_T>(nQuartets);
                        perm[3] = static_cast<int8_T>(i4);
                    } else {
                        perm[0] = static_cast<int8_T>(nTail);
                        perm[1] = static_cast<int8_T>(i3);
                        perm[2] = static_cast<int8_T>(i4);
                        perm[3] = static_cast<int8_T>(nQuartets);
                    }
                } else {
                    tmp = x4[static_cast<int32_T>(i4 - 1)];
                    if (c_k <= tmp) {
                        if (x4[static_cast<int32_T>(nQuartets - 1)] <= tmp) {
                            perm[0] = static_cast<int8_T>(i3);
                            perm[1] = static_cast<int8_T>(nTail);
                            perm[2] = static_cast<int8_T>(nQuartets);
                            perm[3] = static_cast<int8_T>(i4);
                        } else {
                            perm[0] = static_cast<int8_T>(i3);
                            perm[1] = static_cast<int8_T>(nTail);
                            perm[2] = static_cast<int8_T>(i4);
                            perm[3] = static_cast<int8_T>(nQuartets);
                        }
                    } else {
                        perm[0] = static_cast<int8_T>(i3);
                        perm[1] = static_cast<int8_T>(i4);
                        perm[2] = static_cast<int8_T>(nTail);
                        perm[3] = static_cast<int8_T>(nQuartets);
                    }
                }

                b_idx_data[tailOffset] = static_cast<int32_T>(idx4
                    [static_cast<int32_T>(static_cast<int32_T>(perm[0]) - 1)]);
                b_idx_data[static_cast<int32_T>(tailOffset + 1)] =
                    static_cast<int32_T>(idx4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[1]) - 1)]);
                b_idx_data[static_cast<int32_T>(tailOffset + 2)] =
                    static_cast<int32_T>(idx4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[2]) - 1)]);
                b_idx_data[static_cast<int32_T>(tailOffset + 3)] =
                    static_cast<int32_T>(idx4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[3]) - 1)]);
                b_x_data[tailOffset] = x4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[0]) - 1)];
                b_x_data[static_cast<int32_T>(tailOffset + 1)] = x4[static_cast<
                    int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                b_x_data[static_cast<int32_T>(tailOffset + 2)] = x4[static_cast<
                    int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                b_x_data[static_cast<int32_T>(tailOffset + 3)] = x4[static_cast<
                    int32_T>(static_cast<int32_T>(perm[3]) - 1)];
            }

            nQuartets = static_cast<int32_T>(nQuartets_tmp << 2);
            nLeft = static_cast<int32_T>(vwork_size_idx_0 - nQuartets);
            if (nLeft > 0) {
                for (tailOffset = 0; tailOffset <= static_cast<int32_T>(nLeft -
                        1); tailOffset = static_cast<int32_T>(tailOffset + 1)) {
                    c_k = static_cast<int32_T>(nQuartets + tailOffset);
                    idx4[tailOffset] = static_cast<int8_T>(static_cast<int32_T>
                        (c_k + 1));
                    x4[tailOffset] = b_x_data[c_k];
                }

                perm[1] = 0;
                perm[2] = 0;
                perm[3] = 0;
                switch (nLeft) {
                  case 1:
                    perm[0] = 1;
                    break;

                  case 2:
                    if (x4[0] <= x4[1]) {
                        perm[0] = 1;
                        perm[1] = 2;
                    } else {
                        perm[0] = 2;
                        perm[1] = 1;
                    }
                    break;

                  default:
                    if (x4[0] <= x4[1]) {
                        if (x4[1] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 2;
                            perm[2] = 3;
                        } else if (x4[0] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 3;
                            perm[2] = 2;
                        } else {
                            perm[0] = 3;
                            perm[1] = 1;
                            perm[2] = 2;
                        }
                    } else if (x4[0] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 1;
                        perm[2] = 3;
                    } else if (x4[1] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 3;
                        perm[2] = 1;
                    } else {
                        perm[0] = 3;
                        perm[1] = 2;
                        perm[2] = 1;
                    }
                    break;
                }

                for (tailOffset = 0; tailOffset <= static_cast<int32_T>(nLeft -
                        1); tailOffset = static_cast<int32_T>(tailOffset + 1)) {
                    c_k = static_cast<int32_T>(static_cast<int32_T>
                        (perm[tailOffset]) - 1);
                    nTail = static_cast<int32_T>(nQuartets + tailOffset);
                    b_idx_data[nTail] = static_cast<int32_T>(idx4[c_k]);
                    b_x_data[nTail] = x4[c_k];
                }
            }

            if (vwork_size_idx_0 > 1) {
                nQuartets = static_cast<int32_T>(static_cast<int8_T>
                    (vwork_size_idx_0));
                for (c_k = 0; c_k <= static_cast<int32_T>(nQuartets - 1); c_k++)
                {
                    vwork_data[c_k] = 0;
                }

                for (c_k = 0; c_k <= static_cast<int32_T>(vwork_size_idx_0 - 1);
                     c_k++) {
                    xwork_data[c_k] = 0;
                }

                nLeft = nQuartets_tmp;
                nQuartets = 4;
                while (nLeft > 1) {
                    if (static_cast<uint32_T>(static_cast<uint32_T>(nLeft) & 1U)
                        != 0U) {
                        nLeft = static_cast<int32_T>(nLeft - 1);
                        tailOffset = static_cast<int32_T>(nQuartets * nLeft);
                        nTail = static_cast<int32_T>(vwork_size_idx_0 -
                            tailOffset);
                        if (nTail > nQuartets) {
                            FlightMissionMode_merge_j(b_idx_data, b_x_data,
                                tailOffset, nQuartets, static_cast<int32_T>
                                (nTail - nQuartets), vwork_data, xwork_data);
                        }
                    }

                    tailOffset = static_cast<int32_T>(nQuartets << 1);
                    nLeft = static_cast<int32_T>(nLeft >> 1);
                    for (nTail = 0; nTail <= static_cast<int32_T>(nLeft - 1);
                            nTail = static_cast<int32_T>(nTail + 1)) {
                        FlightMissionMode_merge_j(b_idx_data, b_x_data,
                            static_cast<int32_T>(nTail * tailOffset), nQuartets,
                            nQuartets, vwork_data, xwork_data);
                    }

                    nQuartets = tailOffset;
                }

                if (vwork_size_idx_0 > nQuartets) {
                    FlightMissionMode_merge_j(b_idx_data, b_x_data, 0, nQuartets,
                        static_cast<int32_T>(vwork_size_idx_0 - nQuartets),
                        vwork_data, xwork_data);
                }
            }
        }

        for (c_k = 0; c_k <= static_cast<int32_T>(vwork_size_idx_0 - 1); c_k++)
        {
            vwork_data[c_k] = b_x_data[c_k];
        }

        for (nQuartets = 0; nQuartets <= b; nQuartets = static_cast<int32_T>
                (nQuartets + 1)) {
            c_k = static_cast<int32_T>(static_cast<int32_T>(nQuartets * vstride)
                + dim);
            x_data[c_k] = b_x_data[nQuartets];
            idx_data[c_k] = b_idx_data[nQuartets];
        }
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_do_vectors_o(real_T c_data[], int32_T c_size[2],
    int32_T ia_data[], int32_T *ia_size, int32_T *ib_size)
{
    static const real_T b_a[28]{ 6.384265086E+9, 6.384265284E+9, 6.384480708E+9,
        6.384480906E+9, 6.384473283E+9, 6.384263997E+9, 2.1067690282E+11,
        2.10676902826E+11, 2.10677124976E+11, 2.10677124982E+11,
        2.10677124751E+11, 2.10676902787E+11, 2.10680747748E+11,
        2.10680754288E+11, 2.10687863274E+11, 2.10687869814E+11,
        2.10687618255E+11, 2.10680711811E+11, 6.384264226E+9, 6.384264232E+9,
        6.384264001E+9, 6.38447332E+9, 6.384473281E+9, 6.384473314E+9,
        6.384265282E+9, 6.384480904E+9, 6.38426509E+9, 6.384480712E+9 };

    static const int32_T e[28]{ 6, 21, 19, 20, 1, 27, 25, 2, 23, 5, 24, 22, 3,
        28, 26, 4, 12, 7, 8, 11, 9, 10, 18, 13, 14, 17, 15, 16 };

    static const int8_T f[28]{ 6, 21, 19, 20, 1, 27, 25, 2, 23, 5, 24, 22, 3, 28,
        26, 4, 12, 7, 8, 11, 9, 10, 18, 13, 14, 17, 15, 16 };

    emxArray_int32_T_28_FlightMissionMode_T ia_data_0;
    int32_T a;
    int32_T iafirst;
    int32_T ialast;
    int32_T nc;
    int32_T nia;
    c_size[0] = 1;
    *ib_size = 0;
    nc = 0;
    nia = -1;
    iafirst = 0;
    ialast = 1;
    while (ialast <= 28) {
        a = ialast;
        skip_to_last_equal_value_g4hWwl2B(&a, b_a, e);
        nc = static_cast<int32_T>(nc + 1);
        nia = static_cast<int32_T>(nia + 1);
        ia_data[nia] = static_cast<int32_T>(f[iafirst]);
        ialast = static_cast<int32_T>(a + 1);
        iafirst = a;
    }

    if (1 > static_cast<int32_T>(nia + 1)) {
        iafirst = -1;
    } else {
        iafirst = nia;
    }

    *ia_size = static_cast<int32_T>(iafirst + 1);
    FlightMissionMode_sort_h(ia_data, ia_size, ia_data_0.data, &ia_data_0.size);
    for (iafirst = 0; iafirst <= nia; iafirst = static_cast<int32_T>(iafirst + 1))
    {
        c_data[iafirst] = b_a[static_cast<int32_T>(ia_data[iafirst] - 1)];
    }

    if (1 > nc) {
        c_size[1] = 0;
    } else {
        c_size[1] = nc;
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_do_vectors_on(const real_T b_data[], const int32_T
    *b_size, real_T c_data[], int32_T c_size[2], int32_T ia_data[], int32_T
    *ia_size, int32_T *ib_size)
{
    emxArray_int32_T_28_FlightMissionMode_T ia_data_0;
    real_T tmp[28];
    int32_T bperm_data[28];
    int32_T iwork_data[28];
    int32_T b_k;
    int32_T i;
    int32_T i2;
    int32_T i_0;
    int32_T j;
    int32_T k;
    int32_T kEnd;
    int32_T n;
    int32_T pEnd;
    int32_T qEnd;
    c_size[0] = 1;
    *ib_size = 0;
    i = static_cast<int32_T>(static_cast<int8_T>(*b_size));
    for (i_0 = 0; i_0 <= static_cast<int32_T>(i - 1); i_0++) {
        bperm_data[i_0] = 0;
    }

    if (*b_size != 0) {
        for (i = 1; i <= static_cast<int32_T>(static_cast<int32_T>(*b_size + 1)
                - 2); i = static_cast<int32_T>(i + 2)) {
            if (b_data[static_cast<int32_T>(i - 1)] <= b_data[i]) {
                bperm_data[static_cast<int32_T>(i - 1)] = i;
                bperm_data[i] = static_cast<int32_T>(i + 1);
            } else {
                bperm_data[static_cast<int32_T>(i - 1)] = static_cast<int32_T>(i
                    + 1);
                bperm_data[i] = i;
            }
        }

        if (static_cast<uint32_T>(static_cast<uint32_T>(*b_size) & 1U) != 0U) {
            bperm_data[static_cast<int32_T>(*b_size - 1)] = *b_size;
        }

        i = 2;
        while (i < static_cast<int32_T>(static_cast<int32_T>(*b_size + 1) - 1))
        {
            i2 = static_cast<int32_T>(i << 1);
            j = 1;
            pEnd = static_cast<int32_T>(i + 1);
            while (pEnd < static_cast<int32_T>(*b_size + 1)) {
                int32_T c_k;
                int32_T q;
                n = j;
                q = pEnd;
                qEnd = static_cast<int32_T>(j + i2);
                if (qEnd > static_cast<int32_T>(*b_size + 1)) {
                    qEnd = static_cast<int32_T>(*b_size + 1);
                }

                c_k = 0;
                kEnd = static_cast<int32_T>(qEnd - j);
                while (static_cast<int32_T>(c_k + 1) <= kEnd) {
                    int32_T tmp_0;
                    i_0 = bperm_data[static_cast<int32_T>(q - 1)];
                    tmp_0 = bperm_data[static_cast<int32_T>(n - 1)];
                    if (b_data[static_cast<int32_T>(tmp_0 - 1)] <= b_data[
                            static_cast<int32_T>(i_0 - 1)]) {
                        iwork_data[c_k] = tmp_0;
                        n = static_cast<int32_T>(n + 1);
                        if (n == pEnd) {
                            while (q < qEnd) {
                                c_k = static_cast<int32_T>(c_k + 1);
                                iwork_data[c_k] = bperm_data[static_cast<int32_T>
                                    (q - 1)];
                                q = static_cast<int32_T>(q + 1);
                            }
                        }
                    } else {
                        iwork_data[c_k] = i_0;
                        q = static_cast<int32_T>(q + 1);
                        if (q == qEnd) {
                            while (n < pEnd) {
                                c_k = static_cast<int32_T>(c_k + 1);
                                iwork_data[c_k] = bperm_data[static_cast<int32_T>
                                    (n - 1)];
                                n = static_cast<int32_T>(n + 1);
                            }
                        }
                    }

                    c_k = static_cast<int32_T>(c_k + 1);
                }

                for (pEnd = 0; pEnd <= static_cast<int32_T>(kEnd - 1); pEnd =
                        static_cast<int32_T>(pEnd + 1)) {
                    bperm_data[static_cast<int32_T>(static_cast<int32_T>(j +
                        pEnd) - 1)] = iwork_data[pEnd];
                }

                j = qEnd;
                pEnd = static_cast<int32_T>(qEnd + i);
            }

            i = i2;
        }
    }

    n = 0;
    i = -1;
    i2 = 0;
    j = 1;
    qEnd = 1;
    while ((j <= 28) && (qEnd <= *b_size)) {
        real_T ak;
        real_T b_absx;
        real_T bk;
        boolean_T exitg1;
        kEnd = j;
        for (i_0 = 0; i_0 < 28; i_0++) {
            tmp[i_0] = static_cast<real_T>(i_0) + 1.0;
            iwork_data[i_0] = static_cast<int32_T>(i_0 + 1);
        }

        ak = skip_to_last_equal_value_g4hWwl2B(&kEnd, tmp, iwork_data);
        j = kEnd;
        pEnd = qEnd;
        bk = b_data[static_cast<int32_T>(bperm_data[static_cast<int32_T>(qEnd -
            1)] - 1)];
        exitg1 = false;
        while ((!exitg1) && (pEnd < *b_size)) {
            b_absx = std::abs(bk / 2.0);
            if (b_absx <= 2.2250738585072014E-308) {
                b_absx = 4.94065645841247E-324;
            } else {
                frexp(b_absx, &b_k);
                b_absx = std::ldexp(1.0, static_cast<int32_T>(b_k - 53));
            }

            if (std::abs(bk - b_data[static_cast<int32_T>(bperm_data[pEnd] - 1)])
                < b_absx) {
                pEnd = static_cast<int32_T>(pEnd + 1);
            } else {
                exitg1 = true;
            }
        }

        qEnd = pEnd;
        b_absx = std::abs(bk / 2.0);
        if (b_absx <= 2.2250738585072014E-308) {
            b_absx = 4.94065645841247E-324;
        } else {
            frexp(b_absx, &k);
            b_absx = std::ldexp(1.0, static_cast<int32_T>(k - 53));
        }

        if (std::abs(bk - ak) < b_absx) {
            j = static_cast<int32_T>(kEnd + 1);
            i2 = kEnd;
            qEnd = static_cast<int32_T>(pEnd + 1);
        } else if (ak < bk) {
            n = static_cast<int32_T>(n + 1);
            i = static_cast<int32_T>(i + 1);
            ia_data[i] = static_cast<int32_T>(i2 + 1);
            j = static_cast<int32_T>(kEnd + 1);
            i2 = kEnd;
        } else {
            qEnd = static_cast<int32_T>(pEnd + 1);
        }
    }

    while (j <= 28) {
        b_k = j;
        for (i_0 = 0; i_0 < 28; i_0++) {
            tmp[i_0] = static_cast<real_T>(i_0) + 1.0;
            iwork_data[i_0] = static_cast<int32_T>(i_0 + 1);
        }

        skip_to_last_equal_value_g4hWwl2B(&b_k, tmp, iwork_data);
        n = static_cast<int32_T>(n + 1);
        i = static_cast<int32_T>(i + 1);
        ia_data[i] = static_cast<int32_T>(i2 + 1);
        j = static_cast<int32_T>(b_k + 1);
        i2 = b_k;
    }

    if (1 > static_cast<int32_T>(i + 1)) {
        i2 = -1;
    } else {
        i2 = i;
    }

    *ia_size = static_cast<int32_T>(i2 + 1);
    FlightMissionMode_sort_h(ia_data, ia_size, ia_data_0.data, &ia_data_0.size);
    for (b_k = 0; b_k <= i; b_k = static_cast<int32_T>(b_k + 1)) {
        c_data[b_k] = static_cast<real_T>(static_cast<int32_T>(ia_data[b_k] - 1))
            + 1.0;
    }

    if (1 > n) {
        c_size[1] = 0;
    } else {
        c_size[1] = n;
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_merge_j5(int32_T idx_data[], real_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], real_T
    xwork_data[])
{
    if (nq != 0) {
        int32_T iout;
        int32_T n;
        int32_T n_tmp;
        int32_T q;
        n_tmp = static_cast<int32_T>(np + nq);
        for (q = 0; q <= static_cast<int32_T>(n_tmp - 1); q =
                static_cast<int32_T>(q + 1)) {
            iout = static_cast<int32_T>(offset + q);
            iwork_data[q] = idx_data[iout];
            xwork_data[q] = x_data[iout];
        }

        n = 0;
        q = np;
        iout = static_cast<int32_T>(offset - 1);
        int32_T exitg1;
        do {
            exitg1 = 0;
            iout = static_cast<int32_T>(iout + 1);
            if (xwork_data[n] <= xwork_data[q]) {
                idx_data[iout] = iwork_data[n];
                x_data[iout] = xwork_data[n];
                if (static_cast<int32_T>(n + 1) < np) {
                    n = static_cast<int32_T>(n + 1);
                } else {
                    exitg1 = 1;
                }
            } else {
                idx_data[iout] = iwork_data[q];
                x_data[iout] = xwork_data[q];
                if (static_cast<int32_T>(q + 1) < n_tmp) {
                    q = static_cast<int32_T>(q + 1);
                } else {
                    q = static_cast<int32_T>(iout - n);
                    while (static_cast<int32_T>(n + 1) <= np) {
                        iout = static_cast<int32_T>(static_cast<int32_T>(q + n)
                            + 1);
                        idx_data[iout] = iwork_data[n];
                        x_data[iout] = xwork_data[n];
                        n = static_cast<int32_T>(n + 1);
                    }

                    exitg1 = 1;
                }
            }
        } while (exitg1 == 0);
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_sort_hn(real_T x_data[], const int32_T *x_size)
{
    real_T b_x_data[28];
    real_T vwork_data[28];
    real_T x4[4];
    int32_T idx_data[28];
    int32_T iwork_data[28];
    int32_T b;
    int32_T dim;
    int32_T n;
    int32_T vstride;
    int32_T vwork_size_idx_0;
    int8_T idx4[4];
    int8_T perm[4];
    dim = 2;
    if (*x_size != 1) {
        dim = 1;
        b = static_cast<int32_T>(*x_size - 1);
    } else {
        b = 0;
    }

    vwork_size_idx_0 = static_cast<int32_T>(b + 1);
    vstride = 1;
    n = 0;
    while (n <= static_cast<int32_T>(dim - 2)) {
        vstride = static_cast<int32_T>(vstride * *x_size);
        n = 1;
    }

    for (dim = 0; dim <= static_cast<int32_T>(vstride - 1); dim = static_cast<
            int32_T>(dim + 1)) {
        for (n = 0; n <= b; n = static_cast<int32_T>(n + 1)) {
            vwork_data[n] = x_data[static_cast<int32_T>(static_cast<int32_T>(n *
                vstride) + dim)];
        }

        for (n = 0; n <= static_cast<int32_T>(vwork_size_idx_0 - 1); n++) {
            b_x_data[n] = vwork_data[n];
        }

        if (vwork_size_idx_0 != 0) {
            int32_T ib;
            int32_T nPairs;
            int32_T nTail;
            ib = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
            for (n = 0; n <= static_cast<int32_T>(ib - 1); n++) {
                idx_data[n] = 0;
            }

            x4[0] = 0.0;
            idx4[0] = 0;
            x4[1] = 0.0;
            idx4[1] = 0;
            x4[2] = 0.0;
            idx4[2] = 0;
            x4[3] = 0.0;
            idx4[3] = 0;
            ib = 0;
            for (nPairs = 0; nPairs <= static_cast<int32_T>(vwork_size_idx_0 - 1);
                 nPairs = static_cast<int32_T>(nPairs + 1)) {
                ib = static_cast<int32_T>(ib + 1);
                idx4[static_cast<int32_T>(ib - 1)] = static_cast<int8_T>(
                    static_cast<int32_T>(nPairs + 1));
                x4[static_cast<int32_T>(ib - 1)] = b_x_data[nPairs];
                if (ib == 4) {
                    real_T tmp;
                    real_T tmp_0;
                    int32_T i4;
                    if (x4[0] <= x4[1]) {
                        ib = 1;
                        nTail = 2;
                    } else {
                        ib = 2;
                        nTail = 1;
                    }

                    if (x4[2] <= x4[3]) {
                        n = 3;
                        i4 = 4;
                    } else {
                        n = 4;
                        i4 = 3;
                    }

                    tmp = x4[static_cast<int32_T>(ib - 1)];
                    tmp_0 = x4[static_cast<int32_T>(n - 1)];
                    if (tmp <= tmp_0) {
                        tmp = x4[static_cast<int32_T>(nTail - 1)];
                        if (tmp <= tmp_0) {
                            perm[0] = static_cast<int8_T>(ib);
                            perm[1] = static_cast<int8_T>(nTail);
                            perm[2] = static_cast<int8_T>(n);
                            perm[3] = static_cast<int8_T>(i4);
                        } else if (tmp <= x4[static_cast<int32_T>(i4 - 1)]) {
                            perm[0] = static_cast<int8_T>(ib);
                            perm[1] = static_cast<int8_T>(n);
                            perm[2] = static_cast<int8_T>(nTail);
                            perm[3] = static_cast<int8_T>(i4);
                        } else {
                            perm[0] = static_cast<int8_T>(ib);
                            perm[1] = static_cast<int8_T>(n);
                            perm[2] = static_cast<int8_T>(i4);
                            perm[3] = static_cast<int8_T>(nTail);
                        }
                    } else {
                        tmp_0 = x4[static_cast<int32_T>(i4 - 1)];
                        if (tmp <= tmp_0) {
                            if (x4[static_cast<int32_T>(nTail - 1)] <= tmp_0) {
                                perm[0] = static_cast<int8_T>(n);
                                perm[1] = static_cast<int8_T>(ib);
                                perm[2] = static_cast<int8_T>(nTail);
                                perm[3] = static_cast<int8_T>(i4);
                            } else {
                                perm[0] = static_cast<int8_T>(n);
                                perm[1] = static_cast<int8_T>(ib);
                                perm[2] = static_cast<int8_T>(i4);
                                perm[3] = static_cast<int8_T>(nTail);
                            }
                        } else {
                            perm[0] = static_cast<int8_T>(n);
                            perm[1] = static_cast<int8_T>(i4);
                            perm[2] = static_cast<int8_T>(ib);
                            perm[3] = static_cast<int8_T>(nTail);
                        }
                    }

                    idx_data[static_cast<int32_T>(nPairs - 3)] =
                        static_cast<int32_T>(idx4[static_cast<int32_T>(
                        static_cast<int32_T>(perm[0]) - 1)]);
                    idx_data[static_cast<int32_T>(nPairs - 2)] =
                        static_cast<int32_T>(idx4[static_cast<int32_T>(
                        static_cast<int32_T>(perm[1]) - 1)]);
                    idx_data[static_cast<int32_T>(nPairs - 1)] =
                        static_cast<int32_T>(idx4[static_cast<int32_T>(
                        static_cast<int32_T>(perm[2]) - 1)]);
                    idx_data[nPairs] = static_cast<int32_T>(idx4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[3]) - 1)]);
                    b_x_data[static_cast<int32_T>(nPairs - 3)] = x4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[0]) - 1)];
                    b_x_data[static_cast<int32_T>(nPairs - 2)] = x4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                    b_x_data[static_cast<int32_T>(nPairs - 1)] = x4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                    b_x_data[nPairs] = x4[static_cast<int32_T>
                        (static_cast<int32_T>(perm[3]) - 1)];
                    ib = 0;
                }
            }

            if (ib > 0) {
                perm[1] = 0;
                perm[2] = 0;
                perm[3] = 0;
                switch (ib) {
                  case 1:
                    perm[0] = 1;
                    break;

                  case 2:
                    if (x4[0] <= x4[1]) {
                        perm[0] = 1;
                        perm[1] = 2;
                    } else {
                        perm[0] = 2;
                        perm[1] = 1;
                    }
                    break;

                  default:
                    if (x4[0] <= x4[1]) {
                        if (x4[1] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 2;
                            perm[2] = 3;
                        } else if (x4[0] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 3;
                            perm[2] = 2;
                        } else {
                            perm[0] = 3;
                            perm[1] = 1;
                            perm[2] = 2;
                        }
                    } else if (x4[0] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 1;
                        perm[2] = 3;
                    } else if (x4[1] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 3;
                        perm[2] = 1;
                    } else {
                        perm[0] = 3;
                        perm[1] = 2;
                        perm[2] = 1;
                    }
                    break;
                }

                for (nPairs = 0; nPairs <= static_cast<int32_T>(ib - 1); nPairs =
                     static_cast<int32_T>(nPairs + 1)) {
                    nTail = static_cast<int32_T>(static_cast<int32_T>
                        (perm[nPairs]) - 1);
                    n = static_cast<int32_T>(static_cast<int32_T>
                        (vwork_size_idx_0 - ib) + nPairs);
                    idx_data[n] = static_cast<int32_T>(idx4[nTail]);
                    b_x_data[n] = x4[nTail];
                }
            }

            if (vwork_size_idx_0 > 1) {
                ib = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
                for (n = 0; n <= static_cast<int32_T>(ib - 1); n++) {
                    iwork_data[n] = 0;
                }

                for (n = 0; n <= static_cast<int32_T>(vwork_size_idx_0 - 1); n++)
                {
                    vwork_data[n] = 0.0;
                }

                nPairs = static_cast<int32_T>(vwork_size_idx_0 >> 2);
                n = 4;
                while (nPairs > 1) {
                    if (static_cast<uint32_T>(static_cast<uint32_T>(nPairs) & 1U)
                        != 0U) {
                        nPairs = static_cast<int32_T>(nPairs - 1);
                        ib = static_cast<int32_T>(n * nPairs);
                        nTail = static_cast<int32_T>(vwork_size_idx_0 - ib);
                        if (nTail > n) {
                            FlightMissionMode_merge_j5(idx_data, b_x_data, ib, n,
                                static_cast<int32_T>(nTail - n), iwork_data,
                                vwork_data);
                        }
                    }

                    ib = static_cast<int32_T>(n << 1);
                    nPairs = static_cast<int32_T>(nPairs >> 1);
                    for (nTail = 0; nTail <= static_cast<int32_T>(nPairs - 1);
                            nTail = static_cast<int32_T>(nTail + 1)) {
                        FlightMissionMode_merge_j5(idx_data, b_x_data,
                            static_cast<int32_T>(nTail * ib), n, n, iwork_data,
                            vwork_data);
                    }

                    n = ib;
                }

                if (vwork_size_idx_0 > n) {
                    FlightMissionMode_merge_j5(idx_data, b_x_data, 0, n,
                        static_cast<int32_T>(vwork_size_idx_0 - n), iwork_data,
                        vwork_data);
                }
            }
        }

        for (n = 0; n <= static_cast<int32_T>(vwork_size_idx_0 - 1); n++) {
            vwork_data[n] = b_x_data[n];
        }

        for (n = 0; n <= b; n = static_cast<int32_T>(n + 1)) {
            x_data[static_cast<int32_T>(dim + static_cast<int32_T>(n * vstride))]
                = b_x_data[n];
        }
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void* FlightMissionMode_uavDubinsBuildable_uavDubinsBuildable_d(real_T
    airSpeed, real_T maxRollAngle, const real_T flightPathAngle[2], const real_T
    disabledPathTypes_data[], const int32_T *disabledPathTypes_size)
{
    real_T b_disabledPathTypes_data[28];
    real_T b_flightPathAngle[2];
    int32_T loop_ub;
    b_flightPathAngle[0] = flightPathAngle[0];
    b_flightPathAngle[1] = flightPathAngle[1];
    loop_ub = *disabledPathTypes_size;
    for (int32_T i{0}; i <= static_cast<int32_T>(loop_ub - 1); i++) {
        b_disabledPathTypes_data[i] = disabledPathTypes_data[i];
    }

    return uavDubinsConnectionObj(airSpeed, maxRollAngle, &b_flightPathAngle[0],
        &b_disabledPathTypes_data[0], static_cast<uint32_T>
        (*disabledPathTypes_size));
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_c(const char_T a_data[], const int32_T
    a_size[2])
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[2]{ 'H', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a_data[kstr]))
                                           & 127)] != b[static_cast<int32_T>
                        (c[kstr])]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_cl(const char_T a_data[], const
    int32_T a_size[2])
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[2]{ 'H', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a_data[kstr]))
                                           & 127)] != b[static_cast<int32_T>
                        (c[kstr])]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_fc(const
    real_T varargin_1[4], const real_T varargin_2[4], real_T varargin_3, real_T
    varargin_4, real_T varargin_5, real_T varargin_6, const
    cell_wrap_10_FlightMissionMode_T varargin_7[4], const real_T varargin_8[4],
    uavDubinsPathSegment_FlightMissionMode_b_T *b_this)
{
    static const char_T d[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
        'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',
        'Z', '[', '\\', ']', '^', '_', '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
        'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', '\x7f' };

    real_T thetaWrap;
    int32_T k;
    b_this->MinTurningRadius = varargin_5;
    b_this->StartPose[0] = varargin_1[0];
    b_this->StartPose[1] = varargin_1[1];
    b_this->StartPose[2] = varargin_1[2];
    thetaWrap = mod_ZflSpsmf(varargin_1[3]);
    b_this->StartPose[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (varargin_1[3] > 0.0)))) {
        b_this->StartPose[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->StartPose[3]);
    b_this->GoalPose[0] = varargin_2[0];
    b_this->GoalPose[1] = varargin_2[1];
    b_this->GoalPose[2] = varargin_2[2];
    thetaWrap = mod_ZflSpsmf(varargin_2[3]);
    b_this->GoalPose[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (varargin_2[3] > 0.0)))) {
        b_this->GoalPose[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->GoalPose[3]);
    b_this->AirSpeed = varargin_4;
    b_this->HelixRadius = varargin_6;
    b_this->FlightPathAngle = varargin_3;
    b_this->MotionLengths[0] = varargin_8[0];
    b_this->MotionTypes[0] = varargin_7[0];
    b_this->MotionLengths[1] = varargin_8[1];
    b_this->MotionTypes[1] = varargin_7[1];
    b_this->MotionLengths[2] = varargin_8[2];
    b_this->MotionTypes[2] = varargin_7[2];
    b_this->MotionLengths[3] = varargin_8[3];
    b_this->MotionTypes[3] = varargin_7[3];
    b_this->MotionTypes[0].f1.size[0] = 1;
    b_this->MotionTypes[0].f1.size[1] = varargin_7[0].f1.size[1];
    for (k = 0; k <= static_cast<int32_T>(varargin_7[0].f1.size[1] - 1); k =
            static_cast<int32_T>(k + 1)) {
        b_this->MotionTypes[0].f1.data[k] = d[static_cast<int32_T>(static_cast<
            uint8_T>(varargin_7[0].f1.data[k]))];
    }

    b_this->MotionTypes[1].f1.size[0] = 1;
    b_this->MotionTypes[1].f1.size[1] = 1;
    b_this->MotionTypes[1].f1.data[0] = d[static_cast<int32_T>
        (static_cast<int32_T>(static_cast<uint8_T>(varargin_7[1].f1.data[0])) &
         127)];
    b_this->MotionTypes[2].f1.size[0] = 1;
    b_this->MotionTypes[2].f1.size[1] = 1;
    b_this->MotionTypes[2].f1.data[0] = d[static_cast<int32_T>
        (static_cast<int32_T>(static_cast<uint8_T>(varargin_7[2].f1.data[0])) &
         127)];
    b_this->MotionTypes[3].f1.size[0] = 1;
    b_this->MotionTypes[3].f1.size[1] = varargin_7[3].f1.size[1];
    for (k = 0; k <= static_cast<int32_T>(varargin_7[3].f1.size[1] - 1); k =
            static_cast<int32_T>(k + 1)) {
        b_this->MotionTypes[3].f1.data[k] = d[static_cast<int32_T>
            (static_cast<uint8_T>(varargin_7[3].f1.data[k]))];
    }

    if (FlightMissionMode_strcmp_c(b_this->MotionTypes[0].f1.data,
            b_this->MotionTypes[0].f1.size)) {
        b_this->MotionTypes[0].f1.size[0] = 1;
        b_this->MotionTypes[0].f1.size[1] = 2;
        b_this->MotionTypes[0].f1.data[0] = 'H';
        b_this->MotionTypes[0].f1.data[1] = 'l';
    } else if (FlightMissionMode_strcmp_cl(b_this->MotionTypes[0].f1.data,
                b_this->MotionTypes[0].f1.size)) {
        b_this->MotionTypes[0].f1.size[0] = 1;
        b_this->MotionTypes[0].f1.size[1] = 2;
        b_this->MotionTypes[0].f1.data[0] = 'H';
        b_this->MotionTypes[0].f1.data[1] = 'r';
    } else if (FlightMissionMode_strcmp_cl(b_this->MotionTypes[3].f1.data,
                b_this->MotionTypes[3].f1.size)) {
        b_this->MotionTypes[3].f1.size[0] = 1;
        b_this->MotionTypes[3].f1.size[1] = 2;
        b_this->MotionTypes[3].f1.data[0] = 'H';
        b_this->MotionTypes[3].f1.data[1] = 'r';
    } else if (FlightMissionMode_strcmp_c(b_this->MotionTypes[3].f1.data,
                b_this->MotionTypes[3].f1.size)) {
        b_this->MotionTypes[3].f1.size[0] = 1;
        b_this->MotionTypes[3].f1.size[1] = 2;
        b_this->MotionTypes[3].f1.data[0] = 'H';
        b_this->MotionTypes[3].f1.data[1] = 'l';
    }

    b_this->Length = ((varargin_8[0] + varargin_8[1]) + varargin_8[2]) +
        varargin_8[3];
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_uavDubinsBuiltins_connect_l(const
    uavDubinsConnection_FlightMissionMode_T *obj, const real_T startPose[4],
    const real_T goalPose[4], real_T turningRadius, const real_T dpt_data[],
    const int32_T *dpt_size, uavDubinsPathSegment_FlightMissionMode_b_T
    *pathSegObjs, real_T *pathCosts)
{
    void* b_obj_UAVDubinsBuildableObj;
    cell_wrap_10_FlightMissionMode_T ac;
    cell_wrap_10_FlightMissionMode_T ad;
    cell_wrap_10_FlightMissionMode_T ae;
    cell_wrap_10_FlightMissionMode_T af;
    cell_wrap_10_FlightMissionMode_T bc;
    cell_wrap_10_FlightMissionMode_T bd;
    cell_wrap_10_FlightMissionMode_T be;
    cell_wrap_10_FlightMissionMode_T bf;
    cell_wrap_10_FlightMissionMode_T cc;
    cell_wrap_10_FlightMissionMode_T cd;
    cell_wrap_10_FlightMissionMode_T ce;
    cell_wrap_10_FlightMissionMode_T cf;
    cell_wrap_10_FlightMissionMode_T dc;
    cell_wrap_10_FlightMissionMode_T dd;
    cell_wrap_10_FlightMissionMode_T de;
    cell_wrap_10_FlightMissionMode_T df;
    cell_wrap_10_FlightMissionMode_T ec;
    cell_wrap_10_FlightMissionMode_T ed;
    cell_wrap_10_FlightMissionMode_T ee;
    cell_wrap_10_FlightMissionMode_T ef;
    cell_wrap_10_FlightMissionMode_T fc;
    cell_wrap_10_FlightMissionMode_T fd;
    cell_wrap_10_FlightMissionMode_T fe;
    cell_wrap_10_FlightMissionMode_T ff;
    cell_wrap_10_FlightMissionMode_T gc;
    cell_wrap_10_FlightMissionMode_T gd;
    cell_wrap_10_FlightMissionMode_T ge;
    cell_wrap_10_FlightMissionMode_T gf;
    cell_wrap_10_FlightMissionMode_T hc;
    cell_wrap_10_FlightMissionMode_T hd;
    cell_wrap_10_FlightMissionMode_T he;
    cell_wrap_10_FlightMissionMode_T hf;
    cell_wrap_10_FlightMissionMode_T ib;
    cell_wrap_10_FlightMissionMode_T ic;
    cell_wrap_10_FlightMissionMode_T id;
    cell_wrap_10_FlightMissionMode_T ie;
    cell_wrap_10_FlightMissionMode_T jb;
    cell_wrap_10_FlightMissionMode_T jc;
    cell_wrap_10_FlightMissionMode_T jd;
    cell_wrap_10_FlightMissionMode_T je;
    cell_wrap_10_FlightMissionMode_T jf;
    cell_wrap_10_FlightMissionMode_T kb;
    cell_wrap_10_FlightMissionMode_T kc;
    cell_wrap_10_FlightMissionMode_T kd;
    cell_wrap_10_FlightMissionMode_T ke;
    cell_wrap_10_FlightMissionMode_T kf;
    cell_wrap_10_FlightMissionMode_T lb;
    cell_wrap_10_FlightMissionMode_T lc;
    cell_wrap_10_FlightMissionMode_T ld;
    cell_wrap_10_FlightMissionMode_T le;
    cell_wrap_10_FlightMissionMode_T lf;
    cell_wrap_10_FlightMissionMode_T mb;
    cell_wrap_10_FlightMissionMode_T mc;
    cell_wrap_10_FlightMissionMode_T md;
    cell_wrap_10_FlightMissionMode_T me;
    cell_wrap_10_FlightMissionMode_T mf;
    cell_wrap_10_FlightMissionMode_T nb;
    cell_wrap_10_FlightMissionMode_T nc;
    cell_wrap_10_FlightMissionMode_T nd;
    cell_wrap_10_FlightMissionMode_T ne;
    cell_wrap_10_FlightMissionMode_T nf;
    cell_wrap_10_FlightMissionMode_T ob;
    cell_wrap_10_FlightMissionMode_T oc;
    cell_wrap_10_FlightMissionMode_T od;
    cell_wrap_10_FlightMissionMode_T oe;
    cell_wrap_10_FlightMissionMode_T of;
    cell_wrap_10_FlightMissionMode_T pb;
    cell_wrap_10_FlightMissionMode_T pc;
    cell_wrap_10_FlightMissionMode_T pd;
    cell_wrap_10_FlightMissionMode_T pe;
    cell_wrap_10_FlightMissionMode_T pf;
    cell_wrap_10_FlightMissionMode_T qb;
    cell_wrap_10_FlightMissionMode_T qc;
    cell_wrap_10_FlightMissionMode_T qd;
    cell_wrap_10_FlightMissionMode_T qe;
    cell_wrap_10_FlightMissionMode_T qf;
    cell_wrap_10_FlightMissionMode_T rb;
    cell_wrap_10_FlightMissionMode_T rc;
    cell_wrap_10_FlightMissionMode_T rd;
    cell_wrap_10_FlightMissionMode_T re;
    cell_wrap_10_FlightMissionMode_T rf;
    cell_wrap_10_FlightMissionMode_T sb;
    cell_wrap_10_FlightMissionMode_T sc;
    cell_wrap_10_FlightMissionMode_T sd;
    cell_wrap_10_FlightMissionMode_T se;
    cell_wrap_10_FlightMissionMode_T sf;
    cell_wrap_10_FlightMissionMode_T tb;
    cell_wrap_10_FlightMissionMode_T tc;
    cell_wrap_10_FlightMissionMode_T td;
    cell_wrap_10_FlightMissionMode_T te;
    cell_wrap_10_FlightMissionMode_T tf;
    cell_wrap_10_FlightMissionMode_T ub;
    cell_wrap_10_FlightMissionMode_T uc;
    cell_wrap_10_FlightMissionMode_T ud;
    cell_wrap_10_FlightMissionMode_T ue;
    cell_wrap_10_FlightMissionMode_T uf;
    cell_wrap_10_FlightMissionMode_T vb;
    cell_wrap_10_FlightMissionMode_T vc;
    cell_wrap_10_FlightMissionMode_T vd;
    cell_wrap_10_FlightMissionMode_T ve;
    cell_wrap_10_FlightMissionMode_T wb;
    cell_wrap_10_FlightMissionMode_T wc;
    cell_wrap_10_FlightMissionMode_T wd;
    cell_wrap_10_FlightMissionMode_T we;
    cell_wrap_10_FlightMissionMode_T xb;
    cell_wrap_10_FlightMissionMode_T xc;
    cell_wrap_10_FlightMissionMode_T xd;
    cell_wrap_10_FlightMissionMode_T xe;
    cell_wrap_10_FlightMissionMode_T yb;
    cell_wrap_10_FlightMissionMode_T yc;
    cell_wrap_10_FlightMissionMode_T yd;
    cell_wrap_10_FlightMissionMode_T ye;
    cell_wrap_22_FlightMissionMode_p_T motionTypes[28];
    cell_wrap_22_FlightMissionMode_p_T b;
    real_T g[16];
    real_T ml[16];
    real_T ml1[16];
    real_T s[16];
    real_T b_goalPose[4];
    real_T b_startPose[4];
    real_T ml1_0[4];
    real_T b_a;
    real_T b_fpa;
    real_T h;
    real_T mt;
    real_T mtr;
    ib.f1.size[0] = 1;
    ib.f1.size[1] = 1;
    ib.f1.data[0] = 'L';
    jb.f1.size[0] = 1;
    jb.f1.size[1] = 1;
    jb.f1.data[0] = 'S';
    kb.f1.size[0] = 1;
    kb.f1.size[1] = 1;
    kb.f1.data[0] = 'L';
    lb.f1.size[0] = 1;
    lb.f1.size[1] = 1;
    lb.f1.data[0] = 'N';
    b.f1[0] = ib;
    b.f1[1] = jb;
    b.f1[2] = kb;
    b.f1[3] = lb;
    mb.f1.size[0] = 1;
    mb.f1.size[1] = 1;
    mb.f1.data[0] = 'L';
    nb.f1.size[0] = 1;
    nb.f1.size[1] = 1;
    nb.f1.data[0] = 'S';
    ob.f1.size[0] = 1;
    ob.f1.size[1] = 1;
    ob.f1.data[0] = 'R';
    pb.f1.size[0] = 1;
    pb.f1.size[1] = 1;
    pb.f1.data[0] = 'N';
    qb.f1.size[0] = 1;
    qb.f1.size[1] = 1;
    qb.f1.data[0] = 'R';
    rb.f1.size[0] = 1;
    rb.f1.size[1] = 1;
    rb.f1.data[0] = 'S';
    sb.f1.size[0] = 1;
    sb.f1.size[1] = 1;
    sb.f1.data[0] = 'L';
    tb.f1.size[0] = 1;
    tb.f1.size[1] = 1;
    tb.f1.data[0] = 'N';
    ub.f1.size[0] = 1;
    ub.f1.size[1] = 1;
    ub.f1.data[0] = 'R';
    vb.f1.size[0] = 1;
    vb.f1.size[1] = 1;
    vb.f1.data[0] = 'S';
    wb.f1.size[0] = 1;
    wb.f1.size[1] = 1;
    wb.f1.data[0] = 'R';
    xb.f1.size[0] = 1;
    xb.f1.size[1] = 1;
    xb.f1.data[0] = 'N';
    yb.f1.size[0] = 1;
    yb.f1.size[1] = 1;
    yb.f1.data[0] = 'R';
    ac.f1.size[0] = 1;
    ac.f1.size[1] = 1;
    ac.f1.data[0] = 'L';
    bc.f1.size[0] = 1;
    bc.f1.size[1] = 1;
    bc.f1.data[0] = 'R';
    cc.f1.size[0] = 1;
    cc.f1.size[1] = 1;
    cc.f1.data[0] = 'N';
    dc.f1.size[0] = 1;
    dc.f1.size[1] = 1;
    dc.f1.data[0] = 'L';
    ec.f1.size[0] = 1;
    ec.f1.size[1] = 1;
    ec.f1.data[0] = 'R';
    fc.f1.size[0] = 1;
    fc.f1.size[1] = 1;
    fc.f1.data[0] = 'L';
    gc.f1.size[0] = 1;
    gc.f1.size[1] = 1;
    gc.f1.data[0] = 'N';
    hc.f1.size[0] = 1;
    hc.f1.size[1] = 2;
    ic.f1.size[0] = 1;
    ic.f1.size[1] = 1;
    ic.f1.data[0] = 'L';
    jc.f1.size[0] = 1;
    jc.f1.size[1] = 1;
    jc.f1.data[0] = 'S';
    kc.f1.size[0] = 1;
    kc.f1.size[1] = 1;
    kc.f1.data[0] = 'L';
    lc.f1.size[0] = 1;
    lc.f1.size[1] = 2;
    mc.f1.size[0] = 1;
    mc.f1.size[1] = 1;
    mc.f1.data[0] = 'L';
    nc.f1.size[0] = 1;
    nc.f1.size[1] = 1;
    nc.f1.data[0] = 'S';
    oc.f1.size[0] = 1;
    oc.f1.size[1] = 1;
    oc.f1.data[0] = 'R';
    pc.f1.size[0] = 1;
    pc.f1.size[1] = 2;
    qc.f1.size[0] = 1;
    qc.f1.size[1] = 1;
    qc.f1.data[0] = 'R';
    rc.f1.size[0] = 1;
    rc.f1.size[1] = 1;
    rc.f1.data[0] = 'S';
    sc.f1.size[0] = 1;
    sc.f1.size[1] = 1;
    sc.f1.data[0] = 'L';
    tc.f1.size[0] = 1;
    tc.f1.size[1] = 2;
    uc.f1.size[0] = 1;
    uc.f1.size[1] = 1;
    uc.f1.data[0] = 'R';
    vc.f1.size[0] = 1;
    vc.f1.size[1] = 1;
    vc.f1.data[0] = 'S';
    wc.f1.size[0] = 1;
    wc.f1.size[1] = 1;
    wc.f1.data[0] = 'R';
    xc.f1.size[0] = 1;
    xc.f1.size[1] = 2;
    yc.f1.size[0] = 1;
    yc.f1.size[1] = 1;
    yc.f1.data[0] = 'R';
    ad.f1.size[0] = 1;
    ad.f1.size[1] = 1;
    ad.f1.data[0] = 'L';
    bd.f1.size[0] = 1;
    bd.f1.size[1] = 1;
    bd.f1.data[0] = 'R';
    cd.f1.size[0] = 1;
    cd.f1.size[1] = 2;
    dd.f1.size[0] = 1;
    dd.f1.size[1] = 1;
    dd.f1.data[0] = 'L';
    ed.f1.size[0] = 1;
    ed.f1.size[1] = 1;
    ed.f1.data[0] = 'R';
    fd.f1.size[0] = 1;
    fd.f1.size[1] = 1;
    fd.f1.data[0] = 'L';
    gd.f1.size[0] = 1;
    gd.f1.size[1] = 1;
    gd.f1.data[0] = 'L';
    hd.f1.size[0] = 1;
    hd.f1.size[1] = 1;
    hd.f1.data[0] = 'S';
    id.f1.size[0] = 1;
    id.f1.size[1] = 1;
    id.f1.data[0] = 'L';
    jd.f1.size[0] = 1;
    jd.f1.size[1] = 2;
    kd.f1.size[0] = 1;
    kd.f1.size[1] = 1;
    kd.f1.data[0] = 'L';
    ld.f1.size[0] = 1;
    ld.f1.size[1] = 1;
    ld.f1.data[0] = 'S';
    md.f1.size[0] = 1;
    md.f1.size[1] = 1;
    md.f1.data[0] = 'R';
    nd.f1.size[0] = 1;
    nd.f1.size[1] = 2;
    od.f1.size[0] = 1;
    od.f1.size[1] = 1;
    od.f1.data[0] = 'R';
    pd.f1.size[0] = 1;
    pd.f1.size[1] = 1;
    pd.f1.data[0] = 'S';
    qd.f1.size[0] = 1;
    qd.f1.size[1] = 1;
    qd.f1.data[0] = 'L';
    rd.f1.size[0] = 1;
    rd.f1.size[1] = 2;
    sd.f1.size[0] = 1;
    sd.f1.size[1] = 1;
    sd.f1.data[0] = 'R';
    td.f1.size[0] = 1;
    td.f1.size[1] = 1;
    td.f1.data[0] = 'S';
    ud.f1.size[0] = 1;
    ud.f1.size[1] = 1;
    ud.f1.data[0] = 'R';
    vd.f1.size[0] = 1;
    vd.f1.size[1] = 2;
    wd.f1.size[0] = 1;
    wd.f1.size[1] = 1;
    wd.f1.data[0] = 'R';
    xd.f1.size[0] = 1;
    xd.f1.size[1] = 1;
    xd.f1.data[0] = 'L';
    yd.f1.size[0] = 1;
    yd.f1.size[1] = 1;
    yd.f1.data[0] = 'R';
    ae.f1.size[0] = 1;
    ae.f1.size[1] = 2;
    be.f1.size[0] = 1;
    be.f1.size[1] = 1;
    be.f1.data[0] = 'L';
    ce.f1.size[0] = 1;
    ce.f1.size[1] = 1;
    ce.f1.data[0] = 'R';
    de.f1.size[0] = 1;
    de.f1.size[1] = 1;
    de.f1.data[0] = 'L';
    ee.f1.size[0] = 1;
    ee.f1.size[1] = 2;
    hc.f1.data[0] = 'H';
    lc.f1.data[0] = 'H';
    pc.f1.data[0] = 'H';
    tc.f1.data[0] = 'H';
    xc.f1.data[0] = 'H';
    cd.f1.data[0] = 'H';
    jd.f1.data[0] = 'H';
    nd.f1.data[0] = 'H';
    rd.f1.data[0] = 'H';
    vd.f1.data[0] = 'H';
    ae.f1.data[0] = 'H';
    ee.f1.data[0] = 'H';
    hc.f1.data[1] = 'l';
    lc.f1.data[1] = 'l';
    pc.f1.data[1] = 'r';
    tc.f1.data[1] = 'r';
    xc.f1.data[1] = 'r';
    cd.f1.data[1] = 'l';
    jd.f1.data[1] = 'l';
    nd.f1.data[1] = 'r';
    rd.f1.data[1] = 'l';
    vd.f1.data[1] = 'r';
    ae.f1.data[1] = 'r';
    ee.f1.data[1] = 'l';
    fe.f1.size[0] = 1;
    fe.f1.size[1] = 1;
    fe.f1.data[0] = 'L';
    ge.f1.size[0] = 1;
    ge.f1.size[1] = 1;
    ge.f1.data[0] = 'R';
    he.f1.size[0] = 1;
    he.f1.size[1] = 1;
    he.f1.data[0] = 'S';
    ie.f1.size[0] = 1;
    ie.f1.size[1] = 1;
    ie.f1.data[0] = 'L';
    je.f1.size[0] = 1;
    je.f1.size[1] = 1;
    je.f1.data[0] = 'L';
    ke.f1.size[0] = 1;
    ke.f1.size[1] = 1;
    ke.f1.data[0] = 'R';
    le.f1.size[0] = 1;
    le.f1.size[1] = 1;
    le.f1.data[0] = 'S';
    me.f1.size[0] = 1;
    me.f1.size[1] = 1;
    me.f1.data[0] = 'R';
    ne.f1.size[0] = 1;
    ne.f1.size[1] = 1;
    ne.f1.data[0] = 'L';
    oe.f1.size[0] = 1;
    oe.f1.size[1] = 1;
    oe.f1.data[0] = 'R';
    pe.f1.size[0] = 1;
    pe.f1.size[1] = 1;
    pe.f1.data[0] = 'L';
    qe.f1.size[0] = 1;
    qe.f1.size[1] = 1;
    qe.f1.data[0] = 'R';
    re.f1.size[0] = 1;
    re.f1.size[1] = 1;
    re.f1.data[0] = 'R';
    se.f1.size[0] = 1;
    se.f1.size[1] = 1;
    se.f1.data[0] = 'L';
    te.f1.size[0] = 1;
    te.f1.size[1] = 1;
    te.f1.data[0] = 'S';
    ue.f1.size[0] = 1;
    ue.f1.size[1] = 1;
    ue.f1.data[0] = 'R';
    ve.f1.size[0] = 1;
    ve.f1.size[1] = 1;
    ve.f1.data[0] = 'R';
    we.f1.size[0] = 1;
    we.f1.size[1] = 1;
    we.f1.data[0] = 'L';
    xe.f1.size[0] = 1;
    xe.f1.size[1] = 1;
    xe.f1.data[0] = 'R';
    ye.f1.size[0] = 1;
    ye.f1.size[1] = 1;
    ye.f1.data[0] = 'L';
    af.f1.size[0] = 1;
    af.f1.size[1] = 1;
    af.f1.data[0] = 'R';
    bf.f1.size[0] = 1;
    bf.f1.size[1] = 1;
    bf.f1.data[0] = 'L';
    cf.f1.size[0] = 1;
    cf.f1.size[1] = 1;
    cf.f1.data[0] = 'S';
    df.f1.size[0] = 1;
    df.f1.size[1] = 1;
    df.f1.data[0] = 'L';
    ef.f1.size[0] = 1;
    ef.f1.size[1] = 1;
    ef.f1.data[0] = 'L';
    ff.f1.size[0] = 1;
    ff.f1.size[1] = 1;
    ff.f1.data[0] = 'S';
    gf.f1.size[0] = 1;
    gf.f1.size[1] = 1;
    gf.f1.data[0] = 'R';
    hf.f1.size[0] = 1;
    hf.f1.size[1] = 1;
    hf.f1.data[0] = 'L';
    jf.f1.size[0] = 1;
    jf.f1.size[1] = 1;
    jf.f1.data[0] = 'R';
    kf.f1.size[0] = 1;
    kf.f1.size[1] = 1;
    kf.f1.data[0] = 'S';
    lf.f1.size[0] = 1;
    lf.f1.size[1] = 1;
    lf.f1.data[0] = 'R';
    mf.f1.size[0] = 1;
    mf.f1.size[1] = 1;
    mf.f1.data[0] = 'L';
    nf.f1.size[0] = 1;
    nf.f1.size[1] = 1;
    nf.f1.data[0] = 'L';
    of.f1.size[0] = 1;
    of.f1.size[1] = 1;
    of.f1.data[0] = 'S';
    pf.f1.size[0] = 1;
    pf.f1.size[1] = 1;
    pf.f1.data[0] = 'L';
    qf.f1.size[0] = 1;
    qf.f1.size[1] = 1;
    qf.f1.data[0] = 'R';
    rf.f1.size[0] = 1;
    rf.f1.size[1] = 1;
    rf.f1.data[0] = 'R';
    sf.f1.size[0] = 1;
    sf.f1.size[1] = 1;
    sf.f1.data[0] = 'S';
    tf.f1.size[0] = 1;
    tf.f1.size[1] = 1;
    tf.f1.data[0] = 'L';
    uf.f1.size[0] = 1;
    uf.f1.size[1] = 1;
    uf.f1.data[0] = 'R';
    motionTypes[0] = b;
    b_obj_UAVDubinsBuildableObj =
        FlightMissionMode_uavDubinsBuildable_uavDubinsBuildable_d(obj->AirSpeed,
        obj->MaxRollAngle, obj->FlightPathAngleLimit, dpt_data, dpt_size);
    b_startPose[0] = startPose[0];
    b_goalPose[0] = goalPose[0];
    b_startPose[1] = startPose[1];
    b_goalPose[1] = goalPose[1];
    b_startPose[2] = startPose[2];
    b_goalPose[2] = goalPose[2];
    b_startPose[3] = startPose[3];
    b_goalPose[3] = goalPose[3];
    uavDubinsDistanceCodegen_real64(b_obj_UAVDubinsBuildableObj, &b_startPose[0],
        1U, &b_goalPose[0], 1U, true, turningRadius, &s[0], &g[0], &b_fpa, &b_a,
        &mtr, &h, &mt, &ml[0]);
    for (int32_T i{0}; i < 4; i++) {
        int32_T ml1_tmp;
        ml1_tmp = static_cast<int32_T>(i << 2);
        ml1[ml1_tmp] = ml[i];
        ml1[static_cast<int32_T>(ml1_tmp + 1)] = ml[static_cast<int32_T>(i + 4)];
        ml1[static_cast<int32_T>(ml1_tmp + 2)] = ml[static_cast<int32_T>(i + 8)];
        ml1[static_cast<int32_T>(ml1_tmp + 3)] = ml[static_cast<int32_T>(i + 12)];
    }

    if (mt + 1.0 == 2.0) {
        motionTypes[0].f1[0] = mb;
        motionTypes[0].f1[1] = nb;
        motionTypes[0].f1[2] = ob;
        motionTypes[0].f1[3] = pb;
    }

    if (mt + 1.0 == 3.0) {
        motionTypes[0].f1[0] = qb;
        motionTypes[0].f1[1] = rb;
        motionTypes[0].f1[2] = sb;
        motionTypes[0].f1[3] = tb;
    }

    if (mt + 1.0 == 4.0) {
        motionTypes[0].f1[0] = ub;
        motionTypes[0].f1[1] = vb;
        motionTypes[0].f1[2] = wb;
        motionTypes[0].f1[3] = xb;
    }

    if (mt + 1.0 == 5.0) {
        motionTypes[0].f1[0] = yb;
        motionTypes[0].f1[1] = ac;
        motionTypes[0].f1[2] = bc;
        motionTypes[0].f1[3] = cc;
    }

    if (mt + 1.0 == 6.0) {
        motionTypes[0].f1[0] = dc;
        motionTypes[0].f1[1] = ec;
        motionTypes[0].f1[2] = fc;
        motionTypes[0].f1[3] = gc;
    }

    if (mt + 1.0 == 7.0) {
        motionTypes[0].f1[0] = hc;
        motionTypes[0].f1[1] = ic;
        motionTypes[0].f1[2] = jc;
        motionTypes[0].f1[3] = kc;
    }

    if (mt + 1.0 == 8.0) {
        motionTypes[0].f1[0] = lc;
        motionTypes[0].f1[1] = mc;
        motionTypes[0].f1[2] = nc;
        motionTypes[0].f1[3] = oc;
    }

    if (mt + 1.0 == 9.0) {
        motionTypes[0].f1[0] = pc;
        motionTypes[0].f1[1] = qc;
        motionTypes[0].f1[2] = rc;
        motionTypes[0].f1[3] = sc;
    }

    if (mt + 1.0 == 10.0) {
        motionTypes[0].f1[0] = tc;
        motionTypes[0].f1[1] = uc;
        motionTypes[0].f1[2] = vc;
        motionTypes[0].f1[3] = wc;
    }

    if (mt + 1.0 == 11.0) {
        motionTypes[0].f1[0] = xc;
        motionTypes[0].f1[1] = yc;
        motionTypes[0].f1[2] = ad;
        motionTypes[0].f1[3] = bd;
    }

    if (mt + 1.0 == 12.0) {
        motionTypes[0].f1[0] = cd;
        motionTypes[0].f1[1] = dd;
        motionTypes[0].f1[2] = ed;
        motionTypes[0].f1[3] = fd;
    }

    if (mt + 1.0 == 13.0) {
        motionTypes[0].f1[0] = gd;
        motionTypes[0].f1[1] = hd;
        motionTypes[0].f1[2] = id;
        motionTypes[0].f1[3] = jd;
    }

    if (mt + 1.0 == 14.0) {
        motionTypes[0].f1[0] = kd;
        motionTypes[0].f1[1] = ld;
        motionTypes[0].f1[2] = md;
        motionTypes[0].f1[3] = nd;
    }

    if (mt + 1.0 == 15.0) {
        motionTypes[0].f1[0] = od;
        motionTypes[0].f1[1] = pd;
        motionTypes[0].f1[2] = qd;
        motionTypes[0].f1[3] = rd;
    }

    if (mt + 1.0 == 16.0) {
        motionTypes[0].f1[0] = sd;
        motionTypes[0].f1[1] = td;
        motionTypes[0].f1[2] = ud;
        motionTypes[0].f1[3] = vd;
    }

    if (mt + 1.0 == 17.0) {
        motionTypes[0].f1[0] = wd;
        motionTypes[0].f1[1] = xd;
        motionTypes[0].f1[2] = yd;
        motionTypes[0].f1[3] = ae;
    }

    if (mt + 1.0 == 18.0) {
        motionTypes[0].f1[0] = be;
        motionTypes[0].f1[1] = ce;
        motionTypes[0].f1[2] = de;
        motionTypes[0].f1[3] = ee;
    }

    if (mt + 1.0 == 19.0) {
        motionTypes[0].f1[0] = fe;
        motionTypes[0].f1[1] = ge;
        motionTypes[0].f1[2] = he;
        motionTypes[0].f1[3] = ie;
    }

    if (mt + 1.0 == 20.0) {
        motionTypes[0].f1[0] = je;
        motionTypes[0].f1[1] = ke;
        motionTypes[0].f1[2] = le;
        motionTypes[0].f1[3] = me;
    }

    if (mt + 1.0 == 21.0) {
        motionTypes[0].f1[0] = ne;
        motionTypes[0].f1[1] = oe;
        motionTypes[0].f1[2] = pe;
        motionTypes[0].f1[3] = qe;
    }

    if (mt + 1.0 == 22.0) {
        motionTypes[0].f1[0] = re;
        motionTypes[0].f1[1] = se;
        motionTypes[0].f1[2] = te;
        motionTypes[0].f1[3] = ue;
    }

    if (mt + 1.0 == 23.0) {
        motionTypes[0].f1[0] = ve;
        motionTypes[0].f1[1] = we;
        motionTypes[0].f1[2] = xe;
        motionTypes[0].f1[3] = ye;
    }

    if (mt + 1.0 == 24.0) {
        motionTypes[0].f1[0] = af;
        motionTypes[0].f1[1] = bf;
        motionTypes[0].f1[2] = cf;
        motionTypes[0].f1[3] = df;
    }

    if (mt + 1.0 == 25.0) {
        motionTypes[0].f1[0] = ef;
        motionTypes[0].f1[1] = ff;
        motionTypes[0].f1[2] = gf;
        motionTypes[0].f1[3] = hf;
    }

    if (mt + 1.0 == 26.0) {
        motionTypes[0].f1[0] = jf;
        motionTypes[0].f1[1] = kf;
        motionTypes[0].f1[2] = lf;
        motionTypes[0].f1[3] = mf;
    }

    if (mt + 1.0 == 27.0) {
        motionTypes[0].f1[0] = nf;
        motionTypes[0].f1[1] = of;
        motionTypes[0].f1[2] = pf;
        motionTypes[0].f1[3] = qf;
    }

    if (mt + 1.0 == 28.0) {
        motionTypes[0].f1[0] = rf;
        motionTypes[0].f1[1] = sf;
        motionTypes[0].f1[2] = tf;
        motionTypes[0].f1[3] = uf;
    }

    b_startPose[0] = s[0];
    b_goalPose[0] = g[0];
    ml1_0[0] = ml1[0];
    b_startPose[1] = s[1];
    b_goalPose[1] = g[1];
    ml1_0[1] = ml1[4];
    b_startPose[2] = s[2];
    b_goalPose[2] = g[2];
    ml1_0[2] = ml1[8];
    b_startPose[3] = s[3];
    b_goalPose[3] = g[3];
    ml1_0[3] = ml1[12];
    FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_fc(b_startPose,
        b_goalPose, b_fpa, b_a, mtr, h, motionTypes[0].f1, ml1_0, pathSegObjs);
    ml1_0[0] = ml1[0];
    ml1_0[1] = ml1[4];
    ml1_0[2] = ml1[8];
    ml1_0[3] = ml1[12];
    *pathCosts = sum_4Il0TNcY(ml1_0);
}

static void FlightMissionMode_emxEnsureCapacity_real_T_a
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(real_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (real_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (real_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_strcmp_clp(const cell_wrap_10_FlightMissionMode_T
    a[4], boolean_T b_bool[4])
{
    b_bool[0] = false;
    if ((a[0].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[0].f1.data[0] != 'N') ^ 1)))) {
        b_bool[0] = true;
    }

    b_bool[1] = false;
    if ((a[1].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[1].f1.data[0] != 'N') ^ 1)))) {
        b_bool[1] = true;
    }

    b_bool[2] = false;
    if ((a[2].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[2].f1.data[0] != 'N') ^ 1)))) {
        b_bool[2] = true;
    }

    b_bool[3] = false;
    if ((a[3].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[3].f1.data[0] != 'N') ^ 1)))) {
        b_bool[3] = true;
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static boolean_T FlightMissionMode_any_c(const boolean_T x[4])
{
    int32_T k;
    boolean_T exitg1;
    boolean_T y;
    y = false;
    k = 0;
    exitg1 = false;
    while ((!exitg1) && (k < 4)) {
        if (x[k]) {
            y = true;
            exitg1 = true;
        } else {
            k = static_cast<int32_T>(k + 1);
        }
    }

    return y;
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_useConstantDim_a(const real_T varargin_2_data[],
    const int32_T varargin_2_size[2], real_T varargout_1_data[], int32_T
    varargout_1_size[2])
{
    int32_T loop_ub;
    varargout_1_size[0] = 1;
    varargout_1_size[1] = varargin_2_size[1];
    loop_ub = static_cast<int32_T>(varargin_2_size[1] - 1);
    for (int32_T varargout_1_data_tmp{0}; varargout_1_data_tmp <= loop_ub;
            varargout_1_data_tmp++) {
        varargout_1_data[varargout_1_data_tmp] =
            varargin_2_data[varargout_1_data_tmp];
    }

    for (loop_ub = 0; loop_ub <= static_cast<int32_T>(varargin_2_size[1] - 2);
            loop_ub = static_cast<int32_T>(loop_ub + 1)) {
        varargout_1_data[static_cast<int32_T>(loop_ub + 1)] +=
            varargout_1_data[loop_ub];
    }
}

static void FlightMissionMode_emxInit_int32_T_j
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_int32_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_int32_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_int32_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (int32_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_int32_T_c
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(int32_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (int32_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (int32_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxFree_real_T_c
    (emxArray_real_T_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_real_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (real_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)nullptr;
    }
}

static void FlightMissionMode_emxInit_int32_T1_l
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_int32_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_int32_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_int32_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (int32_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxInit_real_T1_g
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_real_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_real_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (real_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_real_T1_p
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(real_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (real_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (real_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxEnsureCapacity_int32_T1_h
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(int32_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (int32_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (int32_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxFree_int32_T_k
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_int32_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (int32_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_int32_T_FlightMissionMode_T *)nullptr;
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_merge_j5x(emxArray_int32_T_FlightMissionMode_T
    *idx, emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T np,
    int32_T nq, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork)
{
    if (nq != 0) {
        int32_T iout;
        int32_T n;
        int32_T n_tmp;
        int32_T q;
        n_tmp = static_cast<int32_T>(np + nq);
        for (q = 0; q <= static_cast<int32_T>(n_tmp - 1); q =
                static_cast<int32_T>(q + 1)) {
            iout = static_cast<int32_T>(offset + q);
            iwork->data[q] = idx->data[iout];
            xwork->data[q] = x->data[iout];
        }

        n = 0;
        q = np;
        iout = static_cast<int32_T>(offset - 1);
        int32_T exitg1;
        do {
            exitg1 = 0;
            iout = static_cast<int32_T>(iout + 1);
            if (xwork->data[n] <= xwork->data[q]) {
                idx->data[iout] = iwork->data[n];
                x->data[iout] = xwork->data[n];
                if (static_cast<int32_T>(n + 1) < np) {
                    n = static_cast<int32_T>(n + 1);
                } else {
                    exitg1 = 1;
                }
            } else {
                idx->data[iout] = iwork->data[q];
                x->data[iout] = xwork->data[q];
                if (static_cast<int32_T>(q + 1) < n_tmp) {
                    q = static_cast<int32_T>(q + 1);
                } else {
                    q = static_cast<int32_T>(iout - n);
                    while (static_cast<int32_T>(n + 1) <= np) {
                        n_tmp = static_cast<int32_T>(static_cast<int32_T>(q + n)
                            + 1);
                        idx->data[n_tmp] = iwork->data[n];
                        x->data[n_tmp] = xwork->data[n];
                        n = static_cast<int32_T>(n + 1);
                    }

                    exitg1 = 1;
                }
            }
        } while (exitg1 == 0);
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_merge_block_o(emxArray_int32_T_FlightMissionMode_T
    *idx, emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T n,
    int32_T preSortLevel, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork)
{
    int32_T bLen;
    int32_T nPairs;
    nPairs = static_cast<int32_T>(n >> preSortLevel);
    bLen = static_cast<int32_T>(1 << preSortLevel);
    while (nPairs > 1) {
        int32_T nTail;
        int32_T tailOffset;
        if (static_cast<uint32_T>(static_cast<uint32_T>(nPairs) & 1U) != 0U) {
            nPairs = static_cast<int32_T>(nPairs - 1);
            tailOffset = static_cast<int32_T>(bLen * nPairs);
            nTail = static_cast<int32_T>(n - tailOffset);
            if (nTail > bLen) {
                FlightMissionMode_merge_j5x(idx, x, static_cast<int32_T>(offset
                    + tailOffset), bLen, static_cast<int32_T>(nTail - bLen),
                    iwork, xwork);
            }
        }

        tailOffset = static_cast<int32_T>(bLen << 1);
        nPairs = static_cast<int32_T>(nPairs >> 1);
        for (nTail = 0; nTail <= static_cast<int32_T>(nPairs - 1); nTail =
                static_cast<int32_T>(nTail + 1)) {
            FlightMissionMode_merge_j5x(idx, x, static_cast<int32_T>(offset +
                static_cast<int32_T>(nTail * tailOffset)), bLen, bLen, iwork,
                xwork);
        }

        bLen = tailOffset;
    }

    if (n > bLen) {
        FlightMissionMode_merge_j5x(idx, x, offset, bLen, static_cast<int32_T>(n
            - bLen), iwork, xwork);
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_sort_hnh(emxArray_real_T_FlightMissionMode_T *x)
{
    emxArray_int32_T_FlightMissionMode_T *idx;
    emxArray_int32_T_FlightMissionMode_T *iwork;
    emxArray_real_T_FlightMissionMode_T *b_x;
    emxArray_real_T_FlightMissionMode_T *xwork;
    real_T b_xwork[256];
    real_T x4[4];
    int32_T b_iwork[256];
    int32_T idx4[4];
    int32_T b_iwork_tmp;
    int32_T nBlocks;
    int32_T wOffset;
    int8_T perm[4];
    FlightMissionMode_emxInit_real_T_i(&b_x, 2);
    b_iwork_tmp = static_cast<int32_T>(b_x->size[0] * b_x->size[1]);
    b_x->size[0] = 1;
    b_x->size[1] = x->size[1];
    FlightMissionMode_emxEnsureCapacity_real_T_a(b_x, b_iwork_tmp);
    nBlocks = static_cast<int32_T>(x->size[1] - 1);
    for (wOffset = 0; wOffset <= nBlocks; wOffset++) {
        b_x->data[wOffset] = x->data[wOffset];
    }

    if (x->size[1] != 0) {
        int32_T bLen;
        int32_T bLen2;
        int32_T i1;
        int32_T ib;
        int32_T n;
        int32_T nPairs;
        int32_T q;
        FlightMissionMode_emxInit_int32_T_j(&idx, 2);
        b_iwork_tmp = static_cast<int32_T>(idx->size[0] * idx->size[1]);
        idx->size[0] = 1;
        idx->size[1] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_int32_T_c(idx, b_iwork_tmp);
        nBlocks = static_cast<int32_T>(x->size[1] - 1);
        for (wOffset = 0; wOffset <= nBlocks; wOffset++) {
            idx->data[wOffset] = 0;
        }

        b_iwork_tmp = static_cast<int32_T>(b_x->size[0] * b_x->size[1]);
        b_x->size[0] = 1;
        b_x->size[1] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_real_T_a(b_x, b_iwork_tmp);
        nBlocks = static_cast<int32_T>(x->size[1] - 1);
        for (wOffset = 0; wOffset <= nBlocks; wOffset++) {
            b_x->data[wOffset] = x->data[wOffset];
        }

        FlightMissionMode_emxInit_int32_T1_l(&iwork, 1);
        FlightMissionMode_emxInit_real_T1_g(&xwork, 1);
        n = x->size[1];
        x4[0] = 0.0;
        idx4[0] = 0;
        x4[1] = 0.0;
        idx4[1] = 0;
        x4[2] = 0.0;
        idx4[2] = 0;
        x4[3] = 0.0;
        idx4[3] = 0;
        nBlocks = x->size[1];
        b_iwork_tmp = xwork->size[0];
        xwork->size[0] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_real_T1_p(xwork, b_iwork_tmp);
        for (wOffset = 0; wOffset <= static_cast<int32_T>(nBlocks - 1); wOffset
                ++) {
            xwork->data[wOffset] = 0.0;
        }

        nBlocks = 0;
        ib = 0;
        for (wOffset = 0; wOffset <= static_cast<int32_T>(n - 1); wOffset =
                static_cast<int32_T>(wOffset + 1)) {
            if (std::isnan(b_x->data[wOffset])) {
                q = static_cast<int32_T>(static_cast<int32_T>(n - nBlocks) - 1);
                idx->data[q] = static_cast<int32_T>(wOffset + 1);
                xwork->data[q] = b_x->data[wOffset];
                nBlocks = static_cast<int32_T>(nBlocks + 1);
            } else {
                ib = static_cast<int32_T>(ib + 1);
                idx4[static_cast<int32_T>(ib - 1)] = static_cast<int32_T>
                    (wOffset + 1);
                x4[static_cast<int32_T>(ib - 1)] = b_x->data[wOffset];
                if (ib == 4) {
                    real_T tmp;
                    real_T tmp_0;
                    ib = static_cast<int32_T>(wOffset - nBlocks);
                    if (x4[0] <= x4[1]) {
                        i1 = 1;
                        bLen = 2;
                    } else {
                        i1 = 2;
                        bLen = 1;
                    }

                    if (x4[2] <= x4[3]) {
                        bLen2 = 3;
                        nPairs = 4;
                    } else {
                        bLen2 = 4;
                        nPairs = 3;
                    }

                    tmp = x4[static_cast<int32_T>(i1 - 1)];
                    tmp_0 = x4[static_cast<int32_T>(bLen2 - 1)];
                    if (tmp <= tmp_0) {
                        tmp = x4[static_cast<int32_T>(bLen - 1)];
                        if (tmp <= tmp_0) {
                            perm[0] = static_cast<int8_T>(i1);
                            perm[1] = static_cast<int8_T>(bLen);
                            perm[2] = static_cast<int8_T>(bLen2);
                            perm[3] = static_cast<int8_T>(nPairs);
                        } else if (tmp <= x4[static_cast<int32_T>(nPairs - 1)])
                        {
                            perm[0] = static_cast<int8_T>(i1);
                            perm[1] = static_cast<int8_T>(bLen2);
                            perm[2] = static_cast<int8_T>(bLen);
                            perm[3] = static_cast<int8_T>(nPairs);
                        } else {
                            perm[0] = static_cast<int8_T>(i1);
                            perm[1] = static_cast<int8_T>(bLen2);
                            perm[2] = static_cast<int8_T>(nPairs);
                            perm[3] = static_cast<int8_T>(bLen);
                        }
                    } else {
                        tmp_0 = x4[static_cast<int32_T>(nPairs - 1)];
                        if (tmp <= tmp_0) {
                            if (x4[static_cast<int32_T>(bLen - 1)] <= tmp_0) {
                                perm[0] = static_cast<int8_T>(bLen2);
                                perm[1] = static_cast<int8_T>(i1);
                                perm[2] = static_cast<int8_T>(bLen);
                                perm[3] = static_cast<int8_T>(nPairs);
                            } else {
                                perm[0] = static_cast<int8_T>(bLen2);
                                perm[1] = static_cast<int8_T>(i1);
                                perm[2] = static_cast<int8_T>(nPairs);
                                perm[3] = static_cast<int8_T>(bLen);
                            }
                        } else {
                            perm[0] = static_cast<int8_T>(bLen2);
                            perm[1] = static_cast<int8_T>(nPairs);
                            perm[2] = static_cast<int8_T>(i1);
                            perm[3] = static_cast<int8_T>(bLen);
                        }
                    }

                    idx->data[static_cast<int32_T>(ib - 3)] = idx4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[0]) - 1)];
                    idx->data[static_cast<int32_T>(ib - 2)] = idx4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                    idx->data[static_cast<int32_T>(ib - 1)] = idx4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                    idx->data[ib] = idx4[static_cast<int32_T>
                        (static_cast<int32_T>(perm[3]) - 1)];
                    b_x->data[static_cast<int32_T>(ib - 3)] = x4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[0]) - 1)];
                    b_x->data[static_cast<int32_T>(ib - 2)] = x4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                    b_x->data[static_cast<int32_T>(ib - 1)] = x4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                    b_x->data[ib] = x4[static_cast<int32_T>(static_cast<int32_T>
                        (perm[3]) - 1)];
                    ib = 0;
                }
            }
        }

        wOffset = static_cast<int32_T>(static_cast<int32_T>(x->size[1] - nBlocks)
            - 1);
        if (ib > 0) {
            perm[1] = 0;
            perm[2] = 0;
            perm[3] = 0;
            switch (ib) {
              case 1:
                perm[0] = 1;
                break;

              case 2:
                if (x4[0] <= x4[1]) {
                    perm[0] = 1;
                    perm[1] = 2;
                } else {
                    perm[0] = 2;
                    perm[1] = 1;
                }
                break;

              default:
                if (x4[0] <= x4[1]) {
                    if (x4[1] <= x4[2]) {
                        perm[0] = 1;
                        perm[1] = 2;
                        perm[2] = 3;
                    } else if (x4[0] <= x4[2]) {
                        perm[0] = 1;
                        perm[1] = 3;
                        perm[2] = 2;
                    } else {
                        perm[0] = 3;
                        perm[1] = 1;
                        perm[2] = 2;
                    }
                } else if (x4[0] <= x4[2]) {
                    perm[0] = 2;
                    perm[1] = 1;
                    perm[2] = 3;
                } else if (x4[1] <= x4[2]) {
                    perm[0] = 2;
                    perm[1] = 3;
                    perm[2] = 1;
                } else {
                    perm[0] = 3;
                    perm[1] = 2;
                    perm[2] = 1;
                }
                break;
            }

            for (i1 = 0; i1 <= static_cast<int32_T>(ib - 1); i1 =
                    static_cast<int32_T>(i1 + 1)) {
                q = static_cast<int32_T>(static_cast<int32_T>(perm[i1]) - 1);
                b_iwork_tmp = static_cast<int32_T>(static_cast<int32_T>(
                    static_cast<int32_T>(wOffset - ib) + i1) + 1);
                idx->data[b_iwork_tmp] = idx4[q];
                b_x->data[b_iwork_tmp] = x4[q];
            }
        }

        ib = static_cast<int32_T>(static_cast<int32_T>(nBlocks >> 1) + 1);
        for (i1 = 1; static_cast<int32_T>(i1 - 1) <= static_cast<int32_T>(ib - 2);
             i1 = static_cast<int32_T>(i1 + 1)) {
            bLen2 = static_cast<int32_T>(wOffset + i1);
            bLen = idx->data[bLen2];
            q = static_cast<int32_T>(n - i1);
            idx->data[bLen2] = idx->data[q];
            idx->data[q] = bLen;
            b_x->data[bLen2] = xwork->data[q];
            b_x->data[q] = xwork->data[bLen2];
        }

        if (static_cast<uint32_T>(static_cast<uint32_T>(nBlocks) & 1U) != 0U) {
            n = static_cast<int32_T>(wOffset + ib);
            b_x->data[n] = xwork->data[n];
        }

        n = x->size[1];
        b_iwork_tmp = iwork->size[0];
        iwork->size[0] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_int32_T1_h(iwork, b_iwork_tmp);
        for (wOffset = 0; wOffset <= static_cast<int32_T>(n - 1); wOffset++) {
            iwork->data[wOffset] = 0;
        }

        n = static_cast<int32_T>(x->size[1] - nBlocks);
        wOffset = 2;
        if (n > 1) {
            if (x->size[1] >= 256) {
                nBlocks = static_cast<int32_T>(n >> 8);
                if (nBlocks > 0) {
                    for (ib = 0; ib <= static_cast<int32_T>(nBlocks - 1); ib =
                            static_cast<int32_T>(ib + 1)) {
                        i1 = static_cast<int32_T>(static_cast<int32_T>(ib << 8)
                            - 1);
                        for (wOffset = 0; wOffset < 6; wOffset++) {
                            bLen = static_cast<int32_T>(1 << static_cast<int32_T>
                                (wOffset + 2));
                            bLen2 = static_cast<int32_T>(bLen << 1);
                            nPairs = static_cast<int32_T>(256 >>
                                static_cast<int32_T>(wOffset + 3));
                            for (int32_T e_k{0}; e_k <= static_cast<int32_T>
                                    (nPairs - 1); e_k = static_cast<int32_T>(e_k
                                  + 1)) {
                                int32_T blockOffset;
                                int32_T p;
                                blockOffset = static_cast<int32_T>
                                    (static_cast<int32_T>(e_k * bLen2) + i1);
                                for (p = 0; p <= static_cast<int32_T>(bLen2 - 1);
                                     p = static_cast<int32_T>(p + 1)) {
                                    b_iwork_tmp = static_cast<int32_T>(
                                        static_cast<int32_T>(blockOffset + p) +
                                        1);
                                    b_iwork[p] = idx->data[b_iwork_tmp];
                                    b_xwork[p] = b_x->data[b_iwork_tmp];
                                }

                                p = 0;
                                q = bLen;
                                int32_T exitg1;
                                do {
                                    exitg1 = 0;
                                    blockOffset = static_cast<int32_T>
                                        (blockOffset + 1);
                                    if (b_xwork[p] <= b_xwork[q]) {
                                        idx->data[blockOffset] = b_iwork[p];
                                        b_x->data[blockOffset] = b_xwork[p];
                                        if (static_cast<int32_T>(p + 1) < bLen)
                                        {
                                            p = static_cast<int32_T>(p + 1);
                                        } else {
                                            exitg1 = 1;
                                        }
                                    } else {
                                        idx->data[blockOffset] = b_iwork[q];
                                        b_x->data[blockOffset] = b_xwork[q];
                                        if (static_cast<int32_T>(q + 1) < bLen2)
                                        {
                                            q = static_cast<int32_T>(q + 1);
                                        } else {
                                            blockOffset = static_cast<int32_T>
                                                (blockOffset - p);
                                            while (static_cast<int32_T>(p + 1) <=
                                                   bLen) {
                                                b_iwork_tmp =
                                                    static_cast<int32_T>(
                                                    static_cast<int32_T>
                                                    (blockOffset + p) + 1);
                                                idx->data[b_iwork_tmp] =
                                                    b_iwork[p];
                                                b_x->data[b_iwork_tmp] =
                                                    b_xwork[p];
                                                p = static_cast<int32_T>(p + 1);
                                            }

                                            exitg1 = 1;
                                        }
                                    }
                                } while (exitg1 == 0);
                            }
                        }
                    }

                    nBlocks = static_cast<int32_T>(nBlocks << 8);
                    wOffset = static_cast<int32_T>(n - nBlocks);
                    if (wOffset > 0) {
                        FlightMissionMode_merge_block_o(idx, b_x, nBlocks,
                            wOffset, 2, iwork, xwork);
                    }

                    wOffset = 8;
                }
            }

            FlightMissionMode_merge_block_o(idx, b_x, 0, n, wOffset, iwork,
                xwork);
        }

        FlightMissionMode_emxFree_real_T_c(&xwork);
        FlightMissionMode_emxFree_int32_T_k(&iwork);
        FlightMissionMode_emxFree_int32_T_k(&idx);
    }

    b_iwork_tmp = static_cast<int32_T>(x->size[0] * x->size[1]);
    x->size[0] = 1;
    x->size[1] = b_x->size[1];
    FlightMissionMode_emxEnsureCapacity_real_T_a(x, b_iwork_tmp);
    nBlocks = b_x->size[1];
    for (wOffset = 0; wOffset <= static_cast<int32_T>(nBlocks - 1); wOffset++) {
        x->data[wOffset] = b_x->data[wOffset];
    }

    FlightMissionMode_emxFree_real_T_c(&b_x);
}

static void FlightMissionMode_emxInit_boolean_T_k
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_boolean_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_boolean_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_boolean_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (boolean_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxFree_boolean_T_d
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_boolean_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (boolean_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_boolean_T_FlightMissionMode_T *)nullptr;
    }
}

static void FlightMissionMode_emxEnsureCapacity_boolean_T_p
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(boolean_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (boolean_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (boolean_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxInit_boolean_T1_k
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_boolean_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_boolean_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_boolean_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (boolean_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_boolean_T1_p
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(boolean_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (boolean_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (boolean_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_wrapToPi_b(emxArray_real_T_FlightMissionMode_T
    *theta)
{
    emxArray_boolean_T_FlightMissionMode_T *x;
    emxArray_real_T_FlightMissionMode_T *y;
    int32_T b_k;
    int32_T loop_ub;
    boolean_T b_y;
    boolean_T exitg1;
    FlightMissionMode_emxInit_real_T1_g(&y, 1);
    b_k = y->size[0];
    y->size[0] = theta->size[0];
    FlightMissionMode_emxEnsureCapacity_real_T1_p(y, b_k);
    for (b_k = 0; b_k <= static_cast<int32_T>(theta->size[0] - 1); b_k =
            static_cast<int32_T>(b_k + 1)) {
        y->data[b_k] = std::abs(theta->data[b_k]);
    }

    FlightMissionMode_emxInit_boolean_T1_k(&x, 1);
    b_k = x->size[0];
    x->size[0] = y->size[0];
    FlightMissionMode_emxEnsureCapacity_boolean_T1_p(x, b_k);
    loop_ub = y->size[0];
    for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
        x->data[b_k] = (y->data[b_k] > 3.1415926535897931);
    }

    b_y = false;
    b_k = 1;
    exitg1 = false;
    while ((!exitg1) && (b_k <= x->size[0])) {
        if (x->data[static_cast<int32_T>(b_k - 1)]) {
            b_y = true;
            exitg1 = true;
        } else {
            b_k = static_cast<int32_T>(b_k + 1);
        }
    }

    if (b_y) {
        b_k = y->size[0];
        y->size[0] = theta->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T1_p(y, b_k);
        loop_ub = theta->size[0];
        for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
            y->data[b_k] = theta->data[b_k] + 3.1415926535897931;
        }

        b_k = theta->size[0];
        theta->size[0] = y->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T1_p(theta, b_k);
        for (b_k = 0; b_k <= static_cast<int32_T>(y->size[0] - 1); b_k =
                static_cast<int32_T>(b_k + 1)) {
            theta->data[b_k] = mod_ZflSpsmf(y->data[b_k]);
        }

        b_k = x->size[0];
        x->size[0] = theta->size[0];
        FlightMissionMode_emxEnsureCapacity_boolean_T1_p(x, b_k);
        loop_ub = theta->size[0];
        for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
            x->data[b_k] = (theta->data[b_k] == 0.0);
        }

        for (b_k = 0; b_k <= static_cast<int32_T>(x->size[0] - 1); b_k =
                static_cast<int32_T>(b_k + 1)) {
            if (static_cast<boolean_T>(static_cast<int32_T>((y->data[b_k] > 0.0)
                  & static_cast<int32_T>(x->data[b_k])))) {
                theta->data[b_k] = 6.2831853071795862;
            }
        }

        loop_ub = theta->size[0];
        for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
            theta->data[b_k] -= 3.1415926535897931;
        }
    }

    FlightMissionMode_emxFree_boolean_T_d(&x);
    FlightMissionMode_emxFree_real_T_c(&y);
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_eml_find_p(const
    emxArray_boolean_T_FlightMissionMode_T *x,
    emxArray_int32_T_FlightMissionMode_T *i)
{
    int32_T idx;
    int32_T ii;
    int32_T nx;
    boolean_T exitg1;
    nx = x->size[1];
    idx = 0;
    ii = static_cast<int32_T>(i->size[0] * i->size[1]);
    i->size[0] = 1;
    i->size[1] = x->size[1];
    FlightMissionMode_emxEnsureCapacity_int32_T_c(i, ii);
    ii = 0;
    exitg1 = false;
    while ((!exitg1) && (ii <= static_cast<int32_T>(nx - 1))) {
        if (x->data[ii]) {
            idx = static_cast<int32_T>(idx + 1);
            i->data[static_cast<int32_T>(idx - 1)] = static_cast<int32_T>(ii + 1);
            if (idx >= nx) {
                exitg1 = true;
            } else {
                ii = static_cast<int32_T>(ii + 1);
            }
        } else {
            ii = static_cast<int32_T>(ii + 1);
        }
    }

    if (x->size[1] == 1) {
        if (idx == 0) {
            i->size[0] = 1;
            i->size[1] = 0;
        }
    } else if (1 > idx) {
        i->size[1] = 0;
    } else {
        ii = static_cast<int32_T>(i->size[0] * i->size[1]);
        i->size[1] = idx;
        FlightMissionMode_emxEnsureCapacity_int32_T_c(i, ii);
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_clpq(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'N') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_clpqq(const char_T a_data[], const
    int32_T a_size[2])
{
    static const char_T b[2]{ 'H', 'l' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (a_data[kstr] != b[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_clpqqk(const char_T a_data[], const
    int32_T a_size[2])
{
    static const char_T b[2]{ 'H', 'r' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (a_data[kstr] != b[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_clpqqko(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'L') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_clpqqkou(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'R') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_clpqqkoug(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'S') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_mtimes_c(const emxArray_real_T_FlightMissionMode_T
    *A, const real_T B[4], emxArray_real_T_FlightMissionMode_T *C)
{
    int32_T i;
    int32_T m;
    m = A->size[0];
    i = static_cast<int32_T>(C->size[0] * C->size[1]);
    C->size[0] = A->size[0];
    C->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_real_T_a(C, i);
    for (i = 0; i <= static_cast<int32_T>(m - 1); i = static_cast<int32_T>(i + 1))
    {
        C->data[i] = A->data[static_cast<int32_T>(A->size[0] + i)] * B[1] +
            A->data[i] * B[0];
    }

    for (i = 0; i <= static_cast<int32_T>(m - 1); i = static_cast<int32_T>(i + 1))
    {
        C->data[static_cast<int32_T>(m + i)] = A->data[static_cast<int32_T>
            (A->size[0] + i)] * B[3] + A->data[i] * B[2];
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_interpolate_h(const real_T
    b_this_StartPose[4], const real_T b_this_GoalPose[4], real_T
    b_this_FlightPathAngle, real_T b_this_AirSpeed, real_T
    b_this_MinTurningRadius, real_T b_this_HelixRadius, const
    cell_wrap_10_FlightMissionMode_T b_this_MotionTypes[4], const real_T
    b_this_MotionLengths[4], real_T b_this_Length,
    emxArray_real_T_FlightMissionMode_T *samples,
    emxArray_real_T_FlightMissionMode_T *poses)
{
    emxArray_boolean_T_FlightMissionMode_T *tempSamplesIndex;
    emxArray_boolean_T_FlightMissionMode_T *tempSamplesIndex_0;
    emxArray_int32_T_FlightMissionMode_T *ab;
    emxArray_real_T_FlightMissionMode_T *S;
    emxArray_real_T_FlightMissionMode_T *S_0;
    emxArray_real_T_FlightMissionMode_T *d_x;
    emxArray_real_T_FlightMissionMode_T *ns;
    emxArray_real_T_FlightMissionMode_T *p;
    emxArray_real_T_FlightMissionMode_T *tempSamples;
    emxArray_real_T_FlightMissionMode_T *z;
    real_T state[6];
    real_T TransformMatrix[4];
    real_T tempMotionLength_data[4];
    real_T transLength_data[4];
    int32_T tempMotionLength_size[2];
    int32_T transLength_size[2];
    boolean_T tmp[4];
    poses->size[0] = 0;
    poses->size[1] = 6;
    if ((static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(std::
            isnan(b_this_Length)) ^ 1))) && (samples->size[1] != 0)) {
        real_T b_b_tmp;
        real_T intermediateLength;
        real_T startIndex;
        real_T tempStartPose_idx_2;
        int32_T loop_ub;
        int32_T poses_0;
        int32_T tempMotionLength_data_tmp;
        tempStartPose_idx_2 = -b_this_StartPose[2];
        tempMotionLength_data_tmp = static_cast<int32_T>(poses->size[0] *
            poses->size[1]);
        poses->size[0] = samples->size[1];
        poses->size[1] = 6;
        FlightMissionMode_emxEnsureCapacity_real_T_a(poses,
            tempMotionLength_data_tmp);
        loop_ub = static_cast<int32_T>(static_cast<int32_T>(samples->size[1] * 6)
            - 1);
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <= loop_ub;
             tempMotionLength_data_tmp++) {
            poses->data[tempMotionLength_data_tmp] = 0.0;
        }

        b_b_tmp = std::cos(std::abs(b_this_FlightPathAngle));
        tempMotionLength_data_tmp = static_cast<int32_T>(samples->size[0] *
            samples->size[1]);
        samples->size[0] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_a(samples,
            tempMotionLength_data_tmp);
        loop_ub = static_cast<int32_T>(samples->size[1] - 1);
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <= loop_ub;
             tempMotionLength_data_tmp++) {
            samples->data[tempMotionLength_data_tmp] *= b_b_tmp;
        }

        TransformMatrix[0] = b_this_MotionLengths[0] * b_b_tmp;
        TransformMatrix[1] = b_this_MotionLengths[1] * b_b_tmp;
        TransformMatrix[2] = b_this_MotionLengths[2] * b_b_tmp;
        tempMotionLength_size[0] = 1;
        tempMotionLength_size[1] = 4;
        tempMotionLength_data[0] = TransformMatrix[0];
        tempMotionLength_data[1] = TransformMatrix[1];
        tempMotionLength_data[2] = TransformMatrix[2];
        tempMotionLength_data[3] = b_this_MotionLengths[3] * b_b_tmp;
        FlightMissionMode_strcmp_clp(b_this_MotionTypes, tmp);
        if (FlightMissionMode_any_c(tmp)) {
            tempMotionLength_size[0] = 1;
            tempMotionLength_size[1] = 3;
            tempMotionLength_data[0] = TransformMatrix[0];
            tempMotionLength_data[1] = TransformMatrix[1];
            tempMotionLength_data[2] = TransformMatrix[2];
        }

        FlightMissionMode_useConstantDim_a(tempMotionLength_data,
            tempMotionLength_size, transLength_data, transLength_size);
        FlightMissionMode_sort_hnh(samples);
        intermediateLength = 0.0;
        startIndex = 1.0;
        state[0] = b_this_StartPose[0];
        state[1] = -b_this_StartPose[1];
        state[3] = -b_this_StartPose[3];
        poses_0 = 0;
        FlightMissionMode_emxInit_boolean_T_k(&tempSamplesIndex, 2);
        FlightMissionMode_emxInit_real_T1_g(&tempSamples, 1);
        FlightMissionMode_emxInit_real_T1_g(&S, 1);
        FlightMissionMode_emxInit_real_T_i(&ns, 2);
        FlightMissionMode_emxInit_real_T1_g(&z, 1);
        FlightMissionMode_emxInit_real_T_i(&p, 2);
        FlightMissionMode_emxInit_real_T1_g(&d_x, 1);
        FlightMissionMode_emxInit_int32_T_j(&ab, 2);
        FlightMissionMode_emxInit_boolean_T_k(&tempSamplesIndex_0, 2);
        FlightMissionMode_emxInit_real_T_i(&S_0, 2);
        while (poses_0 <= static_cast<int32_T>(tempMotionLength_size[1] - 1)) {
            real_T radius;
            real_T samples_0;
            if (static_cast<int32_T>(poses_0 + 1) == 1) {
                tempMotionLength_data_tmp = static_cast<int32_T>
                    (tempSamplesIndex->size[0] * tempSamplesIndex->size[1]);
                tempSamplesIndex->size[0] = 1;
                tempSamplesIndex->size[1] = samples->size[1];
                FlightMissionMode_emxEnsureCapacity_boolean_T_p(tempSamplesIndex,
                    tempMotionLength_data_tmp);
                loop_ub = static_cast<int32_T>(samples->size[1] - 1);
                radius = (intermediateLength + tempMotionLength_data[0]) +
                    1.0E-6;
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     loop_ub; tempMotionLength_data_tmp++) {
                    samples_0 = samples->data[tempMotionLength_data_tmp];
                    tempSamplesIndex->data[tempMotionLength_data_tmp] =
                        static_cast<boolean_T>(static_cast<int32_T>((samples_0 >=
                        intermediateLength) & (samples_0 <= radius)));
                }
            } else {
                tempMotionLength_data_tmp = static_cast<int32_T>
                    (tempSamplesIndex->size[0] * tempSamplesIndex->size[1]);
                tempSamplesIndex->size[0] = 1;
                tempSamplesIndex->size[1] = samples->size[1];
                FlightMissionMode_emxEnsureCapacity_boolean_T_p(tempSamplesIndex,
                    tempMotionLength_data_tmp);
                loop_ub = static_cast<int32_T>(samples->size[1] - 1);
                radius = (intermediateLength + tempMotionLength_data[poses_0]) +
                    1.0E-6;
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     loop_ub; tempMotionLength_data_tmp++) {
                    samples_0 = samples->data[tempMotionLength_data_tmp];
                    tempSamplesIndex->data[tempMotionLength_data_tmp] =
                        static_cast<boolean_T>(static_cast<int32_T>((samples_0 >
                        intermediateLength) & (samples_0 <= radius)));
                }
            }

            tempMotionLength_data_tmp = static_cast<int32_T>
                (tempSamplesIndex_0->size[0] * tempSamplesIndex_0->size[1]);
            tempSamplesIndex_0->size[0] = 1;
            tempSamplesIndex_0->size[1] = tempSamplesIndex->size[1];
            FlightMissionMode_emxEnsureCapacity_boolean_T_p(tempSamplesIndex_0,
                tempMotionLength_data_tmp);
            loop_ub = tempSamplesIndex->size[1];
            for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                    static_cast<int32_T>(loop_ub - 1); tempMotionLength_data_tmp
                    ++) {
                tempSamplesIndex_0->data[tempMotionLength_data_tmp] =
                    tempSamplesIndex->data[tempMotionLength_data_tmp];
            }

            FlightMissionMode_eml_find_p(tempSamplesIndex_0, ab);
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (FlightMissionMode_strcmp_clpq(b_this_MotionTypes[poses_0].
                    f1.data, b_this_MotionTypes[poses_0].f1.size)) ^ 1))) {
                real_T TransformMatrix_tmp;
                int32_T count;
                int32_T tempMotionLength_data_tmp_0;
                radius = b_this_MinTurningRadius;
                if (FlightMissionMode_strcmp_clpqq(b_this_MotionTypes[poses_0].
                        f1.data, b_this_MotionTypes[poses_0].f1.size)) {
                    radius = b_this_HelixRadius;
                } else if (FlightMissionMode_strcmp_clpqqk
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size)) {
                    radius = b_this_HelixRadius;
                }

                count = 0;
                tempMotionLength_data_tmp = tempSamples->size[0];
                tempSamples->size[0] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T1_p(tempSamples,
                    tempMotionLength_data_tmp);
                tempSamples->data[0] = 0.0;
                if (ab->size[1] != 0) {
                    tempMotionLength_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = static_cast<int32_T>(ab->size[1] + 1);
                    FlightMissionMode_emxEnsureCapacity_real_T1_p(tempSamples,
                        tempMotionLength_data_tmp);
                    loop_ub = ab->size[1];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] = 0.0;
                    }

                    count = ab->size[1];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] =
                            samples->data[static_cast<int32_T>(ab->
                            data[tempMotionLength_data_tmp] - 1)];
                    }

                    count = ab->size[1];
                    loop_ub = static_cast<int32_T>(ab->size[1] - 1);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        samples->data[static_cast<int32_T>(ab->
                            data[tempMotionLength_data_tmp] - 1)] = -1.0;
                    }
                }

                tempSamples->data[count] = transLength_data[poses_0];
                tempMotionLength_data_tmp = S->size[0];
                S->size[0] = tempSamples->size[0];
                FlightMissionMode_emxEnsureCapacity_real_T1_p(S,
                    tempMotionLength_data_tmp);
                loop_ub = tempSamples->size[0];
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     static_cast<int32_T>(loop_ub - 1);
                        tempMotionLength_data_tmp++) {
                    S->data[tempMotionLength_data_tmp] = (tempSamples->
                        data[tempMotionLength_data_tmp] - intermediateLength) /
                        radius;
                }

                tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0] *
                    ns->size[1]);
                ns->size[0] = S->size[0];
                ns->size[1] = 6;
                FlightMissionMode_emxEnsureCapacity_real_T_a(ns,
                    tempMotionLength_data_tmp);
                loop_ub = static_cast<int32_T>(static_cast<int32_T>(S->size[0] *
                    6) - 1);
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     loop_ub; tempMotionLength_data_tmp++) {
                    ns->data[tempMotionLength_data_tmp] = 0.0;
                }

                tempMotionLength_data_tmp = z->size[0];
                z->size[0] = tempSamples->size[0];
                FlightMissionMode_emxEnsureCapacity_real_T1_p(z,
                    tempMotionLength_data_tmp);
                loop_ub = tempSamples->size[0];
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     static_cast<int32_T>(loop_ub - 1);
                        tempMotionLength_data_tmp++) {
                    z->data[tempMotionLength_data_tmp] = tempStartPose_idx_2 +
                        tempSamples->data[tempMotionLength_data_tmp];
                }

                samples_0 = std::sin(state[3]);
                TransformMatrix_tmp = std::cos(state[3]);
                TransformMatrix[0] = TransformMatrix_tmp;
                TransformMatrix[2] = samples_0;
                TransformMatrix[1] = -samples_0;
                TransformMatrix[3] = TransformMatrix_tmp;
                if (b_this_Length != 0.0) {
                    samples_0 = -b_this_GoalPose[2] - tempStartPose_idx_2;
                    TransformMatrix_tmp = b_this_Length * b_b_tmp;
                    tempMotionLength_data_tmp = z->size[0];
                    z->size[0] = tempSamples->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_p(z,
                        tempMotionLength_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        z->data[tempMotionLength_data_tmp] = tempSamples->
                            data[tempMotionLength_data_tmp] /
                            TransformMatrix_tmp * samples_0 +
                            tempStartPose_idx_2;
                    }
                }

                if (FlightMissionMode_strcmp_clpqq(b_this_MotionTypes[poses_0].
                        f1.data, b_this_MotionTypes[poses_0].f1.size) ||
                        FlightMissionMode_strcmp_clpqqko
                        (b_this_MotionTypes[poses_0].f1.data,
                         b_this_MotionTypes[poses_0].f1.size)) {
                    real_T state_0;
                    real_T state_1;
                    tempMotionLength_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_p(tempSamples,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        tempSamples->data[count] = std::sin(tempSamples->
                            data[count]);
                    }

                    tempMotionLength_data_tmp = d_x->size[0];
                    d_x->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_p(d_x,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        d_x->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        d_x->data[count] = std::cos(d_x->data[count]);
                    }

                    tempMotionLength_data_tmp = static_cast<int32_T>(S_0->size[0]
                        * S_0->size[1]);
                    S_0->size[0] = tempSamples->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_a(S_0,
                        tempMotionLength_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[tempMotionLength_data_tmp] = tempSamples->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = d_x->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + tempSamples->size[0])] = 1.0 - d_x->
                            data[tempMotionLength_data_tmp];
                    }

                    FlightMissionMode_mtimes_c(S_0, TransformMatrix, p);
                    samples_0 = rt_atan2d_snf(b_this_AirSpeed * b_this_AirSpeed,
                        9.8 * radius);
                    TransformMatrix_tmp = state[0];
                    state_0 = state[1];
                    state_1 = state[3];
                    count = S->size[0];
                    tempMotionLength_data_tmp_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0]
                        * ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_a(ns,
                        tempMotionLength_data_tmp);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[tempMotionLength_data_tmp] = p->
                            data[tempMotionLength_data_tmp] * radius +
                            TransformMatrix_tmp;
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + ns->size[0])] = p->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + p->size[0])] * radius +
                            state_0;
                    }

                    loop_ub = z->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 3))] = state_1
                            + S->data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (tempMotionLength_data_tmp_0 - 1);
                            tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 5))] =
                            -samples_0;
                    }
                } else if (FlightMissionMode_strcmp_clpqqk
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size) ||
                           FlightMissionMode_strcmp_clpqqkou
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size)) {
                    real_T state_0;
                    real_T state_1;
                    tempMotionLength_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_p(tempSamples,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        tempSamples->data[count] = std::sin(tempSamples->
                            data[count]);
                    }

                    tempMotionLength_data_tmp = d_x->size[0];
                    d_x->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_p(d_x,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        d_x->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        d_x->data[count] = std::cos(d_x->data[count]);
                    }

                    tempMotionLength_data_tmp = static_cast<int32_T>(S_0->size[0]
                        * S_0->size[1]);
                    S_0->size[0] = tempSamples->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_a(S_0,
                        tempMotionLength_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[tempMotionLength_data_tmp] = tempSamples->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = d_x->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + tempSamples->size[0])] = d_x->
                            data[tempMotionLength_data_tmp] - 1.0;
                    }

                    FlightMissionMode_mtimes_c(S_0, TransformMatrix, p);
                    samples_0 = rt_atan2d_snf(b_this_AirSpeed * b_this_AirSpeed,
                        9.8 * radius);
                    TransformMatrix_tmp = state[0];
                    state_0 = state[1];
                    state_1 = state[3];
                    count = S->size[0];
                    tempMotionLength_data_tmp_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0]
                        * ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_a(ns,
                        tempMotionLength_data_tmp);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[tempMotionLength_data_tmp] = p->
                            data[tempMotionLength_data_tmp] * radius +
                            TransformMatrix_tmp;
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + ns->size[0])] = p->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + p->size[0])] * radius +
                            state_0;
                    }

                    loop_ub = z->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 3))] = state_1
                            - S->data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (tempMotionLength_data_tmp_0 - 1);
                            tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 5))] =
                            samples_0;
                    }
                } else if (FlightMissionMode_strcmp_clpqqkoug
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size)) {
                    real_T state_0;
                    int32_T S_idx_0;
                    count = S->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(S_0->size[0]
                        * S_0->size[1]);
                    S_0->size[0] = S->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_a(S_0,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + S->size[0])] = 0.0;
                    }

                    FlightMissionMode_mtimes_c(S_0, TransformMatrix, p);
                    TransformMatrix_tmp = state[0];
                    state_0 = state[1];
                    count = S->size[0];
                    tempMotionLength_data_tmp_0 = S->size[0];
                    S_idx_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0]
                        * ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_a(ns,
                        tempMotionLength_data_tmp);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[tempMotionLength_data_tmp] = p->
                            data[tempMotionLength_data_tmp] * radius +
                            TransformMatrix_tmp;
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + ns->size[0])] = p->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + p->size[0])] * radius +
                            state_0;
                    }

                    loop_ub = z->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 3))] = state[3];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (tempMotionLength_data_tmp_0 - 1);
                            tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (S_idx_0 - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 5))] = 0.0;
                    }
                }

                if (ab->size[1] != 0) {
                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp < 6;
                            tempMotionLength_data_tmp++) {
                        for (tempMotionLength_data_tmp_0 = 0;
                                tempMotionLength_data_tmp_0 <= loop_ub;
                                tempMotionLength_data_tmp_0++) {
                            poses->data[static_cast<int32_T>(static_cast<int32_T>
                                (static_cast<int32_T>(count +
                                tempMotionLength_data_tmp_0) +
                                 static_cast<int32_T>(poses->size[0] *
                                tempMotionLength_data_tmp)) - 1)] = ns->data[
                                static_cast<int32_T>(static_cast<int32_T>
                                (ns->size[0] * tempMotionLength_data_tmp) +
                                tempMotionLength_data_tmp_0)];
                        }
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>
                            (count + tempMotionLength_data_tmp) - 1)] = ns->
                            data[tempMotionLength_data_tmp];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count +
                            tempMotionLength_data_tmp) + poses->size[0]) - 1)] =
                            -ns->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + ns->size[0])];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count +
                            tempMotionLength_data_tmp) + static_cast<int32_T>
                            (poses->size[0] << 1)) - 1)] = -ns->data[
                            static_cast<int32_T>(static_cast<int32_T>(ns->size[0]
                            << 1) + tempMotionLength_data_tmp)];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count +
                            tempMotionLength_data_tmp) + static_cast<int32_T>
                            (poses->size[0] * 3)) - 1)] = -ns->data[static_cast<
                            int32_T>(static_cast<int32_T>(ns->size[0] * 3) +
                                     tempMotionLength_data_tmp)];
                    }
                }

                count = ns->size[0];
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <
                        6; tempMotionLength_data_tmp++) {
                    state[tempMotionLength_data_tmp] = ns->data
                        [static_cast<int32_T>(static_cast<int32_T>
                        (static_cast<int32_T>(ns->size[0] *
                        tempMotionLength_data_tmp) + count) - 1)];
                }

                startIndex += static_cast<real_T>(ab->size[1]);
            }

            intermediateLength += tempMotionLength_data[poses_0];
            poses_0 = static_cast<int32_T>(poses_0 + 1);
        }

        FlightMissionMode_emxFree_real_T_c(&S_0);
        FlightMissionMode_emxFree_boolean_T_d(&tempSamplesIndex_0);
        FlightMissionMode_emxFree_int32_T_k(&ab);
        FlightMissionMode_emxFree_real_T_c(&d_x);
        FlightMissionMode_emxFree_real_T_c(&p);
        FlightMissionMode_emxFree_real_T_c(&z);
        FlightMissionMode_emxFree_real_T_c(&ns);
        FlightMissionMode_emxFree_real_T_c(&S);
        FlightMissionMode_emxFree_boolean_T_d(&tempSamplesIndex);
        loop_ub = poses->size[0];
        tempMotionLength_data_tmp = tempSamples->size[0];
        tempSamples->size[0] = poses->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T1_p(tempSamples,
            tempMotionLength_data_tmp);
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                static_cast<int32_T>(loop_ub - 1); tempMotionLength_data_tmp++)
        {
            tempSamples->data[tempMotionLength_data_tmp] = poses->data[
                static_cast<int32_T>(static_cast<int32_T>(poses->size[0] * 3) +
                tempMotionLength_data_tmp)];
        }

        FlightMissionMode_wrapToPi_b(tempSamples);
        loop_ub = tempSamples->size[0];
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                static_cast<int32_T>(loop_ub - 1); tempMotionLength_data_tmp++)
        {
            poses->data[static_cast<int32_T>(tempMotionLength_data_tmp +
                static_cast<int32_T>(poses->size[0] * 3))] = tempSamples->
                data[tempMotionLength_data_tmp];
        }

        FlightMissionMode_emxFree_real_T_c(&tempSamples);
    }
}

// Function for MATLAB Function: '<S179>/WayPointGenerator'
static void FlightMissionMode_genSegWP_b(const
    uavDubinsConnection_FlightMissionMode_T *connectionObj, const real_T start[4],
    const real_T ende[4], real_T numWPs, emxArray_real_T_FlightMissionMode_T
    *segWayPoints)
{
    emxArray_real_T_FlightMissionMode_T *lengths;
    emxArray_real_T_FlightMissionMode_T *poses;
    uavDubinsPathSegment_FlightMissionMode_b_T pathSegObj;
    real_T b_a__1_data[28];
    real_T iia_data_0[28];
    real_T a__1;
    int32_T iia_data[28];
    int32_T b_a__1_size[2];
    int32_T ib_size;
    int32_T iia_size;
    int32_T nm1d2;

    // '<S211>:1:35'
    FlightMissionMode_do_vectors_o(b_a__1_data, b_a__1_size, iia_data, &nm1d2,
        &ib_size);
    iia_size = nm1d2;
    for (ib_size = 0; ib_size <= static_cast<int32_T>(nm1d2 - 1); ib_size++) {
        iia_data_0[ib_size] = static_cast<real_T>(iia_data[ib_size]);
    }

    FlightMissionMode_do_vectors_on(iia_data_0, &iia_size, b_a__1_data,
        b_a__1_size, iia_data, &nm1d2, &ib_size);
    for (ib_size = 0; ib_size <= static_cast<int32_T>(nm1d2 - 1); ib_size++) {
        iia_data_0[ib_size] = static_cast<real_T>(iia_data[ib_size]);
    }

    FlightMissionMode_sort_hn(iia_data_0, &nm1d2);
    for (ib_size = 0; ib_size <= static_cast<int32_T>(nm1d2 - 1); ib_size++) {
        b_a__1_data[ib_size] = iia_data_0[ib_size] - 1.0;
    }

    FlightMissionMode_uavDubinsBuiltins_connect_l(connectionObj, start, ende,
        connectionObj->MinTurningRadius, b_a__1_data, &nm1d2, &pathSegObj, &a__1);

    // '<S211>:1:38'
    a__1 = pathSegObj.Length / numWPs;

    // '<S211>:1:39'
    FlightMissionMode_emxInit_real_T_i(&lengths, 2);
    if (std::isnan(a__1)) {
        nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
        lengths->size[0] = 1;
        lengths->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_a(lengths, nm1d2);
        lengths->data[0] = (rtNaN);
    } else if (std::isnan(pathSegObj.Length)) {
        nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
        lengths->size[0] = 1;
        lengths->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_a(lengths, nm1d2);
        lengths->data[0] = (rtNaN);
    } else if (a__1 == 0.0) {
        lengths->size[0] = 1;
        lengths->size[1] = 0;
    } else if ((0.0 < pathSegObj.Length) && (a__1 < 0.0)) {
        lengths->size[0] = 1;
        lengths->size[1] = 0;
    } else if ((pathSegObj.Length < 0.0) && (a__1 > 0.0)) {
        lengths->size[0] = 1;
        lengths->size[1] = 0;
    } else {
        boolean_T guard1{ false };

        guard1 = false;
        if (std::isinf(pathSegObj.Length)) {
            if (std::isinf(a__1)) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_a(lengths, nm1d2);
                lengths->data[0] = (rtNaN);
            } else if (0.0 == pathSegObj.Length) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_a(lengths, nm1d2);
                lengths->data[0] = (rtNaN);
            } else {
                guard1 = true;
            }
        } else {
            guard1 = true;
        }

        if (guard1) {
            if (std::isinf(a__1)) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_a(lengths, nm1d2);
                lengths->data[0] = 0.0;
            } else if (std::floor(a__1) == a__1) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                iia_size = static_cast<int32_T>(std::floor(pathSegObj.Length /
                    a__1));
                lengths->size[1] = static_cast<int32_T>(iia_size + 1);
                FlightMissionMode_emxEnsureCapacity_real_T_a(lengths, nm1d2);
                for (ib_size = 0; ib_size <= iia_size; ib_size++) {
                    lengths->data[ib_size] = a__1 * static_cast<real_T>(ib_size);
                }
            } else {
                real_T apnd;
                real_T cdiff;
                real_T ndbl;
                ndbl = std::floor(pathSegObj.Length / a__1 + 0.5);
                apnd = ndbl * a__1;
                if (a__1 > 0.0) {
                    cdiff = apnd - pathSegObj.Length;
                } else {
                    cdiff = pathSegObj.Length - apnd;
                }

                if (std::abs(cdiff) < 4.4408920985006262E-16 * std::fmax(0.0,
                        std::abs(pathSegObj.Length))) {
                    ndbl++;
                    apnd = pathSegObj.Length;
                } else if (cdiff > 0.0) {
                    apnd = (ndbl - 1.0) * a__1;
                } else {
                    ndbl++;
                }

                if (ndbl >= 0.0) {
                    ib_size = static_cast<int32_T>(static_cast<int32_T>(ndbl) -
                        1);
                } else {
                    ib_size = -1;
                }

                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = static_cast<int32_T>(ib_size + 1);
                FlightMissionMode_emxEnsureCapacity_real_T_a(lengths, nm1d2);
                if (static_cast<int32_T>(ib_size + 1) > 0) {
                    lengths->data[0] = 0.0;
                    if (static_cast<int32_T>(ib_size + 1) > 1) {
                        lengths->data[ib_size] = apnd;
                        nm1d2 = static_cast<int32_T>(ib_size / 2);
                        for (iia_size = 1; static_cast<int32_T>(iia_size - 1) <=
                             static_cast<int32_T>(nm1d2 - 2); iia_size =
                                static_cast<int32_T>(iia_size + 1)) {
                            ndbl = static_cast<real_T>(iia_size) * a__1;
                            lengths->data[iia_size] = ndbl;
                            lengths->data[static_cast<int32_T>(ib_size -
                                iia_size)] = apnd - ndbl;
                        }

                        if (static_cast<int32_T>(nm1d2 << 1) == ib_size) {
                            lengths->data[nm1d2] = apnd / 2.0;
                        } else {
                            ndbl = static_cast<real_T>(nm1d2) * a__1;
                            lengths->data[nm1d2] = ndbl;
                            lengths->data[static_cast<int32_T>(nm1d2 + 1)] =
                                apnd - ndbl;
                        }
                    }
                }
            }
        }
    }

    FlightMissionMode_emxInit_real_T_i(&poses, 2);

    // '<S211>:1:42'
    FlightMissionMode_uavDubinsPathSegment_interpolate_h(pathSegObj.StartPose,
        pathSegObj.GoalPose, pathSegObj.FlightPathAngle, pathSegObj.AirSpeed,
        pathSegObj.MinTurningRadius, pathSegObj.HelixRadius,
        pathSegObj.MotionTypes, pathSegObj.MotionLengths, pathSegObj.Length,
        lengths, poses);

    // '<S211>:1:43'
    iia_size = poses->size[0];
    nm1d2 = static_cast<int32_T>(segWayPoints->size[0] * segWayPoints->size[1]);
    segWayPoints->size[0] = poses->size[0];
    segWayPoints->size[1] = 3;
    FlightMissionMode_emxEnsureCapacity_real_T_a(segWayPoints, nm1d2);
    FlightMissionMode_emxFree_real_T_c(&lengths);
    for (ib_size = 0; ib_size < 3; ib_size++) {
        for (nm1d2 = 0; nm1d2 <= static_cast<int32_T>(iia_size - 1); nm1d2++) {
            segWayPoints->data[static_cast<int32_T>(nm1d2 + static_cast<int32_T>
                (segWayPoints->size[0] * ib_size))] = poses->data
                [static_cast<int32_T>(static_cast<int32_T>(poses->size[0] *
                ib_size) + nm1d2)];
        }
    }

    FlightMissionMode_emxFree_real_T_c(&poses);
}

//
// Output and update for atomic system:
//    '<S179>/WayPointGenerator'
//    '<S220>/WayPointGenerator'
//
void FlightMissionMode_WayPointGenerator(real_T rtu_Length, real_T rty_left[300],
    real_T rty_top[300], real_T rty_right[300], real_T rty_bottom[300], real_T
    rtp_numSegWP)
{
    emxArray_real_T_FlightMissionMode_T *SegWP;
    uavDubinsConnection_FlightMissionMode_T lobj_0_DubinsObj;
    real_T LDp[4];
    real_T LUp[4];
    real_T RDp[4];
    real_T RUp[4];
    real_T LDp_tmp;
    int32_T i;
    int32_T i_0;
    FlightMissionMode_emxInit_real_T_i(&SegWP, 2);

    // MATLAB Function 'WayPointGenerator': '<S211>:1'
    // '<S211>:1:3'
    lobj_0_DubinsObj.FlightPathAngleLimit[0] = -0.175;
    lobj_0_DubinsObj.FlightPathAngleLimit[1] = 0.175;
    lobj_0_DubinsObj.MaxRollAngle = 0.3490658503988659;
    lobj_0_DubinsObj.AirSpeed = 35.0;
    lobj_0_DubinsObj.MinTurningRadius = 343.43467743182782;

    // '<S211>:1:6'
    LUp[0] = 0.0;
    LUp[1] = rtu_Length / 2.0;
    LUp[2] = 0.0;
    LUp[3] = 1.5707963267948966;

    // '<S211>:1:7'
    LDp[0] = 0.0;
    LDp_tmp = -rtu_Length / 2.0;
    LDp[1] = LDp_tmp;
    LDp[2] = 0.0;
    LDp[3] = 1.5707963267948966;

    // '<S211>:1:8'
    RUp[0] = 686.86935486365564;
    RUp[1] = rtu_Length / 2.0;
    RUp[2] = 0.0;
    RUp[3] = -1.5707963267948966;

    // '<S211>:1:9'
    RDp[0] = 686.86935486365564;
    RDp[1] = LDp_tmp;
    RDp[2] = 0.0;
    RDp[3] = -1.5707963267948966;

    // '<S211>:1:15'
    FlightMissionMode_genSegWP_b(&lobj_0_DubinsObj, LDp, LUp, rtp_numSegWP,
        SegWP);

    // '<S211>:1:16'
    for (i_0 = 0; i_0 < 3; i_0++) {
        for (i = 0; i < 100; i++) {
            rty_left[static_cast<int32_T>(i + static_cast<int32_T>(100 * i_0))] =
                SegWP->data[static_cast<int32_T>(static_cast<int32_T>
                (SegWP->size[0] * i_0) + i)];
        }
    }

    // '<S211>:1:19'
    FlightMissionMode_genSegWP_b(&lobj_0_DubinsObj, LUp, RUp, rtp_numSegWP,
        SegWP);

    // '<S211>:1:20'
    for (i_0 = 0; i_0 < 3; i_0++) {
        for (i = 0; i < 100; i++) {
            rty_top[static_cast<int32_T>(i + static_cast<int32_T>(100 * i_0))] =
                SegWP->data[static_cast<int32_T>(static_cast<int32_T>
                (SegWP->size[0] * i_0) + i)];
        }
    }

    // '<S211>:1:23'
    FlightMissionMode_genSegWP_b(&lobj_0_DubinsObj, RUp, RDp, rtp_numSegWP,
        SegWP);

    // '<S211>:1:24'
    for (i_0 = 0; i_0 < 3; i_0++) {
        for (i = 0; i < 100; i++) {
            rty_right[static_cast<int32_T>(i + static_cast<int32_T>(100 * i_0))]
                = SegWP->data[static_cast<int32_T>(static_cast<int32_T>
                (SegWP->size[0] * i_0) + i)];
        }
    }

    // '<S211>:1:27'
    FlightMissionMode_genSegWP_b(&lobj_0_DubinsObj, RDp, LDp, rtp_numSegWP,
        SegWP);

    // '<S211>:1:28'
    for (i_0 = 0; i_0 < 3; i_0++) {
        for (i = 0; i < 100; i++) {
            rty_bottom[static_cast<int32_T>(i + static_cast<int32_T>(100 * i_0))]
                = SegWP->data[static_cast<int32_T>(static_cast<int32_T>
                (SegWP->size[0] * i_0) + i)];
        }
    }

    FlightMissionMode_emxFree_real_T_c(&SegWP);
}

//
// Output and update for atomic system:
//    '<S179>/biasNEDstartpose'
//    '<S220>/biasNEDstartpose1'
//    '<S260>/biasNEDstartpose'
//
void FlightMissionMode_biasNEDstartpose(const real_T rtu_MissionNED[3], const
    real_T rtu_IndivRotWP[3], real_T rty_nedWayPoint[3])
{
    // MATLAB Function 'biasNED': '<S212>:1'
    // '<S212>:1:4'
    rty_nedWayPoint[0] = rtu_MissionNED[0] + rtu_IndivRotWP[1];
    rty_nedWayPoint[1] = rtu_IndivRotWP[0] + rtu_MissionNED[1];
    rty_nedWayPoint[2] = rtu_IndivRotWP[2] + rtu_MissionNED[2];
}

// Function for Chart: '<Root>/PreemptableMissionModeSelector'
static void FlightMissionMode_exit_internal_GuidanceLogic
    (DW_FlightMissionMode_f_T *localDW)
{
    // Exit Internal 'GuidanceLogic': '<S9>:1'
    localDW->FlightMission = MissionModes_None;
    localDW->is_GuidanceLogic = FlightMissionMode_IN_NO_ACTIVE_CHILD_g;
}

static void FlightMissionMode_emxInit_real_T_h
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_real_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_real_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (real_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxFree_real_T_n
    (emxArray_real_T_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_real_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (real_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)nullptr;
    }
}

static void FlightMissionMode_emxInit_char_T(emxArray_char_T_FlightMissionMode_T
    **pEmxArray, int32_T numDimensions)
{
    emxArray_char_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_char_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_char_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (char_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxInitStruct_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T *pStruct)
{
    FlightMissionMode_emxInit_char_T(&pStruct->f1, 2);
}

static void FlightMissionMode_emxInitMatrix_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[4])
{
    for (int32_T i{0}; i < 4; i++) {
        FlightMissionMode_emxInitStruct_cell_wrap_1(&pMatrix[i]);
    }
}

static void FlightMissionMode_emxInitStruct_cell_wrap_2
    (cell_wrap_2_FlightMissionMode_T *pStruct)
{
    FlightMissionMode_emxInitMatrix_cell_wrap_1(pStruct->f1);
}

static void FlightMissionMode_emxInitMatrix_cell_wrap_2
    (cell_wrap_2_FlightMissionMode_T pMatrix[500])
{
    for (int32_T i{0}; i < 500; i++) {
        FlightMissionMode_emxInitStruct_cell_wrap_2(&pMatrix[i]);
    }
}

static void FlightMissionMode_emxEnsureCapacity_char_T
    (emxArray_char_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(char_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (char_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (char_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxCopy_char_T(emxArray_char_T_FlightMissionMode_T
    **dst, emxArray_char_T_FlightMissionMode_T * const *src)
{
    int32_T i;
    int32_T numElDst;
    int32_T numElSrc;
    numElDst = 1;
    numElSrc = 1;
    for (i = 0; i <= static_cast<int32_T>((*dst)->numDimensions - 1); i++) {
        numElDst = static_cast<int32_T>(numElDst * (*dst)->size[i]);
        numElSrc = static_cast<int32_T>(numElSrc * (*src)->size[i]);
    }

    for (i = 0; i <= static_cast<int32_T>((*dst)->numDimensions - 1); i++) {
        (*dst)->size[i] = (*src)->size[i];
    }

    FlightMissionMode_emxEnsureCapacity_char_T(*dst, numElDst);
    for (i = 0; i <= static_cast<int32_T>(numElSrc - 1); i++) {
        (*dst)->data[i] = (*src)->data[i];
    }
}

static void FlightMissionMode_emxCopyStruct_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T *dst, const
     cell_wrap_1_FlightMissionMode_i_T *src)
{
    FlightMissionMode_emxCopy_char_T(&dst->f1, &src->f1);
}

static void FlightMissionMode_emxFree_char_T(emxArray_char_T_FlightMissionMode_T
    **pEmxArray)
{
    if (*pEmxArray != (emxArray_char_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (char_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_char_T_FlightMissionMode_T *)nullptr;
    }
}

static void FlightMissionMode_emxFreeStruct_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T *pStruct)
{
    FlightMissionMode_emxFree_char_T(&pStruct->f1);
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_idx_motionType(cell_wrap_2_FlightMissionMode_T
    motionType1List[500], cell_wrap_2_FlightMissionMode_T motionType2List[500])
{
    cell_wrap_1_FlightMissionMode_i_T aab;
    cell_wrap_1_FlightMissionMode_i_T aac;
    cell_wrap_1_FlightMissionMode_i_T aad;
    cell_wrap_1_FlightMissionMode_i_T aae;
    cell_wrap_1_FlightMissionMode_i_T aaf;
    cell_wrap_1_FlightMissionMode_i_T aag;
    cell_wrap_1_FlightMissionMode_i_T ab;
    cell_wrap_1_FlightMissionMode_i_T abb;
    cell_wrap_1_FlightMissionMode_i_T abc;
    cell_wrap_1_FlightMissionMode_i_T abd;
    cell_wrap_1_FlightMissionMode_i_T abe;
    cell_wrap_1_FlightMissionMode_i_T abf;
    cell_wrap_1_FlightMissionMode_i_T abg;
    cell_wrap_1_FlightMissionMode_i_T ac;
    cell_wrap_1_FlightMissionMode_i_T acb;
    cell_wrap_1_FlightMissionMode_i_T acc;
    cell_wrap_1_FlightMissionMode_i_T acd;
    cell_wrap_1_FlightMissionMode_i_T ace;
    cell_wrap_1_FlightMissionMode_i_T acf;
    cell_wrap_1_FlightMissionMode_i_T acg;
    cell_wrap_1_FlightMissionMode_i_T ad;
    cell_wrap_1_FlightMissionMode_i_T adb;
    cell_wrap_1_FlightMissionMode_i_T adc;
    cell_wrap_1_FlightMissionMode_i_T add;
    cell_wrap_1_FlightMissionMode_i_T ade;
    cell_wrap_1_FlightMissionMode_i_T adf;
    cell_wrap_1_FlightMissionMode_i_T adg;
    cell_wrap_1_FlightMissionMode_i_T ae;
    cell_wrap_1_FlightMissionMode_i_T aeb;
    cell_wrap_1_FlightMissionMode_i_T aec;
    cell_wrap_1_FlightMissionMode_i_T aed;
    cell_wrap_1_FlightMissionMode_i_T aee;
    cell_wrap_1_FlightMissionMode_i_T aef;
    cell_wrap_1_FlightMissionMode_i_T aeg;
    cell_wrap_1_FlightMissionMode_i_T af;
    cell_wrap_1_FlightMissionMode_i_T afb;
    cell_wrap_1_FlightMissionMode_i_T afc;
    cell_wrap_1_FlightMissionMode_i_T afd;
    cell_wrap_1_FlightMissionMode_i_T afe;
    cell_wrap_1_FlightMissionMode_i_T aff;
    cell_wrap_1_FlightMissionMode_i_T afg;
    cell_wrap_1_FlightMissionMode_i_T ag;
    cell_wrap_1_FlightMissionMode_i_T agb;
    cell_wrap_1_FlightMissionMode_i_T agc;
    cell_wrap_1_FlightMissionMode_i_T agd;
    cell_wrap_1_FlightMissionMode_i_T age;
    cell_wrap_1_FlightMissionMode_i_T agf;
    cell_wrap_1_FlightMissionMode_i_T agg;
    cell_wrap_1_FlightMissionMode_i_T ah;
    cell_wrap_1_FlightMissionMode_i_T ahb;
    cell_wrap_1_FlightMissionMode_i_T ahc;
    cell_wrap_1_FlightMissionMode_i_T ahd;
    cell_wrap_1_FlightMissionMode_i_T ahe;
    cell_wrap_1_FlightMissionMode_i_T ahf;
    cell_wrap_1_FlightMissionMode_i_T ahg;
    cell_wrap_1_FlightMissionMode_i_T ai;
    cell_wrap_1_FlightMissionMode_i_T aib;
    cell_wrap_1_FlightMissionMode_i_T aic;
    cell_wrap_1_FlightMissionMode_i_T aid;
    cell_wrap_1_FlightMissionMode_i_T aie;
    cell_wrap_1_FlightMissionMode_i_T aif;
    cell_wrap_1_FlightMissionMode_i_T aig;
    cell_wrap_1_FlightMissionMode_i_T aj;
    cell_wrap_1_FlightMissionMode_i_T ajb;
    cell_wrap_1_FlightMissionMode_i_T ajc;
    cell_wrap_1_FlightMissionMode_i_T ajd;
    cell_wrap_1_FlightMissionMode_i_T aje;
    cell_wrap_1_FlightMissionMode_i_T ajf;
    cell_wrap_1_FlightMissionMode_i_T ajg;
    cell_wrap_1_FlightMissionMode_i_T ak;
    cell_wrap_1_FlightMissionMode_i_T akb;
    cell_wrap_1_FlightMissionMode_i_T akc;
    cell_wrap_1_FlightMissionMode_i_T akd;
    cell_wrap_1_FlightMissionMode_i_T ake;
    cell_wrap_1_FlightMissionMode_i_T akf;
    cell_wrap_1_FlightMissionMode_i_T akg;
    cell_wrap_1_FlightMissionMode_i_T al;
    cell_wrap_1_FlightMissionMode_i_T alb;
    cell_wrap_1_FlightMissionMode_i_T alc;
    cell_wrap_1_FlightMissionMode_i_T ald;
    cell_wrap_1_FlightMissionMode_i_T ale;
    cell_wrap_1_FlightMissionMode_i_T alf;
    cell_wrap_1_FlightMissionMode_i_T am;
    cell_wrap_1_FlightMissionMode_i_T amb;
    cell_wrap_1_FlightMissionMode_i_T amc;
    cell_wrap_1_FlightMissionMode_i_T amd;
    cell_wrap_1_FlightMissionMode_i_T ame;
    cell_wrap_1_FlightMissionMode_i_T amf;
    cell_wrap_1_FlightMissionMode_i_T an;
    cell_wrap_1_FlightMissionMode_i_T anb;
    cell_wrap_1_FlightMissionMode_i_T anc;
    cell_wrap_1_FlightMissionMode_i_T ane;
    cell_wrap_1_FlightMissionMode_i_T anf;
    cell_wrap_1_FlightMissionMode_i_T ao;
    cell_wrap_1_FlightMissionMode_i_T aob;
    cell_wrap_1_FlightMissionMode_i_T aoc;
    cell_wrap_1_FlightMissionMode_i_T aod;
    cell_wrap_1_FlightMissionMode_i_T aoe;
    cell_wrap_1_FlightMissionMode_i_T aof;
    cell_wrap_1_FlightMissionMode_i_T ap;
    cell_wrap_1_FlightMissionMode_i_T apb;
    cell_wrap_1_FlightMissionMode_i_T apc;
    cell_wrap_1_FlightMissionMode_i_T apd;
    cell_wrap_1_FlightMissionMode_i_T ape;
    cell_wrap_1_FlightMissionMode_i_T apf;
    cell_wrap_1_FlightMissionMode_i_T aq;
    cell_wrap_1_FlightMissionMode_i_T aqb;
    cell_wrap_1_FlightMissionMode_i_T aqc;
    cell_wrap_1_FlightMissionMode_i_T aqd;
    cell_wrap_1_FlightMissionMode_i_T aqe;
    cell_wrap_1_FlightMissionMode_i_T aqf;
    cell_wrap_1_FlightMissionMode_i_T ar;
    cell_wrap_1_FlightMissionMode_i_T arb;
    cell_wrap_1_FlightMissionMode_i_T arc;
    cell_wrap_1_FlightMissionMode_i_T ard;
    cell_wrap_1_FlightMissionMode_i_T are;
    cell_wrap_1_FlightMissionMode_i_T arf;
    cell_wrap_1_FlightMissionMode_i_T as;
    cell_wrap_1_FlightMissionMode_i_T asb;
    cell_wrap_1_FlightMissionMode_i_T asc;
    cell_wrap_1_FlightMissionMode_i_T asd;
    cell_wrap_1_FlightMissionMode_i_T ase;
    cell_wrap_1_FlightMissionMode_i_T asf;
    cell_wrap_1_FlightMissionMode_i_T at;
    cell_wrap_1_FlightMissionMode_i_T atb;
    cell_wrap_1_FlightMissionMode_i_T atc;
    cell_wrap_1_FlightMissionMode_i_T atd;
    cell_wrap_1_FlightMissionMode_i_T ate;
    cell_wrap_1_FlightMissionMode_i_T atf;
    cell_wrap_1_FlightMissionMode_i_T au;
    cell_wrap_1_FlightMissionMode_i_T aub;
    cell_wrap_1_FlightMissionMode_i_T auc;
    cell_wrap_1_FlightMissionMode_i_T aud;
    cell_wrap_1_FlightMissionMode_i_T aue;
    cell_wrap_1_FlightMissionMode_i_T auf;
    cell_wrap_1_FlightMissionMode_i_T av;
    cell_wrap_1_FlightMissionMode_i_T avb;
    cell_wrap_1_FlightMissionMode_i_T avc;
    cell_wrap_1_FlightMissionMode_i_T avd;
    cell_wrap_1_FlightMissionMode_i_T ave;
    cell_wrap_1_FlightMissionMode_i_T avf;
    cell_wrap_1_FlightMissionMode_i_T aw;
    cell_wrap_1_FlightMissionMode_i_T awb;
    cell_wrap_1_FlightMissionMode_i_T awc;
    cell_wrap_1_FlightMissionMode_i_T awd;
    cell_wrap_1_FlightMissionMode_i_T awe;
    cell_wrap_1_FlightMissionMode_i_T awf;
    cell_wrap_1_FlightMissionMode_i_T ax;
    cell_wrap_1_FlightMissionMode_i_T axb;
    cell_wrap_1_FlightMissionMode_i_T axc;
    cell_wrap_1_FlightMissionMode_i_T axd;
    cell_wrap_1_FlightMissionMode_i_T axe;
    cell_wrap_1_FlightMissionMode_i_T axf;
    cell_wrap_1_FlightMissionMode_i_T ay;
    cell_wrap_1_FlightMissionMode_i_T ayb;
    cell_wrap_1_FlightMissionMode_i_T ayc;
    cell_wrap_1_FlightMissionMode_i_T ayd;
    cell_wrap_1_FlightMissionMode_i_T aye;
    cell_wrap_1_FlightMissionMode_i_T ayf;
    cell_wrap_1_FlightMissionMode_i_T b;
    cell_wrap_1_FlightMissionMode_i_T bab;
    cell_wrap_1_FlightMissionMode_i_T bac;
    cell_wrap_1_FlightMissionMode_i_T bad;
    cell_wrap_1_FlightMissionMode_i_T bae;
    cell_wrap_1_FlightMissionMode_i_T baf;
    cell_wrap_1_FlightMissionMode_i_T bag;
    cell_wrap_1_FlightMissionMode_i_T bb;
    cell_wrap_1_FlightMissionMode_i_T bbb;
    cell_wrap_1_FlightMissionMode_i_T bbc;
    cell_wrap_1_FlightMissionMode_i_T bbd;
    cell_wrap_1_FlightMissionMode_i_T bbe;
    cell_wrap_1_FlightMissionMode_i_T bbf;
    cell_wrap_1_FlightMissionMode_i_T bbg;
    cell_wrap_1_FlightMissionMode_i_T bc;
    cell_wrap_1_FlightMissionMode_i_T bcb;
    cell_wrap_1_FlightMissionMode_i_T bcc;
    cell_wrap_1_FlightMissionMode_i_T bcd;
    cell_wrap_1_FlightMissionMode_i_T bce;
    cell_wrap_1_FlightMissionMode_i_T bcf;
    cell_wrap_1_FlightMissionMode_i_T bcg;
    cell_wrap_1_FlightMissionMode_i_T bd;
    cell_wrap_1_FlightMissionMode_i_T bdb;
    cell_wrap_1_FlightMissionMode_i_T bdc;
    cell_wrap_1_FlightMissionMode_i_T bdd;
    cell_wrap_1_FlightMissionMode_i_T bde;
    cell_wrap_1_FlightMissionMode_i_T bdf;
    cell_wrap_1_FlightMissionMode_i_T bdg;
    cell_wrap_1_FlightMissionMode_i_T be;
    cell_wrap_1_FlightMissionMode_i_T beb;
    cell_wrap_1_FlightMissionMode_i_T bec;
    cell_wrap_1_FlightMissionMode_i_T bed;
    cell_wrap_1_FlightMissionMode_i_T bee;
    cell_wrap_1_FlightMissionMode_i_T bef;
    cell_wrap_1_FlightMissionMode_i_T beg;
    cell_wrap_1_FlightMissionMode_i_T bf;
    cell_wrap_1_FlightMissionMode_i_T bfb;
    cell_wrap_1_FlightMissionMode_i_T bfc;
    cell_wrap_1_FlightMissionMode_i_T bfd;
    cell_wrap_1_FlightMissionMode_i_T bfe;
    cell_wrap_1_FlightMissionMode_i_T bff;
    cell_wrap_1_FlightMissionMode_i_T bfg;
    cell_wrap_1_FlightMissionMode_i_T bg;
    cell_wrap_1_FlightMissionMode_i_T bgb;
    cell_wrap_1_FlightMissionMode_i_T bgc;
    cell_wrap_1_FlightMissionMode_i_T bgd;
    cell_wrap_1_FlightMissionMode_i_T bge;
    cell_wrap_1_FlightMissionMode_i_T bgf;
    cell_wrap_1_FlightMissionMode_i_T bgg;
    cell_wrap_1_FlightMissionMode_i_T bh;
    cell_wrap_1_FlightMissionMode_i_T bhb;
    cell_wrap_1_FlightMissionMode_i_T bhc;
    cell_wrap_1_FlightMissionMode_i_T bhd;
    cell_wrap_1_FlightMissionMode_i_T bhe;
    cell_wrap_1_FlightMissionMode_i_T bhf;
    cell_wrap_1_FlightMissionMode_i_T bhg;
    cell_wrap_1_FlightMissionMode_i_T bi;
    cell_wrap_1_FlightMissionMode_i_T bib;
    cell_wrap_1_FlightMissionMode_i_T bic;
    cell_wrap_1_FlightMissionMode_i_T bid;
    cell_wrap_1_FlightMissionMode_i_T bie;
    cell_wrap_1_FlightMissionMode_i_T bif;
    cell_wrap_1_FlightMissionMode_i_T big;
    cell_wrap_1_FlightMissionMode_i_T bj;
    cell_wrap_1_FlightMissionMode_i_T bjb;
    cell_wrap_1_FlightMissionMode_i_T bjc;
    cell_wrap_1_FlightMissionMode_i_T bjd;
    cell_wrap_1_FlightMissionMode_i_T bje;
    cell_wrap_1_FlightMissionMode_i_T bjf;
    cell_wrap_1_FlightMissionMode_i_T bjg;
    cell_wrap_1_FlightMissionMode_i_T bk;
    cell_wrap_1_FlightMissionMode_i_T bkb;
    cell_wrap_1_FlightMissionMode_i_T bkc;
    cell_wrap_1_FlightMissionMode_i_T bkd;
    cell_wrap_1_FlightMissionMode_i_T bke;
    cell_wrap_1_FlightMissionMode_i_T bkf;
    cell_wrap_1_FlightMissionMode_i_T bkg;
    cell_wrap_1_FlightMissionMode_i_T bl;
    cell_wrap_1_FlightMissionMode_i_T blb;
    cell_wrap_1_FlightMissionMode_i_T blc;
    cell_wrap_1_FlightMissionMode_i_T bld;
    cell_wrap_1_FlightMissionMode_i_T ble;
    cell_wrap_1_FlightMissionMode_i_T blf;
    cell_wrap_1_FlightMissionMode_i_T bm;
    cell_wrap_1_FlightMissionMode_i_T bmb;
    cell_wrap_1_FlightMissionMode_i_T bmc;
    cell_wrap_1_FlightMissionMode_i_T bmd;
    cell_wrap_1_FlightMissionMode_i_T bme;
    cell_wrap_1_FlightMissionMode_i_T bmf;
    cell_wrap_1_FlightMissionMode_i_T bn;
    cell_wrap_1_FlightMissionMode_i_T bnb;
    cell_wrap_1_FlightMissionMode_i_T bnc;
    cell_wrap_1_FlightMissionMode_i_T bnd;
    cell_wrap_1_FlightMissionMode_i_T bne;
    cell_wrap_1_FlightMissionMode_i_T bnf;
    cell_wrap_1_FlightMissionMode_i_T bo;
    cell_wrap_1_FlightMissionMode_i_T bob;
    cell_wrap_1_FlightMissionMode_i_T boc;
    cell_wrap_1_FlightMissionMode_i_T bod;
    cell_wrap_1_FlightMissionMode_i_T boe;
    cell_wrap_1_FlightMissionMode_i_T bof;
    cell_wrap_1_FlightMissionMode_i_T bp;
    cell_wrap_1_FlightMissionMode_i_T bpb;
    cell_wrap_1_FlightMissionMode_i_T bpc;
    cell_wrap_1_FlightMissionMode_i_T bpd;
    cell_wrap_1_FlightMissionMode_i_T bpe;
    cell_wrap_1_FlightMissionMode_i_T bpf;
    cell_wrap_1_FlightMissionMode_i_T bq;
    cell_wrap_1_FlightMissionMode_i_T bqb;
    cell_wrap_1_FlightMissionMode_i_T bqc;
    cell_wrap_1_FlightMissionMode_i_T bqd;
    cell_wrap_1_FlightMissionMode_i_T bqe;
    cell_wrap_1_FlightMissionMode_i_T bqf;
    cell_wrap_1_FlightMissionMode_i_T br;
    cell_wrap_1_FlightMissionMode_i_T brb;
    cell_wrap_1_FlightMissionMode_i_T brc;
    cell_wrap_1_FlightMissionMode_i_T brd;
    cell_wrap_1_FlightMissionMode_i_T bre;
    cell_wrap_1_FlightMissionMode_i_T brf;
    cell_wrap_1_FlightMissionMode_i_T bs;
    cell_wrap_1_FlightMissionMode_i_T bsb;
    cell_wrap_1_FlightMissionMode_i_T bsc;
    cell_wrap_1_FlightMissionMode_i_T bsd;
    cell_wrap_1_FlightMissionMode_i_T bse;
    cell_wrap_1_FlightMissionMode_i_T bsf;
    cell_wrap_1_FlightMissionMode_i_T bt;
    cell_wrap_1_FlightMissionMode_i_T btb;
    cell_wrap_1_FlightMissionMode_i_T btc;
    cell_wrap_1_FlightMissionMode_i_T btd;
    cell_wrap_1_FlightMissionMode_i_T bte;
    cell_wrap_1_FlightMissionMode_i_T btf;
    cell_wrap_1_FlightMissionMode_i_T bu;
    cell_wrap_1_FlightMissionMode_i_T bub;
    cell_wrap_1_FlightMissionMode_i_T buc;
    cell_wrap_1_FlightMissionMode_i_T bud;
    cell_wrap_1_FlightMissionMode_i_T bue;
    cell_wrap_1_FlightMissionMode_i_T buf;
    cell_wrap_1_FlightMissionMode_i_T bv;
    cell_wrap_1_FlightMissionMode_i_T bvb;
    cell_wrap_1_FlightMissionMode_i_T bvc;
    cell_wrap_1_FlightMissionMode_i_T bvd;
    cell_wrap_1_FlightMissionMode_i_T bve;
    cell_wrap_1_FlightMissionMode_i_T bvf;
    cell_wrap_1_FlightMissionMode_i_T bw;
    cell_wrap_1_FlightMissionMode_i_T bwb;
    cell_wrap_1_FlightMissionMode_i_T bwc;
    cell_wrap_1_FlightMissionMode_i_T bwd;
    cell_wrap_1_FlightMissionMode_i_T bwe;
    cell_wrap_1_FlightMissionMode_i_T bwf;
    cell_wrap_1_FlightMissionMode_i_T bx;
    cell_wrap_1_FlightMissionMode_i_T bxb;
    cell_wrap_1_FlightMissionMode_i_T bxc;
    cell_wrap_1_FlightMissionMode_i_T bxd;
    cell_wrap_1_FlightMissionMode_i_T bxe;
    cell_wrap_1_FlightMissionMode_i_T bxf;
    cell_wrap_1_FlightMissionMode_i_T by;
    cell_wrap_1_FlightMissionMode_i_T byb;
    cell_wrap_1_FlightMissionMode_i_T byc;
    cell_wrap_1_FlightMissionMode_i_T byd;
    cell_wrap_1_FlightMissionMode_i_T bye;
    cell_wrap_1_FlightMissionMode_i_T byf;
    cell_wrap_1_FlightMissionMode_i_T c;
    cell_wrap_1_FlightMissionMode_i_T cab;
    cell_wrap_1_FlightMissionMode_i_T cac;
    cell_wrap_1_FlightMissionMode_i_T cad;
    cell_wrap_1_FlightMissionMode_i_T cae;
    cell_wrap_1_FlightMissionMode_i_T caf;
    cell_wrap_1_FlightMissionMode_i_T cag;
    cell_wrap_1_FlightMissionMode_i_T cb;
    cell_wrap_1_FlightMissionMode_i_T cbb;
    cell_wrap_1_FlightMissionMode_i_T cbc;
    cell_wrap_1_FlightMissionMode_i_T cbd;
    cell_wrap_1_FlightMissionMode_i_T cbe;
    cell_wrap_1_FlightMissionMode_i_T cbf;
    cell_wrap_1_FlightMissionMode_i_T cbg;
    cell_wrap_1_FlightMissionMode_i_T cc;
    cell_wrap_1_FlightMissionMode_i_T ccb;
    cell_wrap_1_FlightMissionMode_i_T ccc;
    cell_wrap_1_FlightMissionMode_i_T ccd;
    cell_wrap_1_FlightMissionMode_i_T cce;
    cell_wrap_1_FlightMissionMode_i_T ccf;
    cell_wrap_1_FlightMissionMode_i_T ccg;
    cell_wrap_1_FlightMissionMode_i_T cd;
    cell_wrap_1_FlightMissionMode_i_T cdb;
    cell_wrap_1_FlightMissionMode_i_T cdc;
    cell_wrap_1_FlightMissionMode_i_T cdd;
    cell_wrap_1_FlightMissionMode_i_T cde;
    cell_wrap_1_FlightMissionMode_i_T cdf;
    cell_wrap_1_FlightMissionMode_i_T cdg;
    cell_wrap_1_FlightMissionMode_i_T ce;
    cell_wrap_1_FlightMissionMode_i_T ceb;
    cell_wrap_1_FlightMissionMode_i_T cec;
    cell_wrap_1_FlightMissionMode_i_T ced;
    cell_wrap_1_FlightMissionMode_i_T cee;
    cell_wrap_1_FlightMissionMode_i_T cef;
    cell_wrap_1_FlightMissionMode_i_T ceg;
    cell_wrap_1_FlightMissionMode_i_T cf;
    cell_wrap_1_FlightMissionMode_i_T cfb;
    cell_wrap_1_FlightMissionMode_i_T cfc;
    cell_wrap_1_FlightMissionMode_i_T cfd;
    cell_wrap_1_FlightMissionMode_i_T cfe;
    cell_wrap_1_FlightMissionMode_i_T cff;
    cell_wrap_1_FlightMissionMode_i_T cfg;
    cell_wrap_1_FlightMissionMode_i_T cg;
    cell_wrap_1_FlightMissionMode_i_T cgb;
    cell_wrap_1_FlightMissionMode_i_T cgc;
    cell_wrap_1_FlightMissionMode_i_T cgd;
    cell_wrap_1_FlightMissionMode_i_T cge;
    cell_wrap_1_FlightMissionMode_i_T cgf;
    cell_wrap_1_FlightMissionMode_i_T cgg;
    cell_wrap_1_FlightMissionMode_i_T ch;
    cell_wrap_1_FlightMissionMode_i_T chb;
    cell_wrap_1_FlightMissionMode_i_T chc;
    cell_wrap_1_FlightMissionMode_i_T chd;
    cell_wrap_1_FlightMissionMode_i_T che;
    cell_wrap_1_FlightMissionMode_i_T chf;
    cell_wrap_1_FlightMissionMode_i_T chg;
    cell_wrap_1_FlightMissionMode_i_T ci;
    cell_wrap_1_FlightMissionMode_i_T cib;
    cell_wrap_1_FlightMissionMode_i_T cic;
    cell_wrap_1_FlightMissionMode_i_T cid;
    cell_wrap_1_FlightMissionMode_i_T cie;
    cell_wrap_1_FlightMissionMode_i_T cif;
    cell_wrap_1_FlightMissionMode_i_T cig;
    cell_wrap_1_FlightMissionMode_i_T cj;
    cell_wrap_1_FlightMissionMode_i_T cjb;
    cell_wrap_1_FlightMissionMode_i_T cjc;
    cell_wrap_1_FlightMissionMode_i_T cjd;
    cell_wrap_1_FlightMissionMode_i_T cje;
    cell_wrap_1_FlightMissionMode_i_T cjf;
    cell_wrap_1_FlightMissionMode_i_T cjg;
    cell_wrap_1_FlightMissionMode_i_T ck;
    cell_wrap_1_FlightMissionMode_i_T ckb;
    cell_wrap_1_FlightMissionMode_i_T ckc;
    cell_wrap_1_FlightMissionMode_i_T ckd;
    cell_wrap_1_FlightMissionMode_i_T cke;
    cell_wrap_1_FlightMissionMode_i_T ckf;
    cell_wrap_1_FlightMissionMode_i_T ckg;
    cell_wrap_1_FlightMissionMode_i_T cl;
    cell_wrap_1_FlightMissionMode_i_T clb;
    cell_wrap_1_FlightMissionMode_i_T clc;
    cell_wrap_1_FlightMissionMode_i_T cld;
    cell_wrap_1_FlightMissionMode_i_T cle;
    cell_wrap_1_FlightMissionMode_i_T clf;
    cell_wrap_1_FlightMissionMode_i_T cm;
    cell_wrap_1_FlightMissionMode_i_T cmb;
    cell_wrap_1_FlightMissionMode_i_T cmc;
    cell_wrap_1_FlightMissionMode_i_T cmd;
    cell_wrap_1_FlightMissionMode_i_T cme;
    cell_wrap_1_FlightMissionMode_i_T cmf;
    cell_wrap_1_FlightMissionMode_i_T cn;
    cell_wrap_1_FlightMissionMode_i_T cnb;
    cell_wrap_1_FlightMissionMode_i_T cnc;
    cell_wrap_1_FlightMissionMode_i_T cnd;
    cell_wrap_1_FlightMissionMode_i_T cne;
    cell_wrap_1_FlightMissionMode_i_T cnf;
    cell_wrap_1_FlightMissionMode_i_T co;
    cell_wrap_1_FlightMissionMode_i_T cob;
    cell_wrap_1_FlightMissionMode_i_T coc;
    cell_wrap_1_FlightMissionMode_i_T cod;
    cell_wrap_1_FlightMissionMode_i_T coe;
    cell_wrap_1_FlightMissionMode_i_T cof;
    cell_wrap_1_FlightMissionMode_i_T cp;
    cell_wrap_1_FlightMissionMode_i_T cpb;
    cell_wrap_1_FlightMissionMode_i_T cpc;
    cell_wrap_1_FlightMissionMode_i_T cpd;
    cell_wrap_1_FlightMissionMode_i_T cpe;
    cell_wrap_1_FlightMissionMode_i_T cpf;
    cell_wrap_1_FlightMissionMode_i_T cq;
    cell_wrap_1_FlightMissionMode_i_T cqb;
    cell_wrap_1_FlightMissionMode_i_T cqc;
    cell_wrap_1_FlightMissionMode_i_T cqd;
    cell_wrap_1_FlightMissionMode_i_T cqe;
    cell_wrap_1_FlightMissionMode_i_T cqf;
    cell_wrap_1_FlightMissionMode_i_T cr;
    cell_wrap_1_FlightMissionMode_i_T crb;
    cell_wrap_1_FlightMissionMode_i_T crc;
    cell_wrap_1_FlightMissionMode_i_T crd;
    cell_wrap_1_FlightMissionMode_i_T cre;
    cell_wrap_1_FlightMissionMode_i_T crf;
    cell_wrap_1_FlightMissionMode_i_T cs;
    cell_wrap_1_FlightMissionMode_i_T csb;
    cell_wrap_1_FlightMissionMode_i_T csc;
    cell_wrap_1_FlightMissionMode_i_T csd;
    cell_wrap_1_FlightMissionMode_i_T cse;
    cell_wrap_1_FlightMissionMode_i_T csf;
    cell_wrap_1_FlightMissionMode_i_T ct;
    cell_wrap_1_FlightMissionMode_i_T ctb;
    cell_wrap_1_FlightMissionMode_i_T ctc;
    cell_wrap_1_FlightMissionMode_i_T ctd;
    cell_wrap_1_FlightMissionMode_i_T cte;
    cell_wrap_1_FlightMissionMode_i_T ctf;
    cell_wrap_1_FlightMissionMode_i_T cu;
    cell_wrap_1_FlightMissionMode_i_T cub;
    cell_wrap_1_FlightMissionMode_i_T cuc;
    cell_wrap_1_FlightMissionMode_i_T cud;
    cell_wrap_1_FlightMissionMode_i_T cue;
    cell_wrap_1_FlightMissionMode_i_T cuf;
    cell_wrap_1_FlightMissionMode_i_T cv;
    cell_wrap_1_FlightMissionMode_i_T cvb;
    cell_wrap_1_FlightMissionMode_i_T cvc;
    cell_wrap_1_FlightMissionMode_i_T cvd;
    cell_wrap_1_FlightMissionMode_i_T cve;
    cell_wrap_1_FlightMissionMode_i_T cvf;
    cell_wrap_1_FlightMissionMode_i_T cw;
    cell_wrap_1_FlightMissionMode_i_T cwb;
    cell_wrap_1_FlightMissionMode_i_T cwc;
    cell_wrap_1_FlightMissionMode_i_T cwd;
    cell_wrap_1_FlightMissionMode_i_T cwe;
    cell_wrap_1_FlightMissionMode_i_T cwf;
    cell_wrap_1_FlightMissionMode_i_T cx;
    cell_wrap_1_FlightMissionMode_i_T cxb;
    cell_wrap_1_FlightMissionMode_i_T cxc;
    cell_wrap_1_FlightMissionMode_i_T cxd;
    cell_wrap_1_FlightMissionMode_i_T cxe;
    cell_wrap_1_FlightMissionMode_i_T cxf;
    cell_wrap_1_FlightMissionMode_i_T cy;
    cell_wrap_1_FlightMissionMode_i_T cyb;
    cell_wrap_1_FlightMissionMode_i_T cyc;
    cell_wrap_1_FlightMissionMode_i_T cyd;
    cell_wrap_1_FlightMissionMode_i_T cye;
    cell_wrap_1_FlightMissionMode_i_T cyf;
    cell_wrap_1_FlightMissionMode_i_T d;
    cell_wrap_1_FlightMissionMode_i_T dab;
    cell_wrap_1_FlightMissionMode_i_T dac;
    cell_wrap_1_FlightMissionMode_i_T dad;
    cell_wrap_1_FlightMissionMode_i_T dae;
    cell_wrap_1_FlightMissionMode_i_T daf;
    cell_wrap_1_FlightMissionMode_i_T dag;
    cell_wrap_1_FlightMissionMode_i_T db;
    cell_wrap_1_FlightMissionMode_i_T dbb;
    cell_wrap_1_FlightMissionMode_i_T dbc;
    cell_wrap_1_FlightMissionMode_i_T dbd;
    cell_wrap_1_FlightMissionMode_i_T dbe;
    cell_wrap_1_FlightMissionMode_i_T dbf;
    cell_wrap_1_FlightMissionMode_i_T dbg;
    cell_wrap_1_FlightMissionMode_i_T dc;
    cell_wrap_1_FlightMissionMode_i_T dcb;
    cell_wrap_1_FlightMissionMode_i_T dcc;
    cell_wrap_1_FlightMissionMode_i_T dcd;
    cell_wrap_1_FlightMissionMode_i_T dce;
    cell_wrap_1_FlightMissionMode_i_T dcf;
    cell_wrap_1_FlightMissionMode_i_T dcg;
    cell_wrap_1_FlightMissionMode_i_T dd;
    cell_wrap_1_FlightMissionMode_i_T ddb;
    cell_wrap_1_FlightMissionMode_i_T ddc;
    cell_wrap_1_FlightMissionMode_i_T ddd;
    cell_wrap_1_FlightMissionMode_i_T dde;
    cell_wrap_1_FlightMissionMode_i_T ddf;
    cell_wrap_1_FlightMissionMode_i_T ddg;
    cell_wrap_1_FlightMissionMode_i_T de;
    cell_wrap_1_FlightMissionMode_i_T deb;
    cell_wrap_1_FlightMissionMode_i_T dec;
    cell_wrap_1_FlightMissionMode_i_T ded;
    cell_wrap_1_FlightMissionMode_i_T dee;
    cell_wrap_1_FlightMissionMode_i_T def;
    cell_wrap_1_FlightMissionMode_i_T deg;
    cell_wrap_1_FlightMissionMode_i_T df;
    cell_wrap_1_FlightMissionMode_i_T dfb;
    cell_wrap_1_FlightMissionMode_i_T dfc;
    cell_wrap_1_FlightMissionMode_i_T dfd;
    cell_wrap_1_FlightMissionMode_i_T dfe;
    cell_wrap_1_FlightMissionMode_i_T dff;
    cell_wrap_1_FlightMissionMode_i_T dfg;
    cell_wrap_1_FlightMissionMode_i_T dg;
    cell_wrap_1_FlightMissionMode_i_T dgb;
    cell_wrap_1_FlightMissionMode_i_T dgc;
    cell_wrap_1_FlightMissionMode_i_T dgd;
    cell_wrap_1_FlightMissionMode_i_T dge;
    cell_wrap_1_FlightMissionMode_i_T dgf;
    cell_wrap_1_FlightMissionMode_i_T dgg;
    cell_wrap_1_FlightMissionMode_i_T dh;
    cell_wrap_1_FlightMissionMode_i_T dhb;
    cell_wrap_1_FlightMissionMode_i_T dhc;
    cell_wrap_1_FlightMissionMode_i_T dhd;
    cell_wrap_1_FlightMissionMode_i_T dhe;
    cell_wrap_1_FlightMissionMode_i_T dhf;
    cell_wrap_1_FlightMissionMode_i_T dhg;
    cell_wrap_1_FlightMissionMode_i_T di;
    cell_wrap_1_FlightMissionMode_i_T dib;
    cell_wrap_1_FlightMissionMode_i_T dic;
    cell_wrap_1_FlightMissionMode_i_T did;
    cell_wrap_1_FlightMissionMode_i_T die;
    cell_wrap_1_FlightMissionMode_i_T dif;
    cell_wrap_1_FlightMissionMode_i_T dig;
    cell_wrap_1_FlightMissionMode_i_T dj;
    cell_wrap_1_FlightMissionMode_i_T djb;
    cell_wrap_1_FlightMissionMode_i_T djc;
    cell_wrap_1_FlightMissionMode_i_T djd;
    cell_wrap_1_FlightMissionMode_i_T dje;
    cell_wrap_1_FlightMissionMode_i_T djf;
    cell_wrap_1_FlightMissionMode_i_T djg;
    cell_wrap_1_FlightMissionMode_i_T dk;
    cell_wrap_1_FlightMissionMode_i_T dkb;
    cell_wrap_1_FlightMissionMode_i_T dkc;
    cell_wrap_1_FlightMissionMode_i_T dkd;
    cell_wrap_1_FlightMissionMode_i_T dke;
    cell_wrap_1_FlightMissionMode_i_T dkf;
    cell_wrap_1_FlightMissionMode_i_T dkg;
    cell_wrap_1_FlightMissionMode_i_T dl;
    cell_wrap_1_FlightMissionMode_i_T dlb;
    cell_wrap_1_FlightMissionMode_i_T dlc;
    cell_wrap_1_FlightMissionMode_i_T dld;
    cell_wrap_1_FlightMissionMode_i_T dle;
    cell_wrap_1_FlightMissionMode_i_T dlf;
    cell_wrap_1_FlightMissionMode_i_T dm;
    cell_wrap_1_FlightMissionMode_i_T dmb;
    cell_wrap_1_FlightMissionMode_i_T dmc;
    cell_wrap_1_FlightMissionMode_i_T dmd;
    cell_wrap_1_FlightMissionMode_i_T dme;
    cell_wrap_1_FlightMissionMode_i_T dmf;
    cell_wrap_1_FlightMissionMode_i_T dn;
    cell_wrap_1_FlightMissionMode_i_T dnb;
    cell_wrap_1_FlightMissionMode_i_T dnc;
    cell_wrap_1_FlightMissionMode_i_T dnd;
    cell_wrap_1_FlightMissionMode_i_T dne;
    cell_wrap_1_FlightMissionMode_i_T dnf;
    cell_wrap_1_FlightMissionMode_i_T dob;
    cell_wrap_1_FlightMissionMode_i_T doc;
    cell_wrap_1_FlightMissionMode_i_T dod;
    cell_wrap_1_FlightMissionMode_i_T doe;
    cell_wrap_1_FlightMissionMode_i_T dof;
    cell_wrap_1_FlightMissionMode_i_T dp;
    cell_wrap_1_FlightMissionMode_i_T dpb;
    cell_wrap_1_FlightMissionMode_i_T dpc;
    cell_wrap_1_FlightMissionMode_i_T dpd;
    cell_wrap_1_FlightMissionMode_i_T dpe;
    cell_wrap_1_FlightMissionMode_i_T dpf;
    cell_wrap_1_FlightMissionMode_i_T dq;
    cell_wrap_1_FlightMissionMode_i_T dqb;
    cell_wrap_1_FlightMissionMode_i_T dqc;
    cell_wrap_1_FlightMissionMode_i_T dqd;
    cell_wrap_1_FlightMissionMode_i_T dqe;
    cell_wrap_1_FlightMissionMode_i_T dqf;
    cell_wrap_1_FlightMissionMode_i_T dr;
    cell_wrap_1_FlightMissionMode_i_T drb;
    cell_wrap_1_FlightMissionMode_i_T drc;
    cell_wrap_1_FlightMissionMode_i_T drd;
    cell_wrap_1_FlightMissionMode_i_T dre;
    cell_wrap_1_FlightMissionMode_i_T drf;
    cell_wrap_1_FlightMissionMode_i_T ds;
    cell_wrap_1_FlightMissionMode_i_T dsb;
    cell_wrap_1_FlightMissionMode_i_T dsc;
    cell_wrap_1_FlightMissionMode_i_T dsd;
    cell_wrap_1_FlightMissionMode_i_T dse;
    cell_wrap_1_FlightMissionMode_i_T dsf;
    cell_wrap_1_FlightMissionMode_i_T dt;
    cell_wrap_1_FlightMissionMode_i_T dtb;
    cell_wrap_1_FlightMissionMode_i_T dtc;
    cell_wrap_1_FlightMissionMode_i_T dtd;
    cell_wrap_1_FlightMissionMode_i_T dte;
    cell_wrap_1_FlightMissionMode_i_T dtf;
    cell_wrap_1_FlightMissionMode_i_T du;
    cell_wrap_1_FlightMissionMode_i_T dub;
    cell_wrap_1_FlightMissionMode_i_T duc;
    cell_wrap_1_FlightMissionMode_i_T dud;
    cell_wrap_1_FlightMissionMode_i_T due;
    cell_wrap_1_FlightMissionMode_i_T duf;
    cell_wrap_1_FlightMissionMode_i_T dv;
    cell_wrap_1_FlightMissionMode_i_T dvb;
    cell_wrap_1_FlightMissionMode_i_T dvc;
    cell_wrap_1_FlightMissionMode_i_T dvd;
    cell_wrap_1_FlightMissionMode_i_T dve;
    cell_wrap_1_FlightMissionMode_i_T dvf;
    cell_wrap_1_FlightMissionMode_i_T dw;
    cell_wrap_1_FlightMissionMode_i_T dwb;
    cell_wrap_1_FlightMissionMode_i_T dwc;
    cell_wrap_1_FlightMissionMode_i_T dwd;
    cell_wrap_1_FlightMissionMode_i_T dwe;
    cell_wrap_1_FlightMissionMode_i_T dwf;
    cell_wrap_1_FlightMissionMode_i_T dx;
    cell_wrap_1_FlightMissionMode_i_T dxb;
    cell_wrap_1_FlightMissionMode_i_T dxc;
    cell_wrap_1_FlightMissionMode_i_T dxd;
    cell_wrap_1_FlightMissionMode_i_T dxe;
    cell_wrap_1_FlightMissionMode_i_T dxf;
    cell_wrap_1_FlightMissionMode_i_T dy;
    cell_wrap_1_FlightMissionMode_i_T dyb;
    cell_wrap_1_FlightMissionMode_i_T dyc;
    cell_wrap_1_FlightMissionMode_i_T dyd;
    cell_wrap_1_FlightMissionMode_i_T dye;
    cell_wrap_1_FlightMissionMode_i_T dyf;
    cell_wrap_1_FlightMissionMode_i_T e;
    cell_wrap_1_FlightMissionMode_i_T eab;
    cell_wrap_1_FlightMissionMode_i_T eac;
    cell_wrap_1_FlightMissionMode_i_T ead;
    cell_wrap_1_FlightMissionMode_i_T eae;
    cell_wrap_1_FlightMissionMode_i_T eaf;
    cell_wrap_1_FlightMissionMode_i_T eag;
    cell_wrap_1_FlightMissionMode_i_T eb;
    cell_wrap_1_FlightMissionMode_i_T ebb;
    cell_wrap_1_FlightMissionMode_i_T ebc;
    cell_wrap_1_FlightMissionMode_i_T ebd;
    cell_wrap_1_FlightMissionMode_i_T ebe;
    cell_wrap_1_FlightMissionMode_i_T ebf;
    cell_wrap_1_FlightMissionMode_i_T ebg;
    cell_wrap_1_FlightMissionMode_i_T ec;
    cell_wrap_1_FlightMissionMode_i_T ecb;
    cell_wrap_1_FlightMissionMode_i_T ecc;
    cell_wrap_1_FlightMissionMode_i_T ecd;
    cell_wrap_1_FlightMissionMode_i_T ece;
    cell_wrap_1_FlightMissionMode_i_T ecf;
    cell_wrap_1_FlightMissionMode_i_T ecg;
    cell_wrap_1_FlightMissionMode_i_T ed;
    cell_wrap_1_FlightMissionMode_i_T edb;
    cell_wrap_1_FlightMissionMode_i_T edc;
    cell_wrap_1_FlightMissionMode_i_T edd;
    cell_wrap_1_FlightMissionMode_i_T ede;
    cell_wrap_1_FlightMissionMode_i_T edf;
    cell_wrap_1_FlightMissionMode_i_T edg;
    cell_wrap_1_FlightMissionMode_i_T ee;
    cell_wrap_1_FlightMissionMode_i_T eeb;
    cell_wrap_1_FlightMissionMode_i_T eec;
    cell_wrap_1_FlightMissionMode_i_T eed;
    cell_wrap_1_FlightMissionMode_i_T eee;
    cell_wrap_1_FlightMissionMode_i_T eef;
    cell_wrap_1_FlightMissionMode_i_T eeg;
    cell_wrap_1_FlightMissionMode_i_T ef;
    cell_wrap_1_FlightMissionMode_i_T efb;
    cell_wrap_1_FlightMissionMode_i_T efc;
    cell_wrap_1_FlightMissionMode_i_T efd;
    cell_wrap_1_FlightMissionMode_i_T efe;
    cell_wrap_1_FlightMissionMode_i_T eff;
    cell_wrap_1_FlightMissionMode_i_T efg;
    cell_wrap_1_FlightMissionMode_i_T eg;
    cell_wrap_1_FlightMissionMode_i_T egb;
    cell_wrap_1_FlightMissionMode_i_T egc;
    cell_wrap_1_FlightMissionMode_i_T egd;
    cell_wrap_1_FlightMissionMode_i_T ege;
    cell_wrap_1_FlightMissionMode_i_T egf;
    cell_wrap_1_FlightMissionMode_i_T egg;
    cell_wrap_1_FlightMissionMode_i_T eh;
    cell_wrap_1_FlightMissionMode_i_T ehb;
    cell_wrap_1_FlightMissionMode_i_T ehc;
    cell_wrap_1_FlightMissionMode_i_T ehd;
    cell_wrap_1_FlightMissionMode_i_T ehe;
    cell_wrap_1_FlightMissionMode_i_T ehf;
    cell_wrap_1_FlightMissionMode_i_T ehg;
    cell_wrap_1_FlightMissionMode_i_T ei;
    cell_wrap_1_FlightMissionMode_i_T eib;
    cell_wrap_1_FlightMissionMode_i_T eic;
    cell_wrap_1_FlightMissionMode_i_T eid;
    cell_wrap_1_FlightMissionMode_i_T eie;
    cell_wrap_1_FlightMissionMode_i_T eif;
    cell_wrap_1_FlightMissionMode_i_T eig;
    cell_wrap_1_FlightMissionMode_i_T ej;
    cell_wrap_1_FlightMissionMode_i_T ejb;
    cell_wrap_1_FlightMissionMode_i_T ejc;
    cell_wrap_1_FlightMissionMode_i_T ejd;
    cell_wrap_1_FlightMissionMode_i_T eje;
    cell_wrap_1_FlightMissionMode_i_T ejf;
    cell_wrap_1_FlightMissionMode_i_T ejg;
    cell_wrap_1_FlightMissionMode_i_T ek;
    cell_wrap_1_FlightMissionMode_i_T ekb;
    cell_wrap_1_FlightMissionMode_i_T ekc;
    cell_wrap_1_FlightMissionMode_i_T ekd;
    cell_wrap_1_FlightMissionMode_i_T eke;
    cell_wrap_1_FlightMissionMode_i_T ekf;
    cell_wrap_1_FlightMissionMode_i_T ekg;
    cell_wrap_1_FlightMissionMode_i_T el;
    cell_wrap_1_FlightMissionMode_i_T elb;
    cell_wrap_1_FlightMissionMode_i_T elc;
    cell_wrap_1_FlightMissionMode_i_T eld;
    cell_wrap_1_FlightMissionMode_i_T ele;
    cell_wrap_1_FlightMissionMode_i_T elf;
    cell_wrap_1_FlightMissionMode_i_T em;
    cell_wrap_1_FlightMissionMode_i_T emb;
    cell_wrap_1_FlightMissionMode_i_T emc;
    cell_wrap_1_FlightMissionMode_i_T emd;
    cell_wrap_1_FlightMissionMode_i_T eme;
    cell_wrap_1_FlightMissionMode_i_T emf;
    cell_wrap_1_FlightMissionMode_i_T en;
    cell_wrap_1_FlightMissionMode_i_T enb;
    cell_wrap_1_FlightMissionMode_i_T enc;
    cell_wrap_1_FlightMissionMode_i_T end;
    cell_wrap_1_FlightMissionMode_i_T ene;
    cell_wrap_1_FlightMissionMode_i_T enf;
    cell_wrap_1_FlightMissionMode_i_T eo;
    cell_wrap_1_FlightMissionMode_i_T eob;
    cell_wrap_1_FlightMissionMode_i_T eoc;
    cell_wrap_1_FlightMissionMode_i_T eod;
    cell_wrap_1_FlightMissionMode_i_T eoe;
    cell_wrap_1_FlightMissionMode_i_T eof;
    cell_wrap_1_FlightMissionMode_i_T ep;
    cell_wrap_1_FlightMissionMode_i_T epb;
    cell_wrap_1_FlightMissionMode_i_T epc;
    cell_wrap_1_FlightMissionMode_i_T epd;
    cell_wrap_1_FlightMissionMode_i_T epe;
    cell_wrap_1_FlightMissionMode_i_T epf;
    cell_wrap_1_FlightMissionMode_i_T eq;
    cell_wrap_1_FlightMissionMode_i_T eqb;
    cell_wrap_1_FlightMissionMode_i_T eqc;
    cell_wrap_1_FlightMissionMode_i_T eqd;
    cell_wrap_1_FlightMissionMode_i_T eqe;
    cell_wrap_1_FlightMissionMode_i_T eqf;
    cell_wrap_1_FlightMissionMode_i_T er;
    cell_wrap_1_FlightMissionMode_i_T erb;
    cell_wrap_1_FlightMissionMode_i_T erc;
    cell_wrap_1_FlightMissionMode_i_T erd;
    cell_wrap_1_FlightMissionMode_i_T ere;
    cell_wrap_1_FlightMissionMode_i_T es;
    cell_wrap_1_FlightMissionMode_i_T esb;
    cell_wrap_1_FlightMissionMode_i_T esc;
    cell_wrap_1_FlightMissionMode_i_T esd;
    cell_wrap_1_FlightMissionMode_i_T ese;
    cell_wrap_1_FlightMissionMode_i_T esf;
    cell_wrap_1_FlightMissionMode_i_T et;
    cell_wrap_1_FlightMissionMode_i_T etb;
    cell_wrap_1_FlightMissionMode_i_T etc;
    cell_wrap_1_FlightMissionMode_i_T etd;
    cell_wrap_1_FlightMissionMode_i_T ete;
    cell_wrap_1_FlightMissionMode_i_T etf;
    cell_wrap_1_FlightMissionMode_i_T eu;
    cell_wrap_1_FlightMissionMode_i_T eub;
    cell_wrap_1_FlightMissionMode_i_T euc;
    cell_wrap_1_FlightMissionMode_i_T eud;
    cell_wrap_1_FlightMissionMode_i_T eue;
    cell_wrap_1_FlightMissionMode_i_T euf;
    cell_wrap_1_FlightMissionMode_i_T ev;
    cell_wrap_1_FlightMissionMode_i_T evb;
    cell_wrap_1_FlightMissionMode_i_T evc;
    cell_wrap_1_FlightMissionMode_i_T evd;
    cell_wrap_1_FlightMissionMode_i_T eve;
    cell_wrap_1_FlightMissionMode_i_T evf;
    cell_wrap_1_FlightMissionMode_i_T ew;
    cell_wrap_1_FlightMissionMode_i_T ewb;
    cell_wrap_1_FlightMissionMode_i_T ewc;
    cell_wrap_1_FlightMissionMode_i_T ewd;
    cell_wrap_1_FlightMissionMode_i_T ewe;
    cell_wrap_1_FlightMissionMode_i_T ewf;
    cell_wrap_1_FlightMissionMode_i_T ex;
    cell_wrap_1_FlightMissionMode_i_T exb;
    cell_wrap_1_FlightMissionMode_i_T exc;
    cell_wrap_1_FlightMissionMode_i_T exd;
    cell_wrap_1_FlightMissionMode_i_T exe;
    cell_wrap_1_FlightMissionMode_i_T exf;
    cell_wrap_1_FlightMissionMode_i_T ey;
    cell_wrap_1_FlightMissionMode_i_T eyb;
    cell_wrap_1_FlightMissionMode_i_T eyc;
    cell_wrap_1_FlightMissionMode_i_T eyd;
    cell_wrap_1_FlightMissionMode_i_T eye;
    cell_wrap_1_FlightMissionMode_i_T eyf;
    cell_wrap_1_FlightMissionMode_i_T f;
    cell_wrap_1_FlightMissionMode_i_T fab;
    cell_wrap_1_FlightMissionMode_i_T fac;
    cell_wrap_1_FlightMissionMode_i_T fad;
    cell_wrap_1_FlightMissionMode_i_T fae;
    cell_wrap_1_FlightMissionMode_i_T faf;
    cell_wrap_1_FlightMissionMode_i_T fag;
    cell_wrap_1_FlightMissionMode_i_T fb;
    cell_wrap_1_FlightMissionMode_i_T fbb;
    cell_wrap_1_FlightMissionMode_i_T fbc;
    cell_wrap_1_FlightMissionMode_i_T fbd;
    cell_wrap_1_FlightMissionMode_i_T fbe;
    cell_wrap_1_FlightMissionMode_i_T fbf;
    cell_wrap_1_FlightMissionMode_i_T fbg;
    cell_wrap_1_FlightMissionMode_i_T fc;
    cell_wrap_1_FlightMissionMode_i_T fcb;
    cell_wrap_1_FlightMissionMode_i_T fcc;
    cell_wrap_1_FlightMissionMode_i_T fcd;
    cell_wrap_1_FlightMissionMode_i_T fce;
    cell_wrap_1_FlightMissionMode_i_T fcf;
    cell_wrap_1_FlightMissionMode_i_T fcg;
    cell_wrap_1_FlightMissionMode_i_T fd;
    cell_wrap_1_FlightMissionMode_i_T fdb;
    cell_wrap_1_FlightMissionMode_i_T fdc;
    cell_wrap_1_FlightMissionMode_i_T fdd;
    cell_wrap_1_FlightMissionMode_i_T fde;
    cell_wrap_1_FlightMissionMode_i_T fdf;
    cell_wrap_1_FlightMissionMode_i_T fdg;
    cell_wrap_1_FlightMissionMode_i_T fe;
    cell_wrap_1_FlightMissionMode_i_T feb;
    cell_wrap_1_FlightMissionMode_i_T fec;
    cell_wrap_1_FlightMissionMode_i_T fed;
    cell_wrap_1_FlightMissionMode_i_T fee;
    cell_wrap_1_FlightMissionMode_i_T fef;
    cell_wrap_1_FlightMissionMode_i_T feg;
    cell_wrap_1_FlightMissionMode_i_T ff;
    cell_wrap_1_FlightMissionMode_i_T ffb;
    cell_wrap_1_FlightMissionMode_i_T ffc;
    cell_wrap_1_FlightMissionMode_i_T ffd;
    cell_wrap_1_FlightMissionMode_i_T ffe;
    cell_wrap_1_FlightMissionMode_i_T fff;
    cell_wrap_1_FlightMissionMode_i_T ffg;
    cell_wrap_1_FlightMissionMode_i_T fg;
    cell_wrap_1_FlightMissionMode_i_T fgb;
    cell_wrap_1_FlightMissionMode_i_T fgc;
    cell_wrap_1_FlightMissionMode_i_T fgd;
    cell_wrap_1_FlightMissionMode_i_T fge;
    cell_wrap_1_FlightMissionMode_i_T fgf;
    cell_wrap_1_FlightMissionMode_i_T fgg;
    cell_wrap_1_FlightMissionMode_i_T fh;
    cell_wrap_1_FlightMissionMode_i_T fhb;
    cell_wrap_1_FlightMissionMode_i_T fhc;
    cell_wrap_1_FlightMissionMode_i_T fhd;
    cell_wrap_1_FlightMissionMode_i_T fhe;
    cell_wrap_1_FlightMissionMode_i_T fhf;
    cell_wrap_1_FlightMissionMode_i_T fhg;
    cell_wrap_1_FlightMissionMode_i_T fi;
    cell_wrap_1_FlightMissionMode_i_T fib;
    cell_wrap_1_FlightMissionMode_i_T fic;
    cell_wrap_1_FlightMissionMode_i_T fid;
    cell_wrap_1_FlightMissionMode_i_T fie;
    cell_wrap_1_FlightMissionMode_i_T fif;
    cell_wrap_1_FlightMissionMode_i_T fig;
    cell_wrap_1_FlightMissionMode_i_T fj;
    cell_wrap_1_FlightMissionMode_i_T fjb;
    cell_wrap_1_FlightMissionMode_i_T fjc;
    cell_wrap_1_FlightMissionMode_i_T fjd;
    cell_wrap_1_FlightMissionMode_i_T fje;
    cell_wrap_1_FlightMissionMode_i_T fjf;
    cell_wrap_1_FlightMissionMode_i_T fjg;
    cell_wrap_1_FlightMissionMode_i_T fk;
    cell_wrap_1_FlightMissionMode_i_T fkb;
    cell_wrap_1_FlightMissionMode_i_T fkc;
    cell_wrap_1_FlightMissionMode_i_T fkd;
    cell_wrap_1_FlightMissionMode_i_T fke;
    cell_wrap_1_FlightMissionMode_i_T fkf;
    cell_wrap_1_FlightMissionMode_i_T fkg;
    cell_wrap_1_FlightMissionMode_i_T fl;
    cell_wrap_1_FlightMissionMode_i_T flb;
    cell_wrap_1_FlightMissionMode_i_T flc;
    cell_wrap_1_FlightMissionMode_i_T fld;
    cell_wrap_1_FlightMissionMode_i_T fle;
    cell_wrap_1_FlightMissionMode_i_T flf;
    cell_wrap_1_FlightMissionMode_i_T fm;
    cell_wrap_1_FlightMissionMode_i_T fmb;
    cell_wrap_1_FlightMissionMode_i_T fmc;
    cell_wrap_1_FlightMissionMode_i_T fmd;
    cell_wrap_1_FlightMissionMode_i_T fme;
    cell_wrap_1_FlightMissionMode_i_T fmf;
    cell_wrap_1_FlightMissionMode_i_T fn;
    cell_wrap_1_FlightMissionMode_i_T fnb;
    cell_wrap_1_FlightMissionMode_i_T fnc;
    cell_wrap_1_FlightMissionMode_i_T fnd;
    cell_wrap_1_FlightMissionMode_i_T fne;
    cell_wrap_1_FlightMissionMode_i_T fnf;
    cell_wrap_1_FlightMissionMode_i_T fo;
    cell_wrap_1_FlightMissionMode_i_T fob;
    cell_wrap_1_FlightMissionMode_i_T foc;
    cell_wrap_1_FlightMissionMode_i_T fod;
    cell_wrap_1_FlightMissionMode_i_T foe;
    cell_wrap_1_FlightMissionMode_i_T fof;
    cell_wrap_1_FlightMissionMode_i_T fp;
    cell_wrap_1_FlightMissionMode_i_T fpb;
    cell_wrap_1_FlightMissionMode_i_T fpc;
    cell_wrap_1_FlightMissionMode_i_T fpd;
    cell_wrap_1_FlightMissionMode_i_T fpe;
    cell_wrap_1_FlightMissionMode_i_T fpf;
    cell_wrap_1_FlightMissionMode_i_T fq;
    cell_wrap_1_FlightMissionMode_i_T fqb;
    cell_wrap_1_FlightMissionMode_i_T fqc;
    cell_wrap_1_FlightMissionMode_i_T fqd;
    cell_wrap_1_FlightMissionMode_i_T fqe;
    cell_wrap_1_FlightMissionMode_i_T fqf;
    cell_wrap_1_FlightMissionMode_i_T fr;
    cell_wrap_1_FlightMissionMode_i_T frb;
    cell_wrap_1_FlightMissionMode_i_T frc;
    cell_wrap_1_FlightMissionMode_i_T frd;
    cell_wrap_1_FlightMissionMode_i_T fre;
    cell_wrap_1_FlightMissionMode_i_T frf;
    cell_wrap_1_FlightMissionMode_i_T fs;
    cell_wrap_1_FlightMissionMode_i_T fsb;
    cell_wrap_1_FlightMissionMode_i_T fsc;
    cell_wrap_1_FlightMissionMode_i_T fsd;
    cell_wrap_1_FlightMissionMode_i_T fse;
    cell_wrap_1_FlightMissionMode_i_T fsf;
    cell_wrap_1_FlightMissionMode_i_T ft;
    cell_wrap_1_FlightMissionMode_i_T ftb;
    cell_wrap_1_FlightMissionMode_i_T ftc;
    cell_wrap_1_FlightMissionMode_i_T ftd;
    cell_wrap_1_FlightMissionMode_i_T fte;
    cell_wrap_1_FlightMissionMode_i_T ftf;
    cell_wrap_1_FlightMissionMode_i_T fu;
    cell_wrap_1_FlightMissionMode_i_T fub;
    cell_wrap_1_FlightMissionMode_i_T fuc;
    cell_wrap_1_FlightMissionMode_i_T fud;
    cell_wrap_1_FlightMissionMode_i_T fue;
    cell_wrap_1_FlightMissionMode_i_T fuf;
    cell_wrap_1_FlightMissionMode_i_T fv;
    cell_wrap_1_FlightMissionMode_i_T fvb;
    cell_wrap_1_FlightMissionMode_i_T fvc;
    cell_wrap_1_FlightMissionMode_i_T fvd;
    cell_wrap_1_FlightMissionMode_i_T fve;
    cell_wrap_1_FlightMissionMode_i_T fvf;
    cell_wrap_1_FlightMissionMode_i_T fw;
    cell_wrap_1_FlightMissionMode_i_T fwb;
    cell_wrap_1_FlightMissionMode_i_T fwc;
    cell_wrap_1_FlightMissionMode_i_T fwd;
    cell_wrap_1_FlightMissionMode_i_T fwe;
    cell_wrap_1_FlightMissionMode_i_T fwf;
    cell_wrap_1_FlightMissionMode_i_T fx;
    cell_wrap_1_FlightMissionMode_i_T fxb;
    cell_wrap_1_FlightMissionMode_i_T fxc;
    cell_wrap_1_FlightMissionMode_i_T fxd;
    cell_wrap_1_FlightMissionMode_i_T fxe;
    cell_wrap_1_FlightMissionMode_i_T fxf;
    cell_wrap_1_FlightMissionMode_i_T fy;
    cell_wrap_1_FlightMissionMode_i_T fyb;
    cell_wrap_1_FlightMissionMode_i_T fyc;
    cell_wrap_1_FlightMissionMode_i_T fyd;
    cell_wrap_1_FlightMissionMode_i_T fye;
    cell_wrap_1_FlightMissionMode_i_T fyf;
    cell_wrap_1_FlightMissionMode_i_T g;
    cell_wrap_1_FlightMissionMode_i_T gab;
    cell_wrap_1_FlightMissionMode_i_T gac;
    cell_wrap_1_FlightMissionMode_i_T gad;
    cell_wrap_1_FlightMissionMode_i_T gae;
    cell_wrap_1_FlightMissionMode_i_T gaf;
    cell_wrap_1_FlightMissionMode_i_T gag;
    cell_wrap_1_FlightMissionMode_i_T gb;
    cell_wrap_1_FlightMissionMode_i_T gbb;
    cell_wrap_1_FlightMissionMode_i_T gbc;
    cell_wrap_1_FlightMissionMode_i_T gbd;
    cell_wrap_1_FlightMissionMode_i_T gbe;
    cell_wrap_1_FlightMissionMode_i_T gbf;
    cell_wrap_1_FlightMissionMode_i_T gbg;
    cell_wrap_1_FlightMissionMode_i_T gc;
    cell_wrap_1_FlightMissionMode_i_T gcb;
    cell_wrap_1_FlightMissionMode_i_T gcc;
    cell_wrap_1_FlightMissionMode_i_T gcd;
    cell_wrap_1_FlightMissionMode_i_T gce;
    cell_wrap_1_FlightMissionMode_i_T gcf;
    cell_wrap_1_FlightMissionMode_i_T gcg;
    cell_wrap_1_FlightMissionMode_i_T gd;
    cell_wrap_1_FlightMissionMode_i_T gdb;
    cell_wrap_1_FlightMissionMode_i_T gdc;
    cell_wrap_1_FlightMissionMode_i_T gdd;
    cell_wrap_1_FlightMissionMode_i_T gde;
    cell_wrap_1_FlightMissionMode_i_T gdf;
    cell_wrap_1_FlightMissionMode_i_T gdg;
    cell_wrap_1_FlightMissionMode_i_T ge;
    cell_wrap_1_FlightMissionMode_i_T geb;
    cell_wrap_1_FlightMissionMode_i_T gec;
    cell_wrap_1_FlightMissionMode_i_T ged;
    cell_wrap_1_FlightMissionMode_i_T gee;
    cell_wrap_1_FlightMissionMode_i_T gef;
    cell_wrap_1_FlightMissionMode_i_T geg;
    cell_wrap_1_FlightMissionMode_i_T gf;
    cell_wrap_1_FlightMissionMode_i_T gfb;
    cell_wrap_1_FlightMissionMode_i_T gfc;
    cell_wrap_1_FlightMissionMode_i_T gfd;
    cell_wrap_1_FlightMissionMode_i_T gfe;
    cell_wrap_1_FlightMissionMode_i_T gff;
    cell_wrap_1_FlightMissionMode_i_T gfg;
    cell_wrap_1_FlightMissionMode_i_T gg;
    cell_wrap_1_FlightMissionMode_i_T ggb;
    cell_wrap_1_FlightMissionMode_i_T ggc;
    cell_wrap_1_FlightMissionMode_i_T ggd;
    cell_wrap_1_FlightMissionMode_i_T gge;
    cell_wrap_1_FlightMissionMode_i_T ggf;
    cell_wrap_1_FlightMissionMode_i_T ggg;
    cell_wrap_1_FlightMissionMode_i_T gh;
    cell_wrap_1_FlightMissionMode_i_T ghb;
    cell_wrap_1_FlightMissionMode_i_T ghc;
    cell_wrap_1_FlightMissionMode_i_T ghd;
    cell_wrap_1_FlightMissionMode_i_T ghe;
    cell_wrap_1_FlightMissionMode_i_T ghf;
    cell_wrap_1_FlightMissionMode_i_T ghg;
    cell_wrap_1_FlightMissionMode_i_T gi;
    cell_wrap_1_FlightMissionMode_i_T gib;
    cell_wrap_1_FlightMissionMode_i_T gic;
    cell_wrap_1_FlightMissionMode_i_T gid;
    cell_wrap_1_FlightMissionMode_i_T gie;
    cell_wrap_1_FlightMissionMode_i_T gif;
    cell_wrap_1_FlightMissionMode_i_T gig;
    cell_wrap_1_FlightMissionMode_i_T gj;
    cell_wrap_1_FlightMissionMode_i_T gjb;
    cell_wrap_1_FlightMissionMode_i_T gjc;
    cell_wrap_1_FlightMissionMode_i_T gjd;
    cell_wrap_1_FlightMissionMode_i_T gje;
    cell_wrap_1_FlightMissionMode_i_T gjf;
    cell_wrap_1_FlightMissionMode_i_T gjg;
    cell_wrap_1_FlightMissionMode_i_T gk;
    cell_wrap_1_FlightMissionMode_i_T gkb;
    cell_wrap_1_FlightMissionMode_i_T gkc;
    cell_wrap_1_FlightMissionMode_i_T gkd;
    cell_wrap_1_FlightMissionMode_i_T gke;
    cell_wrap_1_FlightMissionMode_i_T gkf;
    cell_wrap_1_FlightMissionMode_i_T gkg;
    cell_wrap_1_FlightMissionMode_i_T gl;
    cell_wrap_1_FlightMissionMode_i_T glb;
    cell_wrap_1_FlightMissionMode_i_T glc;
    cell_wrap_1_FlightMissionMode_i_T gld;
    cell_wrap_1_FlightMissionMode_i_T gle;
    cell_wrap_1_FlightMissionMode_i_T glf;
    cell_wrap_1_FlightMissionMode_i_T gm;
    cell_wrap_1_FlightMissionMode_i_T gmb;
    cell_wrap_1_FlightMissionMode_i_T gmc;
    cell_wrap_1_FlightMissionMode_i_T gmd;
    cell_wrap_1_FlightMissionMode_i_T gme;
    cell_wrap_1_FlightMissionMode_i_T gmf;
    cell_wrap_1_FlightMissionMode_i_T gn;
    cell_wrap_1_FlightMissionMode_i_T gnb;
    cell_wrap_1_FlightMissionMode_i_T gnc;
    cell_wrap_1_FlightMissionMode_i_T gnd;
    cell_wrap_1_FlightMissionMode_i_T gne;
    cell_wrap_1_FlightMissionMode_i_T gnf;
    cell_wrap_1_FlightMissionMode_i_T go;
    cell_wrap_1_FlightMissionMode_i_T gob;
    cell_wrap_1_FlightMissionMode_i_T goc;
    cell_wrap_1_FlightMissionMode_i_T god;
    cell_wrap_1_FlightMissionMode_i_T goe;
    cell_wrap_1_FlightMissionMode_i_T gof;
    cell_wrap_1_FlightMissionMode_i_T gp;
    cell_wrap_1_FlightMissionMode_i_T gpb;
    cell_wrap_1_FlightMissionMode_i_T gpc;
    cell_wrap_1_FlightMissionMode_i_T gpd;
    cell_wrap_1_FlightMissionMode_i_T gpe;
    cell_wrap_1_FlightMissionMode_i_T gpf;
    cell_wrap_1_FlightMissionMode_i_T gq;
    cell_wrap_1_FlightMissionMode_i_T gqb;
    cell_wrap_1_FlightMissionMode_i_T gqc;
    cell_wrap_1_FlightMissionMode_i_T gqd;
    cell_wrap_1_FlightMissionMode_i_T gqe;
    cell_wrap_1_FlightMissionMode_i_T gqf;
    cell_wrap_1_FlightMissionMode_i_T gr;
    cell_wrap_1_FlightMissionMode_i_T grb;
    cell_wrap_1_FlightMissionMode_i_T grc;
    cell_wrap_1_FlightMissionMode_i_T grd;
    cell_wrap_1_FlightMissionMode_i_T gre;
    cell_wrap_1_FlightMissionMode_i_T grf;
    cell_wrap_1_FlightMissionMode_i_T gs;
    cell_wrap_1_FlightMissionMode_i_T gsb;
    cell_wrap_1_FlightMissionMode_i_T gsc;
    cell_wrap_1_FlightMissionMode_i_T gsd;
    cell_wrap_1_FlightMissionMode_i_T gse;
    cell_wrap_1_FlightMissionMode_i_T gsf;
    cell_wrap_1_FlightMissionMode_i_T gt;
    cell_wrap_1_FlightMissionMode_i_T gtb;
    cell_wrap_1_FlightMissionMode_i_T gtc;
    cell_wrap_1_FlightMissionMode_i_T gtd;
    cell_wrap_1_FlightMissionMode_i_T gte;
    cell_wrap_1_FlightMissionMode_i_T gtf;
    cell_wrap_1_FlightMissionMode_i_T gu;
    cell_wrap_1_FlightMissionMode_i_T gub;
    cell_wrap_1_FlightMissionMode_i_T guc;
    cell_wrap_1_FlightMissionMode_i_T gud;
    cell_wrap_1_FlightMissionMode_i_T gue;
    cell_wrap_1_FlightMissionMode_i_T guf;
    cell_wrap_1_FlightMissionMode_i_T gv;
    cell_wrap_1_FlightMissionMode_i_T gvb;
    cell_wrap_1_FlightMissionMode_i_T gvc;
    cell_wrap_1_FlightMissionMode_i_T gvd;
    cell_wrap_1_FlightMissionMode_i_T gve;
    cell_wrap_1_FlightMissionMode_i_T gvf;
    cell_wrap_1_FlightMissionMode_i_T gw;
    cell_wrap_1_FlightMissionMode_i_T gwb;
    cell_wrap_1_FlightMissionMode_i_T gwc;
    cell_wrap_1_FlightMissionMode_i_T gwd;
    cell_wrap_1_FlightMissionMode_i_T gwe;
    cell_wrap_1_FlightMissionMode_i_T gwf;
    cell_wrap_1_FlightMissionMode_i_T gx;
    cell_wrap_1_FlightMissionMode_i_T gxb;
    cell_wrap_1_FlightMissionMode_i_T gxc;
    cell_wrap_1_FlightMissionMode_i_T gxd;
    cell_wrap_1_FlightMissionMode_i_T gxe;
    cell_wrap_1_FlightMissionMode_i_T gxf;
    cell_wrap_1_FlightMissionMode_i_T gy;
    cell_wrap_1_FlightMissionMode_i_T gyb;
    cell_wrap_1_FlightMissionMode_i_T gyc;
    cell_wrap_1_FlightMissionMode_i_T gyd;
    cell_wrap_1_FlightMissionMode_i_T gye;
    cell_wrap_1_FlightMissionMode_i_T gyf;
    cell_wrap_1_FlightMissionMode_i_T h;
    cell_wrap_1_FlightMissionMode_i_T hab;
    cell_wrap_1_FlightMissionMode_i_T hac;
    cell_wrap_1_FlightMissionMode_i_T had;
    cell_wrap_1_FlightMissionMode_i_T hae;
    cell_wrap_1_FlightMissionMode_i_T haf;
    cell_wrap_1_FlightMissionMode_i_T hag;
    cell_wrap_1_FlightMissionMode_i_T hb;
    cell_wrap_1_FlightMissionMode_i_T hbb;
    cell_wrap_1_FlightMissionMode_i_T hbc;
    cell_wrap_1_FlightMissionMode_i_T hbd;
    cell_wrap_1_FlightMissionMode_i_T hbe;
    cell_wrap_1_FlightMissionMode_i_T hbf;
    cell_wrap_1_FlightMissionMode_i_T hbg;
    cell_wrap_1_FlightMissionMode_i_T hc;
    cell_wrap_1_FlightMissionMode_i_T hcb;
    cell_wrap_1_FlightMissionMode_i_T hcc;
    cell_wrap_1_FlightMissionMode_i_T hcd;
    cell_wrap_1_FlightMissionMode_i_T hce;
    cell_wrap_1_FlightMissionMode_i_T hcf;
    cell_wrap_1_FlightMissionMode_i_T hcg;
    cell_wrap_1_FlightMissionMode_i_T hd;
    cell_wrap_1_FlightMissionMode_i_T hdb;
    cell_wrap_1_FlightMissionMode_i_T hdc;
    cell_wrap_1_FlightMissionMode_i_T hdd;
    cell_wrap_1_FlightMissionMode_i_T hde;
    cell_wrap_1_FlightMissionMode_i_T hdf;
    cell_wrap_1_FlightMissionMode_i_T hdg;
    cell_wrap_1_FlightMissionMode_i_T he;
    cell_wrap_1_FlightMissionMode_i_T heb;
    cell_wrap_1_FlightMissionMode_i_T hec;
    cell_wrap_1_FlightMissionMode_i_T hed;
    cell_wrap_1_FlightMissionMode_i_T hee;
    cell_wrap_1_FlightMissionMode_i_T hef;
    cell_wrap_1_FlightMissionMode_i_T heg;
    cell_wrap_1_FlightMissionMode_i_T hf;
    cell_wrap_1_FlightMissionMode_i_T hfb;
    cell_wrap_1_FlightMissionMode_i_T hfc;
    cell_wrap_1_FlightMissionMode_i_T hfd;
    cell_wrap_1_FlightMissionMode_i_T hfe;
    cell_wrap_1_FlightMissionMode_i_T hff;
    cell_wrap_1_FlightMissionMode_i_T hfg;
    cell_wrap_1_FlightMissionMode_i_T hg;
    cell_wrap_1_FlightMissionMode_i_T hgb;
    cell_wrap_1_FlightMissionMode_i_T hgc;
    cell_wrap_1_FlightMissionMode_i_T hgd;
    cell_wrap_1_FlightMissionMode_i_T hge;
    cell_wrap_1_FlightMissionMode_i_T hgf;
    cell_wrap_1_FlightMissionMode_i_T hgg;
    cell_wrap_1_FlightMissionMode_i_T hh;
    cell_wrap_1_FlightMissionMode_i_T hhb;
    cell_wrap_1_FlightMissionMode_i_T hhc;
    cell_wrap_1_FlightMissionMode_i_T hhd;
    cell_wrap_1_FlightMissionMode_i_T hhe;
    cell_wrap_1_FlightMissionMode_i_T hhf;
    cell_wrap_1_FlightMissionMode_i_T hhg;
    cell_wrap_1_FlightMissionMode_i_T hi;
    cell_wrap_1_FlightMissionMode_i_T hib;
    cell_wrap_1_FlightMissionMode_i_T hic;
    cell_wrap_1_FlightMissionMode_i_T hid;
    cell_wrap_1_FlightMissionMode_i_T hie;
    cell_wrap_1_FlightMissionMode_i_T hif;
    cell_wrap_1_FlightMissionMode_i_T hig;
    cell_wrap_1_FlightMissionMode_i_T hj;
    cell_wrap_1_FlightMissionMode_i_T hjb;
    cell_wrap_1_FlightMissionMode_i_T hjc;
    cell_wrap_1_FlightMissionMode_i_T hjd;
    cell_wrap_1_FlightMissionMode_i_T hje;
    cell_wrap_1_FlightMissionMode_i_T hjf;
    cell_wrap_1_FlightMissionMode_i_T hjg;
    cell_wrap_1_FlightMissionMode_i_T hk;
    cell_wrap_1_FlightMissionMode_i_T hkb;
    cell_wrap_1_FlightMissionMode_i_T hkc;
    cell_wrap_1_FlightMissionMode_i_T hkd;
    cell_wrap_1_FlightMissionMode_i_T hke;
    cell_wrap_1_FlightMissionMode_i_T hkf;
    cell_wrap_1_FlightMissionMode_i_T hkg;
    cell_wrap_1_FlightMissionMode_i_T hl;
    cell_wrap_1_FlightMissionMode_i_T hlb;
    cell_wrap_1_FlightMissionMode_i_T hlc;
    cell_wrap_1_FlightMissionMode_i_T hld;
    cell_wrap_1_FlightMissionMode_i_T hle;
    cell_wrap_1_FlightMissionMode_i_T hlf;
    cell_wrap_1_FlightMissionMode_i_T hm;
    cell_wrap_1_FlightMissionMode_i_T hmb;
    cell_wrap_1_FlightMissionMode_i_T hmc;
    cell_wrap_1_FlightMissionMode_i_T hmd;
    cell_wrap_1_FlightMissionMode_i_T hme;
    cell_wrap_1_FlightMissionMode_i_T hmf;
    cell_wrap_1_FlightMissionMode_i_T hn;
    cell_wrap_1_FlightMissionMode_i_T hnb;
    cell_wrap_1_FlightMissionMode_i_T hnc;
    cell_wrap_1_FlightMissionMode_i_T hnd;
    cell_wrap_1_FlightMissionMode_i_T hne;
    cell_wrap_1_FlightMissionMode_i_T hnf;
    cell_wrap_1_FlightMissionMode_i_T ho;
    cell_wrap_1_FlightMissionMode_i_T hob;
    cell_wrap_1_FlightMissionMode_i_T hoc;
    cell_wrap_1_FlightMissionMode_i_T hod;
    cell_wrap_1_FlightMissionMode_i_T hoe;
    cell_wrap_1_FlightMissionMode_i_T hof;
    cell_wrap_1_FlightMissionMode_i_T hp;
    cell_wrap_1_FlightMissionMode_i_T hpb;
    cell_wrap_1_FlightMissionMode_i_T hpc;
    cell_wrap_1_FlightMissionMode_i_T hpd;
    cell_wrap_1_FlightMissionMode_i_T hpe;
    cell_wrap_1_FlightMissionMode_i_T hpf;
    cell_wrap_1_FlightMissionMode_i_T hq;
    cell_wrap_1_FlightMissionMode_i_T hqb;
    cell_wrap_1_FlightMissionMode_i_T hqc;
    cell_wrap_1_FlightMissionMode_i_T hqd;
    cell_wrap_1_FlightMissionMode_i_T hqe;
    cell_wrap_1_FlightMissionMode_i_T hqf;
    cell_wrap_1_FlightMissionMode_i_T hr;
    cell_wrap_1_FlightMissionMode_i_T hrb;
    cell_wrap_1_FlightMissionMode_i_T hrc;
    cell_wrap_1_FlightMissionMode_i_T hrd;
    cell_wrap_1_FlightMissionMode_i_T hre;
    cell_wrap_1_FlightMissionMode_i_T hrf;
    cell_wrap_1_FlightMissionMode_i_T hs;
    cell_wrap_1_FlightMissionMode_i_T hsb;
    cell_wrap_1_FlightMissionMode_i_T hsc;
    cell_wrap_1_FlightMissionMode_i_T hsd;
    cell_wrap_1_FlightMissionMode_i_T hse;
    cell_wrap_1_FlightMissionMode_i_T hsf;
    cell_wrap_1_FlightMissionMode_i_T ht;
    cell_wrap_1_FlightMissionMode_i_T htb;
    cell_wrap_1_FlightMissionMode_i_T htc;
    cell_wrap_1_FlightMissionMode_i_T htd;
    cell_wrap_1_FlightMissionMode_i_T hte;
    cell_wrap_1_FlightMissionMode_i_T htf;
    cell_wrap_1_FlightMissionMode_i_T hu;
    cell_wrap_1_FlightMissionMode_i_T hub;
    cell_wrap_1_FlightMissionMode_i_T huc;
    cell_wrap_1_FlightMissionMode_i_T hud;
    cell_wrap_1_FlightMissionMode_i_T hue;
    cell_wrap_1_FlightMissionMode_i_T huf;
    cell_wrap_1_FlightMissionMode_i_T hv;
    cell_wrap_1_FlightMissionMode_i_T hvb;
    cell_wrap_1_FlightMissionMode_i_T hvc;
    cell_wrap_1_FlightMissionMode_i_T hvd;
    cell_wrap_1_FlightMissionMode_i_T hve;
    cell_wrap_1_FlightMissionMode_i_T hvf;
    cell_wrap_1_FlightMissionMode_i_T hw;
    cell_wrap_1_FlightMissionMode_i_T hwb;
    cell_wrap_1_FlightMissionMode_i_T hwc;
    cell_wrap_1_FlightMissionMode_i_T hwd;
    cell_wrap_1_FlightMissionMode_i_T hwe;
    cell_wrap_1_FlightMissionMode_i_T hwf;
    cell_wrap_1_FlightMissionMode_i_T hx;
    cell_wrap_1_FlightMissionMode_i_T hxb;
    cell_wrap_1_FlightMissionMode_i_T hxc;
    cell_wrap_1_FlightMissionMode_i_T hxd;
    cell_wrap_1_FlightMissionMode_i_T hxe;
    cell_wrap_1_FlightMissionMode_i_T hxf;
    cell_wrap_1_FlightMissionMode_i_T hy;
    cell_wrap_1_FlightMissionMode_i_T hyb;
    cell_wrap_1_FlightMissionMode_i_T hyc;
    cell_wrap_1_FlightMissionMode_i_T hyd;
    cell_wrap_1_FlightMissionMode_i_T hye;
    cell_wrap_1_FlightMissionMode_i_T hyf;
    cell_wrap_1_FlightMissionMode_i_T i;
    cell_wrap_1_FlightMissionMode_i_T iab;
    cell_wrap_1_FlightMissionMode_i_T iac;
    cell_wrap_1_FlightMissionMode_i_T iad;
    cell_wrap_1_FlightMissionMode_i_T iae;
    cell_wrap_1_FlightMissionMode_i_T iaf;
    cell_wrap_1_FlightMissionMode_i_T iag;
    cell_wrap_1_FlightMissionMode_i_T ib;
    cell_wrap_1_FlightMissionMode_i_T ibb;
    cell_wrap_1_FlightMissionMode_i_T ibc;
    cell_wrap_1_FlightMissionMode_i_T ibd;
    cell_wrap_1_FlightMissionMode_i_T ibe;
    cell_wrap_1_FlightMissionMode_i_T ibf;
    cell_wrap_1_FlightMissionMode_i_T ibg;
    cell_wrap_1_FlightMissionMode_i_T ic;
    cell_wrap_1_FlightMissionMode_i_T icb;
    cell_wrap_1_FlightMissionMode_i_T icc;
    cell_wrap_1_FlightMissionMode_i_T icd;
    cell_wrap_1_FlightMissionMode_i_T ice;
    cell_wrap_1_FlightMissionMode_i_T icf;
    cell_wrap_1_FlightMissionMode_i_T icg;
    cell_wrap_1_FlightMissionMode_i_T id;
    cell_wrap_1_FlightMissionMode_i_T idb;
    cell_wrap_1_FlightMissionMode_i_T idc;
    cell_wrap_1_FlightMissionMode_i_T idd;
    cell_wrap_1_FlightMissionMode_i_T ide;
    cell_wrap_1_FlightMissionMode_i_T idf;
    cell_wrap_1_FlightMissionMode_i_T idg;
    cell_wrap_1_FlightMissionMode_i_T ie;
    cell_wrap_1_FlightMissionMode_i_T ieb;
    cell_wrap_1_FlightMissionMode_i_T iec;
    cell_wrap_1_FlightMissionMode_i_T ied;
    cell_wrap_1_FlightMissionMode_i_T iee;
    cell_wrap_1_FlightMissionMode_i_T ief;
    cell_wrap_1_FlightMissionMode_i_T ieg;
    cell_wrap_1_FlightMissionMode_i_T ifb;
    cell_wrap_1_FlightMissionMode_i_T ifc;
    cell_wrap_1_FlightMissionMode_i_T ifd;
    cell_wrap_1_FlightMissionMode_i_T ife;
    cell_wrap_1_FlightMissionMode_i_T iff;
    cell_wrap_1_FlightMissionMode_i_T ifg;
    cell_wrap_1_FlightMissionMode_i_T ig;
    cell_wrap_1_FlightMissionMode_i_T igb;
    cell_wrap_1_FlightMissionMode_i_T igc;
    cell_wrap_1_FlightMissionMode_i_T igd;
    cell_wrap_1_FlightMissionMode_i_T ige;
    cell_wrap_1_FlightMissionMode_i_T igf;
    cell_wrap_1_FlightMissionMode_i_T igg;
    cell_wrap_1_FlightMissionMode_i_T ih;
    cell_wrap_1_FlightMissionMode_i_T ihb;
    cell_wrap_1_FlightMissionMode_i_T ihc;
    cell_wrap_1_FlightMissionMode_i_T ihd;
    cell_wrap_1_FlightMissionMode_i_T ihe;
    cell_wrap_1_FlightMissionMode_i_T ihf;
    cell_wrap_1_FlightMissionMode_i_T ihg;
    cell_wrap_1_FlightMissionMode_i_T ii;
    cell_wrap_1_FlightMissionMode_i_T iib;
    cell_wrap_1_FlightMissionMode_i_T iic;
    cell_wrap_1_FlightMissionMode_i_T iid;
    cell_wrap_1_FlightMissionMode_i_T iie;
    cell_wrap_1_FlightMissionMode_i_T iif;
    cell_wrap_1_FlightMissionMode_i_T iig;
    cell_wrap_1_FlightMissionMode_i_T ij;
    cell_wrap_1_FlightMissionMode_i_T ijb;
    cell_wrap_1_FlightMissionMode_i_T ijc;
    cell_wrap_1_FlightMissionMode_i_T ijd;
    cell_wrap_1_FlightMissionMode_i_T ije;
    cell_wrap_1_FlightMissionMode_i_T ijf;
    cell_wrap_1_FlightMissionMode_i_T ijg;
    cell_wrap_1_FlightMissionMode_i_T ik;
    cell_wrap_1_FlightMissionMode_i_T ikb;
    cell_wrap_1_FlightMissionMode_i_T ikc;
    cell_wrap_1_FlightMissionMode_i_T ikd;
    cell_wrap_1_FlightMissionMode_i_T ike;
    cell_wrap_1_FlightMissionMode_i_T ikf;
    cell_wrap_1_FlightMissionMode_i_T ikg;
    cell_wrap_1_FlightMissionMode_i_T il;
    cell_wrap_1_FlightMissionMode_i_T ilb;
    cell_wrap_1_FlightMissionMode_i_T ilc;
    cell_wrap_1_FlightMissionMode_i_T ild;
    cell_wrap_1_FlightMissionMode_i_T ile;
    cell_wrap_1_FlightMissionMode_i_T ilf;
    cell_wrap_1_FlightMissionMode_i_T im;
    cell_wrap_1_FlightMissionMode_i_T imb;
    cell_wrap_1_FlightMissionMode_i_T imc;
    cell_wrap_1_FlightMissionMode_i_T imd;
    cell_wrap_1_FlightMissionMode_i_T ime;
    cell_wrap_1_FlightMissionMode_i_T imf;
    cell_wrap_1_FlightMissionMode_i_T in;
    cell_wrap_1_FlightMissionMode_i_T inb;
    cell_wrap_1_FlightMissionMode_i_T inc;
    cell_wrap_1_FlightMissionMode_i_T ind;
    cell_wrap_1_FlightMissionMode_i_T ine;
    cell_wrap_1_FlightMissionMode_i_T inf;
    cell_wrap_1_FlightMissionMode_i_T io;
    cell_wrap_1_FlightMissionMode_i_T iob;
    cell_wrap_1_FlightMissionMode_i_T ioc;
    cell_wrap_1_FlightMissionMode_i_T iod;
    cell_wrap_1_FlightMissionMode_i_T ioe;
    cell_wrap_1_FlightMissionMode_i_T iof;
    cell_wrap_1_FlightMissionMode_i_T ip;
    cell_wrap_1_FlightMissionMode_i_T ipb;
    cell_wrap_1_FlightMissionMode_i_T ipc;
    cell_wrap_1_FlightMissionMode_i_T ipd;
    cell_wrap_1_FlightMissionMode_i_T ipe;
    cell_wrap_1_FlightMissionMode_i_T ipf;
    cell_wrap_1_FlightMissionMode_i_T iq;
    cell_wrap_1_FlightMissionMode_i_T iqb;
    cell_wrap_1_FlightMissionMode_i_T iqc;
    cell_wrap_1_FlightMissionMode_i_T iqd;
    cell_wrap_1_FlightMissionMode_i_T iqe;
    cell_wrap_1_FlightMissionMode_i_T iqf;
    cell_wrap_1_FlightMissionMode_i_T ir;
    cell_wrap_1_FlightMissionMode_i_T irb;
    cell_wrap_1_FlightMissionMode_i_T irc;
    cell_wrap_1_FlightMissionMode_i_T ird;
    cell_wrap_1_FlightMissionMode_i_T ire;
    cell_wrap_1_FlightMissionMode_i_T irf;
    cell_wrap_1_FlightMissionMode_i_T is;
    cell_wrap_1_FlightMissionMode_i_T isb;
    cell_wrap_1_FlightMissionMode_i_T isc;
    cell_wrap_1_FlightMissionMode_i_T isd;
    cell_wrap_1_FlightMissionMode_i_T ise;
    cell_wrap_1_FlightMissionMode_i_T isf;
    cell_wrap_1_FlightMissionMode_i_T it;
    cell_wrap_1_FlightMissionMode_i_T itb;
    cell_wrap_1_FlightMissionMode_i_T itc;
    cell_wrap_1_FlightMissionMode_i_T itd;
    cell_wrap_1_FlightMissionMode_i_T ite;
    cell_wrap_1_FlightMissionMode_i_T itf;
    cell_wrap_1_FlightMissionMode_i_T iu;
    cell_wrap_1_FlightMissionMode_i_T iub;
    cell_wrap_1_FlightMissionMode_i_T iuc;
    cell_wrap_1_FlightMissionMode_i_T iud;
    cell_wrap_1_FlightMissionMode_i_T iue;
    cell_wrap_1_FlightMissionMode_i_T iuf;
    cell_wrap_1_FlightMissionMode_i_T iv;
    cell_wrap_1_FlightMissionMode_i_T ivb;
    cell_wrap_1_FlightMissionMode_i_T ivc;
    cell_wrap_1_FlightMissionMode_i_T ivd;
    cell_wrap_1_FlightMissionMode_i_T ive;
    cell_wrap_1_FlightMissionMode_i_T ivf;
    cell_wrap_1_FlightMissionMode_i_T iw;
    cell_wrap_1_FlightMissionMode_i_T iwb;
    cell_wrap_1_FlightMissionMode_i_T iwc;
    cell_wrap_1_FlightMissionMode_i_T iwd;
    cell_wrap_1_FlightMissionMode_i_T iwe;
    cell_wrap_1_FlightMissionMode_i_T iwf;
    cell_wrap_1_FlightMissionMode_i_T ix;
    cell_wrap_1_FlightMissionMode_i_T ixb;
    cell_wrap_1_FlightMissionMode_i_T ixc;
    cell_wrap_1_FlightMissionMode_i_T ixd;
    cell_wrap_1_FlightMissionMode_i_T ixe;
    cell_wrap_1_FlightMissionMode_i_T ixf;
    cell_wrap_1_FlightMissionMode_i_T iy;
    cell_wrap_1_FlightMissionMode_i_T iyb;
    cell_wrap_1_FlightMissionMode_i_T iyc;
    cell_wrap_1_FlightMissionMode_i_T iyd;
    cell_wrap_1_FlightMissionMode_i_T iye;
    cell_wrap_1_FlightMissionMode_i_T iyf;
    cell_wrap_1_FlightMissionMode_i_T j;
    cell_wrap_1_FlightMissionMode_i_T jab;
    cell_wrap_1_FlightMissionMode_i_T jac;
    cell_wrap_1_FlightMissionMode_i_T jad;
    cell_wrap_1_FlightMissionMode_i_T jae;
    cell_wrap_1_FlightMissionMode_i_T jaf;
    cell_wrap_1_FlightMissionMode_i_T jag;
    cell_wrap_1_FlightMissionMode_i_T jb;
    cell_wrap_1_FlightMissionMode_i_T jbb;
    cell_wrap_1_FlightMissionMode_i_T jbc;
    cell_wrap_1_FlightMissionMode_i_T jbd;
    cell_wrap_1_FlightMissionMode_i_T jbe;
    cell_wrap_1_FlightMissionMode_i_T jbf;
    cell_wrap_1_FlightMissionMode_i_T jbg;
    cell_wrap_1_FlightMissionMode_i_T jc;
    cell_wrap_1_FlightMissionMode_i_T jcb;
    cell_wrap_1_FlightMissionMode_i_T jcc;
    cell_wrap_1_FlightMissionMode_i_T jcd;
    cell_wrap_1_FlightMissionMode_i_T jce;
    cell_wrap_1_FlightMissionMode_i_T jcf;
    cell_wrap_1_FlightMissionMode_i_T jcg;
    cell_wrap_1_FlightMissionMode_i_T jd;
    cell_wrap_1_FlightMissionMode_i_T jdb;
    cell_wrap_1_FlightMissionMode_i_T jdc;
    cell_wrap_1_FlightMissionMode_i_T jdd;
    cell_wrap_1_FlightMissionMode_i_T jde;
    cell_wrap_1_FlightMissionMode_i_T jdf;
    cell_wrap_1_FlightMissionMode_i_T jdg;
    cell_wrap_1_FlightMissionMode_i_T je;
    cell_wrap_1_FlightMissionMode_i_T jeb;
    cell_wrap_1_FlightMissionMode_i_T jec;
    cell_wrap_1_FlightMissionMode_i_T jed;
    cell_wrap_1_FlightMissionMode_i_T jee;
    cell_wrap_1_FlightMissionMode_i_T jef;
    cell_wrap_1_FlightMissionMode_i_T jeg;
    cell_wrap_1_FlightMissionMode_i_T jf;
    cell_wrap_1_FlightMissionMode_i_T jfb;
    cell_wrap_1_FlightMissionMode_i_T jfc;
    cell_wrap_1_FlightMissionMode_i_T jfd;
    cell_wrap_1_FlightMissionMode_i_T jfe;
    cell_wrap_1_FlightMissionMode_i_T jff;
    cell_wrap_1_FlightMissionMode_i_T jfg;
    cell_wrap_1_FlightMissionMode_i_T jg;
    cell_wrap_1_FlightMissionMode_i_T jgb;
    cell_wrap_1_FlightMissionMode_i_T jgc;
    cell_wrap_1_FlightMissionMode_i_T jgd;
    cell_wrap_1_FlightMissionMode_i_T jge;
    cell_wrap_1_FlightMissionMode_i_T jgf;
    cell_wrap_1_FlightMissionMode_i_T jgg;
    cell_wrap_1_FlightMissionMode_i_T jh;
    cell_wrap_1_FlightMissionMode_i_T jhb;
    cell_wrap_1_FlightMissionMode_i_T jhc;
    cell_wrap_1_FlightMissionMode_i_T jhd;
    cell_wrap_1_FlightMissionMode_i_T jhe;
    cell_wrap_1_FlightMissionMode_i_T jhf;
    cell_wrap_1_FlightMissionMode_i_T jhg;
    cell_wrap_1_FlightMissionMode_i_T ji;
    cell_wrap_1_FlightMissionMode_i_T jib;
    cell_wrap_1_FlightMissionMode_i_T jic;
    cell_wrap_1_FlightMissionMode_i_T jid;
    cell_wrap_1_FlightMissionMode_i_T jie;
    cell_wrap_1_FlightMissionMode_i_T jif;
    cell_wrap_1_FlightMissionMode_i_T jig;
    cell_wrap_1_FlightMissionMode_i_T jj;
    cell_wrap_1_FlightMissionMode_i_T jjb;
    cell_wrap_1_FlightMissionMode_i_T jjc;
    cell_wrap_1_FlightMissionMode_i_T jjd;
    cell_wrap_1_FlightMissionMode_i_T jje;
    cell_wrap_1_FlightMissionMode_i_T jjf;
    cell_wrap_1_FlightMissionMode_i_T jjg;
    cell_wrap_1_FlightMissionMode_i_T jk;
    cell_wrap_1_FlightMissionMode_i_T jkb;
    cell_wrap_1_FlightMissionMode_i_T jkc;
    cell_wrap_1_FlightMissionMode_i_T jkd;
    cell_wrap_1_FlightMissionMode_i_T jke;
    cell_wrap_1_FlightMissionMode_i_T jkf;
    cell_wrap_1_FlightMissionMode_i_T jkg;
    cell_wrap_1_FlightMissionMode_i_T jl;
    cell_wrap_1_FlightMissionMode_i_T jlb;
    cell_wrap_1_FlightMissionMode_i_T jlc;
    cell_wrap_1_FlightMissionMode_i_T jld;
    cell_wrap_1_FlightMissionMode_i_T jle;
    cell_wrap_1_FlightMissionMode_i_T jlf;
    cell_wrap_1_FlightMissionMode_i_T jm;
    cell_wrap_1_FlightMissionMode_i_T jmb;
    cell_wrap_1_FlightMissionMode_i_T jmc;
    cell_wrap_1_FlightMissionMode_i_T jmd;
    cell_wrap_1_FlightMissionMode_i_T jme;
    cell_wrap_1_FlightMissionMode_i_T jmf;
    cell_wrap_1_FlightMissionMode_i_T jnb;
    cell_wrap_1_FlightMissionMode_i_T jnc;
    cell_wrap_1_FlightMissionMode_i_T jnd;
    cell_wrap_1_FlightMissionMode_i_T jne;
    cell_wrap_1_FlightMissionMode_i_T jo;
    cell_wrap_1_FlightMissionMode_i_T job;
    cell_wrap_1_FlightMissionMode_i_T joc;
    cell_wrap_1_FlightMissionMode_i_T jod;
    cell_wrap_1_FlightMissionMode_i_T joe;
    cell_wrap_1_FlightMissionMode_i_T jof;
    cell_wrap_1_FlightMissionMode_i_T jp;
    cell_wrap_1_FlightMissionMode_i_T jpb;
    cell_wrap_1_FlightMissionMode_i_T jpc;
    cell_wrap_1_FlightMissionMode_i_T jpd;
    cell_wrap_1_FlightMissionMode_i_T jpe;
    cell_wrap_1_FlightMissionMode_i_T jpf;
    cell_wrap_1_FlightMissionMode_i_T jq;
    cell_wrap_1_FlightMissionMode_i_T jqb;
    cell_wrap_1_FlightMissionMode_i_T jqc;
    cell_wrap_1_FlightMissionMode_i_T jqd;
    cell_wrap_1_FlightMissionMode_i_T jqe;
    cell_wrap_1_FlightMissionMode_i_T jqf;
    cell_wrap_1_FlightMissionMode_i_T jr;
    cell_wrap_1_FlightMissionMode_i_T jrb;
    cell_wrap_1_FlightMissionMode_i_T jrc;
    cell_wrap_1_FlightMissionMode_i_T jrd;
    cell_wrap_1_FlightMissionMode_i_T jre;
    cell_wrap_1_FlightMissionMode_i_T jrf;
    cell_wrap_1_FlightMissionMode_i_T js;
    cell_wrap_1_FlightMissionMode_i_T jsb;
    cell_wrap_1_FlightMissionMode_i_T jsc;
    cell_wrap_1_FlightMissionMode_i_T jsd;
    cell_wrap_1_FlightMissionMode_i_T jse;
    cell_wrap_1_FlightMissionMode_i_T jsf;
    cell_wrap_1_FlightMissionMode_i_T jt;
    cell_wrap_1_FlightMissionMode_i_T jtb;
    cell_wrap_1_FlightMissionMode_i_T jtc;
    cell_wrap_1_FlightMissionMode_i_T jtd;
    cell_wrap_1_FlightMissionMode_i_T jte;
    cell_wrap_1_FlightMissionMode_i_T jtf;
    cell_wrap_1_FlightMissionMode_i_T ju;
    cell_wrap_1_FlightMissionMode_i_T jub;
    cell_wrap_1_FlightMissionMode_i_T juc;
    cell_wrap_1_FlightMissionMode_i_T jud;
    cell_wrap_1_FlightMissionMode_i_T jue;
    cell_wrap_1_FlightMissionMode_i_T juf;
    cell_wrap_1_FlightMissionMode_i_T jv;
    cell_wrap_1_FlightMissionMode_i_T jvb;
    cell_wrap_1_FlightMissionMode_i_T jvc;
    cell_wrap_1_FlightMissionMode_i_T jvd;
    cell_wrap_1_FlightMissionMode_i_T jve;
    cell_wrap_1_FlightMissionMode_i_T jvf;
    cell_wrap_1_FlightMissionMode_i_T jw;
    cell_wrap_1_FlightMissionMode_i_T jwb;
    cell_wrap_1_FlightMissionMode_i_T jwc;
    cell_wrap_1_FlightMissionMode_i_T jwd;
    cell_wrap_1_FlightMissionMode_i_T jwe;
    cell_wrap_1_FlightMissionMode_i_T jwf;
    cell_wrap_1_FlightMissionMode_i_T jx;
    cell_wrap_1_FlightMissionMode_i_T jxb;
    cell_wrap_1_FlightMissionMode_i_T jxc;
    cell_wrap_1_FlightMissionMode_i_T jxd;
    cell_wrap_1_FlightMissionMode_i_T jxe;
    cell_wrap_1_FlightMissionMode_i_T jxf;
    cell_wrap_1_FlightMissionMode_i_T jy;
    cell_wrap_1_FlightMissionMode_i_T jyb;
    cell_wrap_1_FlightMissionMode_i_T jyc;
    cell_wrap_1_FlightMissionMode_i_T jyd;
    cell_wrap_1_FlightMissionMode_i_T jye;
    cell_wrap_1_FlightMissionMode_i_T jyf;
    cell_wrap_1_FlightMissionMode_i_T k;
    cell_wrap_1_FlightMissionMode_i_T kab;
    cell_wrap_1_FlightMissionMode_i_T kac;
    cell_wrap_1_FlightMissionMode_i_T kad;
    cell_wrap_1_FlightMissionMode_i_T kae;
    cell_wrap_1_FlightMissionMode_i_T kaf;
    cell_wrap_1_FlightMissionMode_i_T kag;
    cell_wrap_1_FlightMissionMode_i_T kb;
    cell_wrap_1_FlightMissionMode_i_T kbb;
    cell_wrap_1_FlightMissionMode_i_T kbc;
    cell_wrap_1_FlightMissionMode_i_T kbd;
    cell_wrap_1_FlightMissionMode_i_T kbe;
    cell_wrap_1_FlightMissionMode_i_T kbf;
    cell_wrap_1_FlightMissionMode_i_T kbg;
    cell_wrap_1_FlightMissionMode_i_T kc;
    cell_wrap_1_FlightMissionMode_i_T kcb;
    cell_wrap_1_FlightMissionMode_i_T kcc;
    cell_wrap_1_FlightMissionMode_i_T kcd;
    cell_wrap_1_FlightMissionMode_i_T kce;
    cell_wrap_1_FlightMissionMode_i_T kcf;
    cell_wrap_1_FlightMissionMode_i_T kcg;
    cell_wrap_1_FlightMissionMode_i_T kd;
    cell_wrap_1_FlightMissionMode_i_T kdb;
    cell_wrap_1_FlightMissionMode_i_T kdc;
    cell_wrap_1_FlightMissionMode_i_T kdd;
    cell_wrap_1_FlightMissionMode_i_T kde;
    cell_wrap_1_FlightMissionMode_i_T kdf;
    cell_wrap_1_FlightMissionMode_i_T kdg;
    cell_wrap_1_FlightMissionMode_i_T ke;
    cell_wrap_1_FlightMissionMode_i_T keb;
    cell_wrap_1_FlightMissionMode_i_T kec;
    cell_wrap_1_FlightMissionMode_i_T ked;
    cell_wrap_1_FlightMissionMode_i_T kee;
    cell_wrap_1_FlightMissionMode_i_T kef;
    cell_wrap_1_FlightMissionMode_i_T keg;
    cell_wrap_1_FlightMissionMode_i_T kf;
    cell_wrap_1_FlightMissionMode_i_T kfb;
    cell_wrap_1_FlightMissionMode_i_T kfc;
    cell_wrap_1_FlightMissionMode_i_T kfd;
    cell_wrap_1_FlightMissionMode_i_T kfe;
    cell_wrap_1_FlightMissionMode_i_T kff;
    cell_wrap_1_FlightMissionMode_i_T kfg;
    cell_wrap_1_FlightMissionMode_i_T kg;
    cell_wrap_1_FlightMissionMode_i_T kgb;
    cell_wrap_1_FlightMissionMode_i_T kgc;
    cell_wrap_1_FlightMissionMode_i_T kgd;
    cell_wrap_1_FlightMissionMode_i_T kge;
    cell_wrap_1_FlightMissionMode_i_T kgf;
    cell_wrap_1_FlightMissionMode_i_T kgg;
    cell_wrap_1_FlightMissionMode_i_T kh;
    cell_wrap_1_FlightMissionMode_i_T khb;
    cell_wrap_1_FlightMissionMode_i_T khc;
    cell_wrap_1_FlightMissionMode_i_T khd;
    cell_wrap_1_FlightMissionMode_i_T khe;
    cell_wrap_1_FlightMissionMode_i_T khf;
    cell_wrap_1_FlightMissionMode_i_T khg;
    cell_wrap_1_FlightMissionMode_i_T ki;
    cell_wrap_1_FlightMissionMode_i_T kib;
    cell_wrap_1_FlightMissionMode_i_T kic;
    cell_wrap_1_FlightMissionMode_i_T kid;
    cell_wrap_1_FlightMissionMode_i_T kie;
    cell_wrap_1_FlightMissionMode_i_T kif;
    cell_wrap_1_FlightMissionMode_i_T kig;
    cell_wrap_1_FlightMissionMode_i_T kj;
    cell_wrap_1_FlightMissionMode_i_T kjb;
    cell_wrap_1_FlightMissionMode_i_T kjc;
    cell_wrap_1_FlightMissionMode_i_T kjd;
    cell_wrap_1_FlightMissionMode_i_T kje;
    cell_wrap_1_FlightMissionMode_i_T kjf;
    cell_wrap_1_FlightMissionMode_i_T kjg;
    cell_wrap_1_FlightMissionMode_i_T kk;
    cell_wrap_1_FlightMissionMode_i_T kkb;
    cell_wrap_1_FlightMissionMode_i_T kkc;
    cell_wrap_1_FlightMissionMode_i_T kkd;
    cell_wrap_1_FlightMissionMode_i_T kke;
    cell_wrap_1_FlightMissionMode_i_T kkf;
    cell_wrap_1_FlightMissionMode_i_T kkg;
    cell_wrap_1_FlightMissionMode_i_T kl;
    cell_wrap_1_FlightMissionMode_i_T klb;
    cell_wrap_1_FlightMissionMode_i_T klc;
    cell_wrap_1_FlightMissionMode_i_T kld;
    cell_wrap_1_FlightMissionMode_i_T kle;
    cell_wrap_1_FlightMissionMode_i_T klf;
    cell_wrap_1_FlightMissionMode_i_T km;
    cell_wrap_1_FlightMissionMode_i_T kmb;
    cell_wrap_1_FlightMissionMode_i_T kmc;
    cell_wrap_1_FlightMissionMode_i_T kmd;
    cell_wrap_1_FlightMissionMode_i_T kme;
    cell_wrap_1_FlightMissionMode_i_T kmf;
    cell_wrap_1_FlightMissionMode_i_T kn;
    cell_wrap_1_FlightMissionMode_i_T knb;
    cell_wrap_1_FlightMissionMode_i_T knc;
    cell_wrap_1_FlightMissionMode_i_T knd;
    cell_wrap_1_FlightMissionMode_i_T kne;
    cell_wrap_1_FlightMissionMode_i_T knf;
    cell_wrap_1_FlightMissionMode_i_T ko;
    cell_wrap_1_FlightMissionMode_i_T kob;
    cell_wrap_1_FlightMissionMode_i_T koc;
    cell_wrap_1_FlightMissionMode_i_T kod;
    cell_wrap_1_FlightMissionMode_i_T koe;
    cell_wrap_1_FlightMissionMode_i_T kof;
    cell_wrap_1_FlightMissionMode_i_T kp;
    cell_wrap_1_FlightMissionMode_i_T kpb;
    cell_wrap_1_FlightMissionMode_i_T kpc;
    cell_wrap_1_FlightMissionMode_i_T kpd;
    cell_wrap_1_FlightMissionMode_i_T kpe;
    cell_wrap_1_FlightMissionMode_i_T kpf;
    cell_wrap_1_FlightMissionMode_i_T kq;
    cell_wrap_1_FlightMissionMode_i_T kqb;
    cell_wrap_1_FlightMissionMode_i_T kqc;
    cell_wrap_1_FlightMissionMode_i_T kqd;
    cell_wrap_1_FlightMissionMode_i_T kqe;
    cell_wrap_1_FlightMissionMode_i_T kqf;
    cell_wrap_1_FlightMissionMode_i_T kr;
    cell_wrap_1_FlightMissionMode_i_T krb;
    cell_wrap_1_FlightMissionMode_i_T krc;
    cell_wrap_1_FlightMissionMode_i_T krd;
    cell_wrap_1_FlightMissionMode_i_T kre;
    cell_wrap_1_FlightMissionMode_i_T krf;
    cell_wrap_1_FlightMissionMode_i_T ks;
    cell_wrap_1_FlightMissionMode_i_T ksb;
    cell_wrap_1_FlightMissionMode_i_T ksc;
    cell_wrap_1_FlightMissionMode_i_T ksd;
    cell_wrap_1_FlightMissionMode_i_T kse;
    cell_wrap_1_FlightMissionMode_i_T ksf;
    cell_wrap_1_FlightMissionMode_i_T kt;
    cell_wrap_1_FlightMissionMode_i_T ktb;
    cell_wrap_1_FlightMissionMode_i_T ktc;
    cell_wrap_1_FlightMissionMode_i_T ktd;
    cell_wrap_1_FlightMissionMode_i_T kte;
    cell_wrap_1_FlightMissionMode_i_T ktf;
    cell_wrap_1_FlightMissionMode_i_T ku;
    cell_wrap_1_FlightMissionMode_i_T kub;
    cell_wrap_1_FlightMissionMode_i_T kuc;
    cell_wrap_1_FlightMissionMode_i_T kud;
    cell_wrap_1_FlightMissionMode_i_T kue;
    cell_wrap_1_FlightMissionMode_i_T kuf;
    cell_wrap_1_FlightMissionMode_i_T kv;
    cell_wrap_1_FlightMissionMode_i_T kvb;
    cell_wrap_1_FlightMissionMode_i_T kvc;
    cell_wrap_1_FlightMissionMode_i_T kvd;
    cell_wrap_1_FlightMissionMode_i_T kve;
    cell_wrap_1_FlightMissionMode_i_T kvf;
    cell_wrap_1_FlightMissionMode_i_T kw;
    cell_wrap_1_FlightMissionMode_i_T kwb;
    cell_wrap_1_FlightMissionMode_i_T kwc;
    cell_wrap_1_FlightMissionMode_i_T kwd;
    cell_wrap_1_FlightMissionMode_i_T kwe;
    cell_wrap_1_FlightMissionMode_i_T kwf;
    cell_wrap_1_FlightMissionMode_i_T kx;
    cell_wrap_1_FlightMissionMode_i_T kxb;
    cell_wrap_1_FlightMissionMode_i_T kxc;
    cell_wrap_1_FlightMissionMode_i_T kxd;
    cell_wrap_1_FlightMissionMode_i_T kxe;
    cell_wrap_1_FlightMissionMode_i_T kxf;
    cell_wrap_1_FlightMissionMode_i_T ky;
    cell_wrap_1_FlightMissionMode_i_T kyb;
    cell_wrap_1_FlightMissionMode_i_T kyc;
    cell_wrap_1_FlightMissionMode_i_T kyd;
    cell_wrap_1_FlightMissionMode_i_T kye;
    cell_wrap_1_FlightMissionMode_i_T kyf;
    cell_wrap_1_FlightMissionMode_i_T l;
    cell_wrap_1_FlightMissionMode_i_T lab;
    cell_wrap_1_FlightMissionMode_i_T lac;
    cell_wrap_1_FlightMissionMode_i_T lad;
    cell_wrap_1_FlightMissionMode_i_T lae;
    cell_wrap_1_FlightMissionMode_i_T laf;
    cell_wrap_1_FlightMissionMode_i_T lag;
    cell_wrap_1_FlightMissionMode_i_T lb;
    cell_wrap_1_FlightMissionMode_i_T lbb;
    cell_wrap_1_FlightMissionMode_i_T lbc;
    cell_wrap_1_FlightMissionMode_i_T lbd;
    cell_wrap_1_FlightMissionMode_i_T lbe;
    cell_wrap_1_FlightMissionMode_i_T lbf;
    cell_wrap_1_FlightMissionMode_i_T lbg;
    cell_wrap_1_FlightMissionMode_i_T lc;
    cell_wrap_1_FlightMissionMode_i_T lcb;
    cell_wrap_1_FlightMissionMode_i_T lcc;
    cell_wrap_1_FlightMissionMode_i_T lcd;
    cell_wrap_1_FlightMissionMode_i_T lce;
    cell_wrap_1_FlightMissionMode_i_T lcf;
    cell_wrap_1_FlightMissionMode_i_T lcg;
    cell_wrap_1_FlightMissionMode_i_T ld;
    cell_wrap_1_FlightMissionMode_i_T ldb;
    cell_wrap_1_FlightMissionMode_i_T ldc;
    cell_wrap_1_FlightMissionMode_i_T ldd;
    cell_wrap_1_FlightMissionMode_i_T lde;
    cell_wrap_1_FlightMissionMode_i_T ldf;
    cell_wrap_1_FlightMissionMode_i_T ldg;
    cell_wrap_1_FlightMissionMode_i_T le;
    cell_wrap_1_FlightMissionMode_i_T leb;
    cell_wrap_1_FlightMissionMode_i_T lec;
    cell_wrap_1_FlightMissionMode_i_T led;
    cell_wrap_1_FlightMissionMode_i_T lee;
    cell_wrap_1_FlightMissionMode_i_T lef;
    cell_wrap_1_FlightMissionMode_i_T leg;
    cell_wrap_1_FlightMissionMode_i_T lf;
    cell_wrap_1_FlightMissionMode_i_T lfb;
    cell_wrap_1_FlightMissionMode_i_T lfc;
    cell_wrap_1_FlightMissionMode_i_T lfd;
    cell_wrap_1_FlightMissionMode_i_T lfe;
    cell_wrap_1_FlightMissionMode_i_T lff;
    cell_wrap_1_FlightMissionMode_i_T lfg;
    cell_wrap_1_FlightMissionMode_i_T lg;
    cell_wrap_1_FlightMissionMode_i_T lgb;
    cell_wrap_1_FlightMissionMode_i_T lgc;
    cell_wrap_1_FlightMissionMode_i_T lgd;
    cell_wrap_1_FlightMissionMode_i_T lge;
    cell_wrap_1_FlightMissionMode_i_T lgf;
    cell_wrap_1_FlightMissionMode_i_T lgg;
    cell_wrap_1_FlightMissionMode_i_T lh;
    cell_wrap_1_FlightMissionMode_i_T lhb;
    cell_wrap_1_FlightMissionMode_i_T lhc;
    cell_wrap_1_FlightMissionMode_i_T lhd;
    cell_wrap_1_FlightMissionMode_i_T lhe;
    cell_wrap_1_FlightMissionMode_i_T lhf;
    cell_wrap_1_FlightMissionMode_i_T lhg;
    cell_wrap_1_FlightMissionMode_i_T li;
    cell_wrap_1_FlightMissionMode_i_T lib;
    cell_wrap_1_FlightMissionMode_i_T lic;
    cell_wrap_1_FlightMissionMode_i_T lid;
    cell_wrap_1_FlightMissionMode_i_T lie;
    cell_wrap_1_FlightMissionMode_i_T lif;
    cell_wrap_1_FlightMissionMode_i_T lig;
    cell_wrap_1_FlightMissionMode_i_T lj;
    cell_wrap_1_FlightMissionMode_i_T ljb;
    cell_wrap_1_FlightMissionMode_i_T ljc;
    cell_wrap_1_FlightMissionMode_i_T ljd;
    cell_wrap_1_FlightMissionMode_i_T lje;
    cell_wrap_1_FlightMissionMode_i_T ljf;
    cell_wrap_1_FlightMissionMode_i_T ljg;
    cell_wrap_1_FlightMissionMode_i_T lk;
    cell_wrap_1_FlightMissionMode_i_T lkb;
    cell_wrap_1_FlightMissionMode_i_T lkc;
    cell_wrap_1_FlightMissionMode_i_T lkd;
    cell_wrap_1_FlightMissionMode_i_T lke;
    cell_wrap_1_FlightMissionMode_i_T lkf;
    cell_wrap_1_FlightMissionMode_i_T lkg;
    cell_wrap_1_FlightMissionMode_i_T ll;
    cell_wrap_1_FlightMissionMode_i_T llb;
    cell_wrap_1_FlightMissionMode_i_T llc;
    cell_wrap_1_FlightMissionMode_i_T lld;
    cell_wrap_1_FlightMissionMode_i_T lle;
    cell_wrap_1_FlightMissionMode_i_T llf;
    cell_wrap_1_FlightMissionMode_i_T lm;
    cell_wrap_1_FlightMissionMode_i_T lmb;
    cell_wrap_1_FlightMissionMode_i_T lmc;
    cell_wrap_1_FlightMissionMode_i_T lmd;
    cell_wrap_1_FlightMissionMode_i_T lme;
    cell_wrap_1_FlightMissionMode_i_T lmf;
    cell_wrap_1_FlightMissionMode_i_T ln;
    cell_wrap_1_FlightMissionMode_i_T lnb;
    cell_wrap_1_FlightMissionMode_i_T lnc;
    cell_wrap_1_FlightMissionMode_i_T lnd;
    cell_wrap_1_FlightMissionMode_i_T lne;
    cell_wrap_1_FlightMissionMode_i_T lnf;
    cell_wrap_1_FlightMissionMode_i_T lo;
    cell_wrap_1_FlightMissionMode_i_T lob;
    cell_wrap_1_FlightMissionMode_i_T loc;
    cell_wrap_1_FlightMissionMode_i_T lod;
    cell_wrap_1_FlightMissionMode_i_T loe;
    cell_wrap_1_FlightMissionMode_i_T lof;
    cell_wrap_1_FlightMissionMode_i_T lp;
    cell_wrap_1_FlightMissionMode_i_T lpb;
    cell_wrap_1_FlightMissionMode_i_T lpc;
    cell_wrap_1_FlightMissionMode_i_T lpd;
    cell_wrap_1_FlightMissionMode_i_T lpe;
    cell_wrap_1_FlightMissionMode_i_T lpf;
    cell_wrap_1_FlightMissionMode_i_T lq;
    cell_wrap_1_FlightMissionMode_i_T lqb;
    cell_wrap_1_FlightMissionMode_i_T lqc;
    cell_wrap_1_FlightMissionMode_i_T lqd;
    cell_wrap_1_FlightMissionMode_i_T lqe;
    cell_wrap_1_FlightMissionMode_i_T lqf;
    cell_wrap_1_FlightMissionMode_i_T lr;
    cell_wrap_1_FlightMissionMode_i_T lrb;
    cell_wrap_1_FlightMissionMode_i_T lrc;
    cell_wrap_1_FlightMissionMode_i_T lrd;
    cell_wrap_1_FlightMissionMode_i_T lre;
    cell_wrap_1_FlightMissionMode_i_T lrf;
    cell_wrap_1_FlightMissionMode_i_T ls;
    cell_wrap_1_FlightMissionMode_i_T lsb;
    cell_wrap_1_FlightMissionMode_i_T lsc;
    cell_wrap_1_FlightMissionMode_i_T lsd;
    cell_wrap_1_FlightMissionMode_i_T lse;
    cell_wrap_1_FlightMissionMode_i_T lsf;
    cell_wrap_1_FlightMissionMode_i_T lt;
    cell_wrap_1_FlightMissionMode_i_T ltb;
    cell_wrap_1_FlightMissionMode_i_T ltc;
    cell_wrap_1_FlightMissionMode_i_T ltd;
    cell_wrap_1_FlightMissionMode_i_T lte;
    cell_wrap_1_FlightMissionMode_i_T ltf;
    cell_wrap_1_FlightMissionMode_i_T lu;
    cell_wrap_1_FlightMissionMode_i_T lub;
    cell_wrap_1_FlightMissionMode_i_T luc;
    cell_wrap_1_FlightMissionMode_i_T lud;
    cell_wrap_1_FlightMissionMode_i_T lue;
    cell_wrap_1_FlightMissionMode_i_T luf;
    cell_wrap_1_FlightMissionMode_i_T lv;
    cell_wrap_1_FlightMissionMode_i_T lvb;
    cell_wrap_1_FlightMissionMode_i_T lvc;
    cell_wrap_1_FlightMissionMode_i_T lvd;
    cell_wrap_1_FlightMissionMode_i_T lve;
    cell_wrap_1_FlightMissionMode_i_T lvf;
    cell_wrap_1_FlightMissionMode_i_T lw;
    cell_wrap_1_FlightMissionMode_i_T lwb;
    cell_wrap_1_FlightMissionMode_i_T lwc;
    cell_wrap_1_FlightMissionMode_i_T lwd;
    cell_wrap_1_FlightMissionMode_i_T lwe;
    cell_wrap_1_FlightMissionMode_i_T lwf;
    cell_wrap_1_FlightMissionMode_i_T lx;
    cell_wrap_1_FlightMissionMode_i_T lxb;
    cell_wrap_1_FlightMissionMode_i_T lxc;
    cell_wrap_1_FlightMissionMode_i_T lxd;
    cell_wrap_1_FlightMissionMode_i_T lxe;
    cell_wrap_1_FlightMissionMode_i_T lxf;
    cell_wrap_1_FlightMissionMode_i_T ly;
    cell_wrap_1_FlightMissionMode_i_T lyb;
    cell_wrap_1_FlightMissionMode_i_T lyc;
    cell_wrap_1_FlightMissionMode_i_T lyd;
    cell_wrap_1_FlightMissionMode_i_T lye;
    cell_wrap_1_FlightMissionMode_i_T lyf;
    cell_wrap_1_FlightMissionMode_i_T m;
    cell_wrap_1_FlightMissionMode_i_T mab;
    cell_wrap_1_FlightMissionMode_i_T mac;
    cell_wrap_1_FlightMissionMode_i_T mad;
    cell_wrap_1_FlightMissionMode_i_T mae;
    cell_wrap_1_FlightMissionMode_i_T maf;
    cell_wrap_1_FlightMissionMode_i_T mag;
    cell_wrap_1_FlightMissionMode_i_T mb;
    cell_wrap_1_FlightMissionMode_i_T mbb;
    cell_wrap_1_FlightMissionMode_i_T mbc;
    cell_wrap_1_FlightMissionMode_i_T mbd;
    cell_wrap_1_FlightMissionMode_i_T mbe;
    cell_wrap_1_FlightMissionMode_i_T mbf;
    cell_wrap_1_FlightMissionMode_i_T mbg;
    cell_wrap_1_FlightMissionMode_i_T mc;
    cell_wrap_1_FlightMissionMode_i_T mcb;
    cell_wrap_1_FlightMissionMode_i_T mcc;
    cell_wrap_1_FlightMissionMode_i_T mcd;
    cell_wrap_1_FlightMissionMode_i_T mce;
    cell_wrap_1_FlightMissionMode_i_T mcf;
    cell_wrap_1_FlightMissionMode_i_T mcg;
    cell_wrap_1_FlightMissionMode_i_T md;
    cell_wrap_1_FlightMissionMode_i_T mdb;
    cell_wrap_1_FlightMissionMode_i_T mdc;
    cell_wrap_1_FlightMissionMode_i_T mdd;
    cell_wrap_1_FlightMissionMode_i_T mde;
    cell_wrap_1_FlightMissionMode_i_T mdf;
    cell_wrap_1_FlightMissionMode_i_T mdg;
    cell_wrap_1_FlightMissionMode_i_T me;
    cell_wrap_1_FlightMissionMode_i_T meb;
    cell_wrap_1_FlightMissionMode_i_T mec;
    cell_wrap_1_FlightMissionMode_i_T med;
    cell_wrap_1_FlightMissionMode_i_T mee;
    cell_wrap_1_FlightMissionMode_i_T mef;
    cell_wrap_1_FlightMissionMode_i_T meg;
    cell_wrap_1_FlightMissionMode_i_T mf;
    cell_wrap_1_FlightMissionMode_i_T mfb;
    cell_wrap_1_FlightMissionMode_i_T mfc;
    cell_wrap_1_FlightMissionMode_i_T mfd;
    cell_wrap_1_FlightMissionMode_i_T mfe;
    cell_wrap_1_FlightMissionMode_i_T mff;
    cell_wrap_1_FlightMissionMode_i_T mfg;
    cell_wrap_1_FlightMissionMode_i_T mg;
    cell_wrap_1_FlightMissionMode_i_T mgb;
    cell_wrap_1_FlightMissionMode_i_T mgc;
    cell_wrap_1_FlightMissionMode_i_T mgd;
    cell_wrap_1_FlightMissionMode_i_T mge;
    cell_wrap_1_FlightMissionMode_i_T mgf;
    cell_wrap_1_FlightMissionMode_i_T mgg;
    cell_wrap_1_FlightMissionMode_i_T mh;
    cell_wrap_1_FlightMissionMode_i_T mhb;
    cell_wrap_1_FlightMissionMode_i_T mhc;
    cell_wrap_1_FlightMissionMode_i_T mhd;
    cell_wrap_1_FlightMissionMode_i_T mhe;
    cell_wrap_1_FlightMissionMode_i_T mhf;
    cell_wrap_1_FlightMissionMode_i_T mhg;
    cell_wrap_1_FlightMissionMode_i_T mi;
    cell_wrap_1_FlightMissionMode_i_T mib;
    cell_wrap_1_FlightMissionMode_i_T mic;
    cell_wrap_1_FlightMissionMode_i_T mid;
    cell_wrap_1_FlightMissionMode_i_T mie;
    cell_wrap_1_FlightMissionMode_i_T mif;
    cell_wrap_1_FlightMissionMode_i_T mig;
    cell_wrap_1_FlightMissionMode_i_T mj;
    cell_wrap_1_FlightMissionMode_i_T mjb;
    cell_wrap_1_FlightMissionMode_i_T mjc;
    cell_wrap_1_FlightMissionMode_i_T mjd;
    cell_wrap_1_FlightMissionMode_i_T mje;
    cell_wrap_1_FlightMissionMode_i_T mjf;
    cell_wrap_1_FlightMissionMode_i_T mjg;
    cell_wrap_1_FlightMissionMode_i_T mk;
    cell_wrap_1_FlightMissionMode_i_T mkb;
    cell_wrap_1_FlightMissionMode_i_T mkc;
    cell_wrap_1_FlightMissionMode_i_T mkd;
    cell_wrap_1_FlightMissionMode_i_T mke;
    cell_wrap_1_FlightMissionMode_i_T mkf;
    cell_wrap_1_FlightMissionMode_i_T mkg;
    cell_wrap_1_FlightMissionMode_i_T ml;
    cell_wrap_1_FlightMissionMode_i_T mlb;
    cell_wrap_1_FlightMissionMode_i_T mlc;
    cell_wrap_1_FlightMissionMode_i_T mld;
    cell_wrap_1_FlightMissionMode_i_T mle;
    cell_wrap_1_FlightMissionMode_i_T mlf;
    cell_wrap_1_FlightMissionMode_i_T mm;
    cell_wrap_1_FlightMissionMode_i_T mmb;
    cell_wrap_1_FlightMissionMode_i_T mmc;
    cell_wrap_1_FlightMissionMode_i_T mmd;
    cell_wrap_1_FlightMissionMode_i_T mme;
    cell_wrap_1_FlightMissionMode_i_T mmf;
    cell_wrap_1_FlightMissionMode_i_T mn;
    cell_wrap_1_FlightMissionMode_i_T mnb;
    cell_wrap_1_FlightMissionMode_i_T mnc;
    cell_wrap_1_FlightMissionMode_i_T mnd;
    cell_wrap_1_FlightMissionMode_i_T mne;
    cell_wrap_1_FlightMissionMode_i_T mnf;
    cell_wrap_1_FlightMissionMode_i_T mo;
    cell_wrap_1_FlightMissionMode_i_T mob;
    cell_wrap_1_FlightMissionMode_i_T moc;
    cell_wrap_1_FlightMissionMode_i_T moe;
    cell_wrap_1_FlightMissionMode_i_T mof;
    cell_wrap_1_FlightMissionMode_i_T mp;
    cell_wrap_1_FlightMissionMode_i_T mpb;
    cell_wrap_1_FlightMissionMode_i_T mpc;
    cell_wrap_1_FlightMissionMode_i_T mpd;
    cell_wrap_1_FlightMissionMode_i_T mpe;
    cell_wrap_1_FlightMissionMode_i_T mpf;
    cell_wrap_1_FlightMissionMode_i_T mq;
    cell_wrap_1_FlightMissionMode_i_T mqb;
    cell_wrap_1_FlightMissionMode_i_T mqc;
    cell_wrap_1_FlightMissionMode_i_T mqd;
    cell_wrap_1_FlightMissionMode_i_T mqe;
    cell_wrap_1_FlightMissionMode_i_T mqf;
    cell_wrap_1_FlightMissionMode_i_T mr;
    cell_wrap_1_FlightMissionMode_i_T mrb;
    cell_wrap_1_FlightMissionMode_i_T mrc;
    cell_wrap_1_FlightMissionMode_i_T mrd;
    cell_wrap_1_FlightMissionMode_i_T mre;
    cell_wrap_1_FlightMissionMode_i_T mrf;
    cell_wrap_1_FlightMissionMode_i_T ms;
    cell_wrap_1_FlightMissionMode_i_T msb;
    cell_wrap_1_FlightMissionMode_i_T msc;
    cell_wrap_1_FlightMissionMode_i_T msd;
    cell_wrap_1_FlightMissionMode_i_T mse;
    cell_wrap_1_FlightMissionMode_i_T msf;
    cell_wrap_1_FlightMissionMode_i_T mt;
    cell_wrap_1_FlightMissionMode_i_T mtb;
    cell_wrap_1_FlightMissionMode_i_T mtc;
    cell_wrap_1_FlightMissionMode_i_T mtd;
    cell_wrap_1_FlightMissionMode_i_T mte;
    cell_wrap_1_FlightMissionMode_i_T mtf;
    cell_wrap_1_FlightMissionMode_i_T mu;
    cell_wrap_1_FlightMissionMode_i_T mub;
    cell_wrap_1_FlightMissionMode_i_T muc;
    cell_wrap_1_FlightMissionMode_i_T mud;
    cell_wrap_1_FlightMissionMode_i_T mue;
    cell_wrap_1_FlightMissionMode_i_T muf;
    cell_wrap_1_FlightMissionMode_i_T mv;
    cell_wrap_1_FlightMissionMode_i_T mvb;
    cell_wrap_1_FlightMissionMode_i_T mvc;
    cell_wrap_1_FlightMissionMode_i_T mvd;
    cell_wrap_1_FlightMissionMode_i_T mve;
    cell_wrap_1_FlightMissionMode_i_T mvf;
    cell_wrap_1_FlightMissionMode_i_T mw;
    cell_wrap_1_FlightMissionMode_i_T mwb;
    cell_wrap_1_FlightMissionMode_i_T mwc;
    cell_wrap_1_FlightMissionMode_i_T mwd;
    cell_wrap_1_FlightMissionMode_i_T mwe;
    cell_wrap_1_FlightMissionMode_i_T mwf;
    cell_wrap_1_FlightMissionMode_i_T mx;
    cell_wrap_1_FlightMissionMode_i_T mxb;
    cell_wrap_1_FlightMissionMode_i_T mxc;
    cell_wrap_1_FlightMissionMode_i_T mxd;
    cell_wrap_1_FlightMissionMode_i_T mxe;
    cell_wrap_1_FlightMissionMode_i_T mxf;
    cell_wrap_1_FlightMissionMode_i_T my;
    cell_wrap_1_FlightMissionMode_i_T myb;
    cell_wrap_1_FlightMissionMode_i_T myc;
    cell_wrap_1_FlightMissionMode_i_T myd;
    cell_wrap_1_FlightMissionMode_i_T mye;
    cell_wrap_1_FlightMissionMode_i_T myf;
    cell_wrap_1_FlightMissionMode_i_T n;
    cell_wrap_1_FlightMissionMode_i_T nab;
    cell_wrap_1_FlightMissionMode_i_T nac;
    cell_wrap_1_FlightMissionMode_i_T nad;
    cell_wrap_1_FlightMissionMode_i_T nae;
    cell_wrap_1_FlightMissionMode_i_T naf;
    cell_wrap_1_FlightMissionMode_i_T nag;
    cell_wrap_1_FlightMissionMode_i_T nb;
    cell_wrap_1_FlightMissionMode_i_T nbb;
    cell_wrap_1_FlightMissionMode_i_T nbc;
    cell_wrap_1_FlightMissionMode_i_T nbd;
    cell_wrap_1_FlightMissionMode_i_T nbe;
    cell_wrap_1_FlightMissionMode_i_T nbf;
    cell_wrap_1_FlightMissionMode_i_T nbg;
    cell_wrap_1_FlightMissionMode_i_T nc;
    cell_wrap_1_FlightMissionMode_i_T ncb;
    cell_wrap_1_FlightMissionMode_i_T ncc;
    cell_wrap_1_FlightMissionMode_i_T ncd;
    cell_wrap_1_FlightMissionMode_i_T nce;
    cell_wrap_1_FlightMissionMode_i_T ncf;
    cell_wrap_1_FlightMissionMode_i_T ncg;
    cell_wrap_1_FlightMissionMode_i_T nd;
    cell_wrap_1_FlightMissionMode_i_T ndb;
    cell_wrap_1_FlightMissionMode_i_T ndc;
    cell_wrap_1_FlightMissionMode_i_T ndd;
    cell_wrap_1_FlightMissionMode_i_T nde;
    cell_wrap_1_FlightMissionMode_i_T ndf;
    cell_wrap_1_FlightMissionMode_i_T ndg;
    cell_wrap_1_FlightMissionMode_i_T ne;
    cell_wrap_1_FlightMissionMode_i_T neb;
    cell_wrap_1_FlightMissionMode_i_T nec;
    cell_wrap_1_FlightMissionMode_i_T ned;
    cell_wrap_1_FlightMissionMode_i_T nee;
    cell_wrap_1_FlightMissionMode_i_T nef;
    cell_wrap_1_FlightMissionMode_i_T neg;
    cell_wrap_1_FlightMissionMode_i_T nf;
    cell_wrap_1_FlightMissionMode_i_T nfb;
    cell_wrap_1_FlightMissionMode_i_T nfc;
    cell_wrap_1_FlightMissionMode_i_T nfd;
    cell_wrap_1_FlightMissionMode_i_T nfe;
    cell_wrap_1_FlightMissionMode_i_T nff;
    cell_wrap_1_FlightMissionMode_i_T nfg;
    cell_wrap_1_FlightMissionMode_i_T ng;
    cell_wrap_1_FlightMissionMode_i_T ngb;
    cell_wrap_1_FlightMissionMode_i_T ngc;
    cell_wrap_1_FlightMissionMode_i_T ngd;
    cell_wrap_1_FlightMissionMode_i_T nge;
    cell_wrap_1_FlightMissionMode_i_T ngf;
    cell_wrap_1_FlightMissionMode_i_T ngg;
    cell_wrap_1_FlightMissionMode_i_T nh;
    cell_wrap_1_FlightMissionMode_i_T nhb;
    cell_wrap_1_FlightMissionMode_i_T nhc;
    cell_wrap_1_FlightMissionMode_i_T nhd;
    cell_wrap_1_FlightMissionMode_i_T nhe;
    cell_wrap_1_FlightMissionMode_i_T nhf;
    cell_wrap_1_FlightMissionMode_i_T nhg;
    cell_wrap_1_FlightMissionMode_i_T ni;
    cell_wrap_1_FlightMissionMode_i_T nib;
    cell_wrap_1_FlightMissionMode_i_T nic;
    cell_wrap_1_FlightMissionMode_i_T nid;
    cell_wrap_1_FlightMissionMode_i_T nie;
    cell_wrap_1_FlightMissionMode_i_T nif;
    cell_wrap_1_FlightMissionMode_i_T nig;
    cell_wrap_1_FlightMissionMode_i_T nj;
    cell_wrap_1_FlightMissionMode_i_T njb;
    cell_wrap_1_FlightMissionMode_i_T njc;
    cell_wrap_1_FlightMissionMode_i_T njd;
    cell_wrap_1_FlightMissionMode_i_T nje;
    cell_wrap_1_FlightMissionMode_i_T njf;
    cell_wrap_1_FlightMissionMode_i_T njg;
    cell_wrap_1_FlightMissionMode_i_T nk;
    cell_wrap_1_FlightMissionMode_i_T nkb;
    cell_wrap_1_FlightMissionMode_i_T nkc;
    cell_wrap_1_FlightMissionMode_i_T nkd;
    cell_wrap_1_FlightMissionMode_i_T nke;
    cell_wrap_1_FlightMissionMode_i_T nkf;
    cell_wrap_1_FlightMissionMode_i_T nl;
    cell_wrap_1_FlightMissionMode_i_T nlb;
    cell_wrap_1_FlightMissionMode_i_T nlc;
    cell_wrap_1_FlightMissionMode_i_T nld;
    cell_wrap_1_FlightMissionMode_i_T nle;
    cell_wrap_1_FlightMissionMode_i_T nlf;
    cell_wrap_1_FlightMissionMode_i_T nm;
    cell_wrap_1_FlightMissionMode_i_T nmb;
    cell_wrap_1_FlightMissionMode_i_T nmc;
    cell_wrap_1_FlightMissionMode_i_T nmd;
    cell_wrap_1_FlightMissionMode_i_T nme;
    cell_wrap_1_FlightMissionMode_i_T nmf;
    cell_wrap_1_FlightMissionMode_i_T nn;
    cell_wrap_1_FlightMissionMode_i_T nnb;
    cell_wrap_1_FlightMissionMode_i_T nnc;
    cell_wrap_1_FlightMissionMode_i_T nnd;
    cell_wrap_1_FlightMissionMode_i_T nne;
    cell_wrap_1_FlightMissionMode_i_T nnf;
    cell_wrap_1_FlightMissionMode_i_T no;
    cell_wrap_1_FlightMissionMode_i_T nob;
    cell_wrap_1_FlightMissionMode_i_T noc;
    cell_wrap_1_FlightMissionMode_i_T nod;
    cell_wrap_1_FlightMissionMode_i_T noe;
    cell_wrap_1_FlightMissionMode_i_T nof;
    cell_wrap_1_FlightMissionMode_i_T np;
    cell_wrap_1_FlightMissionMode_i_T npb;
    cell_wrap_1_FlightMissionMode_i_T npc;
    cell_wrap_1_FlightMissionMode_i_T npd;
    cell_wrap_1_FlightMissionMode_i_T npe;
    cell_wrap_1_FlightMissionMode_i_T npf;
    cell_wrap_1_FlightMissionMode_i_T nq;
    cell_wrap_1_FlightMissionMode_i_T nqb;
    cell_wrap_1_FlightMissionMode_i_T nqc;
    cell_wrap_1_FlightMissionMode_i_T nqd;
    cell_wrap_1_FlightMissionMode_i_T nqe;
    cell_wrap_1_FlightMissionMode_i_T nqf;
    cell_wrap_1_FlightMissionMode_i_T nr;
    cell_wrap_1_FlightMissionMode_i_T nrb;
    cell_wrap_1_FlightMissionMode_i_T nrc;
    cell_wrap_1_FlightMissionMode_i_T nrd;
    cell_wrap_1_FlightMissionMode_i_T nre;
    cell_wrap_1_FlightMissionMode_i_T nrf;
    cell_wrap_1_FlightMissionMode_i_T ns;
    cell_wrap_1_FlightMissionMode_i_T nsb;
    cell_wrap_1_FlightMissionMode_i_T nsc;
    cell_wrap_1_FlightMissionMode_i_T nsd;
    cell_wrap_1_FlightMissionMode_i_T nse;
    cell_wrap_1_FlightMissionMode_i_T nsf;
    cell_wrap_1_FlightMissionMode_i_T nt;
    cell_wrap_1_FlightMissionMode_i_T ntb;
    cell_wrap_1_FlightMissionMode_i_T ntc;
    cell_wrap_1_FlightMissionMode_i_T ntd;
    cell_wrap_1_FlightMissionMode_i_T nte;
    cell_wrap_1_FlightMissionMode_i_T ntf;
    cell_wrap_1_FlightMissionMode_i_T nu;
    cell_wrap_1_FlightMissionMode_i_T nub;
    cell_wrap_1_FlightMissionMode_i_T nuc;
    cell_wrap_1_FlightMissionMode_i_T nud;
    cell_wrap_1_FlightMissionMode_i_T nue;
    cell_wrap_1_FlightMissionMode_i_T nuf;
    cell_wrap_1_FlightMissionMode_i_T nv;
    cell_wrap_1_FlightMissionMode_i_T nvb;
    cell_wrap_1_FlightMissionMode_i_T nvc;
    cell_wrap_1_FlightMissionMode_i_T nvd;
    cell_wrap_1_FlightMissionMode_i_T nve;
    cell_wrap_1_FlightMissionMode_i_T nvf;
    cell_wrap_1_FlightMissionMode_i_T nw;
    cell_wrap_1_FlightMissionMode_i_T nwb;
    cell_wrap_1_FlightMissionMode_i_T nwc;
    cell_wrap_1_FlightMissionMode_i_T nwd;
    cell_wrap_1_FlightMissionMode_i_T nwe;
    cell_wrap_1_FlightMissionMode_i_T nwf;
    cell_wrap_1_FlightMissionMode_i_T nx;
    cell_wrap_1_FlightMissionMode_i_T nxb;
    cell_wrap_1_FlightMissionMode_i_T nxc;
    cell_wrap_1_FlightMissionMode_i_T nxd;
    cell_wrap_1_FlightMissionMode_i_T nxe;
    cell_wrap_1_FlightMissionMode_i_T nxf;
    cell_wrap_1_FlightMissionMode_i_T ny;
    cell_wrap_1_FlightMissionMode_i_T nyb;
    cell_wrap_1_FlightMissionMode_i_T nyc;
    cell_wrap_1_FlightMissionMode_i_T nyd;
    cell_wrap_1_FlightMissionMode_i_T nye;
    cell_wrap_1_FlightMissionMode_i_T nyf;
    cell_wrap_1_FlightMissionMode_i_T o;
    cell_wrap_1_FlightMissionMode_i_T oab;
    cell_wrap_1_FlightMissionMode_i_T oac;
    cell_wrap_1_FlightMissionMode_i_T oad;
    cell_wrap_1_FlightMissionMode_i_T oae;
    cell_wrap_1_FlightMissionMode_i_T oaf;
    cell_wrap_1_FlightMissionMode_i_T oag;
    cell_wrap_1_FlightMissionMode_i_T ob;
    cell_wrap_1_FlightMissionMode_i_T obb;
    cell_wrap_1_FlightMissionMode_i_T obc;
    cell_wrap_1_FlightMissionMode_i_T obd;
    cell_wrap_1_FlightMissionMode_i_T obe;
    cell_wrap_1_FlightMissionMode_i_T obf;
    cell_wrap_1_FlightMissionMode_i_T obg;
    cell_wrap_1_FlightMissionMode_i_T oc;
    cell_wrap_1_FlightMissionMode_i_T ocb;
    cell_wrap_1_FlightMissionMode_i_T occ;
    cell_wrap_1_FlightMissionMode_i_T ocd;
    cell_wrap_1_FlightMissionMode_i_T oce;
    cell_wrap_1_FlightMissionMode_i_T ocf;
    cell_wrap_1_FlightMissionMode_i_T ocg;
    cell_wrap_1_FlightMissionMode_i_T od;
    cell_wrap_1_FlightMissionMode_i_T odb;
    cell_wrap_1_FlightMissionMode_i_T odc;
    cell_wrap_1_FlightMissionMode_i_T odd;
    cell_wrap_1_FlightMissionMode_i_T ode;
    cell_wrap_1_FlightMissionMode_i_T odf;
    cell_wrap_1_FlightMissionMode_i_T odg;
    cell_wrap_1_FlightMissionMode_i_T oe;
    cell_wrap_1_FlightMissionMode_i_T oeb;
    cell_wrap_1_FlightMissionMode_i_T oec;
    cell_wrap_1_FlightMissionMode_i_T oed;
    cell_wrap_1_FlightMissionMode_i_T oee;
    cell_wrap_1_FlightMissionMode_i_T oef;
    cell_wrap_1_FlightMissionMode_i_T oeg;
    cell_wrap_1_FlightMissionMode_i_T of;
    cell_wrap_1_FlightMissionMode_i_T ofb;
    cell_wrap_1_FlightMissionMode_i_T ofc;
    cell_wrap_1_FlightMissionMode_i_T ofd;
    cell_wrap_1_FlightMissionMode_i_T ofe;
    cell_wrap_1_FlightMissionMode_i_T off;
    cell_wrap_1_FlightMissionMode_i_T ofg;
    cell_wrap_1_FlightMissionMode_i_T og;
    cell_wrap_1_FlightMissionMode_i_T ogb;
    cell_wrap_1_FlightMissionMode_i_T ogc;
    cell_wrap_1_FlightMissionMode_i_T ogd;
    cell_wrap_1_FlightMissionMode_i_T oge;
    cell_wrap_1_FlightMissionMode_i_T ogf;
    cell_wrap_1_FlightMissionMode_i_T ogg;
    cell_wrap_1_FlightMissionMode_i_T oh;
    cell_wrap_1_FlightMissionMode_i_T ohb;
    cell_wrap_1_FlightMissionMode_i_T ohc;
    cell_wrap_1_FlightMissionMode_i_T ohd;
    cell_wrap_1_FlightMissionMode_i_T ohe;
    cell_wrap_1_FlightMissionMode_i_T ohf;
    cell_wrap_1_FlightMissionMode_i_T ohg;
    cell_wrap_1_FlightMissionMode_i_T oi;
    cell_wrap_1_FlightMissionMode_i_T oib;
    cell_wrap_1_FlightMissionMode_i_T oic;
    cell_wrap_1_FlightMissionMode_i_T oid;
    cell_wrap_1_FlightMissionMode_i_T oie;
    cell_wrap_1_FlightMissionMode_i_T oif;
    cell_wrap_1_FlightMissionMode_i_T oig;
    cell_wrap_1_FlightMissionMode_i_T oj;
    cell_wrap_1_FlightMissionMode_i_T ojb;
    cell_wrap_1_FlightMissionMode_i_T ojc;
    cell_wrap_1_FlightMissionMode_i_T ojd;
    cell_wrap_1_FlightMissionMode_i_T oje;
    cell_wrap_1_FlightMissionMode_i_T ojf;
    cell_wrap_1_FlightMissionMode_i_T ojg;
    cell_wrap_1_FlightMissionMode_i_T ok;
    cell_wrap_1_FlightMissionMode_i_T okb;
    cell_wrap_1_FlightMissionMode_i_T okc;
    cell_wrap_1_FlightMissionMode_i_T okd;
    cell_wrap_1_FlightMissionMode_i_T oke;
    cell_wrap_1_FlightMissionMode_i_T okf;
    cell_wrap_1_FlightMissionMode_i_T ol;
    cell_wrap_1_FlightMissionMode_i_T olb;
    cell_wrap_1_FlightMissionMode_i_T olc;
    cell_wrap_1_FlightMissionMode_i_T old;
    cell_wrap_1_FlightMissionMode_i_T ole;
    cell_wrap_1_FlightMissionMode_i_T olf;
    cell_wrap_1_FlightMissionMode_i_T om;
    cell_wrap_1_FlightMissionMode_i_T omb;
    cell_wrap_1_FlightMissionMode_i_T omc;
    cell_wrap_1_FlightMissionMode_i_T omd;
    cell_wrap_1_FlightMissionMode_i_T ome;
    cell_wrap_1_FlightMissionMode_i_T omf;
    cell_wrap_1_FlightMissionMode_i_T on;
    cell_wrap_1_FlightMissionMode_i_T onb;
    cell_wrap_1_FlightMissionMode_i_T onc;
    cell_wrap_1_FlightMissionMode_i_T ond;
    cell_wrap_1_FlightMissionMode_i_T one;
    cell_wrap_1_FlightMissionMode_i_T onf;
    cell_wrap_1_FlightMissionMode_i_T oo;
    cell_wrap_1_FlightMissionMode_i_T oob;
    cell_wrap_1_FlightMissionMode_i_T ooc;
    cell_wrap_1_FlightMissionMode_i_T ood;
    cell_wrap_1_FlightMissionMode_i_T ooe;
    cell_wrap_1_FlightMissionMode_i_T oof;
    cell_wrap_1_FlightMissionMode_i_T op;
    cell_wrap_1_FlightMissionMode_i_T opb;
    cell_wrap_1_FlightMissionMode_i_T opc;
    cell_wrap_1_FlightMissionMode_i_T opd;
    cell_wrap_1_FlightMissionMode_i_T ope;
    cell_wrap_1_FlightMissionMode_i_T opf;
    cell_wrap_1_FlightMissionMode_i_T oq;
    cell_wrap_1_FlightMissionMode_i_T oqb;
    cell_wrap_1_FlightMissionMode_i_T oqc;
    cell_wrap_1_FlightMissionMode_i_T oqd;
    cell_wrap_1_FlightMissionMode_i_T oqe;
    cell_wrap_1_FlightMissionMode_i_T oqf;
    cell_wrap_1_FlightMissionMode_i_T orb;
    cell_wrap_1_FlightMissionMode_i_T orc;
    cell_wrap_1_FlightMissionMode_i_T ord;
    cell_wrap_1_FlightMissionMode_i_T ore;
    cell_wrap_1_FlightMissionMode_i_T orf;
    cell_wrap_1_FlightMissionMode_i_T os;
    cell_wrap_1_FlightMissionMode_i_T osb;
    cell_wrap_1_FlightMissionMode_i_T osc;
    cell_wrap_1_FlightMissionMode_i_T osd;
    cell_wrap_1_FlightMissionMode_i_T ose;
    cell_wrap_1_FlightMissionMode_i_T osf;
    cell_wrap_1_FlightMissionMode_i_T ot;
    cell_wrap_1_FlightMissionMode_i_T otb;
    cell_wrap_1_FlightMissionMode_i_T otc;
    cell_wrap_1_FlightMissionMode_i_T otd;
    cell_wrap_1_FlightMissionMode_i_T ote;
    cell_wrap_1_FlightMissionMode_i_T otf;
    cell_wrap_1_FlightMissionMode_i_T ou;
    cell_wrap_1_FlightMissionMode_i_T oub;
    cell_wrap_1_FlightMissionMode_i_T ouc;
    cell_wrap_1_FlightMissionMode_i_T oud;
    cell_wrap_1_FlightMissionMode_i_T oue;
    cell_wrap_1_FlightMissionMode_i_T ouf;
    cell_wrap_1_FlightMissionMode_i_T ov;
    cell_wrap_1_FlightMissionMode_i_T ovb;
    cell_wrap_1_FlightMissionMode_i_T ovc;
    cell_wrap_1_FlightMissionMode_i_T ovd;
    cell_wrap_1_FlightMissionMode_i_T ove;
    cell_wrap_1_FlightMissionMode_i_T ovf;
    cell_wrap_1_FlightMissionMode_i_T ow;
    cell_wrap_1_FlightMissionMode_i_T owb;
    cell_wrap_1_FlightMissionMode_i_T owc;
    cell_wrap_1_FlightMissionMode_i_T owd;
    cell_wrap_1_FlightMissionMode_i_T owe;
    cell_wrap_1_FlightMissionMode_i_T owf;
    cell_wrap_1_FlightMissionMode_i_T ox;
    cell_wrap_1_FlightMissionMode_i_T oxb;
    cell_wrap_1_FlightMissionMode_i_T oxc;
    cell_wrap_1_FlightMissionMode_i_T oxd;
    cell_wrap_1_FlightMissionMode_i_T oxe;
    cell_wrap_1_FlightMissionMode_i_T oxf;
    cell_wrap_1_FlightMissionMode_i_T oy;
    cell_wrap_1_FlightMissionMode_i_T oyb;
    cell_wrap_1_FlightMissionMode_i_T oyc;
    cell_wrap_1_FlightMissionMode_i_T oyd;
    cell_wrap_1_FlightMissionMode_i_T oye;
    cell_wrap_1_FlightMissionMode_i_T oyf;
    cell_wrap_1_FlightMissionMode_i_T p;
    cell_wrap_1_FlightMissionMode_i_T pab;
    cell_wrap_1_FlightMissionMode_i_T pac;
    cell_wrap_1_FlightMissionMode_i_T pad;
    cell_wrap_1_FlightMissionMode_i_T pae;
    cell_wrap_1_FlightMissionMode_i_T paf;
    cell_wrap_1_FlightMissionMode_i_T pag;
    cell_wrap_1_FlightMissionMode_i_T pb;
    cell_wrap_1_FlightMissionMode_i_T pbb;
    cell_wrap_1_FlightMissionMode_i_T pbc;
    cell_wrap_1_FlightMissionMode_i_T pbd;
    cell_wrap_1_FlightMissionMode_i_T pbe;
    cell_wrap_1_FlightMissionMode_i_T pbf;
    cell_wrap_1_FlightMissionMode_i_T pbg;
    cell_wrap_1_FlightMissionMode_i_T pc;
    cell_wrap_1_FlightMissionMode_i_T pcb;
    cell_wrap_1_FlightMissionMode_i_T pcc;
    cell_wrap_1_FlightMissionMode_i_T pcd;
    cell_wrap_1_FlightMissionMode_i_T pce;
    cell_wrap_1_FlightMissionMode_i_T pcf;
    cell_wrap_1_FlightMissionMode_i_T pcg;
    cell_wrap_1_FlightMissionMode_i_T pd;
    cell_wrap_1_FlightMissionMode_i_T pdb;
    cell_wrap_1_FlightMissionMode_i_T pdc;
    cell_wrap_1_FlightMissionMode_i_T pdd;
    cell_wrap_1_FlightMissionMode_i_T pde;
    cell_wrap_1_FlightMissionMode_i_T pdf;
    cell_wrap_1_FlightMissionMode_i_T pdg;
    cell_wrap_1_FlightMissionMode_i_T pe;
    cell_wrap_1_FlightMissionMode_i_T peb;
    cell_wrap_1_FlightMissionMode_i_T pec;
    cell_wrap_1_FlightMissionMode_i_T ped;
    cell_wrap_1_FlightMissionMode_i_T pee;
    cell_wrap_1_FlightMissionMode_i_T pef;
    cell_wrap_1_FlightMissionMode_i_T peg;
    cell_wrap_1_FlightMissionMode_i_T pf;
    cell_wrap_1_FlightMissionMode_i_T pfb;
    cell_wrap_1_FlightMissionMode_i_T pfc;
    cell_wrap_1_FlightMissionMode_i_T pfd;
    cell_wrap_1_FlightMissionMode_i_T pfe;
    cell_wrap_1_FlightMissionMode_i_T pff;
    cell_wrap_1_FlightMissionMode_i_T pfg;
    cell_wrap_1_FlightMissionMode_i_T pg;
    cell_wrap_1_FlightMissionMode_i_T pgb;
    cell_wrap_1_FlightMissionMode_i_T pgc;
    cell_wrap_1_FlightMissionMode_i_T pgd;
    cell_wrap_1_FlightMissionMode_i_T pge;
    cell_wrap_1_FlightMissionMode_i_T pgf;
    cell_wrap_1_FlightMissionMode_i_T pgg;
    cell_wrap_1_FlightMissionMode_i_T ph;
    cell_wrap_1_FlightMissionMode_i_T phb;
    cell_wrap_1_FlightMissionMode_i_T phc;
    cell_wrap_1_FlightMissionMode_i_T phd;
    cell_wrap_1_FlightMissionMode_i_T phe;
    cell_wrap_1_FlightMissionMode_i_T phf;
    cell_wrap_1_FlightMissionMode_i_T phg;
    cell_wrap_1_FlightMissionMode_i_T pi;
    cell_wrap_1_FlightMissionMode_i_T pib;
    cell_wrap_1_FlightMissionMode_i_T pic;
    cell_wrap_1_FlightMissionMode_i_T pid;
    cell_wrap_1_FlightMissionMode_i_T pie;
    cell_wrap_1_FlightMissionMode_i_T pif;
    cell_wrap_1_FlightMissionMode_i_T pig;
    cell_wrap_1_FlightMissionMode_i_T pj;
    cell_wrap_1_FlightMissionMode_i_T pjb;
    cell_wrap_1_FlightMissionMode_i_T pjc;
    cell_wrap_1_FlightMissionMode_i_T pjd;
    cell_wrap_1_FlightMissionMode_i_T pje;
    cell_wrap_1_FlightMissionMode_i_T pjf;
    cell_wrap_1_FlightMissionMode_i_T pjg;
    cell_wrap_1_FlightMissionMode_i_T pk;
    cell_wrap_1_FlightMissionMode_i_T pkb;
    cell_wrap_1_FlightMissionMode_i_T pkc;
    cell_wrap_1_FlightMissionMode_i_T pkd;
    cell_wrap_1_FlightMissionMode_i_T pke;
    cell_wrap_1_FlightMissionMode_i_T pkf;
    cell_wrap_1_FlightMissionMode_i_T pl;
    cell_wrap_1_FlightMissionMode_i_T plb;
    cell_wrap_1_FlightMissionMode_i_T plc;
    cell_wrap_1_FlightMissionMode_i_T pld;
    cell_wrap_1_FlightMissionMode_i_T ple;
    cell_wrap_1_FlightMissionMode_i_T plf;
    cell_wrap_1_FlightMissionMode_i_T pm;
    cell_wrap_1_FlightMissionMode_i_T pmb;
    cell_wrap_1_FlightMissionMode_i_T pmc;
    cell_wrap_1_FlightMissionMode_i_T pmd;
    cell_wrap_1_FlightMissionMode_i_T pme;
    cell_wrap_1_FlightMissionMode_i_T pmf;
    cell_wrap_1_FlightMissionMode_i_T pn;
    cell_wrap_1_FlightMissionMode_i_T pnb;
    cell_wrap_1_FlightMissionMode_i_T pnc;
    cell_wrap_1_FlightMissionMode_i_T pnd;
    cell_wrap_1_FlightMissionMode_i_T pne;
    cell_wrap_1_FlightMissionMode_i_T pnf;
    cell_wrap_1_FlightMissionMode_i_T po;
    cell_wrap_1_FlightMissionMode_i_T pob;
    cell_wrap_1_FlightMissionMode_i_T poc;
    cell_wrap_1_FlightMissionMode_i_T pod;
    cell_wrap_1_FlightMissionMode_i_T poe;
    cell_wrap_1_FlightMissionMode_i_T pof;
    cell_wrap_1_FlightMissionMode_i_T pp;
    cell_wrap_1_FlightMissionMode_i_T ppb;
    cell_wrap_1_FlightMissionMode_i_T ppc;
    cell_wrap_1_FlightMissionMode_i_T ppd;
    cell_wrap_1_FlightMissionMode_i_T ppe;
    cell_wrap_1_FlightMissionMode_i_T ppf;
    cell_wrap_1_FlightMissionMode_i_T pq;
    cell_wrap_1_FlightMissionMode_i_T pqb;
    cell_wrap_1_FlightMissionMode_i_T pqc;
    cell_wrap_1_FlightMissionMode_i_T pqd;
    cell_wrap_1_FlightMissionMode_i_T pqe;
    cell_wrap_1_FlightMissionMode_i_T pqf;
    cell_wrap_1_FlightMissionMode_i_T pr;
    cell_wrap_1_FlightMissionMode_i_T prb;
    cell_wrap_1_FlightMissionMode_i_T prc;
    cell_wrap_1_FlightMissionMode_i_T prd;
    cell_wrap_1_FlightMissionMode_i_T pre;
    cell_wrap_1_FlightMissionMode_i_T prf;
    cell_wrap_1_FlightMissionMode_i_T ps;
    cell_wrap_1_FlightMissionMode_i_T psb;
    cell_wrap_1_FlightMissionMode_i_T psc;
    cell_wrap_1_FlightMissionMode_i_T psd;
    cell_wrap_1_FlightMissionMode_i_T pse;
    cell_wrap_1_FlightMissionMode_i_T psf;
    cell_wrap_1_FlightMissionMode_i_T pt;
    cell_wrap_1_FlightMissionMode_i_T ptb;
    cell_wrap_1_FlightMissionMode_i_T ptc;
    cell_wrap_1_FlightMissionMode_i_T ptd;
    cell_wrap_1_FlightMissionMode_i_T pte;
    cell_wrap_1_FlightMissionMode_i_T ptf;
    cell_wrap_1_FlightMissionMode_i_T pu;
    cell_wrap_1_FlightMissionMode_i_T pub;
    cell_wrap_1_FlightMissionMode_i_T puc;
    cell_wrap_1_FlightMissionMode_i_T pud;
    cell_wrap_1_FlightMissionMode_i_T pue;
    cell_wrap_1_FlightMissionMode_i_T puf;
    cell_wrap_1_FlightMissionMode_i_T pv;
    cell_wrap_1_FlightMissionMode_i_T pvb;
    cell_wrap_1_FlightMissionMode_i_T pvc;
    cell_wrap_1_FlightMissionMode_i_T pvd;
    cell_wrap_1_FlightMissionMode_i_T pve;
    cell_wrap_1_FlightMissionMode_i_T pvf;
    cell_wrap_1_FlightMissionMode_i_T pw;
    cell_wrap_1_FlightMissionMode_i_T pwb;
    cell_wrap_1_FlightMissionMode_i_T pwc;
    cell_wrap_1_FlightMissionMode_i_T pwd;
    cell_wrap_1_FlightMissionMode_i_T pwe;
    cell_wrap_1_FlightMissionMode_i_T pwf;
    cell_wrap_1_FlightMissionMode_i_T px;
    cell_wrap_1_FlightMissionMode_i_T pxb;
    cell_wrap_1_FlightMissionMode_i_T pxc;
    cell_wrap_1_FlightMissionMode_i_T pxd;
    cell_wrap_1_FlightMissionMode_i_T pxe;
    cell_wrap_1_FlightMissionMode_i_T pxf;
    cell_wrap_1_FlightMissionMode_i_T py;
    cell_wrap_1_FlightMissionMode_i_T pyb;
    cell_wrap_1_FlightMissionMode_i_T pyc;
    cell_wrap_1_FlightMissionMode_i_T pyd;
    cell_wrap_1_FlightMissionMode_i_T pye;
    cell_wrap_1_FlightMissionMode_i_T pyf;
    cell_wrap_1_FlightMissionMode_i_T q;
    cell_wrap_1_FlightMissionMode_i_T qab;
    cell_wrap_1_FlightMissionMode_i_T qac;
    cell_wrap_1_FlightMissionMode_i_T qad;
    cell_wrap_1_FlightMissionMode_i_T qae;
    cell_wrap_1_FlightMissionMode_i_T qaf;
    cell_wrap_1_FlightMissionMode_i_T qag;
    cell_wrap_1_FlightMissionMode_i_T qb;
    cell_wrap_1_FlightMissionMode_i_T qbb;
    cell_wrap_1_FlightMissionMode_i_T qbc;
    cell_wrap_1_FlightMissionMode_i_T qbd;
    cell_wrap_1_FlightMissionMode_i_T qbe;
    cell_wrap_1_FlightMissionMode_i_T qbf;
    cell_wrap_1_FlightMissionMode_i_T qbg;
    cell_wrap_1_FlightMissionMode_i_T qc;
    cell_wrap_1_FlightMissionMode_i_T qcb;
    cell_wrap_1_FlightMissionMode_i_T qcc;
    cell_wrap_1_FlightMissionMode_i_T qcd;
    cell_wrap_1_FlightMissionMode_i_T qce;
    cell_wrap_1_FlightMissionMode_i_T qcf;
    cell_wrap_1_FlightMissionMode_i_T qcg;
    cell_wrap_1_FlightMissionMode_i_T qd;
    cell_wrap_1_FlightMissionMode_i_T qdb;
    cell_wrap_1_FlightMissionMode_i_T qdc;
    cell_wrap_1_FlightMissionMode_i_T qdd;
    cell_wrap_1_FlightMissionMode_i_T qde;
    cell_wrap_1_FlightMissionMode_i_T qdf;
    cell_wrap_1_FlightMissionMode_i_T qdg;
    cell_wrap_1_FlightMissionMode_i_T qe;
    cell_wrap_1_FlightMissionMode_i_T qeb;
    cell_wrap_1_FlightMissionMode_i_T qec;
    cell_wrap_1_FlightMissionMode_i_T qed;
    cell_wrap_1_FlightMissionMode_i_T qee;
    cell_wrap_1_FlightMissionMode_i_T qef;
    cell_wrap_1_FlightMissionMode_i_T qeg;
    cell_wrap_1_FlightMissionMode_i_T qf;
    cell_wrap_1_FlightMissionMode_i_T qfb;
    cell_wrap_1_FlightMissionMode_i_T qfc;
    cell_wrap_1_FlightMissionMode_i_T qfd;
    cell_wrap_1_FlightMissionMode_i_T qfe;
    cell_wrap_1_FlightMissionMode_i_T qff;
    cell_wrap_1_FlightMissionMode_i_T qfg;
    cell_wrap_1_FlightMissionMode_i_T qg;
    cell_wrap_1_FlightMissionMode_i_T qgb;
    cell_wrap_1_FlightMissionMode_i_T qgc;
    cell_wrap_1_FlightMissionMode_i_T qgd;
    cell_wrap_1_FlightMissionMode_i_T qge;
    cell_wrap_1_FlightMissionMode_i_T qgf;
    cell_wrap_1_FlightMissionMode_i_T qgg;
    cell_wrap_1_FlightMissionMode_i_T qh;
    cell_wrap_1_FlightMissionMode_i_T qhb;
    cell_wrap_1_FlightMissionMode_i_T qhc;
    cell_wrap_1_FlightMissionMode_i_T qhd;
    cell_wrap_1_FlightMissionMode_i_T qhe;
    cell_wrap_1_FlightMissionMode_i_T qhf;
    cell_wrap_1_FlightMissionMode_i_T qhg;
    cell_wrap_1_FlightMissionMode_i_T qi;
    cell_wrap_1_FlightMissionMode_i_T qib;
    cell_wrap_1_FlightMissionMode_i_T qic;
    cell_wrap_1_FlightMissionMode_i_T qid;
    cell_wrap_1_FlightMissionMode_i_T qie;
    cell_wrap_1_FlightMissionMode_i_T qif;
    cell_wrap_1_FlightMissionMode_i_T qig;
    cell_wrap_1_FlightMissionMode_i_T qj;
    cell_wrap_1_FlightMissionMode_i_T qjb;
    cell_wrap_1_FlightMissionMode_i_T qjc;
    cell_wrap_1_FlightMissionMode_i_T qjd;
    cell_wrap_1_FlightMissionMode_i_T qje;
    cell_wrap_1_FlightMissionMode_i_T qjf;
    cell_wrap_1_FlightMissionMode_i_T qjg;
    cell_wrap_1_FlightMissionMode_i_T qk;
    cell_wrap_1_FlightMissionMode_i_T qkb;
    cell_wrap_1_FlightMissionMode_i_T qkc;
    cell_wrap_1_FlightMissionMode_i_T qkd;
    cell_wrap_1_FlightMissionMode_i_T qke;
    cell_wrap_1_FlightMissionMode_i_T qkf;
    cell_wrap_1_FlightMissionMode_i_T ql;
    cell_wrap_1_FlightMissionMode_i_T qlb;
    cell_wrap_1_FlightMissionMode_i_T qlc;
    cell_wrap_1_FlightMissionMode_i_T qld;
    cell_wrap_1_FlightMissionMode_i_T qle;
    cell_wrap_1_FlightMissionMode_i_T qlf;
    cell_wrap_1_FlightMissionMode_i_T qm;
    cell_wrap_1_FlightMissionMode_i_T qmb;
    cell_wrap_1_FlightMissionMode_i_T qmc;
    cell_wrap_1_FlightMissionMode_i_T qmd;
    cell_wrap_1_FlightMissionMode_i_T qme;
    cell_wrap_1_FlightMissionMode_i_T qmf;
    cell_wrap_1_FlightMissionMode_i_T qn;
    cell_wrap_1_FlightMissionMode_i_T qnb;
    cell_wrap_1_FlightMissionMode_i_T qnc;
    cell_wrap_1_FlightMissionMode_i_T qnd;
    cell_wrap_1_FlightMissionMode_i_T qne;
    cell_wrap_1_FlightMissionMode_i_T qnf;
    cell_wrap_1_FlightMissionMode_i_T qo;
    cell_wrap_1_FlightMissionMode_i_T qob;
    cell_wrap_1_FlightMissionMode_i_T qoc;
    cell_wrap_1_FlightMissionMode_i_T qod;
    cell_wrap_1_FlightMissionMode_i_T qoe;
    cell_wrap_1_FlightMissionMode_i_T qof;
    cell_wrap_1_FlightMissionMode_i_T qp;
    cell_wrap_1_FlightMissionMode_i_T qpb;
    cell_wrap_1_FlightMissionMode_i_T qpc;
    cell_wrap_1_FlightMissionMode_i_T qpd;
    cell_wrap_1_FlightMissionMode_i_T qpe;
    cell_wrap_1_FlightMissionMode_i_T qpf;
    cell_wrap_1_FlightMissionMode_i_T qq;
    cell_wrap_1_FlightMissionMode_i_T qqb;
    cell_wrap_1_FlightMissionMode_i_T qqc;
    cell_wrap_1_FlightMissionMode_i_T qqd;
    cell_wrap_1_FlightMissionMode_i_T qqe;
    cell_wrap_1_FlightMissionMode_i_T qqf;
    cell_wrap_1_FlightMissionMode_i_T qr;
    cell_wrap_1_FlightMissionMode_i_T qrb;
    cell_wrap_1_FlightMissionMode_i_T qrc;
    cell_wrap_1_FlightMissionMode_i_T qrd;
    cell_wrap_1_FlightMissionMode_i_T qre;
    cell_wrap_1_FlightMissionMode_i_T qrf;
    cell_wrap_1_FlightMissionMode_i_T qs;
    cell_wrap_1_FlightMissionMode_i_T qsb;
    cell_wrap_1_FlightMissionMode_i_T qsc;
    cell_wrap_1_FlightMissionMode_i_T qsd;
    cell_wrap_1_FlightMissionMode_i_T qse;
    cell_wrap_1_FlightMissionMode_i_T qsf;
    cell_wrap_1_FlightMissionMode_i_T qt;
    cell_wrap_1_FlightMissionMode_i_T qtb;
    cell_wrap_1_FlightMissionMode_i_T qtc;
    cell_wrap_1_FlightMissionMode_i_T qtd;
    cell_wrap_1_FlightMissionMode_i_T qte;
    cell_wrap_1_FlightMissionMode_i_T qtf;
    cell_wrap_1_FlightMissionMode_i_T qu;
    cell_wrap_1_FlightMissionMode_i_T qub;
    cell_wrap_1_FlightMissionMode_i_T quc;
    cell_wrap_1_FlightMissionMode_i_T qud;
    cell_wrap_1_FlightMissionMode_i_T que;
    cell_wrap_1_FlightMissionMode_i_T quf;
    cell_wrap_1_FlightMissionMode_i_T qv;
    cell_wrap_1_FlightMissionMode_i_T qvb;
    cell_wrap_1_FlightMissionMode_i_T qvc;
    cell_wrap_1_FlightMissionMode_i_T qvd;
    cell_wrap_1_FlightMissionMode_i_T qve;
    cell_wrap_1_FlightMissionMode_i_T qvf;
    cell_wrap_1_FlightMissionMode_i_T qw;
    cell_wrap_1_FlightMissionMode_i_T qwb;
    cell_wrap_1_FlightMissionMode_i_T qwc;
    cell_wrap_1_FlightMissionMode_i_T qwd;
    cell_wrap_1_FlightMissionMode_i_T qwe;
    cell_wrap_1_FlightMissionMode_i_T qwf;
    cell_wrap_1_FlightMissionMode_i_T qx;
    cell_wrap_1_FlightMissionMode_i_T qxb;
    cell_wrap_1_FlightMissionMode_i_T qxc;
    cell_wrap_1_FlightMissionMode_i_T qxd;
    cell_wrap_1_FlightMissionMode_i_T qxe;
    cell_wrap_1_FlightMissionMode_i_T qxf;
    cell_wrap_1_FlightMissionMode_i_T qy;
    cell_wrap_1_FlightMissionMode_i_T qyb;
    cell_wrap_1_FlightMissionMode_i_T qyc;
    cell_wrap_1_FlightMissionMode_i_T qyd;
    cell_wrap_1_FlightMissionMode_i_T qye;
    cell_wrap_1_FlightMissionMode_i_T qyf;
    cell_wrap_1_FlightMissionMode_i_T r;
    cell_wrap_1_FlightMissionMode_i_T rab;
    cell_wrap_1_FlightMissionMode_i_T rac;
    cell_wrap_1_FlightMissionMode_i_T rad;
    cell_wrap_1_FlightMissionMode_i_T rae;
    cell_wrap_1_FlightMissionMode_i_T raf;
    cell_wrap_1_FlightMissionMode_i_T rag;
    cell_wrap_1_FlightMissionMode_i_T rb;
    cell_wrap_1_FlightMissionMode_i_T rbb;
    cell_wrap_1_FlightMissionMode_i_T rbc;
    cell_wrap_1_FlightMissionMode_i_T rbd;
    cell_wrap_1_FlightMissionMode_i_T rbe;
    cell_wrap_1_FlightMissionMode_i_T rbf;
    cell_wrap_1_FlightMissionMode_i_T rbg;
    cell_wrap_1_FlightMissionMode_i_T rc;
    cell_wrap_1_FlightMissionMode_i_T rcb;
    cell_wrap_1_FlightMissionMode_i_T rcc;
    cell_wrap_1_FlightMissionMode_i_T rcd;
    cell_wrap_1_FlightMissionMode_i_T rce;
    cell_wrap_1_FlightMissionMode_i_T rcf;
    cell_wrap_1_FlightMissionMode_i_T rcg;
    cell_wrap_1_FlightMissionMode_i_T rd;
    cell_wrap_1_FlightMissionMode_i_T rdb;
    cell_wrap_1_FlightMissionMode_i_T rdc;
    cell_wrap_1_FlightMissionMode_i_T rdd;
    cell_wrap_1_FlightMissionMode_i_T rde;
    cell_wrap_1_FlightMissionMode_i_T rdf;
    cell_wrap_1_FlightMissionMode_i_T rdg;
    cell_wrap_1_FlightMissionMode_i_T re;
    cell_wrap_1_FlightMissionMode_i_T reb;
    cell_wrap_1_FlightMissionMode_i_T rec;
    cell_wrap_1_FlightMissionMode_i_T red;
    cell_wrap_1_FlightMissionMode_i_T ree;
    cell_wrap_1_FlightMissionMode_i_T ref;
    cell_wrap_1_FlightMissionMode_i_T reg;
    cell_wrap_1_FlightMissionMode_i_T rf;
    cell_wrap_1_FlightMissionMode_i_T rfb;
    cell_wrap_1_FlightMissionMode_i_T rfc;
    cell_wrap_1_FlightMissionMode_i_T rfd;
    cell_wrap_1_FlightMissionMode_i_T rfe;
    cell_wrap_1_FlightMissionMode_i_T rff;
    cell_wrap_1_FlightMissionMode_i_T rfg;
    cell_wrap_1_FlightMissionMode_i_T rg;
    cell_wrap_1_FlightMissionMode_i_T rgb;
    cell_wrap_1_FlightMissionMode_i_T rgc;
    cell_wrap_1_FlightMissionMode_i_T rgd;
    cell_wrap_1_FlightMissionMode_i_T rge;
    cell_wrap_1_FlightMissionMode_i_T rgf;
    cell_wrap_1_FlightMissionMode_i_T rgg;
    cell_wrap_1_FlightMissionMode_i_T rh;
    cell_wrap_1_FlightMissionMode_i_T rhb;
    cell_wrap_1_FlightMissionMode_i_T rhc;
    cell_wrap_1_FlightMissionMode_i_T rhd;
    cell_wrap_1_FlightMissionMode_i_T rhe;
    cell_wrap_1_FlightMissionMode_i_T rhf;
    cell_wrap_1_FlightMissionMode_i_T rhg;
    cell_wrap_1_FlightMissionMode_i_T ri;
    cell_wrap_1_FlightMissionMode_i_T rib;
    cell_wrap_1_FlightMissionMode_i_T ric;
    cell_wrap_1_FlightMissionMode_i_T rid;
    cell_wrap_1_FlightMissionMode_i_T rie;
    cell_wrap_1_FlightMissionMode_i_T rif;
    cell_wrap_1_FlightMissionMode_i_T rig;
    cell_wrap_1_FlightMissionMode_i_T rj;
    cell_wrap_1_FlightMissionMode_i_T rjb;
    cell_wrap_1_FlightMissionMode_i_T rjc;
    cell_wrap_1_FlightMissionMode_i_T rjd;
    cell_wrap_1_FlightMissionMode_i_T rje;
    cell_wrap_1_FlightMissionMode_i_T rjf;
    cell_wrap_1_FlightMissionMode_i_T rjg;
    cell_wrap_1_FlightMissionMode_i_T rk;
    cell_wrap_1_FlightMissionMode_i_T rkb;
    cell_wrap_1_FlightMissionMode_i_T rkc;
    cell_wrap_1_FlightMissionMode_i_T rkd;
    cell_wrap_1_FlightMissionMode_i_T rke;
    cell_wrap_1_FlightMissionMode_i_T rkf;
    cell_wrap_1_FlightMissionMode_i_T rl;
    cell_wrap_1_FlightMissionMode_i_T rlb;
    cell_wrap_1_FlightMissionMode_i_T rlc;
    cell_wrap_1_FlightMissionMode_i_T rld;
    cell_wrap_1_FlightMissionMode_i_T rle;
    cell_wrap_1_FlightMissionMode_i_T rlf;
    cell_wrap_1_FlightMissionMode_i_T rm;
    cell_wrap_1_FlightMissionMode_i_T rmb;
    cell_wrap_1_FlightMissionMode_i_T rmc;
    cell_wrap_1_FlightMissionMode_i_T rmd;
    cell_wrap_1_FlightMissionMode_i_T rme;
    cell_wrap_1_FlightMissionMode_i_T rmf;
    cell_wrap_1_FlightMissionMode_i_T rn;
    cell_wrap_1_FlightMissionMode_i_T rnb;
    cell_wrap_1_FlightMissionMode_i_T rnc;
    cell_wrap_1_FlightMissionMode_i_T rnd;
    cell_wrap_1_FlightMissionMode_i_T rne;
    cell_wrap_1_FlightMissionMode_i_T rnf;
    cell_wrap_1_FlightMissionMode_i_T ro;
    cell_wrap_1_FlightMissionMode_i_T rob;
    cell_wrap_1_FlightMissionMode_i_T roc;
    cell_wrap_1_FlightMissionMode_i_T rod;
    cell_wrap_1_FlightMissionMode_i_T roe;
    cell_wrap_1_FlightMissionMode_i_T rof;
    cell_wrap_1_FlightMissionMode_i_T rp;
    cell_wrap_1_FlightMissionMode_i_T rpb;
    cell_wrap_1_FlightMissionMode_i_T rpc;
    cell_wrap_1_FlightMissionMode_i_T rpd;
    cell_wrap_1_FlightMissionMode_i_T rpe;
    cell_wrap_1_FlightMissionMode_i_T rpf;
    cell_wrap_1_FlightMissionMode_i_T rq;
    cell_wrap_1_FlightMissionMode_i_T rqb;
    cell_wrap_1_FlightMissionMode_i_T rqc;
    cell_wrap_1_FlightMissionMode_i_T rqd;
    cell_wrap_1_FlightMissionMode_i_T rqe;
    cell_wrap_1_FlightMissionMode_i_T rqf;
    cell_wrap_1_FlightMissionMode_i_T rr;
    cell_wrap_1_FlightMissionMode_i_T rrb;
    cell_wrap_1_FlightMissionMode_i_T rrc;
    cell_wrap_1_FlightMissionMode_i_T rrd;
    cell_wrap_1_FlightMissionMode_i_T rre;
    cell_wrap_1_FlightMissionMode_i_T rrf;
    cell_wrap_1_FlightMissionMode_i_T rs;
    cell_wrap_1_FlightMissionMode_i_T rsb;
    cell_wrap_1_FlightMissionMode_i_T rsc;
    cell_wrap_1_FlightMissionMode_i_T rsd;
    cell_wrap_1_FlightMissionMode_i_T rse;
    cell_wrap_1_FlightMissionMode_i_T rsf;
    cell_wrap_1_FlightMissionMode_i_T rt;
    cell_wrap_1_FlightMissionMode_i_T rtb;
    cell_wrap_1_FlightMissionMode_i_T rtc;
    cell_wrap_1_FlightMissionMode_i_T rtd;
    cell_wrap_1_FlightMissionMode_i_T rte;
    cell_wrap_1_FlightMissionMode_i_T rtf;
    cell_wrap_1_FlightMissionMode_i_T ru;
    cell_wrap_1_FlightMissionMode_i_T rub;
    cell_wrap_1_FlightMissionMode_i_T ruc;
    cell_wrap_1_FlightMissionMode_i_T rud;
    cell_wrap_1_FlightMissionMode_i_T rue;
    cell_wrap_1_FlightMissionMode_i_T ruf;
    cell_wrap_1_FlightMissionMode_i_T rv;
    cell_wrap_1_FlightMissionMode_i_T rvb;
    cell_wrap_1_FlightMissionMode_i_T rvc;
    cell_wrap_1_FlightMissionMode_i_T rvd;
    cell_wrap_1_FlightMissionMode_i_T rve;
    cell_wrap_1_FlightMissionMode_i_T rvf;
    cell_wrap_1_FlightMissionMode_i_T rw;
    cell_wrap_1_FlightMissionMode_i_T rwb;
    cell_wrap_1_FlightMissionMode_i_T rwc;
    cell_wrap_1_FlightMissionMode_i_T rwd;
    cell_wrap_1_FlightMissionMode_i_T rwe;
    cell_wrap_1_FlightMissionMode_i_T rwf;
    cell_wrap_1_FlightMissionMode_i_T rx;
    cell_wrap_1_FlightMissionMode_i_T rxb;
    cell_wrap_1_FlightMissionMode_i_T rxc;
    cell_wrap_1_FlightMissionMode_i_T rxd;
    cell_wrap_1_FlightMissionMode_i_T rxe;
    cell_wrap_1_FlightMissionMode_i_T rxf;
    cell_wrap_1_FlightMissionMode_i_T ry;
    cell_wrap_1_FlightMissionMode_i_T ryb;
    cell_wrap_1_FlightMissionMode_i_T ryc;
    cell_wrap_1_FlightMissionMode_i_T ryd;
    cell_wrap_1_FlightMissionMode_i_T rye;
    cell_wrap_1_FlightMissionMode_i_T ryf;
    cell_wrap_1_FlightMissionMode_i_T s;
    cell_wrap_1_FlightMissionMode_i_T sab;
    cell_wrap_1_FlightMissionMode_i_T sac;
    cell_wrap_1_FlightMissionMode_i_T sad;
    cell_wrap_1_FlightMissionMode_i_T sae;
    cell_wrap_1_FlightMissionMode_i_T saf;
    cell_wrap_1_FlightMissionMode_i_T sag;
    cell_wrap_1_FlightMissionMode_i_T sb;
    cell_wrap_1_FlightMissionMode_i_T sbb;
    cell_wrap_1_FlightMissionMode_i_T sbc;
    cell_wrap_1_FlightMissionMode_i_T sbd;
    cell_wrap_1_FlightMissionMode_i_T sbe;
    cell_wrap_1_FlightMissionMode_i_T sbf;
    cell_wrap_1_FlightMissionMode_i_T sbg;
    cell_wrap_1_FlightMissionMode_i_T sc;
    cell_wrap_1_FlightMissionMode_i_T scb;
    cell_wrap_1_FlightMissionMode_i_T scc;
    cell_wrap_1_FlightMissionMode_i_T scd;
    cell_wrap_1_FlightMissionMode_i_T sce;
    cell_wrap_1_FlightMissionMode_i_T scf;
    cell_wrap_1_FlightMissionMode_i_T scg;
    cell_wrap_1_FlightMissionMode_i_T sd;
    cell_wrap_1_FlightMissionMode_i_T sdb;
    cell_wrap_1_FlightMissionMode_i_T sdc;
    cell_wrap_1_FlightMissionMode_i_T sdd;
    cell_wrap_1_FlightMissionMode_i_T sde;
    cell_wrap_1_FlightMissionMode_i_T sdf;
    cell_wrap_1_FlightMissionMode_i_T sdg;
    cell_wrap_1_FlightMissionMode_i_T se;
    cell_wrap_1_FlightMissionMode_i_T seb;
    cell_wrap_1_FlightMissionMode_i_T sec;
    cell_wrap_1_FlightMissionMode_i_T sed;
    cell_wrap_1_FlightMissionMode_i_T see;
    cell_wrap_1_FlightMissionMode_i_T sef;
    cell_wrap_1_FlightMissionMode_i_T seg;
    cell_wrap_1_FlightMissionMode_i_T sf;
    cell_wrap_1_FlightMissionMode_i_T sfb;
    cell_wrap_1_FlightMissionMode_i_T sfc;
    cell_wrap_1_FlightMissionMode_i_T sfd;
    cell_wrap_1_FlightMissionMode_i_T sfe;
    cell_wrap_1_FlightMissionMode_i_T sff;
    cell_wrap_1_FlightMissionMode_i_T sfg;
    cell_wrap_1_FlightMissionMode_i_T sg;
    cell_wrap_1_FlightMissionMode_i_T sgb;
    cell_wrap_1_FlightMissionMode_i_T sgc;
    cell_wrap_1_FlightMissionMode_i_T sgd;
    cell_wrap_1_FlightMissionMode_i_T sge;
    cell_wrap_1_FlightMissionMode_i_T sgf;
    cell_wrap_1_FlightMissionMode_i_T sgg;
    cell_wrap_1_FlightMissionMode_i_T sh;
    cell_wrap_1_FlightMissionMode_i_T shb;
    cell_wrap_1_FlightMissionMode_i_T shc;
    cell_wrap_1_FlightMissionMode_i_T shd;
    cell_wrap_1_FlightMissionMode_i_T she;
    cell_wrap_1_FlightMissionMode_i_T shf;
    cell_wrap_1_FlightMissionMode_i_T shg;
    cell_wrap_1_FlightMissionMode_i_T si;
    cell_wrap_1_FlightMissionMode_i_T sib;
    cell_wrap_1_FlightMissionMode_i_T sic;
    cell_wrap_1_FlightMissionMode_i_T sid;
    cell_wrap_1_FlightMissionMode_i_T sie;
    cell_wrap_1_FlightMissionMode_i_T sif;
    cell_wrap_1_FlightMissionMode_i_T sig;
    cell_wrap_1_FlightMissionMode_i_T sj;
    cell_wrap_1_FlightMissionMode_i_T sjb;
    cell_wrap_1_FlightMissionMode_i_T sjc;
    cell_wrap_1_FlightMissionMode_i_T sjd;
    cell_wrap_1_FlightMissionMode_i_T sje;
    cell_wrap_1_FlightMissionMode_i_T sjf;
    cell_wrap_1_FlightMissionMode_i_T sjg;
    cell_wrap_1_FlightMissionMode_i_T sk;
    cell_wrap_1_FlightMissionMode_i_T skb;
    cell_wrap_1_FlightMissionMode_i_T skc;
    cell_wrap_1_FlightMissionMode_i_T skd;
    cell_wrap_1_FlightMissionMode_i_T ske;
    cell_wrap_1_FlightMissionMode_i_T skf;
    cell_wrap_1_FlightMissionMode_i_T sl;
    cell_wrap_1_FlightMissionMode_i_T slb;
    cell_wrap_1_FlightMissionMode_i_T slc;
    cell_wrap_1_FlightMissionMode_i_T sld;
    cell_wrap_1_FlightMissionMode_i_T sle;
    cell_wrap_1_FlightMissionMode_i_T slf;
    cell_wrap_1_FlightMissionMode_i_T sm;
    cell_wrap_1_FlightMissionMode_i_T smb;
    cell_wrap_1_FlightMissionMode_i_T smc;
    cell_wrap_1_FlightMissionMode_i_T smd;
    cell_wrap_1_FlightMissionMode_i_T sme;
    cell_wrap_1_FlightMissionMode_i_T smf;
    cell_wrap_1_FlightMissionMode_i_T sn;
    cell_wrap_1_FlightMissionMode_i_T snb;
    cell_wrap_1_FlightMissionMode_i_T snc;
    cell_wrap_1_FlightMissionMode_i_T snd;
    cell_wrap_1_FlightMissionMode_i_T sne;
    cell_wrap_1_FlightMissionMode_i_T snf;
    cell_wrap_1_FlightMissionMode_i_T so;
    cell_wrap_1_FlightMissionMode_i_T sob;
    cell_wrap_1_FlightMissionMode_i_T soc;
    cell_wrap_1_FlightMissionMode_i_T sod;
    cell_wrap_1_FlightMissionMode_i_T soe;
    cell_wrap_1_FlightMissionMode_i_T sof;
    cell_wrap_1_FlightMissionMode_i_T sp;
    cell_wrap_1_FlightMissionMode_i_T spb;
    cell_wrap_1_FlightMissionMode_i_T spc;
    cell_wrap_1_FlightMissionMode_i_T spd;
    cell_wrap_1_FlightMissionMode_i_T spe;
    cell_wrap_1_FlightMissionMode_i_T spf;
    cell_wrap_1_FlightMissionMode_i_T sq;
    cell_wrap_1_FlightMissionMode_i_T sqb;
    cell_wrap_1_FlightMissionMode_i_T sqc;
    cell_wrap_1_FlightMissionMode_i_T sqd;
    cell_wrap_1_FlightMissionMode_i_T sqe;
    cell_wrap_1_FlightMissionMode_i_T sqf;
    cell_wrap_1_FlightMissionMode_i_T sr;
    cell_wrap_1_FlightMissionMode_i_T srb;
    cell_wrap_1_FlightMissionMode_i_T src;
    cell_wrap_1_FlightMissionMode_i_T srd;
    cell_wrap_1_FlightMissionMode_i_T sre;
    cell_wrap_1_FlightMissionMode_i_T srf;
    cell_wrap_1_FlightMissionMode_i_T ss;
    cell_wrap_1_FlightMissionMode_i_T ssb;
    cell_wrap_1_FlightMissionMode_i_T ssc;
    cell_wrap_1_FlightMissionMode_i_T ssd;
    cell_wrap_1_FlightMissionMode_i_T sse;
    cell_wrap_1_FlightMissionMode_i_T ssf;
    cell_wrap_1_FlightMissionMode_i_T st;
    cell_wrap_1_FlightMissionMode_i_T stb;
    cell_wrap_1_FlightMissionMode_i_T stc;
    cell_wrap_1_FlightMissionMode_i_T ste;
    cell_wrap_1_FlightMissionMode_i_T stf;
    cell_wrap_1_FlightMissionMode_i_T su;
    cell_wrap_1_FlightMissionMode_i_T sub;
    cell_wrap_1_FlightMissionMode_i_T suc;
    cell_wrap_1_FlightMissionMode_i_T sud;
    cell_wrap_1_FlightMissionMode_i_T sue;
    cell_wrap_1_FlightMissionMode_i_T suf;
    cell_wrap_1_FlightMissionMode_i_T sv;
    cell_wrap_1_FlightMissionMode_i_T svb;
    cell_wrap_1_FlightMissionMode_i_T svc;
    cell_wrap_1_FlightMissionMode_i_T svd;
    cell_wrap_1_FlightMissionMode_i_T sve;
    cell_wrap_1_FlightMissionMode_i_T svf;
    cell_wrap_1_FlightMissionMode_i_T sw;
    cell_wrap_1_FlightMissionMode_i_T swb;
    cell_wrap_1_FlightMissionMode_i_T swc;
    cell_wrap_1_FlightMissionMode_i_T swd;
    cell_wrap_1_FlightMissionMode_i_T swe;
    cell_wrap_1_FlightMissionMode_i_T swf;
    cell_wrap_1_FlightMissionMode_i_T sx;
    cell_wrap_1_FlightMissionMode_i_T sxb;
    cell_wrap_1_FlightMissionMode_i_T sxc;
    cell_wrap_1_FlightMissionMode_i_T sxd;
    cell_wrap_1_FlightMissionMode_i_T sxe;
    cell_wrap_1_FlightMissionMode_i_T sxf;
    cell_wrap_1_FlightMissionMode_i_T sy;
    cell_wrap_1_FlightMissionMode_i_T syb;
    cell_wrap_1_FlightMissionMode_i_T syc;
    cell_wrap_1_FlightMissionMode_i_T syd;
    cell_wrap_1_FlightMissionMode_i_T sye;
    cell_wrap_1_FlightMissionMode_i_T syf;
    cell_wrap_1_FlightMissionMode_i_T t;
    cell_wrap_1_FlightMissionMode_i_T tab;
    cell_wrap_1_FlightMissionMode_i_T tac;
    cell_wrap_1_FlightMissionMode_i_T tad;
    cell_wrap_1_FlightMissionMode_i_T tae;
    cell_wrap_1_FlightMissionMode_i_T taf;
    cell_wrap_1_FlightMissionMode_i_T tag;
    cell_wrap_1_FlightMissionMode_i_T tb;
    cell_wrap_1_FlightMissionMode_i_T tbb;
    cell_wrap_1_FlightMissionMode_i_T tbc;
    cell_wrap_1_FlightMissionMode_i_T tbd;
    cell_wrap_1_FlightMissionMode_i_T tbe;
    cell_wrap_1_FlightMissionMode_i_T tbf;
    cell_wrap_1_FlightMissionMode_i_T tbg;
    cell_wrap_1_FlightMissionMode_i_T tc;
    cell_wrap_1_FlightMissionMode_i_T tcb;
    cell_wrap_1_FlightMissionMode_i_T tcc;
    cell_wrap_1_FlightMissionMode_i_T tcd;
    cell_wrap_1_FlightMissionMode_i_T tce;
    cell_wrap_1_FlightMissionMode_i_T tcf;
    cell_wrap_1_FlightMissionMode_i_T tcg;
    cell_wrap_1_FlightMissionMode_i_T td;
    cell_wrap_1_FlightMissionMode_i_T tdb;
    cell_wrap_1_FlightMissionMode_i_T tdc;
    cell_wrap_1_FlightMissionMode_i_T tdd;
    cell_wrap_1_FlightMissionMode_i_T tde;
    cell_wrap_1_FlightMissionMode_i_T tdf;
    cell_wrap_1_FlightMissionMode_i_T tdg;
    cell_wrap_1_FlightMissionMode_i_T te;
    cell_wrap_1_FlightMissionMode_i_T teb;
    cell_wrap_1_FlightMissionMode_i_T tec;
    cell_wrap_1_FlightMissionMode_i_T ted;
    cell_wrap_1_FlightMissionMode_i_T tee;
    cell_wrap_1_FlightMissionMode_i_T tef;
    cell_wrap_1_FlightMissionMode_i_T teg;
    cell_wrap_1_FlightMissionMode_i_T tf;
    cell_wrap_1_FlightMissionMode_i_T tfb;
    cell_wrap_1_FlightMissionMode_i_T tfc;
    cell_wrap_1_FlightMissionMode_i_T tfd;
    cell_wrap_1_FlightMissionMode_i_T tfe;
    cell_wrap_1_FlightMissionMode_i_T tff;
    cell_wrap_1_FlightMissionMode_i_T tfg;
    cell_wrap_1_FlightMissionMode_i_T tg;
    cell_wrap_1_FlightMissionMode_i_T tgb;
    cell_wrap_1_FlightMissionMode_i_T tgc;
    cell_wrap_1_FlightMissionMode_i_T tgd;
    cell_wrap_1_FlightMissionMode_i_T tge;
    cell_wrap_1_FlightMissionMode_i_T tgf;
    cell_wrap_1_FlightMissionMode_i_T tgg;
    cell_wrap_1_FlightMissionMode_i_T th;
    cell_wrap_1_FlightMissionMode_i_T thb;
    cell_wrap_1_FlightMissionMode_i_T thc;
    cell_wrap_1_FlightMissionMode_i_T thd;
    cell_wrap_1_FlightMissionMode_i_T the;
    cell_wrap_1_FlightMissionMode_i_T thf;
    cell_wrap_1_FlightMissionMode_i_T thg;
    cell_wrap_1_FlightMissionMode_i_T ti;
    cell_wrap_1_FlightMissionMode_i_T tib;
    cell_wrap_1_FlightMissionMode_i_T tic;
    cell_wrap_1_FlightMissionMode_i_T tid_0;
    cell_wrap_1_FlightMissionMode_i_T tie;
    cell_wrap_1_FlightMissionMode_i_T tif;
    cell_wrap_1_FlightMissionMode_i_T tig;
    cell_wrap_1_FlightMissionMode_i_T tj;
    cell_wrap_1_FlightMissionMode_i_T tjb;
    cell_wrap_1_FlightMissionMode_i_T tjc;
    cell_wrap_1_FlightMissionMode_i_T tjd;
    cell_wrap_1_FlightMissionMode_i_T tje;
    cell_wrap_1_FlightMissionMode_i_T tjf;
    cell_wrap_1_FlightMissionMode_i_T tjg;
    cell_wrap_1_FlightMissionMode_i_T tk;
    cell_wrap_1_FlightMissionMode_i_T tkb;
    cell_wrap_1_FlightMissionMode_i_T tkc;
    cell_wrap_1_FlightMissionMode_i_T tkd;
    cell_wrap_1_FlightMissionMode_i_T tke;
    cell_wrap_1_FlightMissionMode_i_T tkf;
    cell_wrap_1_FlightMissionMode_i_T tl;
    cell_wrap_1_FlightMissionMode_i_T tlb;
    cell_wrap_1_FlightMissionMode_i_T tlc;
    cell_wrap_1_FlightMissionMode_i_T tld;
    cell_wrap_1_FlightMissionMode_i_T tle;
    cell_wrap_1_FlightMissionMode_i_T tlf;
    cell_wrap_1_FlightMissionMode_i_T tmb;
    cell_wrap_1_FlightMissionMode_i_T tmc;
    cell_wrap_1_FlightMissionMode_i_T tmd;
    cell_wrap_1_FlightMissionMode_i_T tme;
    cell_wrap_1_FlightMissionMode_i_T tmf;
    cell_wrap_1_FlightMissionMode_i_T tn;
    cell_wrap_1_FlightMissionMode_i_T tnb;
    cell_wrap_1_FlightMissionMode_i_T tnc;
    cell_wrap_1_FlightMissionMode_i_T tnd;
    cell_wrap_1_FlightMissionMode_i_T tne;
    cell_wrap_1_FlightMissionMode_i_T tnf;
    cell_wrap_1_FlightMissionMode_i_T to;
    cell_wrap_1_FlightMissionMode_i_T tob;
    cell_wrap_1_FlightMissionMode_i_T toc;
    cell_wrap_1_FlightMissionMode_i_T tod;
    cell_wrap_1_FlightMissionMode_i_T toe;
    cell_wrap_1_FlightMissionMode_i_T tof;
    cell_wrap_1_FlightMissionMode_i_T tp;
    cell_wrap_1_FlightMissionMode_i_T tpb;
    cell_wrap_1_FlightMissionMode_i_T tpc;
    cell_wrap_1_FlightMissionMode_i_T tpd;
    cell_wrap_1_FlightMissionMode_i_T tpe;
    cell_wrap_1_FlightMissionMode_i_T tpf;
    cell_wrap_1_FlightMissionMode_i_T tq;
    cell_wrap_1_FlightMissionMode_i_T tqb;
    cell_wrap_1_FlightMissionMode_i_T tqc;
    cell_wrap_1_FlightMissionMode_i_T tqd;
    cell_wrap_1_FlightMissionMode_i_T tqe;
    cell_wrap_1_FlightMissionMode_i_T tqf;
    cell_wrap_1_FlightMissionMode_i_T tr;
    cell_wrap_1_FlightMissionMode_i_T trb;
    cell_wrap_1_FlightMissionMode_i_T trc;
    cell_wrap_1_FlightMissionMode_i_T trd;
    cell_wrap_1_FlightMissionMode_i_T tre;
    cell_wrap_1_FlightMissionMode_i_T trf;
    cell_wrap_1_FlightMissionMode_i_T ts;
    cell_wrap_1_FlightMissionMode_i_T tsb;
    cell_wrap_1_FlightMissionMode_i_T tsc;
    cell_wrap_1_FlightMissionMode_i_T tsd;
    cell_wrap_1_FlightMissionMode_i_T tse;
    cell_wrap_1_FlightMissionMode_i_T tsf;
    cell_wrap_1_FlightMissionMode_i_T tt;
    cell_wrap_1_FlightMissionMode_i_T ttb;
    cell_wrap_1_FlightMissionMode_i_T ttc;
    cell_wrap_1_FlightMissionMode_i_T ttd;
    cell_wrap_1_FlightMissionMode_i_T tte;
    cell_wrap_1_FlightMissionMode_i_T ttf;
    cell_wrap_1_FlightMissionMode_i_T tu;
    cell_wrap_1_FlightMissionMode_i_T tub;
    cell_wrap_1_FlightMissionMode_i_T tuc;
    cell_wrap_1_FlightMissionMode_i_T tud;
    cell_wrap_1_FlightMissionMode_i_T tue;
    cell_wrap_1_FlightMissionMode_i_T tuf;
    cell_wrap_1_FlightMissionMode_i_T tv;
    cell_wrap_1_FlightMissionMode_i_T tvb;
    cell_wrap_1_FlightMissionMode_i_T tvc;
    cell_wrap_1_FlightMissionMode_i_T tvd;
    cell_wrap_1_FlightMissionMode_i_T tve;
    cell_wrap_1_FlightMissionMode_i_T tvf;
    cell_wrap_1_FlightMissionMode_i_T tw;
    cell_wrap_1_FlightMissionMode_i_T twb;
    cell_wrap_1_FlightMissionMode_i_T twc;
    cell_wrap_1_FlightMissionMode_i_T twd;
    cell_wrap_1_FlightMissionMode_i_T twe;
    cell_wrap_1_FlightMissionMode_i_T twf;
    cell_wrap_1_FlightMissionMode_i_T tx;
    cell_wrap_1_FlightMissionMode_i_T txb;
    cell_wrap_1_FlightMissionMode_i_T txc;
    cell_wrap_1_FlightMissionMode_i_T txd;
    cell_wrap_1_FlightMissionMode_i_T txe;
    cell_wrap_1_FlightMissionMode_i_T txf;
    cell_wrap_1_FlightMissionMode_i_T ty;
    cell_wrap_1_FlightMissionMode_i_T tyb;
    cell_wrap_1_FlightMissionMode_i_T tyc;
    cell_wrap_1_FlightMissionMode_i_T tyd;
    cell_wrap_1_FlightMissionMode_i_T tye;
    cell_wrap_1_FlightMissionMode_i_T tyf;
    cell_wrap_1_FlightMissionMode_i_T u;
    cell_wrap_1_FlightMissionMode_i_T uab;
    cell_wrap_1_FlightMissionMode_i_T uac;
    cell_wrap_1_FlightMissionMode_i_T uad;
    cell_wrap_1_FlightMissionMode_i_T uae;
    cell_wrap_1_FlightMissionMode_i_T uaf;
    cell_wrap_1_FlightMissionMode_i_T uag;
    cell_wrap_1_FlightMissionMode_i_T ub;
    cell_wrap_1_FlightMissionMode_i_T ubb;
    cell_wrap_1_FlightMissionMode_i_T ubc;
    cell_wrap_1_FlightMissionMode_i_T ubd;
    cell_wrap_1_FlightMissionMode_i_T ube;
    cell_wrap_1_FlightMissionMode_i_T ubf;
    cell_wrap_1_FlightMissionMode_i_T ubg;
    cell_wrap_1_FlightMissionMode_i_T uc;
    cell_wrap_1_FlightMissionMode_i_T ucb;
    cell_wrap_1_FlightMissionMode_i_T ucc;
    cell_wrap_1_FlightMissionMode_i_T ucd;
    cell_wrap_1_FlightMissionMode_i_T uce;
    cell_wrap_1_FlightMissionMode_i_T ucf;
    cell_wrap_1_FlightMissionMode_i_T ucg;
    cell_wrap_1_FlightMissionMode_i_T ud;
    cell_wrap_1_FlightMissionMode_i_T udb;
    cell_wrap_1_FlightMissionMode_i_T udc;
    cell_wrap_1_FlightMissionMode_i_T udd;
    cell_wrap_1_FlightMissionMode_i_T ude;
    cell_wrap_1_FlightMissionMode_i_T udf;
    cell_wrap_1_FlightMissionMode_i_T udg;
    cell_wrap_1_FlightMissionMode_i_T ue;
    cell_wrap_1_FlightMissionMode_i_T ueb;
    cell_wrap_1_FlightMissionMode_i_T uec;
    cell_wrap_1_FlightMissionMode_i_T ued;
    cell_wrap_1_FlightMissionMode_i_T uee;
    cell_wrap_1_FlightMissionMode_i_T uef;
    cell_wrap_1_FlightMissionMode_i_T ueg;
    cell_wrap_1_FlightMissionMode_i_T uf;
    cell_wrap_1_FlightMissionMode_i_T ufb;
    cell_wrap_1_FlightMissionMode_i_T ufc;
    cell_wrap_1_FlightMissionMode_i_T ufd;
    cell_wrap_1_FlightMissionMode_i_T ufe;
    cell_wrap_1_FlightMissionMode_i_T uff;
    cell_wrap_1_FlightMissionMode_i_T ufg;
    cell_wrap_1_FlightMissionMode_i_T ug;
    cell_wrap_1_FlightMissionMode_i_T ugb;
    cell_wrap_1_FlightMissionMode_i_T ugc;
    cell_wrap_1_FlightMissionMode_i_T ugd;
    cell_wrap_1_FlightMissionMode_i_T uge;
    cell_wrap_1_FlightMissionMode_i_T ugf;
    cell_wrap_1_FlightMissionMode_i_T ugg;
    cell_wrap_1_FlightMissionMode_i_T uh;
    cell_wrap_1_FlightMissionMode_i_T uhb;
    cell_wrap_1_FlightMissionMode_i_T uhc;
    cell_wrap_1_FlightMissionMode_i_T uhd;
    cell_wrap_1_FlightMissionMode_i_T uhe;
    cell_wrap_1_FlightMissionMode_i_T uhf;
    cell_wrap_1_FlightMissionMode_i_T uhg;
    cell_wrap_1_FlightMissionMode_i_T ui;
    cell_wrap_1_FlightMissionMode_i_T uib;
    cell_wrap_1_FlightMissionMode_i_T uic;
    cell_wrap_1_FlightMissionMode_i_T uid;
    cell_wrap_1_FlightMissionMode_i_T uie;
    cell_wrap_1_FlightMissionMode_i_T uif;
    cell_wrap_1_FlightMissionMode_i_T uig;
    cell_wrap_1_FlightMissionMode_i_T uj;
    cell_wrap_1_FlightMissionMode_i_T ujb;
    cell_wrap_1_FlightMissionMode_i_T ujc;
    cell_wrap_1_FlightMissionMode_i_T ujd;
    cell_wrap_1_FlightMissionMode_i_T uje;
    cell_wrap_1_FlightMissionMode_i_T ujf;
    cell_wrap_1_FlightMissionMode_i_T ujg;
    cell_wrap_1_FlightMissionMode_i_T uk;
    cell_wrap_1_FlightMissionMode_i_T ukb;
    cell_wrap_1_FlightMissionMode_i_T ukc;
    cell_wrap_1_FlightMissionMode_i_T ukd;
    cell_wrap_1_FlightMissionMode_i_T uke;
    cell_wrap_1_FlightMissionMode_i_T ukf;
    cell_wrap_1_FlightMissionMode_i_T ul;
    cell_wrap_1_FlightMissionMode_i_T ulb;
    cell_wrap_1_FlightMissionMode_i_T ulc;
    cell_wrap_1_FlightMissionMode_i_T uld;
    cell_wrap_1_FlightMissionMode_i_T ule;
    cell_wrap_1_FlightMissionMode_i_T ulf;
    cell_wrap_1_FlightMissionMode_i_T um;
    cell_wrap_1_FlightMissionMode_i_T umb;
    cell_wrap_1_FlightMissionMode_i_T umc;
    cell_wrap_1_FlightMissionMode_i_T umd;
    cell_wrap_1_FlightMissionMode_i_T ume;
    cell_wrap_1_FlightMissionMode_i_T umf;
    cell_wrap_1_FlightMissionMode_i_T un;
    cell_wrap_1_FlightMissionMode_i_T unb;
    cell_wrap_1_FlightMissionMode_i_T unc;
    cell_wrap_1_FlightMissionMode_i_T und;
    cell_wrap_1_FlightMissionMode_i_T une;
    cell_wrap_1_FlightMissionMode_i_T unf;
    cell_wrap_1_FlightMissionMode_i_T uo;
    cell_wrap_1_FlightMissionMode_i_T uob;
    cell_wrap_1_FlightMissionMode_i_T uoc;
    cell_wrap_1_FlightMissionMode_i_T uod;
    cell_wrap_1_FlightMissionMode_i_T uoe;
    cell_wrap_1_FlightMissionMode_i_T uof;
    cell_wrap_1_FlightMissionMode_i_T up;
    cell_wrap_1_FlightMissionMode_i_T upb;
    cell_wrap_1_FlightMissionMode_i_T upc;
    cell_wrap_1_FlightMissionMode_i_T upd;
    cell_wrap_1_FlightMissionMode_i_T upe;
    cell_wrap_1_FlightMissionMode_i_T upf;
    cell_wrap_1_FlightMissionMode_i_T uq;
    cell_wrap_1_FlightMissionMode_i_T uqb;
    cell_wrap_1_FlightMissionMode_i_T uqc;
    cell_wrap_1_FlightMissionMode_i_T uqd;
    cell_wrap_1_FlightMissionMode_i_T uqe;
    cell_wrap_1_FlightMissionMode_i_T uqf;
    cell_wrap_1_FlightMissionMode_i_T ur;
    cell_wrap_1_FlightMissionMode_i_T urb;
    cell_wrap_1_FlightMissionMode_i_T urc;
    cell_wrap_1_FlightMissionMode_i_T urd;
    cell_wrap_1_FlightMissionMode_i_T ure;
    cell_wrap_1_FlightMissionMode_i_T urf;
    cell_wrap_1_FlightMissionMode_i_T us;
    cell_wrap_1_FlightMissionMode_i_T usb;
    cell_wrap_1_FlightMissionMode_i_T usc;
    cell_wrap_1_FlightMissionMode_i_T usd;
    cell_wrap_1_FlightMissionMode_i_T use;
    cell_wrap_1_FlightMissionMode_i_T usf;
    cell_wrap_1_FlightMissionMode_i_T ut;
    cell_wrap_1_FlightMissionMode_i_T utb;
    cell_wrap_1_FlightMissionMode_i_T utc;
    cell_wrap_1_FlightMissionMode_i_T utd;
    cell_wrap_1_FlightMissionMode_i_T ute;
    cell_wrap_1_FlightMissionMode_i_T utf;
    cell_wrap_1_FlightMissionMode_i_T uu;
    cell_wrap_1_FlightMissionMode_i_T uub;
    cell_wrap_1_FlightMissionMode_i_T uuc;
    cell_wrap_1_FlightMissionMode_i_T uud;
    cell_wrap_1_FlightMissionMode_i_T uue;
    cell_wrap_1_FlightMissionMode_i_T uuf;
    cell_wrap_1_FlightMissionMode_i_T uv;
    cell_wrap_1_FlightMissionMode_i_T uvb;
    cell_wrap_1_FlightMissionMode_i_T uvc;
    cell_wrap_1_FlightMissionMode_i_T uvd;
    cell_wrap_1_FlightMissionMode_i_T uve;
    cell_wrap_1_FlightMissionMode_i_T uvf;
    cell_wrap_1_FlightMissionMode_i_T uw;
    cell_wrap_1_FlightMissionMode_i_T uwb;
    cell_wrap_1_FlightMissionMode_i_T uwc;
    cell_wrap_1_FlightMissionMode_i_T uwd;
    cell_wrap_1_FlightMissionMode_i_T uwe;
    cell_wrap_1_FlightMissionMode_i_T uwf;
    cell_wrap_1_FlightMissionMode_i_T ux;
    cell_wrap_1_FlightMissionMode_i_T uxb;
    cell_wrap_1_FlightMissionMode_i_T uxc;
    cell_wrap_1_FlightMissionMode_i_T uxd;
    cell_wrap_1_FlightMissionMode_i_T uxe;
    cell_wrap_1_FlightMissionMode_i_T uxf;
    cell_wrap_1_FlightMissionMode_i_T uy;
    cell_wrap_1_FlightMissionMode_i_T uyb;
    cell_wrap_1_FlightMissionMode_i_T uyc;
    cell_wrap_1_FlightMissionMode_i_T uyd;
    cell_wrap_1_FlightMissionMode_i_T uye;
    cell_wrap_1_FlightMissionMode_i_T uyf;
    cell_wrap_1_FlightMissionMode_i_T v;
    cell_wrap_1_FlightMissionMode_i_T vab;
    cell_wrap_1_FlightMissionMode_i_T vac;
    cell_wrap_1_FlightMissionMode_i_T vad;
    cell_wrap_1_FlightMissionMode_i_T vae;
    cell_wrap_1_FlightMissionMode_i_T vaf;
    cell_wrap_1_FlightMissionMode_i_T vag;
    cell_wrap_1_FlightMissionMode_i_T vb;
    cell_wrap_1_FlightMissionMode_i_T vbb;
    cell_wrap_1_FlightMissionMode_i_T vbc;
    cell_wrap_1_FlightMissionMode_i_T vbd;
    cell_wrap_1_FlightMissionMode_i_T vbe;
    cell_wrap_1_FlightMissionMode_i_T vbf;
    cell_wrap_1_FlightMissionMode_i_T vbg;
    cell_wrap_1_FlightMissionMode_i_T vc;
    cell_wrap_1_FlightMissionMode_i_T vcb;
    cell_wrap_1_FlightMissionMode_i_T vcc;
    cell_wrap_1_FlightMissionMode_i_T vcd;
    cell_wrap_1_FlightMissionMode_i_T vce;
    cell_wrap_1_FlightMissionMode_i_T vcf;
    cell_wrap_1_FlightMissionMode_i_T vcg;
    cell_wrap_1_FlightMissionMode_i_T vd;
    cell_wrap_1_FlightMissionMode_i_T vdb;
    cell_wrap_1_FlightMissionMode_i_T vdc;
    cell_wrap_1_FlightMissionMode_i_T vdd;
    cell_wrap_1_FlightMissionMode_i_T vde;
    cell_wrap_1_FlightMissionMode_i_T vdf;
    cell_wrap_1_FlightMissionMode_i_T vdg;
    cell_wrap_1_FlightMissionMode_i_T ve;
    cell_wrap_1_FlightMissionMode_i_T veb;
    cell_wrap_1_FlightMissionMode_i_T vec;
    cell_wrap_1_FlightMissionMode_i_T ved;
    cell_wrap_1_FlightMissionMode_i_T vee;
    cell_wrap_1_FlightMissionMode_i_T vef;
    cell_wrap_1_FlightMissionMode_i_T veg;
    cell_wrap_1_FlightMissionMode_i_T vf;
    cell_wrap_1_FlightMissionMode_i_T vfb;
    cell_wrap_1_FlightMissionMode_i_T vfc;
    cell_wrap_1_FlightMissionMode_i_T vfd;
    cell_wrap_1_FlightMissionMode_i_T vfe;
    cell_wrap_1_FlightMissionMode_i_T vff;
    cell_wrap_1_FlightMissionMode_i_T vfg;
    cell_wrap_1_FlightMissionMode_i_T vg;
    cell_wrap_1_FlightMissionMode_i_T vgb;
    cell_wrap_1_FlightMissionMode_i_T vgc;
    cell_wrap_1_FlightMissionMode_i_T vgd;
    cell_wrap_1_FlightMissionMode_i_T vge;
    cell_wrap_1_FlightMissionMode_i_T vgf;
    cell_wrap_1_FlightMissionMode_i_T vgg;
    cell_wrap_1_FlightMissionMode_i_T vh;
    cell_wrap_1_FlightMissionMode_i_T vhb;
    cell_wrap_1_FlightMissionMode_i_T vhc;
    cell_wrap_1_FlightMissionMode_i_T vhd;
    cell_wrap_1_FlightMissionMode_i_T vhe;
    cell_wrap_1_FlightMissionMode_i_T vhf;
    cell_wrap_1_FlightMissionMode_i_T vhg;
    cell_wrap_1_FlightMissionMode_i_T vi;
    cell_wrap_1_FlightMissionMode_i_T vib;
    cell_wrap_1_FlightMissionMode_i_T vic;
    cell_wrap_1_FlightMissionMode_i_T vid;
    cell_wrap_1_FlightMissionMode_i_T vie;
    cell_wrap_1_FlightMissionMode_i_T vif;
    cell_wrap_1_FlightMissionMode_i_T vig;
    cell_wrap_1_FlightMissionMode_i_T vj;
    cell_wrap_1_FlightMissionMode_i_T vjb;
    cell_wrap_1_FlightMissionMode_i_T vjc;
    cell_wrap_1_FlightMissionMode_i_T vjd;
    cell_wrap_1_FlightMissionMode_i_T vje;
    cell_wrap_1_FlightMissionMode_i_T vjf;
    cell_wrap_1_FlightMissionMode_i_T vjg;
    cell_wrap_1_FlightMissionMode_i_T vk;
    cell_wrap_1_FlightMissionMode_i_T vkb;
    cell_wrap_1_FlightMissionMode_i_T vkc;
    cell_wrap_1_FlightMissionMode_i_T vkd;
    cell_wrap_1_FlightMissionMode_i_T vke;
    cell_wrap_1_FlightMissionMode_i_T vkf;
    cell_wrap_1_FlightMissionMode_i_T vl;
    cell_wrap_1_FlightMissionMode_i_T vlb;
    cell_wrap_1_FlightMissionMode_i_T vlc;
    cell_wrap_1_FlightMissionMode_i_T vld;
    cell_wrap_1_FlightMissionMode_i_T vle;
    cell_wrap_1_FlightMissionMode_i_T vlf;
    cell_wrap_1_FlightMissionMode_i_T vm;
    cell_wrap_1_FlightMissionMode_i_T vmb;
    cell_wrap_1_FlightMissionMode_i_T vmc;
    cell_wrap_1_FlightMissionMode_i_T vmd;
    cell_wrap_1_FlightMissionMode_i_T vme;
    cell_wrap_1_FlightMissionMode_i_T vmf;
    cell_wrap_1_FlightMissionMode_i_T vn;
    cell_wrap_1_FlightMissionMode_i_T vnb;
    cell_wrap_1_FlightMissionMode_i_T vnc;
    cell_wrap_1_FlightMissionMode_i_T vnd;
    cell_wrap_1_FlightMissionMode_i_T vne;
    cell_wrap_1_FlightMissionMode_i_T vnf;
    cell_wrap_1_FlightMissionMode_i_T vo;
    cell_wrap_1_FlightMissionMode_i_T vob;
    cell_wrap_1_FlightMissionMode_i_T voc;
    cell_wrap_1_FlightMissionMode_i_T vod;
    cell_wrap_1_FlightMissionMode_i_T voe;
    cell_wrap_1_FlightMissionMode_i_T vof;
    cell_wrap_1_FlightMissionMode_i_T vp;
    cell_wrap_1_FlightMissionMode_i_T vpb;
    cell_wrap_1_FlightMissionMode_i_T vpc;
    cell_wrap_1_FlightMissionMode_i_T vpd;
    cell_wrap_1_FlightMissionMode_i_T vpe;
    cell_wrap_1_FlightMissionMode_i_T vpf;
    cell_wrap_1_FlightMissionMode_i_T vq;
    cell_wrap_1_FlightMissionMode_i_T vqb;
    cell_wrap_1_FlightMissionMode_i_T vqc;
    cell_wrap_1_FlightMissionMode_i_T vqd;
    cell_wrap_1_FlightMissionMode_i_T vqe;
    cell_wrap_1_FlightMissionMode_i_T vqf;
    cell_wrap_1_FlightMissionMode_i_T vr;
    cell_wrap_1_FlightMissionMode_i_T vrb;
    cell_wrap_1_FlightMissionMode_i_T vrc;
    cell_wrap_1_FlightMissionMode_i_T vrd;
    cell_wrap_1_FlightMissionMode_i_T vre;
    cell_wrap_1_FlightMissionMode_i_T vrf;
    cell_wrap_1_FlightMissionMode_i_T vs;
    cell_wrap_1_FlightMissionMode_i_T vsb;
    cell_wrap_1_FlightMissionMode_i_T vsc;
    cell_wrap_1_FlightMissionMode_i_T vsd;
    cell_wrap_1_FlightMissionMode_i_T vse;
    cell_wrap_1_FlightMissionMode_i_T vsf;
    cell_wrap_1_FlightMissionMode_i_T vt;
    cell_wrap_1_FlightMissionMode_i_T vtb;
    cell_wrap_1_FlightMissionMode_i_T vtc;
    cell_wrap_1_FlightMissionMode_i_T vtd;
    cell_wrap_1_FlightMissionMode_i_T vte;
    cell_wrap_1_FlightMissionMode_i_T vtf;
    cell_wrap_1_FlightMissionMode_i_T vu;
    cell_wrap_1_FlightMissionMode_i_T vub;
    cell_wrap_1_FlightMissionMode_i_T vuc;
    cell_wrap_1_FlightMissionMode_i_T vud;
    cell_wrap_1_FlightMissionMode_i_T vue;
    cell_wrap_1_FlightMissionMode_i_T vuf;
    cell_wrap_1_FlightMissionMode_i_T vv;
    cell_wrap_1_FlightMissionMode_i_T vvb;
    cell_wrap_1_FlightMissionMode_i_T vvc;
    cell_wrap_1_FlightMissionMode_i_T vvd;
    cell_wrap_1_FlightMissionMode_i_T vve;
    cell_wrap_1_FlightMissionMode_i_T vvf;
    cell_wrap_1_FlightMissionMode_i_T vw;
    cell_wrap_1_FlightMissionMode_i_T vwb;
    cell_wrap_1_FlightMissionMode_i_T vwc;
    cell_wrap_1_FlightMissionMode_i_T vwd;
    cell_wrap_1_FlightMissionMode_i_T vwe;
    cell_wrap_1_FlightMissionMode_i_T vwf;
    cell_wrap_1_FlightMissionMode_i_T vx;
    cell_wrap_1_FlightMissionMode_i_T vxb;
    cell_wrap_1_FlightMissionMode_i_T vxc;
    cell_wrap_1_FlightMissionMode_i_T vxd;
    cell_wrap_1_FlightMissionMode_i_T vxe;
    cell_wrap_1_FlightMissionMode_i_T vxf;
    cell_wrap_1_FlightMissionMode_i_T vy;
    cell_wrap_1_FlightMissionMode_i_T vyb;
    cell_wrap_1_FlightMissionMode_i_T vyc;
    cell_wrap_1_FlightMissionMode_i_T vyd;
    cell_wrap_1_FlightMissionMode_i_T vye;
    cell_wrap_1_FlightMissionMode_i_T vyf;
    cell_wrap_1_FlightMissionMode_i_T w;
    cell_wrap_1_FlightMissionMode_i_T wab;
    cell_wrap_1_FlightMissionMode_i_T wac;
    cell_wrap_1_FlightMissionMode_i_T wad;
    cell_wrap_1_FlightMissionMode_i_T wae;
    cell_wrap_1_FlightMissionMode_i_T waf;
    cell_wrap_1_FlightMissionMode_i_T wag;
    cell_wrap_1_FlightMissionMode_i_T wb;
    cell_wrap_1_FlightMissionMode_i_T wbb;
    cell_wrap_1_FlightMissionMode_i_T wbc;
    cell_wrap_1_FlightMissionMode_i_T wbd;
    cell_wrap_1_FlightMissionMode_i_T wbe;
    cell_wrap_1_FlightMissionMode_i_T wbf;
    cell_wrap_1_FlightMissionMode_i_T wbg;
    cell_wrap_1_FlightMissionMode_i_T wc;
    cell_wrap_1_FlightMissionMode_i_T wcb;
    cell_wrap_1_FlightMissionMode_i_T wcc;
    cell_wrap_1_FlightMissionMode_i_T wcd;
    cell_wrap_1_FlightMissionMode_i_T wce;
    cell_wrap_1_FlightMissionMode_i_T wcf;
    cell_wrap_1_FlightMissionMode_i_T wcg;
    cell_wrap_1_FlightMissionMode_i_T wd;
    cell_wrap_1_FlightMissionMode_i_T wdb;
    cell_wrap_1_FlightMissionMode_i_T wdc;
    cell_wrap_1_FlightMissionMode_i_T wdd;
    cell_wrap_1_FlightMissionMode_i_T wde;
    cell_wrap_1_FlightMissionMode_i_T wdf;
    cell_wrap_1_FlightMissionMode_i_T wdg;
    cell_wrap_1_FlightMissionMode_i_T we;
    cell_wrap_1_FlightMissionMode_i_T web;
    cell_wrap_1_FlightMissionMode_i_T wec;
    cell_wrap_1_FlightMissionMode_i_T wed;
    cell_wrap_1_FlightMissionMode_i_T wee;
    cell_wrap_1_FlightMissionMode_i_T wef;
    cell_wrap_1_FlightMissionMode_i_T weg;
    cell_wrap_1_FlightMissionMode_i_T wf;
    cell_wrap_1_FlightMissionMode_i_T wfb;
    cell_wrap_1_FlightMissionMode_i_T wfc;
    cell_wrap_1_FlightMissionMode_i_T wfd;
    cell_wrap_1_FlightMissionMode_i_T wfe;
    cell_wrap_1_FlightMissionMode_i_T wff;
    cell_wrap_1_FlightMissionMode_i_T wfg;
    cell_wrap_1_FlightMissionMode_i_T wg;
    cell_wrap_1_FlightMissionMode_i_T wgb;
    cell_wrap_1_FlightMissionMode_i_T wgc;
    cell_wrap_1_FlightMissionMode_i_T wgd;
    cell_wrap_1_FlightMissionMode_i_T wge;
    cell_wrap_1_FlightMissionMode_i_T wgf;
    cell_wrap_1_FlightMissionMode_i_T wgg;
    cell_wrap_1_FlightMissionMode_i_T wh;
    cell_wrap_1_FlightMissionMode_i_T whb;
    cell_wrap_1_FlightMissionMode_i_T whc;
    cell_wrap_1_FlightMissionMode_i_T whd;
    cell_wrap_1_FlightMissionMode_i_T whe;
    cell_wrap_1_FlightMissionMode_i_T whf;
    cell_wrap_1_FlightMissionMode_i_T whg;
    cell_wrap_1_FlightMissionMode_i_T wi;
    cell_wrap_1_FlightMissionMode_i_T wib;
    cell_wrap_1_FlightMissionMode_i_T wic;
    cell_wrap_1_FlightMissionMode_i_T wid;
    cell_wrap_1_FlightMissionMode_i_T wie;
    cell_wrap_1_FlightMissionMode_i_T wif;
    cell_wrap_1_FlightMissionMode_i_T wig;
    cell_wrap_1_FlightMissionMode_i_T wj;
    cell_wrap_1_FlightMissionMode_i_T wjb;
    cell_wrap_1_FlightMissionMode_i_T wjc;
    cell_wrap_1_FlightMissionMode_i_T wjd;
    cell_wrap_1_FlightMissionMode_i_T wje;
    cell_wrap_1_FlightMissionMode_i_T wjf;
    cell_wrap_1_FlightMissionMode_i_T wjg;
    cell_wrap_1_FlightMissionMode_i_T wk;
    cell_wrap_1_FlightMissionMode_i_T wkb;
    cell_wrap_1_FlightMissionMode_i_T wkc;
    cell_wrap_1_FlightMissionMode_i_T wkd;
    cell_wrap_1_FlightMissionMode_i_T wke;
    cell_wrap_1_FlightMissionMode_i_T wkf;
    cell_wrap_1_FlightMissionMode_i_T wl;
    cell_wrap_1_FlightMissionMode_i_T wlb;
    cell_wrap_1_FlightMissionMode_i_T wlc;
    cell_wrap_1_FlightMissionMode_i_T wld;
    cell_wrap_1_FlightMissionMode_i_T wle;
    cell_wrap_1_FlightMissionMode_i_T wlf;
    cell_wrap_1_FlightMissionMode_i_T wm;
    cell_wrap_1_FlightMissionMode_i_T wmb;
    cell_wrap_1_FlightMissionMode_i_T wmc;
    cell_wrap_1_FlightMissionMode_i_T wmd;
    cell_wrap_1_FlightMissionMode_i_T wme;
    cell_wrap_1_FlightMissionMode_i_T wmf;
    cell_wrap_1_FlightMissionMode_i_T wn;
    cell_wrap_1_FlightMissionMode_i_T wnb;
    cell_wrap_1_FlightMissionMode_i_T wnc;
    cell_wrap_1_FlightMissionMode_i_T wnd;
    cell_wrap_1_FlightMissionMode_i_T wne;
    cell_wrap_1_FlightMissionMode_i_T wnf;
    cell_wrap_1_FlightMissionMode_i_T wo;
    cell_wrap_1_FlightMissionMode_i_T wob;
    cell_wrap_1_FlightMissionMode_i_T woc;
    cell_wrap_1_FlightMissionMode_i_T wod;
    cell_wrap_1_FlightMissionMode_i_T woe;
    cell_wrap_1_FlightMissionMode_i_T wof;
    cell_wrap_1_FlightMissionMode_i_T wp;
    cell_wrap_1_FlightMissionMode_i_T wpb;
    cell_wrap_1_FlightMissionMode_i_T wpc;
    cell_wrap_1_FlightMissionMode_i_T wpd;
    cell_wrap_1_FlightMissionMode_i_T wpe;
    cell_wrap_1_FlightMissionMode_i_T wpf;
    cell_wrap_1_FlightMissionMode_i_T wq;
    cell_wrap_1_FlightMissionMode_i_T wqb;
    cell_wrap_1_FlightMissionMode_i_T wqc;
    cell_wrap_1_FlightMissionMode_i_T wqd;
    cell_wrap_1_FlightMissionMode_i_T wqe;
    cell_wrap_1_FlightMissionMode_i_T wqf;
    cell_wrap_1_FlightMissionMode_i_T wr;
    cell_wrap_1_FlightMissionMode_i_T wrb;
    cell_wrap_1_FlightMissionMode_i_T wrc;
    cell_wrap_1_FlightMissionMode_i_T wrd;
    cell_wrap_1_FlightMissionMode_i_T wre;
    cell_wrap_1_FlightMissionMode_i_T wrf;
    cell_wrap_1_FlightMissionMode_i_T ws;
    cell_wrap_1_FlightMissionMode_i_T wsb;
    cell_wrap_1_FlightMissionMode_i_T wsc;
    cell_wrap_1_FlightMissionMode_i_T wsd;
    cell_wrap_1_FlightMissionMode_i_T wse;
    cell_wrap_1_FlightMissionMode_i_T wsf;
    cell_wrap_1_FlightMissionMode_i_T wt;
    cell_wrap_1_FlightMissionMode_i_T wtb;
    cell_wrap_1_FlightMissionMode_i_T wtc;
    cell_wrap_1_FlightMissionMode_i_T wtd;
    cell_wrap_1_FlightMissionMode_i_T wte;
    cell_wrap_1_FlightMissionMode_i_T wtf;
    cell_wrap_1_FlightMissionMode_i_T wu;
    cell_wrap_1_FlightMissionMode_i_T wub;
    cell_wrap_1_FlightMissionMode_i_T wuc;
    cell_wrap_1_FlightMissionMode_i_T wud;
    cell_wrap_1_FlightMissionMode_i_T wue;
    cell_wrap_1_FlightMissionMode_i_T wuf;
    cell_wrap_1_FlightMissionMode_i_T wv;
    cell_wrap_1_FlightMissionMode_i_T wvb;
    cell_wrap_1_FlightMissionMode_i_T wvc;
    cell_wrap_1_FlightMissionMode_i_T wvd;
    cell_wrap_1_FlightMissionMode_i_T wve;
    cell_wrap_1_FlightMissionMode_i_T wvf;
    cell_wrap_1_FlightMissionMode_i_T ww;
    cell_wrap_1_FlightMissionMode_i_T wwb;
    cell_wrap_1_FlightMissionMode_i_T wwc;
    cell_wrap_1_FlightMissionMode_i_T wwd;
    cell_wrap_1_FlightMissionMode_i_T wwe;
    cell_wrap_1_FlightMissionMode_i_T wwf;
    cell_wrap_1_FlightMissionMode_i_T wx;
    cell_wrap_1_FlightMissionMode_i_T wxb;
    cell_wrap_1_FlightMissionMode_i_T wxc;
    cell_wrap_1_FlightMissionMode_i_T wxd;
    cell_wrap_1_FlightMissionMode_i_T wxe;
    cell_wrap_1_FlightMissionMode_i_T wxf;
    cell_wrap_1_FlightMissionMode_i_T wy;
    cell_wrap_1_FlightMissionMode_i_T wyb;
    cell_wrap_1_FlightMissionMode_i_T wyc;
    cell_wrap_1_FlightMissionMode_i_T wyd;
    cell_wrap_1_FlightMissionMode_i_T wye;
    cell_wrap_1_FlightMissionMode_i_T wyf;
    cell_wrap_1_FlightMissionMode_i_T x;
    cell_wrap_1_FlightMissionMode_i_T xab;
    cell_wrap_1_FlightMissionMode_i_T xac;
    cell_wrap_1_FlightMissionMode_i_T xad;
    cell_wrap_1_FlightMissionMode_i_T xae;
    cell_wrap_1_FlightMissionMode_i_T xaf;
    cell_wrap_1_FlightMissionMode_i_T xag;
    cell_wrap_1_FlightMissionMode_i_T xb;
    cell_wrap_1_FlightMissionMode_i_T xbb;
    cell_wrap_1_FlightMissionMode_i_T xbc;
    cell_wrap_1_FlightMissionMode_i_T xbd;
    cell_wrap_1_FlightMissionMode_i_T xbe;
    cell_wrap_1_FlightMissionMode_i_T xbf;
    cell_wrap_1_FlightMissionMode_i_T xbg;
    cell_wrap_1_FlightMissionMode_i_T xc;
    cell_wrap_1_FlightMissionMode_i_T xcb;
    cell_wrap_1_FlightMissionMode_i_T xcc;
    cell_wrap_1_FlightMissionMode_i_T xcd;
    cell_wrap_1_FlightMissionMode_i_T xce;
    cell_wrap_1_FlightMissionMode_i_T xcf;
    cell_wrap_1_FlightMissionMode_i_T xcg;
    cell_wrap_1_FlightMissionMode_i_T xd;
    cell_wrap_1_FlightMissionMode_i_T xdb;
    cell_wrap_1_FlightMissionMode_i_T xdc;
    cell_wrap_1_FlightMissionMode_i_T xdd;
    cell_wrap_1_FlightMissionMode_i_T xde;
    cell_wrap_1_FlightMissionMode_i_T xdf;
    cell_wrap_1_FlightMissionMode_i_T xdg;
    cell_wrap_1_FlightMissionMode_i_T xe;
    cell_wrap_1_FlightMissionMode_i_T xeb;
    cell_wrap_1_FlightMissionMode_i_T xec;
    cell_wrap_1_FlightMissionMode_i_T xed;
    cell_wrap_1_FlightMissionMode_i_T xee;
    cell_wrap_1_FlightMissionMode_i_T xef;
    cell_wrap_1_FlightMissionMode_i_T xeg;
    cell_wrap_1_FlightMissionMode_i_T xf;
    cell_wrap_1_FlightMissionMode_i_T xfb;
    cell_wrap_1_FlightMissionMode_i_T xfc;
    cell_wrap_1_FlightMissionMode_i_T xfd;
    cell_wrap_1_FlightMissionMode_i_T xfe;
    cell_wrap_1_FlightMissionMode_i_T xff;
    cell_wrap_1_FlightMissionMode_i_T xfg;
    cell_wrap_1_FlightMissionMode_i_T xg;
    cell_wrap_1_FlightMissionMode_i_T xgb;
    cell_wrap_1_FlightMissionMode_i_T xgc;
    cell_wrap_1_FlightMissionMode_i_T xgd;
    cell_wrap_1_FlightMissionMode_i_T xge;
    cell_wrap_1_FlightMissionMode_i_T xgf;
    cell_wrap_1_FlightMissionMode_i_T xgg;
    cell_wrap_1_FlightMissionMode_i_T xh;
    cell_wrap_1_FlightMissionMode_i_T xhb;
    cell_wrap_1_FlightMissionMode_i_T xhc;
    cell_wrap_1_FlightMissionMode_i_T xhd;
    cell_wrap_1_FlightMissionMode_i_T xhe;
    cell_wrap_1_FlightMissionMode_i_T xhf;
    cell_wrap_1_FlightMissionMode_i_T xhg;
    cell_wrap_1_FlightMissionMode_i_T xi;
    cell_wrap_1_FlightMissionMode_i_T xib;
    cell_wrap_1_FlightMissionMode_i_T xic;
    cell_wrap_1_FlightMissionMode_i_T xid;
    cell_wrap_1_FlightMissionMode_i_T xie;
    cell_wrap_1_FlightMissionMode_i_T xif;
    cell_wrap_1_FlightMissionMode_i_T xig;
    cell_wrap_1_FlightMissionMode_i_T xj;
    cell_wrap_1_FlightMissionMode_i_T xjb;
    cell_wrap_1_FlightMissionMode_i_T xjc;
    cell_wrap_1_FlightMissionMode_i_T xjd;
    cell_wrap_1_FlightMissionMode_i_T xje;
    cell_wrap_1_FlightMissionMode_i_T xjf;
    cell_wrap_1_FlightMissionMode_i_T xjg;
    cell_wrap_1_FlightMissionMode_i_T xk;
    cell_wrap_1_FlightMissionMode_i_T xkb;
    cell_wrap_1_FlightMissionMode_i_T xkc;
    cell_wrap_1_FlightMissionMode_i_T xkd;
    cell_wrap_1_FlightMissionMode_i_T xke;
    cell_wrap_1_FlightMissionMode_i_T xkf;
    cell_wrap_1_FlightMissionMode_i_T xl;
    cell_wrap_1_FlightMissionMode_i_T xlb;
    cell_wrap_1_FlightMissionMode_i_T xlc;
    cell_wrap_1_FlightMissionMode_i_T xld;
    cell_wrap_1_FlightMissionMode_i_T xle;
    cell_wrap_1_FlightMissionMode_i_T xlf;
    cell_wrap_1_FlightMissionMode_i_T xm;
    cell_wrap_1_FlightMissionMode_i_T xmb;
    cell_wrap_1_FlightMissionMode_i_T xmc;
    cell_wrap_1_FlightMissionMode_i_T xmd;
    cell_wrap_1_FlightMissionMode_i_T xme;
    cell_wrap_1_FlightMissionMode_i_T xmf;
    cell_wrap_1_FlightMissionMode_i_T xn;
    cell_wrap_1_FlightMissionMode_i_T xnb;
    cell_wrap_1_FlightMissionMode_i_T xnc;
    cell_wrap_1_FlightMissionMode_i_T xnd;
    cell_wrap_1_FlightMissionMode_i_T xne;
    cell_wrap_1_FlightMissionMode_i_T xnf;
    cell_wrap_1_FlightMissionMode_i_T xo;
    cell_wrap_1_FlightMissionMode_i_T xob;
    cell_wrap_1_FlightMissionMode_i_T xoc;
    cell_wrap_1_FlightMissionMode_i_T xod;
    cell_wrap_1_FlightMissionMode_i_T xoe;
    cell_wrap_1_FlightMissionMode_i_T xof;
    cell_wrap_1_FlightMissionMode_i_T xp;
    cell_wrap_1_FlightMissionMode_i_T xpb;
    cell_wrap_1_FlightMissionMode_i_T xpc;
    cell_wrap_1_FlightMissionMode_i_T xpd;
    cell_wrap_1_FlightMissionMode_i_T xpe;
    cell_wrap_1_FlightMissionMode_i_T xpf;
    cell_wrap_1_FlightMissionMode_i_T xq;
    cell_wrap_1_FlightMissionMode_i_T xqb;
    cell_wrap_1_FlightMissionMode_i_T xqc;
    cell_wrap_1_FlightMissionMode_i_T xqd;
    cell_wrap_1_FlightMissionMode_i_T xqe;
    cell_wrap_1_FlightMissionMode_i_T xqf;
    cell_wrap_1_FlightMissionMode_i_T xr;
    cell_wrap_1_FlightMissionMode_i_T xrb;
    cell_wrap_1_FlightMissionMode_i_T xrc;
    cell_wrap_1_FlightMissionMode_i_T xrd;
    cell_wrap_1_FlightMissionMode_i_T xre;
    cell_wrap_1_FlightMissionMode_i_T xrf;
    cell_wrap_1_FlightMissionMode_i_T xs;
    cell_wrap_1_FlightMissionMode_i_T xsb;
    cell_wrap_1_FlightMissionMode_i_T xsc;
    cell_wrap_1_FlightMissionMode_i_T xsd;
    cell_wrap_1_FlightMissionMode_i_T xse;
    cell_wrap_1_FlightMissionMode_i_T xsf;
    cell_wrap_1_FlightMissionMode_i_T xt;
    cell_wrap_1_FlightMissionMode_i_T xtb;
    cell_wrap_1_FlightMissionMode_i_T xtc;
    cell_wrap_1_FlightMissionMode_i_T xtd;
    cell_wrap_1_FlightMissionMode_i_T xte;
    cell_wrap_1_FlightMissionMode_i_T xtf;
    cell_wrap_1_FlightMissionMode_i_T xu;
    cell_wrap_1_FlightMissionMode_i_T xub;
    cell_wrap_1_FlightMissionMode_i_T xuc;
    cell_wrap_1_FlightMissionMode_i_T xud;
    cell_wrap_1_FlightMissionMode_i_T xue;
    cell_wrap_1_FlightMissionMode_i_T xuf;
    cell_wrap_1_FlightMissionMode_i_T xv;
    cell_wrap_1_FlightMissionMode_i_T xvb;
    cell_wrap_1_FlightMissionMode_i_T xvc;
    cell_wrap_1_FlightMissionMode_i_T xvd;
    cell_wrap_1_FlightMissionMode_i_T xve;
    cell_wrap_1_FlightMissionMode_i_T xvf;
    cell_wrap_1_FlightMissionMode_i_T xw;
    cell_wrap_1_FlightMissionMode_i_T xwb;
    cell_wrap_1_FlightMissionMode_i_T xwc;
    cell_wrap_1_FlightMissionMode_i_T xwd;
    cell_wrap_1_FlightMissionMode_i_T xwe;
    cell_wrap_1_FlightMissionMode_i_T xwf;
    cell_wrap_1_FlightMissionMode_i_T xx;
    cell_wrap_1_FlightMissionMode_i_T xxb;
    cell_wrap_1_FlightMissionMode_i_T xxc;
    cell_wrap_1_FlightMissionMode_i_T xxd;
    cell_wrap_1_FlightMissionMode_i_T xxe;
    cell_wrap_1_FlightMissionMode_i_T xxf;
    cell_wrap_1_FlightMissionMode_i_T xy;
    cell_wrap_1_FlightMissionMode_i_T xyb;
    cell_wrap_1_FlightMissionMode_i_T xyc;
    cell_wrap_1_FlightMissionMode_i_T xyd;
    cell_wrap_1_FlightMissionMode_i_T xye;
    cell_wrap_1_FlightMissionMode_i_T xyf;
    cell_wrap_1_FlightMissionMode_i_T y;
    cell_wrap_1_FlightMissionMode_i_T yab;
    cell_wrap_1_FlightMissionMode_i_T yac;
    cell_wrap_1_FlightMissionMode_i_T yad;
    cell_wrap_1_FlightMissionMode_i_T yae;
    cell_wrap_1_FlightMissionMode_i_T yaf;
    cell_wrap_1_FlightMissionMode_i_T yag;
    cell_wrap_1_FlightMissionMode_i_T yb;
    cell_wrap_1_FlightMissionMode_i_T ybb;
    cell_wrap_1_FlightMissionMode_i_T ybc;
    cell_wrap_1_FlightMissionMode_i_T ybd;
    cell_wrap_1_FlightMissionMode_i_T ybe;
    cell_wrap_1_FlightMissionMode_i_T ybf;
    cell_wrap_1_FlightMissionMode_i_T ybg;
    cell_wrap_1_FlightMissionMode_i_T yc;
    cell_wrap_1_FlightMissionMode_i_T ycb;
    cell_wrap_1_FlightMissionMode_i_T ycc;
    cell_wrap_1_FlightMissionMode_i_T ycd;
    cell_wrap_1_FlightMissionMode_i_T yce;
    cell_wrap_1_FlightMissionMode_i_T ycf;
    cell_wrap_1_FlightMissionMode_i_T ycg;
    cell_wrap_1_FlightMissionMode_i_T yd;
    cell_wrap_1_FlightMissionMode_i_T ydb;
    cell_wrap_1_FlightMissionMode_i_T ydc;
    cell_wrap_1_FlightMissionMode_i_T ydd;
    cell_wrap_1_FlightMissionMode_i_T yde;
    cell_wrap_1_FlightMissionMode_i_T ydf;
    cell_wrap_1_FlightMissionMode_i_T ydg;
    cell_wrap_1_FlightMissionMode_i_T ye;
    cell_wrap_1_FlightMissionMode_i_T yeb;
    cell_wrap_1_FlightMissionMode_i_T yec;
    cell_wrap_1_FlightMissionMode_i_T yed;
    cell_wrap_1_FlightMissionMode_i_T yee;
    cell_wrap_1_FlightMissionMode_i_T yef;
    cell_wrap_1_FlightMissionMode_i_T yeg;
    cell_wrap_1_FlightMissionMode_i_T yf;
    cell_wrap_1_FlightMissionMode_i_T yfb;
    cell_wrap_1_FlightMissionMode_i_T yfc;
    cell_wrap_1_FlightMissionMode_i_T yfd;
    cell_wrap_1_FlightMissionMode_i_T yfe;
    cell_wrap_1_FlightMissionMode_i_T yff;
    cell_wrap_1_FlightMissionMode_i_T yfg;
    cell_wrap_1_FlightMissionMode_i_T yg;
    cell_wrap_1_FlightMissionMode_i_T ygb;
    cell_wrap_1_FlightMissionMode_i_T ygc;
    cell_wrap_1_FlightMissionMode_i_T ygd;
    cell_wrap_1_FlightMissionMode_i_T yge;
    cell_wrap_1_FlightMissionMode_i_T ygf;
    cell_wrap_1_FlightMissionMode_i_T ygg;
    cell_wrap_1_FlightMissionMode_i_T yh;
    cell_wrap_1_FlightMissionMode_i_T yhb;
    cell_wrap_1_FlightMissionMode_i_T yhc;
    cell_wrap_1_FlightMissionMode_i_T yhd;
    cell_wrap_1_FlightMissionMode_i_T yhe;
    cell_wrap_1_FlightMissionMode_i_T yhf;
    cell_wrap_1_FlightMissionMode_i_T yhg;
    cell_wrap_1_FlightMissionMode_i_T yi;
    cell_wrap_1_FlightMissionMode_i_T yib;
    cell_wrap_1_FlightMissionMode_i_T yic;
    cell_wrap_1_FlightMissionMode_i_T yid;
    cell_wrap_1_FlightMissionMode_i_T yie;
    cell_wrap_1_FlightMissionMode_i_T yif;
    cell_wrap_1_FlightMissionMode_i_T yig;
    cell_wrap_1_FlightMissionMode_i_T yj;
    cell_wrap_1_FlightMissionMode_i_T yjb;
    cell_wrap_1_FlightMissionMode_i_T yjc;
    cell_wrap_1_FlightMissionMode_i_T yjd;
    cell_wrap_1_FlightMissionMode_i_T yje;
    cell_wrap_1_FlightMissionMode_i_T yjf;
    cell_wrap_1_FlightMissionMode_i_T yjg;
    cell_wrap_1_FlightMissionMode_i_T yk;
    cell_wrap_1_FlightMissionMode_i_T ykb;
    cell_wrap_1_FlightMissionMode_i_T ykc;
    cell_wrap_1_FlightMissionMode_i_T ykd;
    cell_wrap_1_FlightMissionMode_i_T yke;
    cell_wrap_1_FlightMissionMode_i_T ykf;
    cell_wrap_1_FlightMissionMode_i_T yl;
    cell_wrap_1_FlightMissionMode_i_T ylb;
    cell_wrap_1_FlightMissionMode_i_T ylc;
    cell_wrap_1_FlightMissionMode_i_T yld;
    cell_wrap_1_FlightMissionMode_i_T yle;
    cell_wrap_1_FlightMissionMode_i_T ylf;
    cell_wrap_1_FlightMissionMode_i_T ym;
    cell_wrap_1_FlightMissionMode_i_T ymb;
    cell_wrap_1_FlightMissionMode_i_T ymc;
    cell_wrap_1_FlightMissionMode_i_T ymd;
    cell_wrap_1_FlightMissionMode_i_T yme;
    cell_wrap_1_FlightMissionMode_i_T ymf;
    cell_wrap_1_FlightMissionMode_i_T ynb;
    cell_wrap_1_FlightMissionMode_i_T ync;
    cell_wrap_1_FlightMissionMode_i_T ynd;
    cell_wrap_1_FlightMissionMode_i_T yne;
    cell_wrap_1_FlightMissionMode_i_T yo;
    cell_wrap_1_FlightMissionMode_i_T yob;
    cell_wrap_1_FlightMissionMode_i_T yoc;
    cell_wrap_1_FlightMissionMode_i_T yod;
    cell_wrap_1_FlightMissionMode_i_T yoe;
    cell_wrap_1_FlightMissionMode_i_T yof;
    cell_wrap_1_FlightMissionMode_i_T yp;
    cell_wrap_1_FlightMissionMode_i_T ypb;
    cell_wrap_1_FlightMissionMode_i_T ypc;
    cell_wrap_1_FlightMissionMode_i_T ypd;
    cell_wrap_1_FlightMissionMode_i_T ype;
    cell_wrap_1_FlightMissionMode_i_T ypf;
    cell_wrap_1_FlightMissionMode_i_T yq;
    cell_wrap_1_FlightMissionMode_i_T yqb;
    cell_wrap_1_FlightMissionMode_i_T yqc;
    cell_wrap_1_FlightMissionMode_i_T yqd;
    cell_wrap_1_FlightMissionMode_i_T yqe;
    cell_wrap_1_FlightMissionMode_i_T yqf;
    cell_wrap_1_FlightMissionMode_i_T yr;
    cell_wrap_1_FlightMissionMode_i_T yrb;
    cell_wrap_1_FlightMissionMode_i_T yrc;
    cell_wrap_1_FlightMissionMode_i_T yrd;
    cell_wrap_1_FlightMissionMode_i_T yre;
    cell_wrap_1_FlightMissionMode_i_T yrf;
    cell_wrap_1_FlightMissionMode_i_T ys;
    cell_wrap_1_FlightMissionMode_i_T ysb;
    cell_wrap_1_FlightMissionMode_i_T ysc;
    cell_wrap_1_FlightMissionMode_i_T ysd;
    cell_wrap_1_FlightMissionMode_i_T yse;
    cell_wrap_1_FlightMissionMode_i_T ysf;
    cell_wrap_1_FlightMissionMode_i_T yt;
    cell_wrap_1_FlightMissionMode_i_T ytb;
    cell_wrap_1_FlightMissionMode_i_T ytc;
    cell_wrap_1_FlightMissionMode_i_T ytd;
    cell_wrap_1_FlightMissionMode_i_T yte;
    cell_wrap_1_FlightMissionMode_i_T ytf;
    cell_wrap_1_FlightMissionMode_i_T yu;
    cell_wrap_1_FlightMissionMode_i_T yub;
    cell_wrap_1_FlightMissionMode_i_T yuc;
    cell_wrap_1_FlightMissionMode_i_T yud;
    cell_wrap_1_FlightMissionMode_i_T yue;
    cell_wrap_1_FlightMissionMode_i_T yuf;
    cell_wrap_1_FlightMissionMode_i_T yv;
    cell_wrap_1_FlightMissionMode_i_T yvb;
    cell_wrap_1_FlightMissionMode_i_T yvc;
    cell_wrap_1_FlightMissionMode_i_T yvd;
    cell_wrap_1_FlightMissionMode_i_T yve;
    cell_wrap_1_FlightMissionMode_i_T yvf;
    cell_wrap_1_FlightMissionMode_i_T yw;
    cell_wrap_1_FlightMissionMode_i_T ywb;
    cell_wrap_1_FlightMissionMode_i_T ywc;
    cell_wrap_1_FlightMissionMode_i_T ywd;
    cell_wrap_1_FlightMissionMode_i_T ywe;
    cell_wrap_1_FlightMissionMode_i_T ywf;
    cell_wrap_1_FlightMissionMode_i_T yx;
    cell_wrap_1_FlightMissionMode_i_T yxb;
    cell_wrap_1_FlightMissionMode_i_T yxc;
    cell_wrap_1_FlightMissionMode_i_T yxd;
    cell_wrap_1_FlightMissionMode_i_T yxe;
    cell_wrap_1_FlightMissionMode_i_T yxf;
    cell_wrap_1_FlightMissionMode_i_T yy;
    cell_wrap_1_FlightMissionMode_i_T yyb;
    cell_wrap_1_FlightMissionMode_i_T yyc;
    cell_wrap_1_FlightMissionMode_i_T yyd;
    cell_wrap_1_FlightMissionMode_i_T yye;
    cell_wrap_1_FlightMissionMode_i_T yyf;
    int32_T tmp;
    FlightMissionMode_emxInitStruct_cell_wrap_1(&b);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&c);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&d);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&e);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&f);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&g);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&h);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&i);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&j);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&k);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&l);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&m);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&n);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&o);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&p);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&q);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&r);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&s);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&t);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&u);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&v);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&w);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&x);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&y);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&db);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&id);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&md);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&od);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&td);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&be);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&de);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&he);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&je);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&le);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&me);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&re);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&se);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&te);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&we);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&af);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&df);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&of);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ng);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&og);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ug);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ah);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ch);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ih);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ph);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&th);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yh);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ai);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ci);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&di);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ei);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ii);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ji);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ki);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&li);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ni);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ri);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&si);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ti);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ui);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yi);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ej);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ij);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yj);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ak);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ck);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ek);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ik);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ok);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yk);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&al);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&el);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&il);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ll);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ml);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ol);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ql);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ul);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yl);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&am);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&em);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&im);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&km);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&om);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&um);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xm);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ym);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&an);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&en);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&in);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ln);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&on);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&un);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xn);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ao);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&co);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&go);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ho);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&io);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ko);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&no);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&po);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ro);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&so);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&to);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yo);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ap);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ep);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ip);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&np);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&op);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&up);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yp);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yq);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ar);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&br);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&er);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ir);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ur);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yr);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&as);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bs);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cs);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ds);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&es);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fs);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gs);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hs);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&is);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&js);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ks);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ls);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ms);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ns);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&os);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ps);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qs);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rs);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ss);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ts);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&us);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vs);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ws);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xs);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ys);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&at);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ct);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&et);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ft);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ht);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&it);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ot);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&st);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ut);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yt);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&au);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&du);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ju);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ku);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ou);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ru);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&su);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yu);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&av);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ev);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ov);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yv);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ew);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ow);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ww);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yw);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ax);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ex);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ix);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ox);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&px);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ux);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yx);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ay);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&by);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ey);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ky);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ly);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&my);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ny);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&py);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ry);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ty);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yy);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yab);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&abb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ebb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ibb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&obb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ubb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xbb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ybb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&acb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ccb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ecb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&icb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ncb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ocb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&scb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ucb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xcb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ycb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&adb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ddb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&edb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&idb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ldb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ndb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&odb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&udb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xdb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ydb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aeb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&beb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ceb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&deb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eeb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&feb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&geb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&heb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ieb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jeb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&keb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&leb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&meb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&neb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oeb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&peb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qeb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&reb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&seb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&teb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ueb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&veb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&web);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xeb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yeb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&afb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&efb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ffb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ifb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ofb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ufb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yfb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&agb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&egb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ggb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&igb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ngb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ogb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ugb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xgb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ygb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ahb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&chb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ehb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ghb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ihb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&khb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ohb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&phb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&shb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&thb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&whb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yhb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ajb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&djb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ejb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ijb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ljb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&njb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ojb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ujb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yjb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&akb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ckb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ekb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ikb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&okb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&skb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ukb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xkb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ykb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&alb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&blb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&clb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&elb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&flb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&glb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ilb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&klb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&llb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&olb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&plb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&slb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ulb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xlb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ylb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&amb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&emb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&imb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&omb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&smb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&umb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xmb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ymb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&anb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&enb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&inb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&knb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&onb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&snb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&unb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xnb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ynb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&job);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&apb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&epb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ipb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&npb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&opb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ppb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&spb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&upb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xpb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ypb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yqb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&arb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&brb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&crb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&drb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&erb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&frb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&grb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&irb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&krb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&orb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&prb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&srb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&trb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&urb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yrb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&asb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&csb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&esb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&isb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ksb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&msb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&osb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&psb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ssb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&usb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xsb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ysb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&atb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&btb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ctb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dtb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&etb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ftb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gtb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&htb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&itb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jtb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ktb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ltb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mtb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ntb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&otb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ptb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qtb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rtb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&stb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ttb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&utb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vtb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wtb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xtb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ytb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&avb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&evb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ivb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ovb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&svb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yvb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&awb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ewb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&owb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&swb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&twb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xwb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ywb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&axb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&exb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ixb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&txb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yxb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ayb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&byb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&myb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ryb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&syb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yyb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&abc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ebc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ibc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&obc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ubc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xbc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ybc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&acc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ccc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ecc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&icc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ncc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&occ);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&scc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ucc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xcc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ycc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&adc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ddc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&edc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&idc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ldc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ndc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&odc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&udc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xdc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ydc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&afc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&efc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ffc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ifc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ofc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ufc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yfc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&agc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&egc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ggc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&igc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ngc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ogc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ugc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xgc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ygc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ahc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&chc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ehc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ghc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ihc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&khc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ohc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&phc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&shc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&thc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&whc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yhc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ric);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ajc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&djc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ejc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ijc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ljc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&njc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ojc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ujc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yjc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&akc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ckc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ekc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ikc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&okc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&skc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ukc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xkc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ykc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&alc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&blc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&clc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&elc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&flc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&glc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ilc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&klc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&llc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&olc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&plc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&slc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ulc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xlc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ylc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&amc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&emc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&imc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&omc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&smc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&umc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xmc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ymc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&anc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&enc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&inc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&knc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&onc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&snc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&unc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xnc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ync);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aoc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&boc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&coc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&doc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eoc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&foc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&goc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hoc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ioc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&joc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&koc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&loc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&moc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&noc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ooc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&poc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qoc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&roc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&soc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&toc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uoc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&voc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&woc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xoc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yoc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&apc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&epc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ipc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&npc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&opc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ppc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&spc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&upc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xpc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ypc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yqc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&arc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&brc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&crc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&drc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&erc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&frc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&grc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&irc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&krc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&orc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&prc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&src);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&trc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&urc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yrc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&asc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&csc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&esc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&isc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ksc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&msc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&osc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&psc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ssc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&usc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xsc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ysc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&atc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&btc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ctc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dtc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&etc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ftc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gtc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&htc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&itc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jtc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ktc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ltc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mtc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ntc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&otc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ptc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qtc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rtc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&stc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ttc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&utc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vtc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wtc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xtc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ytc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&auc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&buc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&duc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&euc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&guc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&huc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&juc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&luc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&muc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ouc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&puc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&quc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ruc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&suc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yuc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&avc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&evc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ivc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ovc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&svc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yvc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&awc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ewc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&owc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&swc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&twc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xwc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ywc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&axc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&exc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ixc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&txc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yxc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ayc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&byc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&myc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ryc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&syc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yyc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ead);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&had);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&abd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ebd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ibd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&obd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ubd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xbd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ybd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&acd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ccd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ecd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&icd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ncd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ocd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&scd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ucd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xcd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ycd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&add);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ddd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&edd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&idd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ldd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ndd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&odd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&udd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xdd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ydd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ced);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ded);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ged);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ied);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ked);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&led);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&med);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ned);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ped);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&red);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ted);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ued);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ved);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&afd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&efd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ffd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ifd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ofd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ufd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yfd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&agd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&egd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ggd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&igd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ngd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ogd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ugd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xgd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ygd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ahd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&chd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ehd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ghd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ihd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&khd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ohd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&phd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&shd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&thd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&whd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yhd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&did);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tid_0);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yid);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ajd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&djd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ejd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ijd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ljd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&njd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ojd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ujd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yjd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&akd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ckd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ekd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ikd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&okd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&skd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ukd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xkd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ykd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ald);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ild);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&old);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&amd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&emd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&imd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&omd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&smd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&umd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xmd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ymd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&end);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ind);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&knd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ond);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&snd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&und);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xnd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ynd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&god);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ood);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yod);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&apd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&epd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ipd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&npd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&opd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ppd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&spd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&upd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xpd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ypd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yqd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ard);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&brd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&crd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&drd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&erd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&frd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&grd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ird);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&krd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ord);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&prd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&srd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&trd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&urd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yrd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&asd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&csd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&esd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&isd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ksd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&msd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&osd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&psd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ssd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&usd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xsd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ysd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&atd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&btd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ctd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dtd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&etd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ftd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gtd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&htd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&itd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jtd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ktd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ltd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mtd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ntd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&otd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ptd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qtd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rtd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ttd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&utd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vtd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wtd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xtd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ytd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&avd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&evd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ivd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ovd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&svd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yvd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&awd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ewd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&owd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&swd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&twd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xwd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ywd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&axd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&exd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ixd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&txd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yxd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ayd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&byd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&myd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ryd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&syd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yyd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&abe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ebe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ibe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&obe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ube);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xbe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ybe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ace);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ece);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ice);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ade);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ede);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ide);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ode);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ude);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yde);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ree);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&see);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&afe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&efe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ffe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ife);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ofe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ufe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yfe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&age);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ege);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ige);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ahe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&che);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ehe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ghe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ihe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&khe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ohe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&phe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&she);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&the);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&whe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yhe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&die);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ije);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yje);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ake);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ike);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ske);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ale);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ble);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ele);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ile);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ole);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ple);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ule);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yle);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ame);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ime);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ome);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ume);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yme);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ane);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ene);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ine);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&one);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&une);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aoe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&boe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&coe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&doe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eoe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&foe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&goe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hoe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ioe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&joe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&koe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&loe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&moe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&noe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ooe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&poe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qoe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&roe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&soe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&toe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uoe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&voe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&woe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xoe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yoe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ape);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&epe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ipe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&npe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ope);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ppe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&spe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&upe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xpe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ype);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yqe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&are);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ere);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ire);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ore);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ure);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yre);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ase);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ese);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ise);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ose);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&use);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yse);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ate);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ete);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ite);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ote);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ste);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ute);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yte);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&due);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&que);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ave);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ive);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ove);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&awe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ewe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&owe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&swe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&twe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xwe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ywe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&axe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&exe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ixe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&txe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yxe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&baf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&caf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&daf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&faf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&haf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&laf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&maf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&naf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&paf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&raf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&saf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&taf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&waf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yaf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&abf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ebf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ibf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&obf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ubf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xbf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ybf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&acf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ccf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ecf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&icf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ncf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ocf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&scf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ucf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xcf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ycf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&adf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ddf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&edf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&idf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ldf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ndf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&odf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&udf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xdf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ydf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&def);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ief);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ref);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&off);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&agf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&egf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ggf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&igf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ngf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ogf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ugf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xgf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ygf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ahf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&chf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ehf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ghf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ihf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&khf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ohf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&phf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&shf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&thf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&whf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yhf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yif);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ajf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&djf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ejf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ijf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ljf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&njf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ojf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ujf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yjf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&akf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ckf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ekf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ikf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&okf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&skf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ukf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xkf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ykf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&alf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&blf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&clf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&elf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&flf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&glf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ilf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&klf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&llf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&olf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&plf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&slf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ulf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xlf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ylf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&amf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&emf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&imf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&omf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&smf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&umf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xmf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ymf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&anf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&enf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&inf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&knf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&onf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&snf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&unf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xnf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yof);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&apf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&epf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ipf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&npf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&opf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ppf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&spf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&upf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xpf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ypf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yqf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&arf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&brf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&crf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&drf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&frf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&grf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&irf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&krf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&orf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&prf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&srf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&trf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&urf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yrf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&asf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&csf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&esf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&isf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ksf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&msf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&osf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&psf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ssf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&usf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xsf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ysf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&atf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&btf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ctf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dtf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&etf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ftf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gtf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&htf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&itf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jtf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ktf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ltf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mtf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ntf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&otf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ptf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qtf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rtf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&stf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ttf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&utf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vtf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wtf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xtf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ytf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&auf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&buf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&duf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&euf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&guf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&huf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&juf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&luf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&muf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ouf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&puf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&quf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ruf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&suf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yuf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&avf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&evf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ivf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ovf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&svf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yvf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&awf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ewf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&owf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&swf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&twf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xwf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ywf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&axf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&exf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ixf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&txf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yxf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ayf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&byf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&myf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ryf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&syf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yyf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yag);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&abg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ebg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ibg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&obg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ubg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xbg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ybg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&acg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ccg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ecg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&icg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ncg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ocg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&scg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ucg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xcg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ycg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&adg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ddg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&edg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&idg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ldg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ndg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&odg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&udg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xdg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ydg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aeg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&beg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ceg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&deg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eeg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&feg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&geg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&heg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ieg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jeg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&keg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&leg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&meg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&neg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oeg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&peg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qeg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&reg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&seg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&teg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ueg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&veg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&weg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xeg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yeg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&afg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&efg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ffg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ifg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ofg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ufg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yfg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&agg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&egg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ggg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&igg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ngg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ogg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ugg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xgg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ygg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ahg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&chg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ehg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ghg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ihg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&khg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ohg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&phg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&shg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&thg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&whg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yhg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&aig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&big);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&eig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&iig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yig);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ajg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&djg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ejg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ijg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ljg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&njg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ojg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ujg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yjg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&akg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bkg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ckg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dkg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ekg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fkg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gkg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hkg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ikg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jkg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kkg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lkg);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mkg);
    tmp = static_cast<int32_T>(b.f1->size[0] * b.f1->size[1]);
    b.f1->size[0] = 1;
    b.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(b.f1, tmp);
    b.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(c.f1->size[0] * c.f1->size[1]);
    c.f1->size[0] = 1;
    c.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(c.f1, tmp);
    c.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(d.f1->size[0] * d.f1->size[1]);
    d.f1->size[0] = 1;
    d.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(d.f1, tmp);
    d.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(e.f1->size[0] * e.f1->size[1]);
    e.f1->size[0] = 1;
    e.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(e.f1, tmp);
    e.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[0].f1[0], &b);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[0].f1[1], &c);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[0].f1[2], &d);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[0].f1[3], &e);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(f.f1->size[0] * f.f1->size[1]);
    f.f1->size[0] = 1;
    f.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(f.f1, tmp);
    f.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(g.f1->size[0] * g.f1->size[1]);
    g.f1->size[0] = 1;
    g.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(g.f1, tmp);
    g.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(h.f1->size[0] * h.f1->size[1]);
    h.f1->size[0] = 1;
    h.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(h.f1, tmp);
    h.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(i.f1->size[0] * i.f1->size[1]);
    i.f1->size[0] = 1;
    i.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(i.f1, tmp);
    i.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[1].f1[0], &f);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[1].f1[1], &g);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[1].f1[2], &h);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[1].f1[3], &i);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(j.f1->size[0] * j.f1->size[1]);
    j.f1->size[0] = 1;
    j.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(j.f1, tmp);
    j.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(k.f1->size[0] * k.f1->size[1]);
    k.f1->size[0] = 1;
    k.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(k.f1, tmp);
    k.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(l.f1->size[0] * l.f1->size[1]);
    l.f1->size[0] = 1;
    l.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(l.f1, tmp);
    l.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(m.f1->size[0] * m.f1->size[1]);
    m.f1->size[0] = 1;
    m.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(m.f1, tmp);
    m.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[2].f1[0], &j);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[2].f1[1], &k);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[2].f1[2], &l);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[2].f1[3], &m);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(n.f1->size[0] * n.f1->size[1]);
    n.f1->size[0] = 1;
    n.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(n.f1, tmp);
    n.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(o.f1->size[0] * o.f1->size[1]);
    o.f1->size[0] = 1;
    o.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(o.f1, tmp);
    o.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(p.f1->size[0] * p.f1->size[1]);
    p.f1->size[0] = 1;
    p.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(p.f1, tmp);
    p.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(q.f1->size[0] * q.f1->size[1]);
    q.f1->size[0] = 1;
    q.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(q.f1, tmp);
    q.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[3].f1[0], &n);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[3].f1[1], &o);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[3].f1[2], &p);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[3].f1[3], &q);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(r.f1->size[0] * r.f1->size[1]);
    r.f1->size[0] = 1;
    r.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(r.f1, tmp);
    r.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(s.f1->size[0] * s.f1->size[1]);
    s.f1->size[0] = 1;
    s.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(s.f1, tmp);
    s.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(t.f1->size[0] * t.f1->size[1]);
    t.f1->size[0] = 1;
    t.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(t.f1, tmp);
    t.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(u.f1->size[0] * u.f1->size[1]);
    u.f1->size[0] = 1;
    u.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(u.f1, tmp);
    u.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[4].f1[0], &r);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[4].f1[1], &s);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[4].f1[2], &t);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[4].f1[3], &u);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(v.f1->size[0] * v.f1->size[1]);
    v.f1->size[0] = 1;
    v.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(v.f1, tmp);
    v.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(w.f1->size[0] * w.f1->size[1]);
    w.f1->size[0] = 1;
    w.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(w.f1, tmp);
    w.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(x.f1->size[0] * x.f1->size[1]);
    x.f1->size[0] = 1;
    x.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(x.f1, tmp);
    x.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(y.f1->size[0] * y.f1->size[1]);
    y.f1->size[0] = 1;
    y.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(y.f1, tmp);
    y.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[5].f1[0], &v);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[5].f1[1], &w);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[5].f1[2], &x);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[5].f1[3], &y);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ab.f1->size[0] * ab.f1->size[1]);
    ab.f1->size[0] = 1;
    ab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ab.f1, tmp);
    ab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bb.f1->size[0] * bb.f1->size[1]);
    bb.f1->size[0] = 1;
    bb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bb.f1, tmp);
    bb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cb.f1->size[0] * cb.f1->size[1]);
    cb.f1->size[0] = 1;
    cb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cb.f1, tmp);
    cb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(db.f1->size[0] * db.f1->size[1]);
    db.f1->size[0] = 1;
    db.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(db.f1, tmp);
    db.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[6].f1[0], &ab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[6].f1[1], &bb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[6].f1[2], &cb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[6].f1[3], &db);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(eb.f1->size[0] * eb.f1->size[1]);
    eb.f1->size[0] = 1;
    eb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eb.f1, tmp);
    eb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fb.f1->size[0] * fb.f1->size[1]);
    fb.f1->size[0] = 1;
    fb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fb.f1, tmp);
    fb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gb.f1->size[0] * gb.f1->size[1]);
    gb.f1->size[0] = 1;
    gb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gb.f1, tmp);
    gb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hb.f1->size[0] * hb.f1->size[1]);
    hb.f1->size[0] = 1;
    hb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hb.f1, tmp);
    hb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[7].f1[0], &eb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[7].f1[1], &fb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[7].f1[2], &gb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[7].f1[3], &hb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ib.f1->size[0] * ib.f1->size[1]);
    ib.f1->size[0] = 1;
    ib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ib.f1, tmp);
    ib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jb.f1->size[0] * jb.f1->size[1]);
    jb.f1->size[0] = 1;
    jb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jb.f1, tmp);
    jb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kb.f1->size[0] * kb.f1->size[1]);
    kb.f1->size[0] = 1;
    kb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kb.f1, tmp);
    kb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lb.f1->size[0] * lb.f1->size[1]);
    lb.f1->size[0] = 1;
    lb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lb.f1, tmp);
    lb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[8].f1[0], &ib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[8].f1[1], &jb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[8].f1[2], &kb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[8].f1[3], &lb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mb.f1->size[0] * mb.f1->size[1]);
    mb.f1->size[0] = 1;
    mb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mb.f1, tmp);
    mb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nb.f1->size[0] * nb.f1->size[1]);
    nb.f1->size[0] = 1;
    nb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nb.f1, tmp);
    nb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ob.f1->size[0] * ob.f1->size[1]);
    ob.f1->size[0] = 1;
    ob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ob.f1, tmp);
    ob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pb.f1->size[0] * pb.f1->size[1]);
    pb.f1->size[0] = 1;
    pb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pb.f1, tmp);
    pb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[9].f1[0], &mb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[9].f1[1], &nb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[9].f1[2], &ob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[9].f1[3], &pb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qb.f1->size[0] * qb.f1->size[1]);
    qb.f1->size[0] = 1;
    qb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qb.f1, tmp);
    qb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rb.f1->size[0] * rb.f1->size[1]);
    rb.f1->size[0] = 1;
    rb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rb.f1, tmp);
    rb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sb.f1->size[0] * sb.f1->size[1]);
    sb.f1->size[0] = 1;
    sb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sb.f1, tmp);
    sb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tb.f1->size[0] * tb.f1->size[1]);
    tb.f1->size[0] = 1;
    tb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tb.f1, tmp);
    tb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[10].f1[0], &qb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[10].f1[1], &rb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[10].f1[2], &sb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[10].f1[3], &tb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ub.f1->size[0] * ub.f1->size[1]);
    ub.f1->size[0] = 1;
    ub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ub.f1, tmp);
    ub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vb.f1->size[0] * vb.f1->size[1]);
    vb.f1->size[0] = 1;
    vb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vb.f1, tmp);
    vb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wb.f1->size[0] * wb.f1->size[1]);
    wb.f1->size[0] = 1;
    wb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wb.f1, tmp);
    wb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xb.f1->size[0] * xb.f1->size[1]);
    xb.f1->size[0] = 1;
    xb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xb.f1, tmp);
    xb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[11].f1[0], &ub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[11].f1[1], &vb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[11].f1[2], &wb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[11].f1[3], &xb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(yb.f1->size[0] * yb.f1->size[1]);
    yb.f1->size[0] = 1;
    yb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yb.f1, tmp);
    yb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ac.f1->size[0] * ac.f1->size[1]);
    ac.f1->size[0] = 1;
    ac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ac.f1, tmp);
    ac.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bc.f1->size[0] * bc.f1->size[1]);
    bc.f1->size[0] = 1;
    bc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bc.f1, tmp);
    bc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cc.f1->size[0] * cc.f1->size[1]);
    cc.f1->size[0] = 1;
    cc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cc.f1, tmp);
    cc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[12].f1[0], &yb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[12].f1[1], &ac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[12].f1[2], &bc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[12].f1[3], &cc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dc.f1->size[0] * dc.f1->size[1]);
    dc.f1->size[0] = 1;
    dc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dc.f1, tmp);
    dc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ec.f1->size[0] * ec.f1->size[1]);
    ec.f1->size[0] = 1;
    ec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ec.f1, tmp);
    ec.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fc.f1->size[0] * fc.f1->size[1]);
    fc.f1->size[0] = 1;
    fc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fc.f1, tmp);
    fc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gc.f1->size[0] * gc.f1->size[1]);
    gc.f1->size[0] = 1;
    gc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gc.f1, tmp);
    gc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[13].f1[0], &dc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[13].f1[1], &ec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[13].f1[2], &fc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[13].f1[3], &gc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hc.f1->size[0] * hc.f1->size[1]);
    hc.f1->size[0] = 1;
    hc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hc.f1, tmp);
    hc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ic.f1->size[0] * ic.f1->size[1]);
    ic.f1->size[0] = 1;
    ic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ic.f1, tmp);
    ic.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jc.f1->size[0] * jc.f1->size[1]);
    jc.f1->size[0] = 1;
    jc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jc.f1, tmp);
    jc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kc.f1->size[0] * kc.f1->size[1]);
    kc.f1->size[0] = 1;
    kc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kc.f1, tmp);
    kc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[14].f1[0], &hc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[14].f1[1], &ic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[14].f1[2], &jc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[14].f1[3], &kc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(lc.f1->size[0] * lc.f1->size[1]);
    lc.f1->size[0] = 1;
    lc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lc.f1, tmp);
    lc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mc.f1->size[0] * mc.f1->size[1]);
    mc.f1->size[0] = 1;
    mc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mc.f1, tmp);
    mc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nc.f1->size[0] * nc.f1->size[1]);
    nc.f1->size[0] = 1;
    nc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nc.f1, tmp);
    nc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(oc.f1->size[0] * oc.f1->size[1]);
    oc.f1->size[0] = 1;
    oc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oc.f1, tmp);
    oc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[15].f1[0], &lc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[15].f1[1], &mc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[15].f1[2], &nc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[15].f1[3], &oc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(pc.f1->size[0] * pc.f1->size[1]);
    pc.f1->size[0] = 1;
    pc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pc.f1, tmp);
    pc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qc.f1->size[0] * qc.f1->size[1]);
    qc.f1->size[0] = 1;
    qc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qc.f1, tmp);
    qc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rc.f1->size[0] * rc.f1->size[1]);
    rc.f1->size[0] = 1;
    rc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rc.f1, tmp);
    rc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sc.f1->size[0] * sc.f1->size[1]);
    sc.f1->size[0] = 1;
    sc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sc.f1, tmp);
    sc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[16].f1[0], &pc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[16].f1[1], &qc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[16].f1[2], &rc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[16].f1[3], &sc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(tc.f1->size[0] * tc.f1->size[1]);
    tc.f1->size[0] = 1;
    tc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tc.f1, tmp);
    tc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uc.f1->size[0] * uc.f1->size[1]);
    uc.f1->size[0] = 1;
    uc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uc.f1, tmp);
    uc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vc.f1->size[0] * vc.f1->size[1]);
    vc.f1->size[0] = 1;
    vc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vc.f1, tmp);
    vc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wc.f1->size[0] * wc.f1->size[1]);
    wc.f1->size[0] = 1;
    wc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wc.f1, tmp);
    wc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[17].f1[0], &tc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[17].f1[1], &uc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[17].f1[2], &vc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[17].f1[3], &wc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xc.f1->size[0] * xc.f1->size[1]);
    xc.f1->size[0] = 1;
    xc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xc.f1, tmp);
    xc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yc.f1->size[0] * yc.f1->size[1]);
    yc.f1->size[0] = 1;
    yc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yc.f1, tmp);
    yc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ad.f1->size[0] * ad.f1->size[1]);
    ad.f1->size[0] = 1;
    ad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ad.f1, tmp);
    ad.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bd.f1->size[0] * bd.f1->size[1]);
    bd.f1->size[0] = 1;
    bd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bd.f1, tmp);
    bd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[20].f1[0], &xc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[20].f1[1], &yc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[20].f1[2], &ad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[20].f1[3], &bd);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cd.f1->size[0] * cd.f1->size[1]);
    cd.f1->size[0] = 1;
    cd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cd.f1, tmp);
    cd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dd.f1->size[0] * dd.f1->size[1]);
    dd.f1->size[0] = 1;
    dd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dd.f1, tmp);
    dd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ed.f1->size[0] * ed.f1->size[1]);
    ed.f1->size[0] = 1;
    ed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ed.f1, tmp);
    ed.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fd.f1->size[0] * fd.f1->size[1]);
    fd.f1->size[0] = 1;
    fd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fd.f1, tmp);
    fd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[21].f1[0], &cd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[21].f1[1], &dd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[21].f1[2], &ed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[21].f1[3], &fd);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gd.f1->size[0] * gd.f1->size[1]);
    gd.f1->size[0] = 1;
    gd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gd.f1, tmp);
    gd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hd.f1->size[0] * hd.f1->size[1]);
    hd.f1->size[0] = 1;
    hd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hd.f1, tmp);
    hd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(id.f1->size[0] * id.f1->size[1]);
    id.f1->size[0] = 1;
    id.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(id.f1, tmp);
    id.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jd.f1->size[0] * jd.f1->size[1]);
    jd.f1->size[0] = 1;
    jd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jd.f1, tmp);
    jd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[22].f1[0], &gd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[22].f1[1], &hd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[22].f1[2], &id);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[22].f1[3], &jd);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(kd.f1->size[0] * kd.f1->size[1]);
    kd.f1->size[0] = 1;
    kd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kd.f1, tmp);
    kd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ld.f1->size[0] * ld.f1->size[1]);
    ld.f1->size[0] = 1;
    ld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ld.f1, tmp);
    ld.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(md.f1->size[0] * md.f1->size[1]);
    md.f1->size[0] = 1;
    md.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(md.f1, tmp);
    md.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nd.f1->size[0] * nd.f1->size[1]);
    nd.f1->size[0] = 1;
    nd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nd.f1, tmp);
    nd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[23].f1[0], &kd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[23].f1[1], &ld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[23].f1[2], &md);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[23].f1[3], &nd);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(od.f1->size[0] * od.f1->size[1]);
    od.f1->size[0] = 1;
    od.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(od.f1, tmp);
    od.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pd.f1->size[0] * pd.f1->size[1]);
    pd.f1->size[0] = 1;
    pd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pd.f1, tmp);
    pd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qd.f1->size[0] * qd.f1->size[1]);
    qd.f1->size[0] = 1;
    qd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qd.f1, tmp);
    qd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rd.f1->size[0] * rd.f1->size[1]);
    rd.f1->size[0] = 1;
    rd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rd.f1, tmp);
    rd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[24].f1[0], &od);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[24].f1[1], &pd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[24].f1[2], &qd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[24].f1[3], &rd);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(sd.f1->size[0] * sd.f1->size[1]);
    sd.f1->size[0] = 1;
    sd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sd.f1, tmp);
    sd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(td.f1->size[0] * td.f1->size[1]);
    td.f1->size[0] = 1;
    td.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(td.f1, tmp);
    td.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ud.f1->size[0] * ud.f1->size[1]);
    ud.f1->size[0] = 1;
    ud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ud.f1, tmp);
    ud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vd.f1->size[0] * vd.f1->size[1]);
    vd.f1->size[0] = 1;
    vd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vd.f1, tmp);
    vd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[26].f1[0], &sd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[26].f1[1], &td);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[26].f1[2], &ud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[26].f1[3], &vd);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wd.f1->size[0] * wd.f1->size[1]);
    wd.f1->size[0] = 1;
    wd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wd.f1, tmp);
    wd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xd.f1->size[0] * xd.f1->size[1]);
    xd.f1->size[0] = 1;
    xd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xd.f1, tmp);
    xd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yd.f1->size[0] * yd.f1->size[1]);
    yd.f1->size[0] = 1;
    yd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yd.f1, tmp);
    yd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ae.f1->size[0] * ae.f1->size[1]);
    ae.f1->size[0] = 1;
    ae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ae.f1, tmp);
    ae.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[27].f1[0], &wd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[27].f1[1], &xd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[27].f1[2], &yd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[27].f1[3], &ae);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(be.f1->size[0] * be.f1->size[1]);
    be.f1->size[0] = 1;
    be.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(be.f1, tmp);
    be.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ce.f1->size[0] * ce.f1->size[1]);
    ce.f1->size[0] = 1;
    ce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ce.f1, tmp);
    ce.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(de.f1->size[0] * de.f1->size[1]);
    de.f1->size[0] = 1;
    de.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(de.f1, tmp);
    de.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ee.f1->size[0] * ee.f1->size[1]);
    ee.f1->size[0] = 1;
    ee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ee.f1, tmp);
    ee.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[28].f1[0], &be);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[28].f1[1], &ce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[28].f1[2], &de);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[28].f1[3], &ee);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fe.f1->size[0] * fe.f1->size[1]);
    fe.f1->size[0] = 1;
    fe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fe.f1, tmp);
    fe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ge.f1->size[0] * ge.f1->size[1]);
    ge.f1->size[0] = 1;
    ge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ge.f1, tmp);
    ge.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(he.f1->size[0] * he.f1->size[1]);
    he.f1->size[0] = 1;
    he.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(he.f1, tmp);
    he.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ie.f1->size[0] * ie.f1->size[1]);
    ie.f1->size[0] = 1;
    ie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ie.f1, tmp);
    ie.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[29].f1[0], &fe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[29].f1[1], &ge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[29].f1[2], &he);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[29].f1[3], &ie);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(je.f1->size[0] * je.f1->size[1]);
    je.f1->size[0] = 1;
    je.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(je.f1, tmp);
    je.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ke.f1->size[0] * ke.f1->size[1]);
    ke.f1->size[0] = 1;
    ke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ke.f1, tmp);
    ke.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(le.f1->size[0] * le.f1->size[1]);
    le.f1->size[0] = 1;
    le.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(le.f1, tmp);
    le.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(me.f1->size[0] * me.f1->size[1]);
    me.f1->size[0] = 1;
    me.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(me.f1, tmp);
    me.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[30].f1[0], &je);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[30].f1[1], &ke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[30].f1[2], &le);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[30].f1[3], &me);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ne.f1->size[0] * ne.f1->size[1]);
    ne.f1->size[0] = 1;
    ne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ne.f1, tmp);
    ne.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(oe.f1->size[0] * oe.f1->size[1]);
    oe.f1->size[0] = 1;
    oe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oe.f1, tmp);
    oe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pe.f1->size[0] * pe.f1->size[1]);
    pe.f1->size[0] = 1;
    pe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pe.f1, tmp);
    pe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qe.f1->size[0] * qe.f1->size[1]);
    qe.f1->size[0] = 1;
    qe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qe.f1, tmp);
    qe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[31].f1[0], &ne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[31].f1[1], &oe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[31].f1[2], &pe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[31].f1[3], &qe);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(re.f1->size[0] * re.f1->size[1]);
    re.f1->size[0] = 1;
    re.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(re.f1, tmp);
    re.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(se.f1->size[0] * se.f1->size[1]);
    se.f1->size[0] = 1;
    se.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(se.f1, tmp);
    se.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(te.f1->size[0] * te.f1->size[1]);
    te.f1->size[0] = 1;
    te.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(te.f1, tmp);
    te.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ue.f1->size[0] * ue.f1->size[1]);
    ue.f1->size[0] = 1;
    ue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ue.f1, tmp);
    ue.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[32].f1[0], &re);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[32].f1[1], &se);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[32].f1[2], &te);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[32].f1[3], &ue);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ve.f1->size[0] * ve.f1->size[1]);
    ve.f1->size[0] = 1;
    ve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ve.f1, tmp);
    ve.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(we.f1->size[0] * we.f1->size[1]);
    we.f1->size[0] = 1;
    we.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(we.f1, tmp);
    we.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xe.f1->size[0] * xe.f1->size[1]);
    xe.f1->size[0] = 1;
    xe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xe.f1, tmp);
    xe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ye.f1->size[0] * ye.f1->size[1]);
    ye.f1->size[0] = 1;
    ye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ye.f1, tmp);
    ye.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[33].f1[0], &ve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[33].f1[1], &we);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[33].f1[2], &xe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[33].f1[3], &ye);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(af.f1->size[0] * af.f1->size[1]);
    af.f1->size[0] = 1;
    af.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(af.f1, tmp);
    af.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bf.f1->size[0] * bf.f1->size[1]);
    bf.f1->size[0] = 1;
    bf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bf.f1, tmp);
    bf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cf.f1->size[0] * cf.f1->size[1]);
    cf.f1->size[0] = 1;
    cf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cf.f1, tmp);
    cf.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(df.f1->size[0] * df.f1->size[1]);
    df.f1->size[0] = 1;
    df.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(df.f1, tmp);
    df.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[34].f1[0], &af);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[34].f1[1], &bf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[34].f1[2], &cf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[34].f1[3], &df);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ef.f1->size[0] * ef.f1->size[1]);
    ef.f1->size[0] = 1;
    ef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ef.f1, tmp);
    ef.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ff.f1->size[0] * ff.f1->size[1]);
    ff.f1->size[0] = 1;
    ff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ff.f1, tmp);
    ff.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gf.f1->size[0] * gf.f1->size[1]);
    gf.f1->size[0] = 1;
    gf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gf.f1, tmp);
    gf.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hf.f1->size[0] * hf.f1->size[1]);
    hf.f1->size[0] = 1;
    hf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hf.f1, tmp);
    hf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[36].f1[0], &ef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[36].f1[1], &ff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[36].f1[2], &gf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[36].f1[3], &hf);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jf.f1->size[0] * jf.f1->size[1]);
    jf.f1->size[0] = 1;
    jf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jf.f1, tmp);
    jf.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kf.f1->size[0] * kf.f1->size[1]);
    kf.f1->size[0] = 1;
    kf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kf.f1, tmp);
    kf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lf.f1->size[0] * lf.f1->size[1]);
    lf.f1->size[0] = 1;
    lf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lf.f1, tmp);
    lf.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mf.f1->size[0] * mf.f1->size[1]);
    mf.f1->size[0] = 1;
    mf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mf.f1, tmp);
    mf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[37].f1[0], &jf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[37].f1[1], &kf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[37].f1[2], &lf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[37].f1[3], &mf);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nf.f1->size[0] * nf.f1->size[1]);
    nf.f1->size[0] = 1;
    nf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nf.f1, tmp);
    nf.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(of.f1->size[0] * of.f1->size[1]);
    of.f1->size[0] = 1;
    of.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(of.f1, tmp);
    of.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pf.f1->size[0] * pf.f1->size[1]);
    pf.f1->size[0] = 1;
    pf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pf.f1, tmp);
    pf.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qf.f1->size[0] * qf.f1->size[1]);
    qf.f1->size[0] = 1;
    qf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qf.f1, tmp);
    qf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[38].f1[0], &nf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[38].f1[1], &of);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[38].f1[2], &pf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[38].f1[3], &qf);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rf.f1->size[0] * rf.f1->size[1]);
    rf.f1->size[0] = 1;
    rf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rf.f1, tmp);
    rf.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sf.f1->size[0] * sf.f1->size[1]);
    sf.f1->size[0] = 1;
    sf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sf.f1, tmp);
    sf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tf.f1->size[0] * tf.f1->size[1]);
    tf.f1->size[0] = 1;
    tf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tf.f1, tmp);
    tf.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uf.f1->size[0] * uf.f1->size[1]);
    uf.f1->size[0] = 1;
    uf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uf.f1, tmp);
    uf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[39].f1[0], &rf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[39].f1[1], &sf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[39].f1[2], &tf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[39].f1[3], &uf);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vf.f1->size[0] * vf.f1->size[1]);
    vf.f1->size[0] = 1;
    vf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vf.f1, tmp);
    vf.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wf.f1->size[0] * wf.f1->size[1]);
    wf.f1->size[0] = 1;
    wf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wf.f1, tmp);
    wf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xf.f1->size[0] * xf.f1->size[1]);
    xf.f1->size[0] = 1;
    xf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xf.f1, tmp);
    xf.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yf.f1->size[0] * yf.f1->size[1]);
    yf.f1->size[0] = 1;
    yf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yf.f1, tmp);
    yf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[40].f1[0], &vf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[40].f1[1], &wf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[40].f1[2], &xf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[40].f1[3], &yf);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ag.f1->size[0] * ag.f1->size[1]);
    ag.f1->size[0] = 1;
    ag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ag.f1, tmp);
    ag.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bg.f1->size[0] * bg.f1->size[1]);
    bg.f1->size[0] = 1;
    bg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bg.f1, tmp);
    bg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cg.f1->size[0] * cg.f1->size[1]);
    cg.f1->size[0] = 1;
    cg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cg.f1, tmp);
    cg.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dg.f1->size[0] * dg.f1->size[1]);
    dg.f1->size[0] = 1;
    dg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dg.f1, tmp);
    dg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[41].f1[0], &ag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[41].f1[1], &bg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[41].f1[2], &cg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[41].f1[3], &dg);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(eg.f1->size[0] * eg.f1->size[1]);
    eg.f1->size[0] = 1;
    eg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eg.f1, tmp);
    eg.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fg.f1->size[0] * fg.f1->size[1]);
    fg.f1->size[0] = 1;
    fg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fg.f1, tmp);
    fg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gg.f1->size[0] * gg.f1->size[1]);
    gg.f1->size[0] = 1;
    gg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gg.f1, tmp);
    gg.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hg.f1->size[0] * hg.f1->size[1]);
    hg.f1->size[0] = 1;
    hg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hg.f1, tmp);
    hg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[42].f1[0], &eg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[42].f1[1], &fg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[42].f1[2], &gg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[42].f1[3], &hg);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ig.f1->size[0] * ig.f1->size[1]);
    ig.f1->size[0] = 1;
    ig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ig.f1, tmp);
    ig.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jg.f1->size[0] * jg.f1->size[1]);
    jg.f1->size[0] = 1;
    jg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jg.f1, tmp);
    jg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kg.f1->size[0] * kg.f1->size[1]);
    kg.f1->size[0] = 1;
    kg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kg.f1, tmp);
    kg.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lg.f1->size[0] * lg.f1->size[1]);
    lg.f1->size[0] = 1;
    lg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lg.f1, tmp);
    lg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[43].f1[0], &ig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[43].f1[1], &jg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[43].f1[2], &kg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[43].f1[3], &lg);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mg.f1->size[0] * mg.f1->size[1]);
    mg.f1->size[0] = 1;
    mg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mg.f1, tmp);
    mg.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ng.f1->size[0] * ng.f1->size[1]);
    ng.f1->size[0] = 1;
    ng.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ng.f1, tmp);
    ng.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(og.f1->size[0] * og.f1->size[1]);
    og.f1->size[0] = 1;
    og.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(og.f1, tmp);
    og.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pg.f1->size[0] * pg.f1->size[1]);
    pg.f1->size[0] = 1;
    pg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pg.f1, tmp);
    pg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[44].f1[0], &mg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[44].f1[1], &ng);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[44].f1[2], &og);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[44].f1[3], &pg);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qg.f1->size[0] * qg.f1->size[1]);
    qg.f1->size[0] = 1;
    qg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qg.f1, tmp);
    qg.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rg.f1->size[0] * rg.f1->size[1]);
    rg.f1->size[0] = 1;
    rg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rg.f1, tmp);
    rg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sg.f1->size[0] * sg.f1->size[1]);
    sg.f1->size[0] = 1;
    sg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sg.f1, tmp);
    sg.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tg.f1->size[0] * tg.f1->size[1]);
    tg.f1->size[0] = 1;
    tg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tg.f1, tmp);
    tg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[46].f1[0], &qg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[46].f1[1], &rg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[46].f1[2], &sg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[46].f1[3], &tg);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ug.f1->size[0] * ug.f1->size[1]);
    ug.f1->size[0] = 1;
    ug.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ug.f1, tmp);
    ug.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vg.f1->size[0] * vg.f1->size[1]);
    vg.f1->size[0] = 1;
    vg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vg.f1, tmp);
    vg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wg.f1->size[0] * wg.f1->size[1]);
    wg.f1->size[0] = 1;
    wg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wg.f1, tmp);
    wg.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xg.f1->size[0] * xg.f1->size[1]);
    xg.f1->size[0] = 1;
    xg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xg.f1, tmp);
    xg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[47].f1[0], &ug);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[47].f1[1], &vg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[47].f1[2], &wg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[47].f1[3], &xg);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(yg.f1->size[0] * yg.f1->size[1]);
    yg.f1->size[0] = 1;
    yg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yg.f1, tmp);
    yg.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ah.f1->size[0] * ah.f1->size[1]);
    ah.f1->size[0] = 1;
    ah.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ah.f1, tmp);
    ah.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bh.f1->size[0] * bh.f1->size[1]);
    bh.f1->size[0] = 1;
    bh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bh.f1, tmp);
    bh.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ch.f1->size[0] * ch.f1->size[1]);
    ch.f1->size[0] = 1;
    ch.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ch.f1, tmp);
    ch.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[48].f1[0], &yg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[48].f1[1], &ah);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[48].f1[2], &bh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[48].f1[3], &ch);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dh.f1->size[0] * dh.f1->size[1]);
    dh.f1->size[0] = 1;
    dh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dh.f1, tmp);
    dh.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(eh.f1->size[0] * eh.f1->size[1]);
    eh.f1->size[0] = 1;
    eh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eh.f1, tmp);
    eh.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fh.f1->size[0] * fh.f1->size[1]);
    fh.f1->size[0] = 1;
    fh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fh.f1, tmp);
    fh.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gh.f1->size[0] * gh.f1->size[1]);
    gh.f1->size[0] = 1;
    gh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gh.f1, tmp);
    gh.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[49].f1[0], &dh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[49].f1[1], &eh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[49].f1[2], &fh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[49].f1[3], &gh);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hh.f1->size[0] * hh.f1->size[1]);
    hh.f1->size[0] = 1;
    hh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hh.f1, tmp);
    hh.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ih.f1->size[0] * ih.f1->size[1]);
    ih.f1->size[0] = 1;
    ih.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ih.f1, tmp);
    ih.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jh.f1->size[0] * jh.f1->size[1]);
    jh.f1->size[0] = 1;
    jh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jh.f1, tmp);
    jh.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kh.f1->size[0] * kh.f1->size[1]);
    kh.f1->size[0] = 1;
    kh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kh.f1, tmp);
    kh.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[50].f1[0], &hh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[50].f1[1], &ih);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[50].f1[2], &jh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[50].f1[3], &kh);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(lh.f1->size[0] * lh.f1->size[1]);
    lh.f1->size[0] = 1;
    lh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lh.f1, tmp);
    lh.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mh.f1->size[0] * mh.f1->size[1]);
    mh.f1->size[0] = 1;
    mh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mh.f1, tmp);
    mh.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nh.f1->size[0] * nh.f1->size[1]);
    nh.f1->size[0] = 1;
    nh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nh.f1, tmp);
    nh.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(oh.f1->size[0] * oh.f1->size[1]);
    oh.f1->size[0] = 1;
    oh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oh.f1, tmp);
    oh.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[51].f1[0], &lh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[51].f1[1], &mh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[51].f1[2], &nh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[51].f1[3], &oh);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ph.f1->size[0] * ph.f1->size[1]);
    ph.f1->size[0] = 1;
    ph.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ph.f1, tmp);
    ph.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qh.f1->size[0] * qh.f1->size[1]);
    qh.f1->size[0] = 1;
    qh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qh.f1, tmp);
    qh.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rh.f1->size[0] * rh.f1->size[1]);
    rh.f1->size[0] = 1;
    rh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rh.f1, tmp);
    rh.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sh.f1->size[0] * sh.f1->size[1]);
    sh.f1->size[0] = 1;
    sh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sh.f1, tmp);
    sh.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[54].f1[0], &ph);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[54].f1[1], &qh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[54].f1[2], &rh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[54].f1[3], &sh);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(th.f1->size[0] * th.f1->size[1]);
    th.f1->size[0] = 1;
    th.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(th.f1, tmp);
    th.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uh.f1->size[0] * uh.f1->size[1]);
    uh.f1->size[0] = 1;
    uh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uh.f1, tmp);
    uh.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vh.f1->size[0] * vh.f1->size[1]);
    vh.f1->size[0] = 1;
    vh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vh.f1, tmp);
    vh.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wh.f1->size[0] * wh.f1->size[1]);
    wh.f1->size[0] = 1;
    wh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wh.f1, tmp);
    wh.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[56].f1[0], &th);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[56].f1[1], &uh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[56].f1[2], &vh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[56].f1[3], &wh);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xh.f1->size[0] * xh.f1->size[1]);
    xh.f1->size[0] = 1;
    xh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xh.f1, tmp);
    xh.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yh.f1->size[0] * yh.f1->size[1]);
    yh.f1->size[0] = 1;
    yh.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yh.f1, tmp);
    yh.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ai.f1->size[0] * ai.f1->size[1]);
    ai.f1->size[0] = 1;
    ai.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ai.f1, tmp);
    ai.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bi.f1->size[0] * bi.f1->size[1]);
    bi.f1->size[0] = 1;
    bi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bi.f1, tmp);
    bi.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[57].f1[0], &xh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[57].f1[1], &yh);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[57].f1[2], &ai);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[57].f1[3], &bi);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ci.f1->size[0] * ci.f1->size[1]);
    ci.f1->size[0] = 1;
    ci.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ci.f1, tmp);
    ci.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(di.f1->size[0] * di.f1->size[1]);
    di.f1->size[0] = 1;
    di.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(di.f1, tmp);
    di.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ei.f1->size[0] * ei.f1->size[1]);
    ei.f1->size[0] = 1;
    ei.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ei.f1, tmp);
    ei.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fi.f1->size[0] * fi.f1->size[1]);
    fi.f1->size[0] = 1;
    fi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fi.f1, tmp);
    fi.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[58].f1[0], &ci);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[58].f1[1], &di);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[58].f1[2], &ei);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[58].f1[3], &fi);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gi.f1->size[0] * gi.f1->size[1]);
    gi.f1->size[0] = 1;
    gi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gi.f1, tmp);
    gi.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hi.f1->size[0] * hi.f1->size[1]);
    hi.f1->size[0] = 1;
    hi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hi.f1, tmp);
    hi.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ii.f1->size[0] * ii.f1->size[1]);
    ii.f1->size[0] = 1;
    ii.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ii.f1, tmp);
    ii.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ji.f1->size[0] * ji.f1->size[1]);
    ji.f1->size[0] = 1;
    ji.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ji.f1, tmp);
    ji.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[59].f1[0], &gi);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[59].f1[1], &hi);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[59].f1[2], &ii);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[59].f1[3], &ji);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ki.f1->size[0] * ki.f1->size[1]);
    ki.f1->size[0] = 1;
    ki.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ki.f1, tmp);
    ki.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(li.f1->size[0] * li.f1->size[1]);
    li.f1->size[0] = 1;
    li.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(li.f1, tmp);
    li.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mi.f1->size[0] * mi.f1->size[1]);
    mi.f1->size[0] = 1;
    mi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mi.f1, tmp);
    mi.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ni.f1->size[0] * ni.f1->size[1]);
    ni.f1->size[0] = 1;
    ni.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ni.f1, tmp);
    ni.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[60].f1[0], &ki);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[60].f1[1], &li);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[60].f1[2], &mi);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[60].f1[3], &ni);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(oi.f1->size[0] * oi.f1->size[1]);
    oi.f1->size[0] = 1;
    oi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oi.f1, tmp);
    oi.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pi.f1->size[0] * pi.f1->size[1]);
    pi.f1->size[0] = 1;
    pi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pi.f1, tmp);
    pi.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qi.f1->size[0] * qi.f1->size[1]);
    qi.f1->size[0] = 1;
    qi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qi.f1, tmp);
    qi.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ri.f1->size[0] * ri.f1->size[1]);
    ri.f1->size[0] = 1;
    ri.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ri.f1, tmp);
    ri.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[61].f1[0], &oi);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[61].f1[1], &pi);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[61].f1[2], &qi);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[61].f1[3], &ri);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(si.f1->size[0] * si.f1->size[1]);
    si.f1->size[0] = 1;
    si.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(si.f1, tmp);
    si.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ti.f1->size[0] * ti.f1->size[1]);
    ti.f1->size[0] = 1;
    ti.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ti.f1, tmp);
    ti.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ui.f1->size[0] * ui.f1->size[1]);
    ui.f1->size[0] = 1;
    ui.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ui.f1, tmp);
    ui.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vi.f1->size[0] * vi.f1->size[1]);
    vi.f1->size[0] = 1;
    vi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vi.f1, tmp);
    vi.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[62].f1[0], &si);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[62].f1[1], &ti);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[62].f1[2], &ui);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[62].f1[3], &vi);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wi.f1->size[0] * wi.f1->size[1]);
    wi.f1->size[0] = 1;
    wi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wi.f1, tmp);
    wi.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xi.f1->size[0] * xi.f1->size[1]);
    xi.f1->size[0] = 1;
    xi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xi.f1, tmp);
    xi.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yi.f1->size[0] * yi.f1->size[1]);
    yi.f1->size[0] = 1;
    yi.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yi.f1, tmp);
    yi.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(aj.f1->size[0] * aj.f1->size[1]);
    aj.f1->size[0] = 1;
    aj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aj.f1, tmp);
    aj.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[63].f1[0], &wi);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[63].f1[1], &xi);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[63].f1[2], &yi);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[63].f1[3], &aj);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(bj.f1->size[0] * bj.f1->size[1]);
    bj.f1->size[0] = 1;
    bj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bj.f1, tmp);
    bj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cj.f1->size[0] * cj.f1->size[1]);
    cj.f1->size[0] = 1;
    cj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cj.f1, tmp);
    cj.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dj.f1->size[0] * dj.f1->size[1]);
    dj.f1->size[0] = 1;
    dj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dj.f1, tmp);
    dj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ej.f1->size[0] * ej.f1->size[1]);
    ej.f1->size[0] = 1;
    ej.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ej.f1, tmp);
    ej.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[64].f1[0], &bj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[64].f1[1], &cj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[64].f1[2], &dj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[64].f1[3], &ej);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fj.f1->size[0] * fj.f1->size[1]);
    fj.f1->size[0] = 1;
    fj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fj.f1, tmp);
    fj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gj.f1->size[0] * gj.f1->size[1]);
    gj.f1->size[0] = 1;
    gj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gj.f1, tmp);
    gj.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hj.f1->size[0] * hj.f1->size[1]);
    hj.f1->size[0] = 1;
    hj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hj.f1, tmp);
    hj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ij.f1->size[0] * ij.f1->size[1]);
    ij.f1->size[0] = 1;
    ij.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ij.f1, tmp);
    ij.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[66].f1[0], &fj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[66].f1[1], &gj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[66].f1[2], &hj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[66].f1[3], &ij);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jj.f1->size[0] * jj.f1->size[1]);
    jj.f1->size[0] = 1;
    jj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jj.f1, tmp);
    jj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kj.f1->size[0] * kj.f1->size[1]);
    kj.f1->size[0] = 1;
    kj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kj.f1, tmp);
    kj.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lj.f1->size[0] * lj.f1->size[1]);
    lj.f1->size[0] = 1;
    lj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lj.f1, tmp);
    lj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mj.f1->size[0] * mj.f1->size[1]);
    mj.f1->size[0] = 1;
    mj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mj.f1, tmp);
    mj.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[67].f1[0], &jj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[67].f1[1], &kj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[67].f1[2], &lj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[67].f1[3], &mj);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nj.f1->size[0] * nj.f1->size[1]);
    nj.f1->size[0] = 1;
    nj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nj.f1, tmp);
    nj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(oj.f1->size[0] * oj.f1->size[1]);
    oj.f1->size[0] = 1;
    oj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oj.f1, tmp);
    oj.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pj.f1->size[0] * pj.f1->size[1]);
    pj.f1->size[0] = 1;
    pj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pj.f1, tmp);
    pj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qj.f1->size[0] * qj.f1->size[1]);
    qj.f1->size[0] = 1;
    qj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qj.f1, tmp);
    qj.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[68].f1[0], &nj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[68].f1[1], &oj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[68].f1[2], &pj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[68].f1[3], &qj);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rj.f1->size[0] * rj.f1->size[1]);
    rj.f1->size[0] = 1;
    rj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rj.f1, tmp);
    rj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sj.f1->size[0] * sj.f1->size[1]);
    sj.f1->size[0] = 1;
    sj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sj.f1, tmp);
    sj.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tj.f1->size[0] * tj.f1->size[1]);
    tj.f1->size[0] = 1;
    tj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tj.f1, tmp);
    tj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uj.f1->size[0] * uj.f1->size[1]);
    uj.f1->size[0] = 1;
    uj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uj.f1, tmp);
    uj.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[69].f1[0], &rj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[69].f1[1], &sj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[69].f1[2], &tj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[69].f1[3], &uj);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vj.f1->size[0] * vj.f1->size[1]);
    vj.f1->size[0] = 1;
    vj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vj.f1, tmp);
    vj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wj.f1->size[0] * wj.f1->size[1]);
    wj.f1->size[0] = 1;
    wj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wj.f1, tmp);
    wj.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xj.f1->size[0] * xj.f1->size[1]);
    xj.f1->size[0] = 1;
    xj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xj.f1, tmp);
    xj.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yj.f1->size[0] * yj.f1->size[1]);
    yj.f1->size[0] = 1;
    yj.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yj.f1, tmp);
    yj.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[70].f1[0], &vj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[70].f1[1], &wj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[70].f1[2], &xj);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[70].f1[3], &yj);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ak.f1->size[0] * ak.f1->size[1]);
    ak.f1->size[0] = 1;
    ak.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ak.f1, tmp);
    ak.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bk.f1->size[0] * bk.f1->size[1]);
    bk.f1->size[0] = 1;
    bk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bk.f1, tmp);
    bk.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ck.f1->size[0] * ck.f1->size[1]);
    ck.f1->size[0] = 1;
    ck.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ck.f1, tmp);
    ck.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dk.f1->size[0] * dk.f1->size[1]);
    dk.f1->size[0] = 1;
    dk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dk.f1, tmp);
    dk.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[71].f1[0], &ak);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[71].f1[1], &bk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[71].f1[2], &ck);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[71].f1[3], &dk);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ek.f1->size[0] * ek.f1->size[1]);
    ek.f1->size[0] = 1;
    ek.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ek.f1, tmp);
    ek.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fk.f1->size[0] * fk.f1->size[1]);
    fk.f1->size[0] = 1;
    fk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fk.f1, tmp);
    fk.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gk.f1->size[0] * gk.f1->size[1]);
    gk.f1->size[0] = 1;
    gk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gk.f1, tmp);
    gk.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hk.f1->size[0] * hk.f1->size[1]);
    hk.f1->size[0] = 1;
    hk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hk.f1, tmp);
    hk.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[72].f1[0], &ek);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[72].f1[1], &fk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[72].f1[2], &gk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[72].f1[3], &hk);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ik.f1->size[0] * ik.f1->size[1]);
    ik.f1->size[0] = 1;
    ik.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ik.f1, tmp);
    ik.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jk.f1->size[0] * jk.f1->size[1]);
    jk.f1->size[0] = 1;
    jk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jk.f1, tmp);
    jk.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kk.f1->size[0] * kk.f1->size[1]);
    kk.f1->size[0] = 1;
    kk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kk.f1, tmp);
    kk.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lk.f1->size[0] * lk.f1->size[1]);
    lk.f1->size[0] = 1;
    lk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lk.f1, tmp);
    lk.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[73].f1[0], &ik);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[73].f1[1], &jk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[73].f1[2], &kk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[73].f1[3], &lk);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mk.f1->size[0] * mk.f1->size[1]);
    mk.f1->size[0] = 1;
    mk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mk.f1, tmp);
    mk.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nk.f1->size[0] * nk.f1->size[1]);
    nk.f1->size[0] = 1;
    nk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nk.f1, tmp);
    nk.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ok.f1->size[0] * ok.f1->size[1]);
    ok.f1->size[0] = 1;
    ok.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ok.f1, tmp);
    ok.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pk.f1->size[0] * pk.f1->size[1]);
    pk.f1->size[0] = 1;
    pk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pk.f1, tmp);
    pk.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[74].f1[0], &mk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[74].f1[1], &nk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[74].f1[2], &ok);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[74].f1[3], &pk);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qk.f1->size[0] * qk.f1->size[1]);
    qk.f1->size[0] = 1;
    qk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qk.f1, tmp);
    qk.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rk.f1->size[0] * rk.f1->size[1]);
    rk.f1->size[0] = 1;
    rk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rk.f1, tmp);
    rk.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sk.f1->size[0] * sk.f1->size[1]);
    sk.f1->size[0] = 1;
    sk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sk.f1, tmp);
    sk.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tk.f1->size[0] * tk.f1->size[1]);
    tk.f1->size[0] = 1;
    tk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tk.f1, tmp);
    tk.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[76].f1[0], &qk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[76].f1[1], &rk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[76].f1[2], &sk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[76].f1[3], &tk);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(uk.f1->size[0] * uk.f1->size[1]);
    uk.f1->size[0] = 1;
    uk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uk.f1, tmp);
    uk.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vk.f1->size[0] * vk.f1->size[1]);
    vk.f1->size[0] = 1;
    vk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vk.f1, tmp);
    vk.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wk.f1->size[0] * wk.f1->size[1]);
    wk.f1->size[0] = 1;
    wk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wk.f1, tmp);
    wk.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xk.f1->size[0] * xk.f1->size[1]);
    xk.f1->size[0] = 1;
    xk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xk.f1, tmp);
    xk.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[77].f1[0], &uk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[77].f1[1], &vk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[77].f1[2], &wk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[77].f1[3], &xk);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(yk.f1->size[0] * yk.f1->size[1]);
    yk.f1->size[0] = 1;
    yk.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yk.f1, tmp);
    yk.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(al.f1->size[0] * al.f1->size[1]);
    al.f1->size[0] = 1;
    al.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(al.f1, tmp);
    al.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bl.f1->size[0] * bl.f1->size[1]);
    bl.f1->size[0] = 1;
    bl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bl.f1, tmp);
    bl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cl.f1->size[0] * cl.f1->size[1]);
    cl.f1->size[0] = 1;
    cl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cl.f1, tmp);
    cl.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[78].f1[0], &yk);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[78].f1[1], &al);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[78].f1[2], &bl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[78].f1[3], &cl);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dl.f1->size[0] * dl.f1->size[1]);
    dl.f1->size[0] = 1;
    dl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dl.f1, tmp);
    dl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(el.f1->size[0] * el.f1->size[1]);
    el.f1->size[0] = 1;
    el.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(el.f1, tmp);
    el.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fl.f1->size[0] * fl.f1->size[1]);
    fl.f1->size[0] = 1;
    fl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fl.f1, tmp);
    fl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gl.f1->size[0] * gl.f1->size[1]);
    gl.f1->size[0] = 1;
    gl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gl.f1, tmp);
    gl.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[79].f1[0], &dl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[79].f1[1], &el);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[79].f1[2], &fl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[79].f1[3], &gl);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hl.f1->size[0] * hl.f1->size[1]);
    hl.f1->size[0] = 1;
    hl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hl.f1, tmp);
    hl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(il.f1->size[0] * il.f1->size[1]);
    il.f1->size[0] = 1;
    il.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(il.f1, tmp);
    il.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jl.f1->size[0] * jl.f1->size[1]);
    jl.f1->size[0] = 1;
    jl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jl.f1, tmp);
    jl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kl.f1->size[0] * kl.f1->size[1]);
    kl.f1->size[0] = 1;
    kl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kl.f1, tmp);
    kl.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[81].f1[0], &hl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[81].f1[1], &il);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[81].f1[2], &jl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[81].f1[3], &kl);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ll.f1->size[0] * ll.f1->size[1]);
    ll.f1->size[0] = 1;
    ll.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ll.f1, tmp);
    ll.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ml.f1->size[0] * ml.f1->size[1]);
    ml.f1->size[0] = 1;
    ml.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ml.f1, tmp);
    ml.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nl.f1->size[0] * nl.f1->size[1]);
    nl.f1->size[0] = 1;
    nl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nl.f1, tmp);
    nl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ol.f1->size[0] * ol.f1->size[1]);
    ol.f1->size[0] = 1;
    ol.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ol.f1, tmp);
    ol.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[82].f1[0], &ll);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[82].f1[1], &ml);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[82].f1[2], &nl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[82].f1[3], &ol);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(pl.f1->size[0] * pl.f1->size[1]);
    pl.f1->size[0] = 1;
    pl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pl.f1, tmp);
    pl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ql.f1->size[0] * ql.f1->size[1]);
    ql.f1->size[0] = 1;
    ql.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ql.f1, tmp);
    ql.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rl.f1->size[0] * rl.f1->size[1]);
    rl.f1->size[0] = 1;
    rl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rl.f1, tmp);
    rl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sl.f1->size[0] * sl.f1->size[1]);
    sl.f1->size[0] = 1;
    sl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sl.f1, tmp);
    sl.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[83].f1[0], &pl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[83].f1[1], &ql);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[83].f1[2], &rl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[83].f1[3], &sl);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(tl.f1->size[0] * tl.f1->size[1]);
    tl.f1->size[0] = 1;
    tl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tl.f1, tmp);
    tl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ul.f1->size[0] * ul.f1->size[1]);
    ul.f1->size[0] = 1;
    ul.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ul.f1, tmp);
    ul.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vl.f1->size[0] * vl.f1->size[1]);
    vl.f1->size[0] = 1;
    vl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vl.f1, tmp);
    vl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wl.f1->size[0] * wl.f1->size[1]);
    wl.f1->size[0] = 1;
    wl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wl.f1, tmp);
    wl.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[84].f1[0], &tl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[84].f1[1], &ul);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[84].f1[2], &vl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[84].f1[3], &wl);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xl.f1->size[0] * xl.f1->size[1]);
    xl.f1->size[0] = 1;
    xl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xl.f1, tmp);
    xl.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yl.f1->size[0] * yl.f1->size[1]);
    yl.f1->size[0] = 1;
    yl.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yl.f1, tmp);
    yl.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(am.f1->size[0] * am.f1->size[1]);
    am.f1->size[0] = 1;
    am.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(am.f1, tmp);
    am.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bm.f1->size[0] * bm.f1->size[1]);
    bm.f1->size[0] = 1;
    bm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bm.f1, tmp);
    bm.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[86].f1[0], &xl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[86].f1[1], &yl);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[86].f1[2], &am);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[86].f1[3], &bm);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cm.f1->size[0] * cm.f1->size[1]);
    cm.f1->size[0] = 1;
    cm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cm.f1, tmp);
    cm.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dm.f1->size[0] * dm.f1->size[1]);
    dm.f1->size[0] = 1;
    dm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dm.f1, tmp);
    dm.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(em.f1->size[0] * em.f1->size[1]);
    em.f1->size[0] = 1;
    em.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(em.f1, tmp);
    em.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fm.f1->size[0] * fm.f1->size[1]);
    fm.f1->size[0] = 1;
    fm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fm.f1, tmp);
    fm.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[87].f1[0], &cm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[87].f1[1], &dm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[87].f1[2], &em);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[87].f1[3], &fm);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gm.f1->size[0] * gm.f1->size[1]);
    gm.f1->size[0] = 1;
    gm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gm.f1, tmp);
    gm.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hm.f1->size[0] * hm.f1->size[1]);
    hm.f1->size[0] = 1;
    hm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hm.f1, tmp);
    hm.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(im.f1->size[0] * im.f1->size[1]);
    im.f1->size[0] = 1;
    im.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(im.f1, tmp);
    im.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jm.f1->size[0] * jm.f1->size[1]);
    jm.f1->size[0] = 1;
    jm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jm.f1, tmp);
    jm.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[88].f1[0], &gm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[88].f1[1], &hm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[88].f1[2], &im);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[88].f1[3], &jm);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(km.f1->size[0] * km.f1->size[1]);
    km.f1->size[0] = 1;
    km.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(km.f1, tmp);
    km.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lm.f1->size[0] * lm.f1->size[1]);
    lm.f1->size[0] = 1;
    lm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lm.f1, tmp);
    lm.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mm.f1->size[0] * mm.f1->size[1]);
    mm.f1->size[0] = 1;
    mm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mm.f1, tmp);
    mm.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nm.f1->size[0] * nm.f1->size[1]);
    nm.f1->size[0] = 1;
    nm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nm.f1, tmp);
    nm.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[89].f1[0], &km);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[89].f1[1], &lm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[89].f1[2], &mm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[89].f1[3], &nm);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(om.f1->size[0] * om.f1->size[1]);
    om.f1->size[0] = 1;
    om.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(om.f1, tmp);
    om.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pm.f1->size[0] * pm.f1->size[1]);
    pm.f1->size[0] = 1;
    pm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pm.f1, tmp);
    pm.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qm.f1->size[0] * qm.f1->size[1]);
    qm.f1->size[0] = 1;
    qm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qm.f1, tmp);
    qm.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rm.f1->size[0] * rm.f1->size[1]);
    rm.f1->size[0] = 1;
    rm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rm.f1, tmp);
    rm.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[92].f1[0], &om);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[92].f1[1], &pm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[92].f1[2], &qm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[92].f1[3], &rm);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(sm.f1->size[0] * sm.f1->size[1]);
    sm.f1->size[0] = 1;
    sm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sm.f1, tmp);
    sm.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(um.f1->size[0] * um.f1->size[1]);
    um.f1->size[0] = 1;
    um.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(um.f1, tmp);
    um.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vm.f1->size[0] * vm.f1->size[1]);
    vm.f1->size[0] = 1;
    vm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vm.f1, tmp);
    vm.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wm.f1->size[0] * wm.f1->size[1]);
    wm.f1->size[0] = 1;
    wm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wm.f1, tmp);
    wm.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[93].f1[0], &sm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[93].f1[1], &um);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[93].f1[2], &vm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[93].f1[3], &wm);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xm.f1->size[0] * xm.f1->size[1]);
    xm.f1->size[0] = 1;
    xm.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xm.f1, tmp);
    xm.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ym.f1->size[0] * ym.f1->size[1]);
    ym.f1->size[0] = 1;
    ym.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ym.f1, tmp);
    ym.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(an.f1->size[0] * an.f1->size[1]);
    an.f1->size[0] = 1;
    an.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(an.f1, tmp);
    an.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bn.f1->size[0] * bn.f1->size[1]);
    bn.f1->size[0] = 1;
    bn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bn.f1, tmp);
    bn.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[94].f1[0], &xm);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[94].f1[1], &ym);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[94].f1[2], &an);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[94].f1[3], &bn);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cn.f1->size[0] * cn.f1->size[1]);
    cn.f1->size[0] = 1;
    cn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cn.f1, tmp);
    cn.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dn.f1->size[0] * dn.f1->size[1]);
    dn.f1->size[0] = 1;
    dn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dn.f1, tmp);
    dn.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(en.f1->size[0] * en.f1->size[1]);
    en.f1->size[0] = 1;
    en.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(en.f1, tmp);
    en.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fn.f1->size[0] * fn.f1->size[1]);
    fn.f1->size[0] = 1;
    fn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fn.f1, tmp);
    fn.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[96].f1[0], &cn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[96].f1[1], &dn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[96].f1[2], &en);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[96].f1[3], &fn);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gn.f1->size[0] * gn.f1->size[1]);
    gn.f1->size[0] = 1;
    gn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gn.f1, tmp);
    gn.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hn.f1->size[0] * hn.f1->size[1]);
    hn.f1->size[0] = 1;
    hn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hn.f1, tmp);
    hn.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(in.f1->size[0] * in.f1->size[1]);
    in.f1->size[0] = 1;
    in.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(in.f1, tmp);
    in.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kn.f1->size[0] * kn.f1->size[1]);
    kn.f1->size[0] = 1;
    kn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kn.f1, tmp);
    kn.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[97].f1[0], &gn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[97].f1[1], &hn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[97].f1[2], &in);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[97].f1[3], &kn);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ln.f1->size[0] * ln.f1->size[1]);
    ln.f1->size[0] = 1;
    ln.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ln.f1, tmp);
    ln.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mn.f1->size[0] * mn.f1->size[1]);
    mn.f1->size[0] = 1;
    mn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mn.f1, tmp);
    mn.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nn.f1->size[0] * nn.f1->size[1]);
    nn.f1->size[0] = 1;
    nn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nn.f1, tmp);
    nn.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(on.f1->size[0] * on.f1->size[1]);
    on.f1->size[0] = 1;
    on.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(on.f1, tmp);
    on.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[98].f1[0], &ln);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[98].f1[1], &mn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[98].f1[2], &nn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[98].f1[3], &on);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(pn.f1->size[0] * pn.f1->size[1]);
    pn.f1->size[0] = 1;
    pn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pn.f1, tmp);
    pn.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qn.f1->size[0] * qn.f1->size[1]);
    qn.f1->size[0] = 1;
    qn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qn.f1, tmp);
    qn.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rn.f1->size[0] * rn.f1->size[1]);
    rn.f1->size[0] = 1;
    rn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rn.f1, tmp);
    rn.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sn.f1->size[0] * sn.f1->size[1]);
    sn.f1->size[0] = 1;
    sn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sn.f1, tmp);
    sn.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[99].f1[0], &pn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[99].f1[1], &qn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[99].f1[2], &rn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[99].f1[3], &sn);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(tn.f1->size[0] * tn.f1->size[1]);
    tn.f1->size[0] = 1;
    tn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tn.f1, tmp);
    tn.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(un.f1->size[0] * un.f1->size[1]);
    un.f1->size[0] = 1;
    un.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(un.f1, tmp);
    un.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vn.f1->size[0] * vn.f1->size[1]);
    vn.f1->size[0] = 1;
    vn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vn.f1, tmp);
    vn.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wn.f1->size[0] * wn.f1->size[1]);
    wn.f1->size[0] = 1;
    wn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wn.f1, tmp);
    wn.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[100].f1[0], &tn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[100].f1[1], &un);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[100].f1[2], &vn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[100].f1[3], &wn);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xn.f1->size[0] * xn.f1->size[1]);
    xn.f1->size[0] = 1;
    xn.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xn.f1, tmp);
    xn.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ao.f1->size[0] * ao.f1->size[1]);
    ao.f1->size[0] = 1;
    ao.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ao.f1, tmp);
    ao.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bo.f1->size[0] * bo.f1->size[1]);
    bo.f1->size[0] = 1;
    bo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bo.f1, tmp);
    bo.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(co.f1->size[0] * co.f1->size[1]);
    co.f1->size[0] = 1;
    co.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(co.f1, tmp);
    co.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[101].f1[0], &xn);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[101].f1[1], &ao);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[101].f1[2], &bo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[101].f1[3], &co);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(eo.f1->size[0] * eo.f1->size[1]);
    eo.f1->size[0] = 1;
    eo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eo.f1, tmp);
    eo.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fo.f1->size[0] * fo.f1->size[1]);
    fo.f1->size[0] = 1;
    fo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fo.f1, tmp);
    fo.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(go.f1->size[0] * go.f1->size[1]);
    go.f1->size[0] = 1;
    go.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(go.f1, tmp);
    go.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ho.f1->size[0] * ho.f1->size[1]);
    ho.f1->size[0] = 1;
    ho.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ho.f1, tmp);
    ho.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[103].f1[0], &eo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[103].f1[1], &fo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[103].f1[2], &go);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[103].f1[3], &ho);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(io.f1->size[0] * io.f1->size[1]);
    io.f1->size[0] = 1;
    io.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(io.f1, tmp);
    io.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jo.f1->size[0] * jo.f1->size[1]);
    jo.f1->size[0] = 1;
    jo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jo.f1, tmp);
    jo.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ko.f1->size[0] * ko.f1->size[1]);
    ko.f1->size[0] = 1;
    ko.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ko.f1, tmp);
    ko.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lo.f1->size[0] * lo.f1->size[1]);
    lo.f1->size[0] = 1;
    lo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lo.f1, tmp);
    lo.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[104].f1[0], &io);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[104].f1[1], &jo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[104].f1[2], &ko);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[104].f1[3], &lo);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mo.f1->size[0] * mo.f1->size[1]);
    mo.f1->size[0] = 1;
    mo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mo.f1, tmp);
    mo.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(no.f1->size[0] * no.f1->size[1]);
    no.f1->size[0] = 1;
    no.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(no.f1, tmp);
    no.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(oo.f1->size[0] * oo.f1->size[1]);
    oo.f1->size[0] = 1;
    oo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oo.f1, tmp);
    oo.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(po.f1->size[0] * po.f1->size[1]);
    po.f1->size[0] = 1;
    po.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(po.f1, tmp);
    po.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[106].f1[0], &mo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[106].f1[1], &no);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[106].f1[2], &oo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[106].f1[3], &po);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qo.f1->size[0] * qo.f1->size[1]);
    qo.f1->size[0] = 1;
    qo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qo.f1, tmp);
    qo.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ro.f1->size[0] * ro.f1->size[1]);
    ro.f1->size[0] = 1;
    ro.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ro.f1, tmp);
    ro.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(so.f1->size[0] * so.f1->size[1]);
    so.f1->size[0] = 1;
    so.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(so.f1, tmp);
    so.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(to.f1->size[0] * to.f1->size[1]);
    to.f1->size[0] = 1;
    to.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(to.f1, tmp);
    to.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[107].f1[0], &qo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[107].f1[1], &ro);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[107].f1[2], &so);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[107].f1[3], &to);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(uo.f1->size[0] * uo.f1->size[1]);
    uo.f1->size[0] = 1;
    uo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uo.f1, tmp);
    uo.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vo.f1->size[0] * vo.f1->size[1]);
    vo.f1->size[0] = 1;
    vo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vo.f1, tmp);
    vo.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wo.f1->size[0] * wo.f1->size[1]);
    wo.f1->size[0] = 1;
    wo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wo.f1, tmp);
    wo.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xo.f1->size[0] * xo.f1->size[1]);
    xo.f1->size[0] = 1;
    xo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xo.f1, tmp);
    xo.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[108].f1[0], &uo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[108].f1[1], &vo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[108].f1[2], &wo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[108].f1[3], &xo);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(yo.f1->size[0] * yo.f1->size[1]);
    yo.f1->size[0] = 1;
    yo.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yo.f1, tmp);
    yo.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ap.f1->size[0] * ap.f1->size[1]);
    ap.f1->size[0] = 1;
    ap.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ap.f1, tmp);
    ap.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bp.f1->size[0] * bp.f1->size[1]);
    bp.f1->size[0] = 1;
    bp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bp.f1, tmp);
    bp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cp.f1->size[0] * cp.f1->size[1]);
    cp.f1->size[0] = 1;
    cp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cp.f1, tmp);
    cp.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[109].f1[0], &yo);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[109].f1[1], &ap);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[109].f1[2], &bp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[109].f1[3], &cp);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dp.f1->size[0] * dp.f1->size[1]);
    dp.f1->size[0] = 1;
    dp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dp.f1, tmp);
    dp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ep.f1->size[0] * ep.f1->size[1]);
    ep.f1->size[0] = 1;
    ep.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ep.f1, tmp);
    ep.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fp.f1->size[0] * fp.f1->size[1]);
    fp.f1->size[0] = 1;
    fp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fp.f1, tmp);
    fp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gp.f1->size[0] * gp.f1->size[1]);
    gp.f1->size[0] = 1;
    gp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gp.f1, tmp);
    gp.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[111].f1[0], &dp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[111].f1[1], &ep);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[111].f1[2], &fp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[111].f1[3], &gp);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hp.f1->size[0] * hp.f1->size[1]);
    hp.f1->size[0] = 1;
    hp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hp.f1, tmp);
    hp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ip.f1->size[0] * ip.f1->size[1]);
    ip.f1->size[0] = 1;
    ip.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ip.f1, tmp);
    ip.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jp.f1->size[0] * jp.f1->size[1]);
    jp.f1->size[0] = 1;
    jp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jp.f1, tmp);
    jp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kp.f1->size[0] * kp.f1->size[1]);
    kp.f1->size[0] = 1;
    kp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kp.f1, tmp);
    kp.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[112].f1[0], &hp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[112].f1[1], &ip);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[112].f1[2], &jp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[112].f1[3], &kp);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(lp.f1->size[0] * lp.f1->size[1]);
    lp.f1->size[0] = 1;
    lp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lp.f1, tmp);
    lp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mp.f1->size[0] * mp.f1->size[1]);
    mp.f1->size[0] = 1;
    mp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mp.f1, tmp);
    mp.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(np.f1->size[0] * np.f1->size[1]);
    np.f1->size[0] = 1;
    np.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(np.f1, tmp);
    np.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(op.f1->size[0] * op.f1->size[1]);
    op.f1->size[0] = 1;
    op.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(op.f1, tmp);
    op.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[114].f1[0], &lp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[114].f1[1], &mp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[114].f1[2], &np);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[114].f1[3], &op);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(pp.f1->size[0] * pp.f1->size[1]);
    pp.f1->size[0] = 1;
    pp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pp.f1, tmp);
    pp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qp.f1->size[0] * qp.f1->size[1]);
    qp.f1->size[0] = 1;
    qp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qp.f1, tmp);
    qp.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rp.f1->size[0] * rp.f1->size[1]);
    rp.f1->size[0] = 1;
    rp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rp.f1, tmp);
    rp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sp.f1->size[0] * sp.f1->size[1]);
    sp.f1->size[0] = 1;
    sp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sp.f1, tmp);
    sp.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[116].f1[0], &pp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[116].f1[1], &qp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[116].f1[2], &rp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[116].f1[3], &sp);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(tp.f1->size[0] * tp.f1->size[1]);
    tp.f1->size[0] = 1;
    tp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tp.f1, tmp);
    tp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(up.f1->size[0] * up.f1->size[1]);
    up.f1->size[0] = 1;
    up.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(up.f1, tmp);
    up.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vp.f1->size[0] * vp.f1->size[1]);
    vp.f1->size[0] = 1;
    vp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vp.f1, tmp);
    vp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wp.f1->size[0] * wp.f1->size[1]);
    wp.f1->size[0] = 1;
    wp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wp.f1, tmp);
    wp.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[117].f1[0], &tp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[117].f1[1], &up);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[117].f1[2], &vp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[117].f1[3], &wp);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xp.f1->size[0] * xp.f1->size[1]);
    xp.f1->size[0] = 1;
    xp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xp.f1, tmp);
    xp.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yp.f1->size[0] * yp.f1->size[1]);
    yp.f1->size[0] = 1;
    yp.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yp.f1, tmp);
    yp.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aq.f1->size[0] * aq.f1->size[1]);
    aq.f1->size[0] = 1;
    aq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aq.f1, tmp);
    aq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bq.f1->size[0] * bq.f1->size[1]);
    bq.f1->size[0] = 1;
    bq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bq.f1, tmp);
    bq.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[118].f1[0], &xp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[118].f1[1], &yp);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[118].f1[2], &aq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[118].f1[3], &bq);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cq.f1->size[0] * cq.f1->size[1]);
    cq.f1->size[0] = 1;
    cq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cq.f1, tmp);
    cq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dq.f1->size[0] * dq.f1->size[1]);
    dq.f1->size[0] = 1;
    dq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dq.f1, tmp);
    dq.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eq.f1->size[0] * eq.f1->size[1]);
    eq.f1->size[0] = 1;
    eq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eq.f1, tmp);
    eq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fq.f1->size[0] * fq.f1->size[1]);
    fq.f1->size[0] = 1;
    fq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fq.f1, tmp);
    fq.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[119].f1[0], &cq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[119].f1[1], &dq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[119].f1[2], &eq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[119].f1[3], &fq);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gq.f1->size[0] * gq.f1->size[1]);
    gq.f1->size[0] = 1;
    gq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gq.f1, tmp);
    gq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hq.f1->size[0] * hq.f1->size[1]);
    hq.f1->size[0] = 1;
    hq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hq.f1, tmp);
    hq.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iq.f1->size[0] * iq.f1->size[1]);
    iq.f1->size[0] = 1;
    iq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iq.f1, tmp);
    iq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jq.f1->size[0] * jq.f1->size[1]);
    jq.f1->size[0] = 1;
    jq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jq.f1, tmp);
    jq.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[121].f1[0], &gq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[121].f1[1], &hq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[121].f1[2], &iq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[121].f1[3], &jq);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(kq.f1->size[0] * kq.f1->size[1]);
    kq.f1->size[0] = 1;
    kq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kq.f1, tmp);
    kq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lq.f1->size[0] * lq.f1->size[1]);
    lq.f1->size[0] = 1;
    lq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lq.f1, tmp);
    lq.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mq.f1->size[0] * mq.f1->size[1]);
    mq.f1->size[0] = 1;
    mq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mq.f1, tmp);
    mq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nq.f1->size[0] * nq.f1->size[1]);
    nq.f1->size[0] = 1;
    nq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nq.f1, tmp);
    nq.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[122].f1[0], &kq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[122].f1[1], &lq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[122].f1[2], &mq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[122].f1[3], &nq);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(oq.f1->size[0] * oq.f1->size[1]);
    oq.f1->size[0] = 1;
    oq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oq.f1, tmp);
    oq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pq.f1->size[0] * pq.f1->size[1]);
    pq.f1->size[0] = 1;
    pq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pq.f1, tmp);
    pq.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qq.f1->size[0] * qq.f1->size[1]);
    qq.f1->size[0] = 1;
    qq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qq.f1, tmp);
    qq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rq.f1->size[0] * rq.f1->size[1]);
    rq.f1->size[0] = 1;
    rq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rq.f1, tmp);
    rq.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[123].f1[0], &oq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[123].f1[1], &pq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[123].f1[2], &qq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[123].f1[3], &rq);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(sq.f1->size[0] * sq.f1->size[1]);
    sq.f1->size[0] = 1;
    sq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sq.f1, tmp);
    sq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tq.f1->size[0] * tq.f1->size[1]);
    tq.f1->size[0] = 1;
    tq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tq.f1, tmp);
    tq.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uq.f1->size[0] * uq.f1->size[1]);
    uq.f1->size[0] = 1;
    uq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uq.f1, tmp);
    uq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vq.f1->size[0] * vq.f1->size[1]);
    vq.f1->size[0] = 1;
    vq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vq.f1, tmp);
    vq.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[124].f1[0], &sq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[124].f1[1], &tq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[124].f1[2], &uq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[124].f1[3], &vq);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wq.f1->size[0] * wq.f1->size[1]);
    wq.f1->size[0] = 1;
    wq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wq.f1, tmp);
    wq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xq.f1->size[0] * xq.f1->size[1]);
    xq.f1->size[0] = 1;
    xq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xq.f1, tmp);
    xq.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yq.f1->size[0] * yq.f1->size[1]);
    yq.f1->size[0] = 1;
    yq.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yq.f1, tmp);
    yq.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ar.f1->size[0] * ar.f1->size[1]);
    ar.f1->size[0] = 1;
    ar.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ar.f1, tmp);
    ar.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[126].f1[0], &wq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[126].f1[1], &xq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[126].f1[2], &yq);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[126].f1[3], &ar);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(br.f1->size[0] * br.f1->size[1]);
    br.f1->size[0] = 1;
    br.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(br.f1, tmp);
    br.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cr.f1->size[0] * cr.f1->size[1]);
    cr.f1->size[0] = 1;
    cr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cr.f1, tmp);
    cr.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dr.f1->size[0] * dr.f1->size[1]);
    dr.f1->size[0] = 1;
    dr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dr.f1, tmp);
    dr.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(er.f1->size[0] * er.f1->size[1]);
    er.f1->size[0] = 1;
    er.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(er.f1, tmp);
    er.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[127].f1[0], &br);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[127].f1[1], &cr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[127].f1[2], &dr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[127].f1[3], &er);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fr.f1->size[0] * fr.f1->size[1]);
    fr.f1->size[0] = 1;
    fr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fr.f1, tmp);
    fr.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gr.f1->size[0] * gr.f1->size[1]);
    gr.f1->size[0] = 1;
    gr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gr.f1, tmp);
    gr.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hr.f1->size[0] * hr.f1->size[1]);
    hr.f1->size[0] = 1;
    hr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hr.f1, tmp);
    hr.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ir.f1->size[0] * ir.f1->size[1]);
    ir.f1->size[0] = 1;
    ir.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ir.f1, tmp);
    ir.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[128].f1[0], &fr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[128].f1[1], &gr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[128].f1[2], &hr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[128].f1[3], &ir);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jr.f1->size[0] * jr.f1->size[1]);
    jr.f1->size[0] = 1;
    jr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jr.f1, tmp);
    jr.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kr.f1->size[0] * kr.f1->size[1]);
    kr.f1->size[0] = 1;
    kr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kr.f1, tmp);
    kr.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lr.f1->size[0] * lr.f1->size[1]);
    lr.f1->size[0] = 1;
    lr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lr.f1, tmp);
    lr.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mr.f1->size[0] * mr.f1->size[1]);
    mr.f1->size[0] = 1;
    mr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mr.f1, tmp);
    mr.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[129].f1[0], &jr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[129].f1[1], &kr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[129].f1[2], &lr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[129].f1[3], &mr);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nr.f1->size[0] * nr.f1->size[1]);
    nr.f1->size[0] = 1;
    nr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nr.f1, tmp);
    nr.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pr.f1->size[0] * pr.f1->size[1]);
    pr.f1->size[0] = 1;
    pr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pr.f1, tmp);
    pr.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qr.f1->size[0] * qr.f1->size[1]);
    qr.f1->size[0] = 1;
    qr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qr.f1, tmp);
    qr.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rr.f1->size[0] * rr.f1->size[1]);
    rr.f1->size[0] = 1;
    rr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rr.f1, tmp);
    rr.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[132].f1[0], &nr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[132].f1[1], &pr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[132].f1[2], &qr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[132].f1[3], &rr);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(sr.f1->size[0] * sr.f1->size[1]);
    sr.f1->size[0] = 1;
    sr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sr.f1, tmp);
    sr.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tr.f1->size[0] * tr.f1->size[1]);
    tr.f1->size[0] = 1;
    tr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tr.f1, tmp);
    tr.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ur.f1->size[0] * ur.f1->size[1]);
    ur.f1->size[0] = 1;
    ur.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ur.f1, tmp);
    ur.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vr.f1->size[0] * vr.f1->size[1]);
    vr.f1->size[0] = 1;
    vr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vr.f1, tmp);
    vr.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[133].f1[0], &sr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[133].f1[1], &tr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[133].f1[2], &ur);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[133].f1[3], &vr);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wr.f1->size[0] * wr.f1->size[1]);
    wr.f1->size[0] = 1;
    wr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wr.f1, tmp);
    wr.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xr.f1->size[0] * xr.f1->size[1]);
    xr.f1->size[0] = 1;
    xr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xr.f1, tmp);
    xr.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yr.f1->size[0] * yr.f1->size[1]);
    yr.f1->size[0] = 1;
    yr.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yr.f1, tmp);
    yr.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(as.f1->size[0] * as.f1->size[1]);
    as.f1->size[0] = 1;
    as.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(as.f1, tmp);
    as.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[134].f1[0], &wr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[134].f1[1], &xr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[134].f1[2], &yr);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[134].f1[3], &as);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(bs.f1->size[0] * bs.f1->size[1]);
    bs.f1->size[0] = 1;
    bs.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bs.f1, tmp);
    bs.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cs.f1->size[0] * cs.f1->size[1]);
    cs.f1->size[0] = 1;
    cs.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cs.f1, tmp);
    cs.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ds.f1->size[0] * ds.f1->size[1]);
    ds.f1->size[0] = 1;
    ds.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ds.f1, tmp);
    ds.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(es.f1->size[0] * es.f1->size[1]);
    es.f1->size[0] = 1;
    es.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(es.f1, tmp);
    es.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[136].f1[0], &bs);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[136].f1[1], &cs);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[136].f1[2], &ds);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[136].f1[3], &es);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fs.f1->size[0] * fs.f1->size[1]);
    fs.f1->size[0] = 1;
    fs.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fs.f1, tmp);
    fs.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gs.f1->size[0] * gs.f1->size[1]);
    gs.f1->size[0] = 1;
    gs.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gs.f1, tmp);
    gs.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hs.f1->size[0] * hs.f1->size[1]);
    hs.f1->size[0] = 1;
    hs.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hs.f1, tmp);
    hs.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(is.f1->size[0] * is.f1->size[1]);
    is.f1->size[0] = 1;
    is.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(is.f1, tmp);
    is.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[137].f1[0], &fs);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[137].f1[1], &gs);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[137].f1[2], &hs);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[137].f1[3], &is);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(js.f1->size[0] * js.f1->size[1]);
    js.f1->size[0] = 1;
    js.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(js.f1, tmp);
    js.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ks.f1->size[0] * ks.f1->size[1]);
    ks.f1->size[0] = 1;
    ks.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ks.f1, tmp);
    ks.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ls.f1->size[0] * ls.f1->size[1]);
    ls.f1->size[0] = 1;
    ls.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ls.f1, tmp);
    ls.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ms.f1->size[0] * ms.f1->size[1]);
    ms.f1->size[0] = 1;
    ms.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ms.f1, tmp);
    ms.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[138].f1[0], &js);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[138].f1[1], &ks);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[138].f1[2], &ls);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[138].f1[3], &ms);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ns.f1->size[0] * ns.f1->size[1]);
    ns.f1->size[0] = 1;
    ns.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ns.f1, tmp);
    ns.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(os.f1->size[0] * os.f1->size[1]);
    os.f1->size[0] = 1;
    os.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(os.f1, tmp);
    os.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ps.f1->size[0] * ps.f1->size[1]);
    ps.f1->size[0] = 1;
    ps.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ps.f1, tmp);
    ps.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qs.f1->size[0] * qs.f1->size[1]);
    qs.f1->size[0] = 1;
    qs.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qs.f1, tmp);
    qs.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[139].f1[0], &ns);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[139].f1[1], &os);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[139].f1[2], &ps);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[139].f1[3], &qs);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rs.f1->size[0] * rs.f1->size[1]);
    rs.f1->size[0] = 1;
    rs.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rs.f1, tmp);
    rs.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ss.f1->size[0] * ss.f1->size[1]);
    ss.f1->size[0] = 1;
    ss.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ss.f1, tmp);
    ss.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ts.f1->size[0] * ts.f1->size[1]);
    ts.f1->size[0] = 1;
    ts.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ts.f1, tmp);
    ts.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(us.f1->size[0] * us.f1->size[1]);
    us.f1->size[0] = 1;
    us.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(us.f1, tmp);
    us.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[142].f1[0], &rs);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[142].f1[1], &ss);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[142].f1[2], &ts);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[142].f1[3], &us);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vs.f1->size[0] * vs.f1->size[1]);
    vs.f1->size[0] = 1;
    vs.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vs.f1, tmp);
    vs.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ws.f1->size[0] * ws.f1->size[1]);
    ws.f1->size[0] = 1;
    ws.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ws.f1, tmp);
    ws.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xs.f1->size[0] * xs.f1->size[1]);
    xs.f1->size[0] = 1;
    xs.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xs.f1, tmp);
    xs.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ys.f1->size[0] * ys.f1->size[1]);
    ys.f1->size[0] = 1;
    ys.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ys.f1, tmp);
    ys.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[143].f1[0], &vs);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[143].f1[1], &ws);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[143].f1[2], &xs);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[143].f1[3], &ys);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(at.f1->size[0] * at.f1->size[1]);
    at.f1->size[0] = 1;
    at.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(at.f1, tmp);
    at.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bt.f1->size[0] * bt.f1->size[1]);
    bt.f1->size[0] = 1;
    bt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bt.f1, tmp);
    bt.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ct.f1->size[0] * ct.f1->size[1]);
    ct.f1->size[0] = 1;
    ct.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ct.f1, tmp);
    ct.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dt.f1->size[0] * dt.f1->size[1]);
    dt.f1->size[0] = 1;
    dt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dt.f1, tmp);
    dt.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[144].f1[0], &at);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[144].f1[1], &bt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[144].f1[2], &ct);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[144].f1[3], &dt);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(et.f1->size[0] * et.f1->size[1]);
    et.f1->size[0] = 1;
    et.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(et.f1, tmp);
    et.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ft.f1->size[0] * ft.f1->size[1]);
    ft.f1->size[0] = 1;
    ft.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ft.f1, tmp);
    ft.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gt.f1->size[0] * gt.f1->size[1]);
    gt.f1->size[0] = 1;
    gt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gt.f1, tmp);
    gt.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ht.f1->size[0] * ht.f1->size[1]);
    ht.f1->size[0] = 1;
    ht.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ht.f1, tmp);
    ht.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[146].f1[0], &et);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[146].f1[1], &ft);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[146].f1[2], &gt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[146].f1[3], &ht);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(it.f1->size[0] * it.f1->size[1]);
    it.f1->size[0] = 1;
    it.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(it.f1, tmp);
    it.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jt.f1->size[0] * jt.f1->size[1]);
    jt.f1->size[0] = 1;
    jt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jt.f1, tmp);
    jt.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kt.f1->size[0] * kt.f1->size[1]);
    kt.f1->size[0] = 1;
    kt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kt.f1, tmp);
    kt.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lt.f1->size[0] * lt.f1->size[1]);
    lt.f1->size[0] = 1;
    lt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lt.f1, tmp);
    lt.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[147].f1[0], &it);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[147].f1[1], &jt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[147].f1[2], &kt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[147].f1[3], &lt);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mt.f1->size[0] * mt.f1->size[1]);
    mt.f1->size[0] = 1;
    mt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mt.f1, tmp);
    mt.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nt.f1->size[0] * nt.f1->size[1]);
    nt.f1->size[0] = 1;
    nt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nt.f1, tmp);
    nt.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ot.f1->size[0] * ot.f1->size[1]);
    ot.f1->size[0] = 1;
    ot.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ot.f1, tmp);
    ot.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pt.f1->size[0] * pt.f1->size[1]);
    pt.f1->size[0] = 1;
    pt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pt.f1, tmp);
    pt.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[148].f1[0], &mt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[148].f1[1], &nt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[148].f1[2], &ot);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[148].f1[3], &pt);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qt.f1->size[0] * qt.f1->size[1]);
    qt.f1->size[0] = 1;
    qt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qt.f1, tmp);
    qt.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rt.f1->size[0] * rt.f1->size[1]);
    rt.f1->size[0] = 1;
    rt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rt.f1, tmp);
    rt.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(st.f1->size[0] * st.f1->size[1]);
    st.f1->size[0] = 1;
    st.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(st.f1, tmp);
    st.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tt.f1->size[0] * tt.f1->size[1]);
    tt.f1->size[0] = 1;
    tt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tt.f1, tmp);
    tt.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[149].f1[0], &qt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[149].f1[1], &rt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[149].f1[2], &st);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[149].f1[3], &tt);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ut.f1->size[0] * ut.f1->size[1]);
    ut.f1->size[0] = 1;
    ut.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ut.f1, tmp);
    ut.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vt.f1->size[0] * vt.f1->size[1]);
    vt.f1->size[0] = 1;
    vt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vt.f1, tmp);
    vt.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wt.f1->size[0] * wt.f1->size[1]);
    wt.f1->size[0] = 1;
    wt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wt.f1, tmp);
    wt.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xt.f1->size[0] * xt.f1->size[1]);
    xt.f1->size[0] = 1;
    xt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xt.f1, tmp);
    xt.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[151].f1[0], &ut);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[151].f1[1], &vt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[151].f1[2], &wt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[151].f1[3], &xt);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(yt.f1->size[0] * yt.f1->size[1]);
    yt.f1->size[0] = 1;
    yt.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yt.f1, tmp);
    yt.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(au.f1->size[0] * au.f1->size[1]);
    au.f1->size[0] = 1;
    au.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(au.f1, tmp);
    au.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bu.f1->size[0] * bu.f1->size[1]);
    bu.f1->size[0] = 1;
    bu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bu.f1, tmp);
    bu.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cu.f1->size[0] * cu.f1->size[1]);
    cu.f1->size[0] = 1;
    cu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cu.f1, tmp);
    cu.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[153].f1[0], &yt);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[153].f1[1], &au);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[153].f1[2], &bu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[153].f1[3], &cu);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(du.f1->size[0] * du.f1->size[1]);
    du.f1->size[0] = 1;
    du.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(du.f1, tmp);
    du.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(eu.f1->size[0] * eu.f1->size[1]);
    eu.f1->size[0] = 1;
    eu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eu.f1, tmp);
    eu.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fu.f1->size[0] * fu.f1->size[1]);
    fu.f1->size[0] = 1;
    fu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fu.f1, tmp);
    fu.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gu.f1->size[0] * gu.f1->size[1]);
    gu.f1->size[0] = 1;
    gu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gu.f1, tmp);
    gu.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[156].f1[0], &du);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[156].f1[1], &eu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[156].f1[2], &fu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[156].f1[3], &gu);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hu.f1->size[0] * hu.f1->size[1]);
    hu.f1->size[0] = 1;
    hu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hu.f1, tmp);
    hu.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(iu.f1->size[0] * iu.f1->size[1]);
    iu.f1->size[0] = 1;
    iu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iu.f1, tmp);
    iu.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ju.f1->size[0] * ju.f1->size[1]);
    ju.f1->size[0] = 1;
    ju.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ju.f1, tmp);
    ju.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ku.f1->size[0] * ku.f1->size[1]);
    ku.f1->size[0] = 1;
    ku.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ku.f1, tmp);
    ku.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[157].f1[0], &hu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[157].f1[1], &iu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[157].f1[2], &ju);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[157].f1[3], &ku);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(lu.f1->size[0] * lu.f1->size[1]);
    lu.f1->size[0] = 1;
    lu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lu.f1, tmp);
    lu.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mu.f1->size[0] * mu.f1->size[1]);
    mu.f1->size[0] = 1;
    mu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mu.f1, tmp);
    mu.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nu.f1->size[0] * nu.f1->size[1]);
    nu.f1->size[0] = 1;
    nu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nu.f1, tmp);
    nu.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ou.f1->size[0] * ou.f1->size[1]);
    ou.f1->size[0] = 1;
    ou.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ou.f1, tmp);
    ou.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[158].f1[0], &lu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[158].f1[1], &mu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[158].f1[2], &nu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[158].f1[3], &ou);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(pu.f1->size[0] * pu.f1->size[1]);
    pu.f1->size[0] = 1;
    pu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pu.f1, tmp);
    pu.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qu.f1->size[0] * qu.f1->size[1]);
    qu.f1->size[0] = 1;
    qu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qu.f1, tmp);
    qu.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ru.f1->size[0] * ru.f1->size[1]);
    ru.f1->size[0] = 1;
    ru.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ru.f1, tmp);
    ru.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(su.f1->size[0] * su.f1->size[1]);
    su.f1->size[0] = 1;
    su.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(su.f1, tmp);
    su.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[159].f1[0], &pu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[159].f1[1], &qu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[159].f1[2], &ru);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[159].f1[3], &su);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(tu.f1->size[0] * tu.f1->size[1]);
    tu.f1->size[0] = 1;
    tu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tu.f1, tmp);
    tu.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uu.f1->size[0] * uu.f1->size[1]);
    uu.f1->size[0] = 1;
    uu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uu.f1, tmp);
    uu.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vu.f1->size[0] * vu.f1->size[1]);
    vu.f1->size[0] = 1;
    vu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vu.f1, tmp);
    vu.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wu.f1->size[0] * wu.f1->size[1]);
    wu.f1->size[0] = 1;
    wu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wu.f1, tmp);
    wu.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[162].f1[0], &tu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[162].f1[1], &uu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[162].f1[2], &vu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[162].f1[3], &wu);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xu.f1->size[0] * xu.f1->size[1]);
    xu.f1->size[0] = 1;
    xu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xu.f1, tmp);
    xu.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yu.f1->size[0] * yu.f1->size[1]);
    yu.f1->size[0] = 1;
    yu.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yu.f1, tmp);
    yu.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(av.f1->size[0] * av.f1->size[1]);
    av.f1->size[0] = 1;
    av.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(av.f1, tmp);
    av.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bv.f1->size[0] * bv.f1->size[1]);
    bv.f1->size[0] = 1;
    bv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bv.f1, tmp);
    bv.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[163].f1[0], &xu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[163].f1[1], &yu);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[163].f1[2], &av);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[163].f1[3], &bv);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cv.f1->size[0] * cv.f1->size[1]);
    cv.f1->size[0] = 1;
    cv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cv.f1, tmp);
    cv.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dv.f1->size[0] * dv.f1->size[1]);
    dv.f1->size[0] = 1;
    dv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dv.f1, tmp);
    dv.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ev.f1->size[0] * ev.f1->size[1]);
    ev.f1->size[0] = 1;
    ev.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ev.f1, tmp);
    ev.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fv.f1->size[0] * fv.f1->size[1]);
    fv.f1->size[0] = 1;
    fv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fv.f1, tmp);
    fv.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[164].f1[0], &cv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[164].f1[1], &dv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[164].f1[2], &ev);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[164].f1[3], &fv);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gv.f1->size[0] * gv.f1->size[1]);
    gv.f1->size[0] = 1;
    gv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gv.f1, tmp);
    gv.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hv.f1->size[0] * hv.f1->size[1]);
    hv.f1->size[0] = 1;
    hv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hv.f1, tmp);
    hv.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iv.f1->size[0] * iv.f1->size[1]);
    iv.f1->size[0] = 1;
    iv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iv.f1, tmp);
    iv.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jv.f1->size[0] * jv.f1->size[1]);
    jv.f1->size[0] = 1;
    jv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jv.f1, tmp);
    jv.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[166].f1[0], &gv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[166].f1[1], &hv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[166].f1[2], &iv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[166].f1[3], &jv);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(kv.f1->size[0] * kv.f1->size[1]);
    kv.f1->size[0] = 1;
    kv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kv.f1, tmp);
    kv.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lv.f1->size[0] * lv.f1->size[1]);
    lv.f1->size[0] = 1;
    lv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lv.f1, tmp);
    lv.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mv.f1->size[0] * mv.f1->size[1]);
    mv.f1->size[0] = 1;
    mv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mv.f1, tmp);
    mv.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nv.f1->size[0] * nv.f1->size[1]);
    nv.f1->size[0] = 1;
    nv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nv.f1, tmp);
    nv.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[167].f1[0], &kv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[167].f1[1], &lv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[167].f1[2], &mv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[167].f1[3], &nv);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ov.f1->size[0] * ov.f1->size[1]);
    ov.f1->size[0] = 1;
    ov.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ov.f1, tmp);
    ov.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pv.f1->size[0] * pv.f1->size[1]);
    pv.f1->size[0] = 1;
    pv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pv.f1, tmp);
    pv.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qv.f1->size[0] * qv.f1->size[1]);
    qv.f1->size[0] = 1;
    qv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qv.f1, tmp);
    qv.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rv.f1->size[0] * rv.f1->size[1]);
    rv.f1->size[0] = 1;
    rv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rv.f1, tmp);
    rv.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[168].f1[0], &ov);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[168].f1[1], &pv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[168].f1[2], &qv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[168].f1[3], &rv);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(sv.f1->size[0] * sv.f1->size[1]);
    sv.f1->size[0] = 1;
    sv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sv.f1, tmp);
    sv.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tv.f1->size[0] * tv.f1->size[1]);
    tv.f1->size[0] = 1;
    tv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tv.f1, tmp);
    tv.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uv.f1->size[0] * uv.f1->size[1]);
    uv.f1->size[0] = 1;
    uv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uv.f1, tmp);
    uv.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vv.f1->size[0] * vv.f1->size[1]);
    vv.f1->size[0] = 1;
    vv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vv.f1, tmp);
    vv.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[169].f1[0], &sv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[169].f1[1], &tv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[169].f1[2], &uv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[169].f1[3], &vv);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wv.f1->size[0] * wv.f1->size[1]);
    wv.f1->size[0] = 1;
    wv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wv.f1, tmp);
    wv.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xv.f1->size[0] * xv.f1->size[1]);
    xv.f1->size[0] = 1;
    xv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xv.f1, tmp);
    xv.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yv.f1->size[0] * yv.f1->size[1]);
    yv.f1->size[0] = 1;
    yv.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yv.f1, tmp);
    yv.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(aw.f1->size[0] * aw.f1->size[1]);
    aw.f1->size[0] = 1;
    aw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aw.f1, tmp);
    aw.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[171].f1[0], &wv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[171].f1[1], &xv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[171].f1[2], &yv);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[171].f1[3], &aw);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(bw.f1->size[0] * bw.f1->size[1]);
    bw.f1->size[0] = 1;
    bw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bw.f1, tmp);
    bw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cw.f1->size[0] * cw.f1->size[1]);
    cw.f1->size[0] = 1;
    cw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cw.f1, tmp);
    cw.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dw.f1->size[0] * dw.f1->size[1]);
    dw.f1->size[0] = 1;
    dw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dw.f1, tmp);
    dw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ew.f1->size[0] * ew.f1->size[1]);
    ew.f1->size[0] = 1;
    ew.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ew.f1, tmp);
    ew.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[172].f1[0], &bw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[172].f1[1], &cw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[172].f1[2], &dw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[172].f1[3], &ew);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fw.f1->size[0] * fw.f1->size[1]);
    fw.f1->size[0] = 1;
    fw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fw.f1, tmp);
    fw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gw.f1->size[0] * gw.f1->size[1]);
    gw.f1->size[0] = 1;
    gw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gw.f1, tmp);
    gw.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hw.f1->size[0] * hw.f1->size[1]);
    hw.f1->size[0] = 1;
    hw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hw.f1, tmp);
    hw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(iw.f1->size[0] * iw.f1->size[1]);
    iw.f1->size[0] = 1;
    iw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iw.f1, tmp);
    iw.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[176].f1[0], &fw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[176].f1[1], &gw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[176].f1[2], &hw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[176].f1[3], &iw);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jw.f1->size[0] * jw.f1->size[1]);
    jw.f1->size[0] = 1;
    jw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jw.f1, tmp);
    jw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kw.f1->size[0] * kw.f1->size[1]);
    kw.f1->size[0] = 1;
    kw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kw.f1, tmp);
    kw.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lw.f1->size[0] * lw.f1->size[1]);
    lw.f1->size[0] = 1;
    lw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lw.f1, tmp);
    lw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mw.f1->size[0] * mw.f1->size[1]);
    mw.f1->size[0] = 1;
    mw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mw.f1, tmp);
    mw.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[177].f1[0], &jw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[177].f1[1], &kw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[177].f1[2], &lw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[177].f1[3], &mw);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nw.f1->size[0] * nw.f1->size[1]);
    nw.f1->size[0] = 1;
    nw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nw.f1, tmp);
    nw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ow.f1->size[0] * ow.f1->size[1]);
    ow.f1->size[0] = 1;
    ow.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ow.f1, tmp);
    ow.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pw.f1->size[0] * pw.f1->size[1]);
    pw.f1->size[0] = 1;
    pw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pw.f1, tmp);
    pw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qw.f1->size[0] * qw.f1->size[1]);
    qw.f1->size[0] = 1;
    qw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qw.f1, tmp);
    qw.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[178].f1[0], &nw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[178].f1[1], &ow);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[178].f1[2], &pw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[178].f1[3], &qw);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rw.f1->size[0] * rw.f1->size[1]);
    rw.f1->size[0] = 1;
    rw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rw.f1, tmp);
    rw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sw.f1->size[0] * sw.f1->size[1]);
    sw.f1->size[0] = 1;
    sw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sw.f1, tmp);
    sw.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tw.f1->size[0] * tw.f1->size[1]);
    tw.f1->size[0] = 1;
    tw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tw.f1, tmp);
    tw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uw.f1->size[0] * uw.f1->size[1]);
    uw.f1->size[0] = 1;
    uw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uw.f1, tmp);
    uw.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[179].f1[0], &rw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[179].f1[1], &sw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[179].f1[2], &tw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[179].f1[3], &uw);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vw.f1->size[0] * vw.f1->size[1]);
    vw.f1->size[0] = 1;
    vw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vw.f1, tmp);
    vw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ww.f1->size[0] * ww.f1->size[1]);
    ww.f1->size[0] = 1;
    ww.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ww.f1, tmp);
    ww.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xw.f1->size[0] * xw.f1->size[1]);
    xw.f1->size[0] = 1;
    xw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xw.f1, tmp);
    xw.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yw.f1->size[0] * yw.f1->size[1]);
    yw.f1->size[0] = 1;
    yw.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yw.f1, tmp);
    yw.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[181].f1[0], &vw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[181].f1[1], &ww);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[181].f1[2], &xw);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[181].f1[3], &yw);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ax.f1->size[0] * ax.f1->size[1]);
    ax.f1->size[0] = 1;
    ax.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ax.f1, tmp);
    ax.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bx.f1->size[0] * bx.f1->size[1]);
    bx.f1->size[0] = 1;
    bx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bx.f1, tmp);
    bx.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cx.f1->size[0] * cx.f1->size[1]);
    cx.f1->size[0] = 1;
    cx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cx.f1, tmp);
    cx.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dx.f1->size[0] * dx.f1->size[1]);
    dx.f1->size[0] = 1;
    dx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dx.f1, tmp);
    dx.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[182].f1[0], &ax);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[182].f1[1], &bx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[182].f1[2], &cx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[182].f1[3], &dx);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ex.f1->size[0] * ex.f1->size[1]);
    ex.f1->size[0] = 1;
    ex.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ex.f1, tmp);
    ex.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fx.f1->size[0] * fx.f1->size[1]);
    fx.f1->size[0] = 1;
    fx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fx.f1, tmp);
    fx.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gx.f1->size[0] * gx.f1->size[1]);
    gx.f1->size[0] = 1;
    gx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gx.f1, tmp);
    gx.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hx.f1->size[0] * hx.f1->size[1]);
    hx.f1->size[0] = 1;
    hx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hx.f1, tmp);
    hx.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[184].f1[0], &ex);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[184].f1[1], &fx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[184].f1[2], &gx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[184].f1[3], &hx);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ix.f1->size[0] * ix.f1->size[1]);
    ix.f1->size[0] = 1;
    ix.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ix.f1, tmp);
    ix.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jx.f1->size[0] * jx.f1->size[1]);
    jx.f1->size[0] = 1;
    jx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jx.f1, tmp);
    jx.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kx.f1->size[0] * kx.f1->size[1]);
    kx.f1->size[0] = 1;
    kx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kx.f1, tmp);
    kx.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lx.f1->size[0] * lx.f1->size[1]);
    lx.f1->size[0] = 1;
    lx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lx.f1, tmp);
    lx.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[186].f1[0], &ix);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[186].f1[1], &jx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[186].f1[2], &kx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[186].f1[3], &lx);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mx.f1->size[0] * mx.f1->size[1]);
    mx.f1->size[0] = 1;
    mx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mx.f1, tmp);
    mx.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nx.f1->size[0] * nx.f1->size[1]);
    nx.f1->size[0] = 1;
    nx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nx.f1, tmp);
    nx.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ox.f1->size[0] * ox.f1->size[1]);
    ox.f1->size[0] = 1;
    ox.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ox.f1, tmp);
    ox.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(px.f1->size[0] * px.f1->size[1]);
    px.f1->size[0] = 1;
    px.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(px.f1, tmp);
    px.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[187].f1[0], &mx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[187].f1[1], &nx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[187].f1[2], &ox);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[187].f1[3], &px);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qx.f1->size[0] * qx.f1->size[1]);
    qx.f1->size[0] = 1;
    qx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qx.f1, tmp);
    qx.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rx.f1->size[0] * rx.f1->size[1]);
    rx.f1->size[0] = 1;
    rx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rx.f1, tmp);
    rx.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sx.f1->size[0] * sx.f1->size[1]);
    sx.f1->size[0] = 1;
    sx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sx.f1, tmp);
    sx.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tx.f1->size[0] * tx.f1->size[1]);
    tx.f1->size[0] = 1;
    tx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tx.f1, tmp);
    tx.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[188].f1[0], &qx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[188].f1[1], &rx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[188].f1[2], &sx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[188].f1[3], &tx);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ux.f1->size[0] * ux.f1->size[1]);
    ux.f1->size[0] = 1;
    ux.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ux.f1, tmp);
    ux.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vx.f1->size[0] * vx.f1->size[1]);
    vx.f1->size[0] = 1;
    vx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vx.f1, tmp);
    vx.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wx.f1->size[0] * wx.f1->size[1]);
    wx.f1->size[0] = 1;
    wx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wx.f1, tmp);
    wx.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xx.f1->size[0] * xx.f1->size[1]);
    xx.f1->size[0] = 1;
    xx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xx.f1, tmp);
    xx.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[189].f1[0], &ux);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[189].f1[1], &vx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[189].f1[2], &wx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[189].f1[3], &xx);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(yx.f1->size[0] * yx.f1->size[1]);
    yx.f1->size[0] = 1;
    yx.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yx.f1, tmp);
    yx.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ay.f1->size[0] * ay.f1->size[1]);
    ay.f1->size[0] = 1;
    ay.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ay.f1, tmp);
    ay.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(by.f1->size[0] * by.f1->size[1]);
    by.f1->size[0] = 1;
    by.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(by.f1, tmp);
    by.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cy.f1->size[0] * cy.f1->size[1]);
    cy.f1->size[0] = 1;
    cy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cy.f1, tmp);
    cy.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[192].f1[0], &yx);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[192].f1[1], &ay);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[192].f1[2], &by);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[192].f1[3], &cy);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dy.f1->size[0] * dy.f1->size[1]);
    dy.f1->size[0] = 1;
    dy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dy.f1, tmp);
    dy.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ey.f1->size[0] * ey.f1->size[1]);
    ey.f1->size[0] = 1;
    ey.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ey.f1, tmp);
    ey.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fy.f1->size[0] * fy.f1->size[1]);
    fy.f1->size[0] = 1;
    fy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fy.f1, tmp);
    fy.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gy.f1->size[0] * gy.f1->size[1]);
    gy.f1->size[0] = 1;
    gy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gy.f1, tmp);
    gy.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[193].f1[0], &dy);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[193].f1[1], &ey);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[193].f1[2], &fy);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[193].f1[3], &gy);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hy.f1->size[0] * hy.f1->size[1]);
    hy.f1->size[0] = 1;
    hy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hy.f1, tmp);
    hy.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(iy.f1->size[0] * iy.f1->size[1]);
    iy.f1->size[0] = 1;
    iy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iy.f1, tmp);
    iy.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jy.f1->size[0] * jy.f1->size[1]);
    jy.f1->size[0] = 1;
    jy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jy.f1, tmp);
    jy.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ky.f1->size[0] * ky.f1->size[1]);
    ky.f1->size[0] = 1;
    ky.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ky.f1, tmp);
    ky.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[194].f1[0], &hy);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[194].f1[1], &iy);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[194].f1[2], &jy);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[194].f1[3], &ky);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ly.f1->size[0] * ly.f1->size[1]);
    ly.f1->size[0] = 1;
    ly.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ly.f1, tmp);
    ly.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(my.f1->size[0] * my.f1->size[1]);
    my.f1->size[0] = 1;
    my.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(my.f1, tmp);
    my.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ny.f1->size[0] * ny.f1->size[1]);
    ny.f1->size[0] = 1;
    ny.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ny.f1, tmp);
    ny.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(oy.f1->size[0] * oy.f1->size[1]);
    oy.f1->size[0] = 1;
    oy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oy.f1, tmp);
    oy.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[196].f1[0], &ly);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[196].f1[1], &my);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[196].f1[2], &ny);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[196].f1[3], &oy);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(py.f1->size[0] * py.f1->size[1]);
    py.f1->size[0] = 1;
    py.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(py.f1, tmp);
    py.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qy.f1->size[0] * qy.f1->size[1]);
    qy.f1->size[0] = 1;
    qy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qy.f1, tmp);
    qy.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ry.f1->size[0] * ry.f1->size[1]);
    ry.f1->size[0] = 1;
    ry.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ry.f1, tmp);
    ry.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sy.f1->size[0] * sy.f1->size[1]);
    sy.f1->size[0] = 1;
    sy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sy.f1, tmp);
    sy.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[197].f1[0], &py);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[197].f1[1], &qy);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[197].f1[2], &ry);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[197].f1[3], &sy);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ty.f1->size[0] * ty.f1->size[1]);
    ty.f1->size[0] = 1;
    ty.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ty.f1, tmp);
    ty.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uy.f1->size[0] * uy.f1->size[1]);
    uy.f1->size[0] = 1;
    uy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uy.f1, tmp);
    uy.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vy.f1->size[0] * vy.f1->size[1]);
    vy.f1->size[0] = 1;
    vy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vy.f1, tmp);
    vy.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wy.f1->size[0] * wy.f1->size[1]);
    wy.f1->size[0] = 1;
    wy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wy.f1, tmp);
    wy.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[198].f1[0], &ty);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[198].f1[1], &uy);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[198].f1[2], &vy);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[198].f1[3], &wy);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xy.f1->size[0] * xy.f1->size[1]);
    xy.f1->size[0] = 1;
    xy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xy.f1, tmp);
    xy.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yy.f1->size[0] * yy.f1->size[1]);
    yy.f1->size[0] = 1;
    yy.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yy.f1, tmp);
    yy.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aab.f1->size[0] * aab.f1->size[1]);
    aab.f1->size[0] = 1;
    aab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aab.f1, tmp);
    aab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bab.f1->size[0] * bab.f1->size[1]);
    bab.f1->size[0] = 1;
    bab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bab.f1, tmp);
    bab.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[199].f1[0], &xy);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[199].f1[1], &yy);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[199].f1[2],
        &aab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[199].f1[3],
        &bab);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cab.f1->size[0] * cab.f1->size[1]);
    cab.f1->size[0] = 1;
    cab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cab.f1, tmp);
    cab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dab.f1->size[0] * dab.f1->size[1]);
    dab.f1->size[0] = 1;
    dab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dab.f1, tmp);
    dab.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eab.f1->size[0] * eab.f1->size[1]);
    eab.f1->size[0] = 1;
    eab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eab.f1, tmp);
    eab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fab.f1->size[0] * fab.f1->size[1]);
    fab.f1->size[0] = 1;
    fab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fab.f1, tmp);
    fab.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[201].f1[0],
        &cab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[201].f1[1],
        &dab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[201].f1[2],
        &eab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[201].f1[3],
        &fab);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gab.f1->size[0] * gab.f1->size[1]);
    gab.f1->size[0] = 1;
    gab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gab.f1, tmp);
    gab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hab.f1->size[0] * hab.f1->size[1]);
    hab.f1->size[0] = 1;
    hab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hab.f1, tmp);
    hab.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iab.f1->size[0] * iab.f1->size[1]);
    iab.f1->size[0] = 1;
    iab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iab.f1, tmp);
    iab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jab.f1->size[0] * jab.f1->size[1]);
    jab.f1->size[0] = 1;
    jab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jab.f1, tmp);
    jab.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[202].f1[0],
        &gab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[202].f1[1],
        &hab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[202].f1[2],
        &iab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[202].f1[3],
        &jab);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(kab.f1->size[0] * kab.f1->size[1]);
    kab.f1->size[0] = 1;
    kab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kab.f1, tmp);
    kab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lab.f1->size[0] * lab.f1->size[1]);
    lab.f1->size[0] = 1;
    lab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lab.f1, tmp);
    lab.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mab.f1->size[0] * mab.f1->size[1]);
    mab.f1->size[0] = 1;
    mab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mab.f1, tmp);
    mab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nab.f1->size[0] * nab.f1->size[1]);
    nab.f1->size[0] = 1;
    nab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nab.f1, tmp);
    nab.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[204].f1[0],
        &kab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[204].f1[1],
        &lab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[204].f1[2],
        &mab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[204].f1[3],
        &nab);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(oab.f1->size[0] * oab.f1->size[1]);
    oab.f1->size[0] = 1;
    oab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oab.f1, tmp);
    oab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pab.f1->size[0] * pab.f1->size[1]);
    pab.f1->size[0] = 1;
    pab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pab.f1, tmp);
    pab.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qab.f1->size[0] * qab.f1->size[1]);
    qab.f1->size[0] = 1;
    qab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qab.f1, tmp);
    qab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rab.f1->size[0] * rab.f1->size[1]);
    rab.f1->size[0] = 1;
    rab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rab.f1, tmp);
    rab.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[206].f1[0],
        &oab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[206].f1[1],
        &pab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[206].f1[2],
        &qab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[206].f1[3],
        &rab);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(sab.f1->size[0] * sab.f1->size[1]);
    sab.f1->size[0] = 1;
    sab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sab.f1, tmp);
    sab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tab.f1->size[0] * tab.f1->size[1]);
    tab.f1->size[0] = 1;
    tab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tab.f1, tmp);
    tab.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uab.f1->size[0] * uab.f1->size[1]);
    uab.f1->size[0] = 1;
    uab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uab.f1, tmp);
    uab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vab.f1->size[0] * vab.f1->size[1]);
    vab.f1->size[0] = 1;
    vab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vab.f1, tmp);
    vab.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[207].f1[0],
        &sab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[207].f1[1],
        &tab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[207].f1[2],
        &uab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[207].f1[3],
        &vab);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wab.f1->size[0] * wab.f1->size[1]);
    wab.f1->size[0] = 1;
    wab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wab.f1, tmp);
    wab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xab.f1->size[0] * xab.f1->size[1]);
    xab.f1->size[0] = 1;
    xab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xab.f1, tmp);
    xab.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yab.f1->size[0] * yab.f1->size[1]);
    yab.f1->size[0] = 1;
    yab.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yab.f1, tmp);
    yab.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(abb.f1->size[0] * abb.f1->size[1]);
    abb.f1->size[0] = 1;
    abb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(abb.f1, tmp);
    abb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[208].f1[0],
        &wab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[208].f1[1],
        &xab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[208].f1[2],
        &yab);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[208].f1[3],
        &abb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(bbb.f1->size[0] * bbb.f1->size[1]);
    bbb.f1->size[0] = 1;
    bbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bbb.f1, tmp);
    bbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cbb.f1->size[0] * cbb.f1->size[1]);
    cbb.f1->size[0] = 1;
    cbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cbb.f1, tmp);
    cbb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dbb.f1->size[0] * dbb.f1->size[1]);
    dbb.f1->size[0] = 1;
    dbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dbb.f1, tmp);
    dbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ebb.f1->size[0] * ebb.f1->size[1]);
    ebb.f1->size[0] = 1;
    ebb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ebb.f1, tmp);
    ebb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[209].f1[0],
        &bbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[209].f1[1],
        &cbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[209].f1[2],
        &dbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[209].f1[3],
        &ebb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fbb.f1->size[0] * fbb.f1->size[1]);
    fbb.f1->size[0] = 1;
    fbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fbb.f1, tmp);
    fbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gbb.f1->size[0] * gbb.f1->size[1]);
    gbb.f1->size[0] = 1;
    gbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gbb.f1, tmp);
    gbb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hbb.f1->size[0] * hbb.f1->size[1]);
    hbb.f1->size[0] = 1;
    hbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hbb.f1, tmp);
    hbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ibb.f1->size[0] * ibb.f1->size[1]);
    ibb.f1->size[0] = 1;
    ibb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ibb.f1, tmp);
    ibb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[211].f1[0],
        &fbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[211].f1[1],
        &gbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[211].f1[2],
        &hbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[211].f1[3],
        &ibb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jbb.f1->size[0] * jbb.f1->size[1]);
    jbb.f1->size[0] = 1;
    jbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jbb.f1, tmp);
    jbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kbb.f1->size[0] * kbb.f1->size[1]);
    kbb.f1->size[0] = 1;
    kbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kbb.f1, tmp);
    kbb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lbb.f1->size[0] * lbb.f1->size[1]);
    lbb.f1->size[0] = 1;
    lbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lbb.f1, tmp);
    lbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mbb.f1->size[0] * mbb.f1->size[1]);
    mbb.f1->size[0] = 1;
    mbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mbb.f1, tmp);
    mbb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[212].f1[0],
        &jbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[212].f1[1],
        &kbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[212].f1[2],
        &lbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[212].f1[3],
        &mbb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nbb.f1->size[0] * nbb.f1->size[1]);
    nbb.f1->size[0] = 1;
    nbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nbb.f1, tmp);
    nbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(obb.f1->size[0] * obb.f1->size[1]);
    obb.f1->size[0] = 1;
    obb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(obb.f1, tmp);
    obb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pbb.f1->size[0] * pbb.f1->size[1]);
    pbb.f1->size[0] = 1;
    pbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pbb.f1, tmp);
    pbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qbb.f1->size[0] * qbb.f1->size[1]);
    qbb.f1->size[0] = 1;
    qbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qbb.f1, tmp);
    qbb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[216].f1[0],
        &nbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[216].f1[1],
        &obb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[216].f1[2],
        &pbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[216].f1[3],
        &qbb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rbb.f1->size[0] * rbb.f1->size[1]);
    rbb.f1->size[0] = 1;
    rbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rbb.f1, tmp);
    rbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sbb.f1->size[0] * sbb.f1->size[1]);
    sbb.f1->size[0] = 1;
    sbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sbb.f1, tmp);
    sbb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tbb.f1->size[0] * tbb.f1->size[1]);
    tbb.f1->size[0] = 1;
    tbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tbb.f1, tmp);
    tbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ubb.f1->size[0] * ubb.f1->size[1]);
    ubb.f1->size[0] = 1;
    ubb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ubb.f1, tmp);
    ubb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[217].f1[0],
        &rbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[217].f1[1],
        &sbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[217].f1[2],
        &tbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[217].f1[3],
        &ubb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vbb.f1->size[0] * vbb.f1->size[1]);
    vbb.f1->size[0] = 1;
    vbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vbb.f1, tmp);
    vbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wbb.f1->size[0] * wbb.f1->size[1]);
    wbb.f1->size[0] = 1;
    wbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wbb.f1, tmp);
    wbb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xbb.f1->size[0] * xbb.f1->size[1]);
    xbb.f1->size[0] = 1;
    xbb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xbb.f1, tmp);
    xbb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ybb.f1->size[0] * ybb.f1->size[1]);
    ybb.f1->size[0] = 1;
    ybb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ybb.f1, tmp);
    ybb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[218].f1[0],
        &vbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[218].f1[1],
        &wbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[218].f1[2],
        &xbb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[218].f1[3],
        &ybb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(acb.f1->size[0] * acb.f1->size[1]);
    acb.f1->size[0] = 1;
    acb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(acb.f1, tmp);
    acb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bcb.f1->size[0] * bcb.f1->size[1]);
    bcb.f1->size[0] = 1;
    bcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bcb.f1, tmp);
    bcb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ccb.f1->size[0] * ccb.f1->size[1]);
    ccb.f1->size[0] = 1;
    ccb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ccb.f1, tmp);
    ccb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dcb.f1->size[0] * dcb.f1->size[1]);
    dcb.f1->size[0] = 1;
    dcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dcb.f1, tmp);
    dcb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[219].f1[0],
        &acb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[219].f1[1],
        &bcb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[219].f1[2],
        &ccb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[219].f1[3],
        &dcb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ecb.f1->size[0] * ecb.f1->size[1]);
    ecb.f1->size[0] = 1;
    ecb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ecb.f1, tmp);
    ecb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fcb.f1->size[0] * fcb.f1->size[1]);
    fcb.f1->size[0] = 1;
    fcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fcb.f1, tmp);
    fcb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gcb.f1->size[0] * gcb.f1->size[1]);
    gcb.f1->size[0] = 1;
    gcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gcb.f1, tmp);
    gcb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hcb.f1->size[0] * hcb.f1->size[1]);
    hcb.f1->size[0] = 1;
    hcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hcb.f1, tmp);
    hcb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[220].f1[0],
        &ecb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[220].f1[1],
        &fcb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[220].f1[2],
        &gcb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[220].f1[3],
        &hcb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(icb.f1->size[0] * icb.f1->size[1]);
    icb.f1->size[0] = 1;
    icb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(icb.f1, tmp);
    icb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jcb.f1->size[0] * jcb.f1->size[1]);
    jcb.f1->size[0] = 1;
    jcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jcb.f1, tmp);
    jcb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kcb.f1->size[0] * kcb.f1->size[1]);
    kcb.f1->size[0] = 1;
    kcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kcb.f1, tmp);
    kcb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lcb.f1->size[0] * lcb.f1->size[1]);
    lcb.f1->size[0] = 1;
    lcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lcb.f1, tmp);
    lcb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[221].f1[0],
        &icb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[221].f1[1],
        &jcb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[221].f1[2],
        &kcb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[221].f1[3],
        &lcb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mcb.f1->size[0] * mcb.f1->size[1]);
    mcb.f1->size[0] = 1;
    mcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mcb.f1, tmp);
    mcb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ncb.f1->size[0] * ncb.f1->size[1]);
    ncb.f1->size[0] = 1;
    ncb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ncb.f1, tmp);
    ncb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ocb.f1->size[0] * ocb.f1->size[1]);
    ocb.f1->size[0] = 1;
    ocb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ocb.f1, tmp);
    ocb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pcb.f1->size[0] * pcb.f1->size[1]);
    pcb.f1->size[0] = 1;
    pcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pcb.f1, tmp);
    pcb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[224].f1[0],
        &mcb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[224].f1[1],
        &ncb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[224].f1[2],
        &ocb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[224].f1[3],
        &pcb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qcb.f1->size[0] * qcb.f1->size[1]);
    qcb.f1->size[0] = 1;
    qcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qcb.f1, tmp);
    qcb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rcb.f1->size[0] * rcb.f1->size[1]);
    rcb.f1->size[0] = 1;
    rcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rcb.f1, tmp);
    rcb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(scb.f1->size[0] * scb.f1->size[1]);
    scb.f1->size[0] = 1;
    scb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(scb.f1, tmp);
    scb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tcb.f1->size[0] * tcb.f1->size[1]);
    tcb.f1->size[0] = 1;
    tcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tcb.f1, tmp);
    tcb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[226].f1[0],
        &qcb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[226].f1[1],
        &rcb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[226].f1[2],
        &scb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[226].f1[3],
        &tcb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ucb.f1->size[0] * ucb.f1->size[1]);
    ucb.f1->size[0] = 1;
    ucb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ucb.f1, tmp);
    ucb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vcb.f1->size[0] * vcb.f1->size[1]);
    vcb.f1->size[0] = 1;
    vcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vcb.f1, tmp);
    vcb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wcb.f1->size[0] * wcb.f1->size[1]);
    wcb.f1->size[0] = 1;
    wcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wcb.f1, tmp);
    wcb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xcb.f1->size[0] * xcb.f1->size[1]);
    xcb.f1->size[0] = 1;
    xcb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xcb.f1, tmp);
    xcb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[227].f1[0],
        &ucb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[227].f1[1],
        &vcb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[227].f1[2],
        &wcb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[227].f1[3],
        &xcb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ycb.f1->size[0] * ycb.f1->size[1]);
    ycb.f1->size[0] = 1;
    ycb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ycb.f1, tmp);
    ycb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(adb.f1->size[0] * adb.f1->size[1]);
    adb.f1->size[0] = 1;
    adb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(adb.f1, tmp);
    adb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bdb.f1->size[0] * bdb.f1->size[1]);
    bdb.f1->size[0] = 1;
    bdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bdb.f1, tmp);
    bdb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cdb.f1->size[0] * cdb.f1->size[1]);
    cdb.f1->size[0] = 1;
    cdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cdb.f1, tmp);
    cdb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[228].f1[0],
        &ycb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[228].f1[1],
        &adb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[228].f1[2],
        &bdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[228].f1[3],
        &cdb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ddb.f1->size[0] * ddb.f1->size[1]);
    ddb.f1->size[0] = 1;
    ddb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ddb.f1, tmp);
    ddb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(edb.f1->size[0] * edb.f1->size[1]);
    edb.f1->size[0] = 1;
    edb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(edb.f1, tmp);
    edb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fdb.f1->size[0] * fdb.f1->size[1]);
    fdb.f1->size[0] = 1;
    fdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fdb.f1, tmp);
    fdb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gdb.f1->size[0] * gdb.f1->size[1]);
    gdb.f1->size[0] = 1;
    gdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gdb.f1, tmp);
    gdb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[229].f1[0],
        &ddb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[229].f1[1],
        &edb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[229].f1[2],
        &fdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[229].f1[3],
        &gdb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hdb.f1->size[0] * hdb.f1->size[1]);
    hdb.f1->size[0] = 1;
    hdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hdb.f1, tmp);
    hdb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(idb.f1->size[0] * idb.f1->size[1]);
    idb.f1->size[0] = 1;
    idb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(idb.f1, tmp);
    idb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jdb.f1->size[0] * jdb.f1->size[1]);
    jdb.f1->size[0] = 1;
    jdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jdb.f1, tmp);
    jdb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kdb.f1->size[0] * kdb.f1->size[1]);
    kdb.f1->size[0] = 1;
    kdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kdb.f1, tmp);
    kdb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[231].f1[0],
        &hdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[231].f1[1],
        &idb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[231].f1[2],
        &jdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[231].f1[3],
        &kdb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ldb.f1->size[0] * ldb.f1->size[1]);
    ldb.f1->size[0] = 1;
    ldb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ldb.f1, tmp);
    ldb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mdb.f1->size[0] * mdb.f1->size[1]);
    mdb.f1->size[0] = 1;
    mdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mdb.f1, tmp);
    mdb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ndb.f1->size[0] * ndb.f1->size[1]);
    ndb.f1->size[0] = 1;
    ndb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ndb.f1, tmp);
    ndb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(odb.f1->size[0] * odb.f1->size[1]);
    odb.f1->size[0] = 1;
    odb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(odb.f1, tmp);
    odb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[232].f1[0],
        &ldb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[232].f1[1],
        &mdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[232].f1[2],
        &ndb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[232].f1[3],
        &odb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(pdb.f1->size[0] * pdb.f1->size[1]);
    pdb.f1->size[0] = 1;
    pdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pdb.f1, tmp);
    pdb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qdb.f1->size[0] * qdb.f1->size[1]);
    qdb.f1->size[0] = 1;
    qdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qdb.f1, tmp);
    qdb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rdb.f1->size[0] * rdb.f1->size[1]);
    rdb.f1->size[0] = 1;
    rdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rdb.f1, tmp);
    rdb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sdb.f1->size[0] * sdb.f1->size[1]);
    sdb.f1->size[0] = 1;
    sdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sdb.f1, tmp);
    sdb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[234].f1[0],
        &pdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[234].f1[1],
        &qdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[234].f1[2],
        &rdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[234].f1[3],
        &sdb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(tdb.f1->size[0] * tdb.f1->size[1]);
    tdb.f1->size[0] = 1;
    tdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tdb.f1, tmp);
    tdb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(udb.f1->size[0] * udb.f1->size[1]);
    udb.f1->size[0] = 1;
    udb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(udb.f1, tmp);
    udb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vdb.f1->size[0] * vdb.f1->size[1]);
    vdb.f1->size[0] = 1;
    vdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vdb.f1, tmp);
    vdb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wdb.f1->size[0] * wdb.f1->size[1]);
    wdb.f1->size[0] = 1;
    wdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wdb.f1, tmp);
    wdb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[236].f1[0],
        &tdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[236].f1[1],
        &udb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[236].f1[2],
        &vdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[236].f1[3],
        &wdb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xdb.f1->size[0] * xdb.f1->size[1]);
    xdb.f1->size[0] = 1;
    xdb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xdb.f1, tmp);
    xdb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ydb.f1->size[0] * ydb.f1->size[1]);
    ydb.f1->size[0] = 1;
    ydb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ydb.f1, tmp);
    ydb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aeb.f1->size[0] * aeb.f1->size[1]);
    aeb.f1->size[0] = 1;
    aeb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aeb.f1, tmp);
    aeb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(beb.f1->size[0] * beb.f1->size[1]);
    beb.f1->size[0] = 1;
    beb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(beb.f1, tmp);
    beb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[237].f1[0],
        &xdb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[237].f1[1],
        &ydb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[237].f1[2],
        &aeb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[237].f1[3],
        &beb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ceb.f1->size[0] * ceb.f1->size[1]);
    ceb.f1->size[0] = 1;
    ceb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ceb.f1, tmp);
    ceb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(deb.f1->size[0] * deb.f1->size[1]);
    deb.f1->size[0] = 1;
    deb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(deb.f1, tmp);
    deb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eeb.f1->size[0] * eeb.f1->size[1]);
    eeb.f1->size[0] = 1;
    eeb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eeb.f1, tmp);
    eeb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(feb.f1->size[0] * feb.f1->size[1]);
    feb.f1->size[0] = 1;
    feb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(feb.f1, tmp);
    feb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[238].f1[0],
        &ceb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[238].f1[1],
        &deb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[238].f1[2],
        &eeb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[238].f1[3],
        &feb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(geb.f1->size[0] * geb.f1->size[1]);
    geb.f1->size[0] = 1;
    geb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(geb.f1, tmp);
    geb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(heb.f1->size[0] * heb.f1->size[1]);
    heb.f1->size[0] = 1;
    heb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(heb.f1, tmp);
    heb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ieb.f1->size[0] * ieb.f1->size[1]);
    ieb.f1->size[0] = 1;
    ieb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ieb.f1, tmp);
    ieb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jeb.f1->size[0] * jeb.f1->size[1]);
    jeb.f1->size[0] = 1;
    jeb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jeb.f1, tmp);
    jeb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[239].f1[0],
        &geb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[239].f1[1],
        &heb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[239].f1[2],
        &ieb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[239].f1[3],
        &jeb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(keb.f1->size[0] * keb.f1->size[1]);
    keb.f1->size[0] = 1;
    keb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(keb.f1, tmp);
    keb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(leb.f1->size[0] * leb.f1->size[1]);
    leb.f1->size[0] = 1;
    leb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(leb.f1, tmp);
    leb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(meb.f1->size[0] * meb.f1->size[1]);
    meb.f1->size[0] = 1;
    meb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(meb.f1, tmp);
    meb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(neb.f1->size[0] * neb.f1->size[1]);
    neb.f1->size[0] = 1;
    neb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(neb.f1, tmp);
    neb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[242].f1[0],
        &keb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[242].f1[1],
        &leb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[242].f1[2],
        &meb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[242].f1[3],
        &neb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(oeb.f1->size[0] * oeb.f1->size[1]);
    oeb.f1->size[0] = 1;
    oeb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oeb.f1, tmp);
    oeb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(peb.f1->size[0] * peb.f1->size[1]);
    peb.f1->size[0] = 1;
    peb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(peb.f1, tmp);
    peb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qeb.f1->size[0] * qeb.f1->size[1]);
    qeb.f1->size[0] = 1;
    qeb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qeb.f1, tmp);
    qeb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(reb.f1->size[0] * reb.f1->size[1]);
    reb.f1->size[0] = 1;
    reb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(reb.f1, tmp);
    reb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[244].f1[0],
        &oeb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[244].f1[1],
        &peb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[244].f1[2],
        &qeb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[244].f1[3],
        &reb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(seb.f1->size[0] * seb.f1->size[1]);
    seb.f1->size[0] = 1;
    seb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(seb.f1, tmp);
    seb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(teb.f1->size[0] * teb.f1->size[1]);
    teb.f1->size[0] = 1;
    teb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(teb.f1, tmp);
    teb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ueb.f1->size[0] * ueb.f1->size[1]);
    ueb.f1->size[0] = 1;
    ueb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ueb.f1, tmp);
    ueb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(veb.f1->size[0] * veb.f1->size[1]);
    veb.f1->size[0] = 1;
    veb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(veb.f1, tmp);
    veb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[246].f1[0],
        &seb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[246].f1[1],
        &teb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[246].f1[2],
        &ueb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[246].f1[3],
        &veb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(web.f1->size[0] * web.f1->size[1]);
    web.f1->size[0] = 1;
    web.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(web.f1, tmp);
    web.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xeb.f1->size[0] * xeb.f1->size[1]);
    xeb.f1->size[0] = 1;
    xeb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xeb.f1, tmp);
    xeb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yeb.f1->size[0] * yeb.f1->size[1]);
    yeb.f1->size[0] = 1;
    yeb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yeb.f1, tmp);
    yeb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(afb.f1->size[0] * afb.f1->size[1]);
    afb.f1->size[0] = 1;
    afb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(afb.f1, tmp);
    afb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[247].f1[0],
        &web);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[247].f1[1],
        &xeb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[247].f1[2],
        &yeb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[247].f1[3],
        &afb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(bfb.f1->size[0] * bfb.f1->size[1]);
    bfb.f1->size[0] = 1;
    bfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bfb.f1, tmp);
    bfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cfb.f1->size[0] * cfb.f1->size[1]);
    cfb.f1->size[0] = 1;
    cfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cfb.f1, tmp);
    cfb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dfb.f1->size[0] * dfb.f1->size[1]);
    dfb.f1->size[0] = 1;
    dfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dfb.f1, tmp);
    dfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(efb.f1->size[0] * efb.f1->size[1]);
    efb.f1->size[0] = 1;
    efb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(efb.f1, tmp);
    efb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[248].f1[0],
        &bfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[248].f1[1],
        &cfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[248].f1[2],
        &dfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[248].f1[3],
        &efb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ffb.f1->size[0] * ffb.f1->size[1]);
    ffb.f1->size[0] = 1;
    ffb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ffb.f1, tmp);
    ffb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gfb.f1->size[0] * gfb.f1->size[1]);
    gfb.f1->size[0] = 1;
    gfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gfb.f1, tmp);
    gfb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hfb.f1->size[0] * hfb.f1->size[1]);
    hfb.f1->size[0] = 1;
    hfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hfb.f1, tmp);
    hfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ifb.f1->size[0] * ifb.f1->size[1]);
    ifb.f1->size[0] = 1;
    ifb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ifb.f1, tmp);
    ifb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[249].f1[0],
        &ffb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[249].f1[1],
        &gfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[249].f1[2],
        &hfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[249].f1[3],
        &ifb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jfb.f1->size[0] * jfb.f1->size[1]);
    jfb.f1->size[0] = 1;
    jfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jfb.f1, tmp);
    jfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kfb.f1->size[0] * kfb.f1->size[1]);
    kfb.f1->size[0] = 1;
    kfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kfb.f1, tmp);
    kfb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lfb.f1->size[0] * lfb.f1->size[1]);
    lfb.f1->size[0] = 1;
    lfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lfb.f1, tmp);
    lfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mfb.f1->size[0] * mfb.f1->size[1]);
    mfb.f1->size[0] = 1;
    mfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mfb.f1, tmp);
    mfb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[251].f1[0],
        &jfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[251].f1[1],
        &kfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[251].f1[2],
        &lfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[251].f1[3],
        &mfb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nfb.f1->size[0] * nfb.f1->size[1]);
    nfb.f1->size[0] = 1;
    nfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nfb.f1, tmp);
    nfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ofb.f1->size[0] * ofb.f1->size[1]);
    ofb.f1->size[0] = 1;
    ofb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ofb.f1, tmp);
    ofb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pfb.f1->size[0] * pfb.f1->size[1]);
    pfb.f1->size[0] = 1;
    pfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pfb.f1, tmp);
    pfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qfb.f1->size[0] * qfb.f1->size[1]);
    qfb.f1->size[0] = 1;
    qfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qfb.f1, tmp);
    qfb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[254].f1[0],
        &nfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[254].f1[1],
        &ofb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[254].f1[2],
        &pfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[254].f1[3],
        &qfb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rfb.f1->size[0] * rfb.f1->size[1]);
    rfb.f1->size[0] = 1;
    rfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rfb.f1, tmp);
    rfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sfb.f1->size[0] * sfb.f1->size[1]);
    sfb.f1->size[0] = 1;
    sfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sfb.f1, tmp);
    sfb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tfb.f1->size[0] * tfb.f1->size[1]);
    tfb.f1->size[0] = 1;
    tfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tfb.f1, tmp);
    tfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ufb.f1->size[0] * ufb.f1->size[1]);
    ufb.f1->size[0] = 1;
    ufb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ufb.f1, tmp);
    ufb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[256].f1[0],
        &rfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[256].f1[1],
        &sfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[256].f1[2],
        &tfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[256].f1[3],
        &ufb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vfb.f1->size[0] * vfb.f1->size[1]);
    vfb.f1->size[0] = 1;
    vfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vfb.f1, tmp);
    vfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wfb.f1->size[0] * wfb.f1->size[1]);
    wfb.f1->size[0] = 1;
    wfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wfb.f1, tmp);
    wfb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xfb.f1->size[0] * xfb.f1->size[1]);
    xfb.f1->size[0] = 1;
    xfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xfb.f1, tmp);
    xfb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yfb.f1->size[0] * yfb.f1->size[1]);
    yfb.f1->size[0] = 1;
    yfb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yfb.f1, tmp);
    yfb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[257].f1[0],
        &vfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[257].f1[1],
        &wfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[257].f1[2],
        &xfb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[257].f1[3],
        &yfb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(agb.f1->size[0] * agb.f1->size[1]);
    agb.f1->size[0] = 1;
    agb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(agb.f1, tmp);
    agb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bgb.f1->size[0] * bgb.f1->size[1]);
    bgb.f1->size[0] = 1;
    bgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bgb.f1, tmp);
    bgb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cgb.f1->size[0] * cgb.f1->size[1]);
    cgb.f1->size[0] = 1;
    cgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cgb.f1, tmp);
    cgb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dgb.f1->size[0] * dgb.f1->size[1]);
    dgb.f1->size[0] = 1;
    dgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dgb.f1, tmp);
    dgb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[258].f1[0],
        &agb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[258].f1[1],
        &bgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[258].f1[2],
        &cgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[258].f1[3],
        &dgb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(egb.f1->size[0] * egb.f1->size[1]);
    egb.f1->size[0] = 1;
    egb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(egb.f1, tmp);
    egb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fgb.f1->size[0] * fgb.f1->size[1]);
    fgb.f1->size[0] = 1;
    fgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fgb.f1, tmp);
    fgb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ggb.f1->size[0] * ggb.f1->size[1]);
    ggb.f1->size[0] = 1;
    ggb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ggb.f1, tmp);
    ggb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hgb.f1->size[0] * hgb.f1->size[1]);
    hgb.f1->size[0] = 1;
    hgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hgb.f1, tmp);
    hgb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[259].f1[0],
        &egb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[259].f1[1],
        &fgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[259].f1[2],
        &ggb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[259].f1[3],
        &hgb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(igb.f1->size[0] * igb.f1->size[1]);
    igb.f1->size[0] = 1;
    igb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(igb.f1, tmp);
    igb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jgb.f1->size[0] * jgb.f1->size[1]);
    jgb.f1->size[0] = 1;
    jgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jgb.f1, tmp);
    jgb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kgb.f1->size[0] * kgb.f1->size[1]);
    kgb.f1->size[0] = 1;
    kgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kgb.f1, tmp);
    kgb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lgb.f1->size[0] * lgb.f1->size[1]);
    lgb.f1->size[0] = 1;
    lgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lgb.f1, tmp);
    lgb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[260].f1[0],
        &igb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[260].f1[1],
        &jgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[260].f1[2],
        &kgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[260].f1[3],
        &lgb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mgb.f1->size[0] * mgb.f1->size[1]);
    mgb.f1->size[0] = 1;
    mgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mgb.f1, tmp);
    mgb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ngb.f1->size[0] * ngb.f1->size[1]);
    ngb.f1->size[0] = 1;
    ngb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ngb.f1, tmp);
    ngb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ogb.f1->size[0] * ogb.f1->size[1]);
    ogb.f1->size[0] = 1;
    ogb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ogb.f1, tmp);
    ogb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pgb.f1->size[0] * pgb.f1->size[1]);
    pgb.f1->size[0] = 1;
    pgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pgb.f1, tmp);
    pgb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[261].f1[0],
        &mgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[261].f1[1],
        &ngb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[261].f1[2],
        &ogb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[261].f1[3],
        &pgb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qgb.f1->size[0] * qgb.f1->size[1]);
    qgb.f1->size[0] = 1;
    qgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qgb.f1, tmp);
    qgb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rgb.f1->size[0] * rgb.f1->size[1]);
    rgb.f1->size[0] = 1;
    rgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rgb.f1, tmp);
    rgb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sgb.f1->size[0] * sgb.f1->size[1]);
    sgb.f1->size[0] = 1;
    sgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sgb.f1, tmp);
    sgb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tgb.f1->size[0] * tgb.f1->size[1]);
    tgb.f1->size[0] = 1;
    tgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tgb.f1, tmp);
    tgb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[262].f1[0],
        &qgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[262].f1[1],
        &rgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[262].f1[2],
        &sgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[262].f1[3],
        &tgb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ugb.f1->size[0] * ugb.f1->size[1]);
    ugb.f1->size[0] = 1;
    ugb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ugb.f1, tmp);
    ugb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vgb.f1->size[0] * vgb.f1->size[1]);
    vgb.f1->size[0] = 1;
    vgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vgb.f1, tmp);
    vgb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wgb.f1->size[0] * wgb.f1->size[1]);
    wgb.f1->size[0] = 1;
    wgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wgb.f1, tmp);
    wgb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xgb.f1->size[0] * xgb.f1->size[1]);
    xgb.f1->size[0] = 1;
    xgb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xgb.f1, tmp);
    xgb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[264].f1[0],
        &ugb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[264].f1[1],
        &vgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[264].f1[2],
        &wgb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[264].f1[3],
        &xgb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ygb.f1->size[0] * ygb.f1->size[1]);
    ygb.f1->size[0] = 1;
    ygb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ygb.f1, tmp);
    ygb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ahb.f1->size[0] * ahb.f1->size[1]);
    ahb.f1->size[0] = 1;
    ahb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ahb.f1, tmp);
    ahb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bhb.f1->size[0] * bhb.f1->size[1]);
    bhb.f1->size[0] = 1;
    bhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bhb.f1, tmp);
    bhb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(chb.f1->size[0] * chb.f1->size[1]);
    chb.f1->size[0] = 1;
    chb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(chb.f1, tmp);
    chb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[266].f1[0],
        &ygb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[266].f1[1],
        &ahb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[266].f1[2],
        &bhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[266].f1[3],
        &chb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dhb.f1->size[0] * dhb.f1->size[1]);
    dhb.f1->size[0] = 1;
    dhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dhb.f1, tmp);
    dhb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ehb.f1->size[0] * ehb.f1->size[1]);
    ehb.f1->size[0] = 1;
    ehb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ehb.f1, tmp);
    ehb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fhb.f1->size[0] * fhb.f1->size[1]);
    fhb.f1->size[0] = 1;
    fhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fhb.f1, tmp);
    fhb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ghb.f1->size[0] * ghb.f1->size[1]);
    ghb.f1->size[0] = 1;
    ghb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ghb.f1, tmp);
    ghb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[267].f1[0],
        &dhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[267].f1[1],
        &ehb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[267].f1[2],
        &fhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[267].f1[3],
        &ghb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hhb.f1->size[0] * hhb.f1->size[1]);
    hhb.f1->size[0] = 1;
    hhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hhb.f1, tmp);
    hhb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ihb.f1->size[0] * ihb.f1->size[1]);
    ihb.f1->size[0] = 1;
    ihb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ihb.f1, tmp);
    ihb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jhb.f1->size[0] * jhb.f1->size[1]);
    jhb.f1->size[0] = 1;
    jhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jhb.f1, tmp);
    jhb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(khb.f1->size[0] * khb.f1->size[1]);
    khb.f1->size[0] = 1;
    khb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(khb.f1, tmp);
    khb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[268].f1[0],
        &hhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[268].f1[1],
        &ihb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[268].f1[2],
        &jhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[268].f1[3],
        &khb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(lhb.f1->size[0] * lhb.f1->size[1]);
    lhb.f1->size[0] = 1;
    lhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lhb.f1, tmp);
    lhb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mhb.f1->size[0] * mhb.f1->size[1]);
    mhb.f1->size[0] = 1;
    mhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mhb.f1, tmp);
    mhb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nhb.f1->size[0] * nhb.f1->size[1]);
    nhb.f1->size[0] = 1;
    nhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nhb.f1, tmp);
    nhb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ohb.f1->size[0] * ohb.f1->size[1]);
    ohb.f1->size[0] = 1;
    ohb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ohb.f1, tmp);
    ohb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[269].f1[0],
        &lhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[269].f1[1],
        &mhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[269].f1[2],
        &nhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[269].f1[3],
        &ohb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(phb.f1->size[0] * phb.f1->size[1]);
    phb.f1->size[0] = 1;
    phb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(phb.f1, tmp);
    phb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qhb.f1->size[0] * qhb.f1->size[1]);
    qhb.f1->size[0] = 1;
    qhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qhb.f1, tmp);
    qhb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rhb.f1->size[0] * rhb.f1->size[1]);
    rhb.f1->size[0] = 1;
    rhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rhb.f1, tmp);
    rhb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(shb.f1->size[0] * shb.f1->size[1]);
    shb.f1->size[0] = 1;
    shb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(shb.f1, tmp);
    shb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[274].f1[0],
        &phb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[274].f1[1],
        &qhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[274].f1[2],
        &rhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[274].f1[3],
        &shb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(thb.f1->size[0] * thb.f1->size[1]);
    thb.f1->size[0] = 1;
    thb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(thb.f1, tmp);
    thb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uhb.f1->size[0] * uhb.f1->size[1]);
    uhb.f1->size[0] = 1;
    uhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uhb.f1, tmp);
    uhb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vhb.f1->size[0] * vhb.f1->size[1]);
    vhb.f1->size[0] = 1;
    vhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vhb.f1, tmp);
    vhb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(whb.f1->size[0] * whb.f1->size[1]);
    whb.f1->size[0] = 1;
    whb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(whb.f1, tmp);
    whb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[276].f1[0],
        &thb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[276].f1[1],
        &uhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[276].f1[2],
        &vhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[276].f1[3],
        &whb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xhb.f1->size[0] * xhb.f1->size[1]);
    xhb.f1->size[0] = 1;
    xhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xhb.f1, tmp);
    xhb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yhb.f1->size[0] * yhb.f1->size[1]);
    yhb.f1->size[0] = 1;
    yhb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yhb.f1, tmp);
    yhb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aib.f1->size[0] * aib.f1->size[1]);
    aib.f1->size[0] = 1;
    aib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aib.f1, tmp);
    aib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bib.f1->size[0] * bib.f1->size[1]);
    bib.f1->size[0] = 1;
    bib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bib.f1, tmp);
    bib.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[277].f1[0],
        &xhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[277].f1[1],
        &yhb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[277].f1[2],
        &aib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[277].f1[3],
        &bib);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cib.f1->size[0] * cib.f1->size[1]);
    cib.f1->size[0] = 1;
    cib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cib.f1, tmp);
    cib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dib.f1->size[0] * dib.f1->size[1]);
    dib.f1->size[0] = 1;
    dib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dib.f1, tmp);
    dib.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eib.f1->size[0] * eib.f1->size[1]);
    eib.f1->size[0] = 1;
    eib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eib.f1, tmp);
    eib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fib.f1->size[0] * fib.f1->size[1]);
    fib.f1->size[0] = 1;
    fib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fib.f1, tmp);
    fib.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[278].f1[0],
        &cib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[278].f1[1],
        &dib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[278].f1[2],
        &eib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[278].f1[3],
        &fib);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gib.f1->size[0] * gib.f1->size[1]);
    gib.f1->size[0] = 1;
    gib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gib.f1, tmp);
    gib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hib.f1->size[0] * hib.f1->size[1]);
    hib.f1->size[0] = 1;
    hib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hib.f1, tmp);
    hib.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iib.f1->size[0] * iib.f1->size[1]);
    iib.f1->size[0] = 1;
    iib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iib.f1, tmp);
    iib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jib.f1->size[0] * jib.f1->size[1]);
    jib.f1->size[0] = 1;
    jib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jib.f1, tmp);
    jib.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[279].f1[0],
        &gib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[279].f1[1],
        &hib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[279].f1[2],
        &iib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[279].f1[3],
        &jib);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(kib.f1->size[0] * kib.f1->size[1]);
    kib.f1->size[0] = 1;
    kib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kib.f1, tmp);
    kib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lib.f1->size[0] * lib.f1->size[1]);
    lib.f1->size[0] = 1;
    lib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lib.f1, tmp);
    lib.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mib.f1->size[0] * mib.f1->size[1]);
    mib.f1->size[0] = 1;
    mib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mib.f1, tmp);
    mib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nib.f1->size[0] * nib.f1->size[1]);
    nib.f1->size[0] = 1;
    nib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nib.f1, tmp);
    nib.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[280].f1[0],
        &kib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[280].f1[1],
        &lib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[280].f1[2],
        &mib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[280].f1[3],
        &nib);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(oib.f1->size[0] * oib.f1->size[1]);
    oib.f1->size[0] = 1;
    oib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oib.f1, tmp);
    oib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pib.f1->size[0] * pib.f1->size[1]);
    pib.f1->size[0] = 1;
    pib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pib.f1, tmp);
    pib.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qib.f1->size[0] * qib.f1->size[1]);
    qib.f1->size[0] = 1;
    qib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qib.f1, tmp);
    qib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rib.f1->size[0] * rib.f1->size[1]);
    rib.f1->size[0] = 1;
    rib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rib.f1, tmp);
    rib.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[282].f1[0],
        &oib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[282].f1[1],
        &pib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[282].f1[2],
        &qib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[282].f1[3],
        &rib);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(sib.f1->size[0] * sib.f1->size[1]);
    sib.f1->size[0] = 1;
    sib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sib.f1, tmp);
    sib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tib.f1->size[0] * tib.f1->size[1]);
    tib.f1->size[0] = 1;
    tib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tib.f1, tmp);
    tib.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uib.f1->size[0] * uib.f1->size[1]);
    uib.f1->size[0] = 1;
    uib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uib.f1, tmp);
    uib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vib.f1->size[0] * vib.f1->size[1]);
    vib.f1->size[0] = 1;
    vib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vib.f1, tmp);
    vib.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[284].f1[0],
        &sib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[284].f1[1],
        &tib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[284].f1[2],
        &uib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[284].f1[3],
        &vib);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wib.f1->size[0] * wib.f1->size[1]);
    wib.f1->size[0] = 1;
    wib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wib.f1, tmp);
    wib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xib.f1->size[0] * xib.f1->size[1]);
    xib.f1->size[0] = 1;
    xib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xib.f1, tmp);
    xib.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yib.f1->size[0] * yib.f1->size[1]);
    yib.f1->size[0] = 1;
    yib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yib.f1, tmp);
    yib.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ajb.f1->size[0] * ajb.f1->size[1]);
    ajb.f1->size[0] = 1;
    ajb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ajb.f1, tmp);
    ajb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[286].f1[0],
        &wib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[286].f1[1],
        &xib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[286].f1[2],
        &yib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[286].f1[3],
        &ajb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(bjb.f1->size[0] * bjb.f1->size[1]);
    bjb.f1->size[0] = 1;
    bjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bjb.f1, tmp);
    bjb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cjb.f1->size[0] * cjb.f1->size[1]);
    cjb.f1->size[0] = 1;
    cjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cjb.f1, tmp);
    cjb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(djb.f1->size[0] * djb.f1->size[1]);
    djb.f1->size[0] = 1;
    djb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(djb.f1, tmp);
    djb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ejb.f1->size[0] * ejb.f1->size[1]);
    ejb.f1->size[0] = 1;
    ejb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ejb.f1, tmp);
    ejb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[287].f1[0],
        &bjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[287].f1[1],
        &cjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[287].f1[2],
        &djb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[287].f1[3],
        &ejb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fjb.f1->size[0] * fjb.f1->size[1]);
    fjb.f1->size[0] = 1;
    fjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fjb.f1, tmp);
    fjb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gjb.f1->size[0] * gjb.f1->size[1]);
    gjb.f1->size[0] = 1;
    gjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gjb.f1, tmp);
    gjb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hjb.f1->size[0] * hjb.f1->size[1]);
    hjb.f1->size[0] = 1;
    hjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hjb.f1, tmp);
    hjb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ijb.f1->size[0] * ijb.f1->size[1]);
    ijb.f1->size[0] = 1;
    ijb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ijb.f1, tmp);
    ijb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[288].f1[0],
        &fjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[288].f1[1],
        &gjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[288].f1[2],
        &hjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[288].f1[3],
        &ijb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jjb.f1->size[0] * jjb.f1->size[1]);
    jjb.f1->size[0] = 1;
    jjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jjb.f1, tmp);
    jjb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kjb.f1->size[0] * kjb.f1->size[1]);
    kjb.f1->size[0] = 1;
    kjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kjb.f1, tmp);
    kjb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ljb.f1->size[0] * ljb.f1->size[1]);
    ljb.f1->size[0] = 1;
    ljb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ljb.f1, tmp);
    ljb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mjb.f1->size[0] * mjb.f1->size[1]);
    mjb.f1->size[0] = 1;
    mjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mjb.f1, tmp);
    mjb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[289].f1[0],
        &jjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[289].f1[1],
        &kjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[289].f1[2],
        &ljb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[289].f1[3],
        &mjb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(njb.f1->size[0] * njb.f1->size[1]);
    njb.f1->size[0] = 1;
    njb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(njb.f1, tmp);
    njb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ojb.f1->size[0] * ojb.f1->size[1]);
    ojb.f1->size[0] = 1;
    ojb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ojb.f1, tmp);
    ojb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pjb.f1->size[0] * pjb.f1->size[1]);
    pjb.f1->size[0] = 1;
    pjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pjb.f1, tmp);
    pjb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qjb.f1->size[0] * qjb.f1->size[1]);
    qjb.f1->size[0] = 1;
    qjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qjb.f1, tmp);
    qjb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[290].f1[0],
        &njb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[290].f1[1],
        &ojb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[290].f1[2],
        &pjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[290].f1[3],
        &qjb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rjb.f1->size[0] * rjb.f1->size[1]);
    rjb.f1->size[0] = 1;
    rjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rjb.f1, tmp);
    rjb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sjb.f1->size[0] * sjb.f1->size[1]);
    sjb.f1->size[0] = 1;
    sjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sjb.f1, tmp);
    sjb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tjb.f1->size[0] * tjb.f1->size[1]);
    tjb.f1->size[0] = 1;
    tjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tjb.f1, tmp);
    tjb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ujb.f1->size[0] * ujb.f1->size[1]);
    ujb.f1->size[0] = 1;
    ujb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ujb.f1, tmp);
    ujb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[291].f1[0],
        &rjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[291].f1[1],
        &sjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[291].f1[2],
        &tjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[291].f1[3],
        &ujb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vjb.f1->size[0] * vjb.f1->size[1]);
    vjb.f1->size[0] = 1;
    vjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vjb.f1, tmp);
    vjb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wjb.f1->size[0] * wjb.f1->size[1]);
    wjb.f1->size[0] = 1;
    wjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wjb.f1, tmp);
    wjb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xjb.f1->size[0] * xjb.f1->size[1]);
    xjb.f1->size[0] = 1;
    xjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xjb.f1, tmp);
    xjb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yjb.f1->size[0] * yjb.f1->size[1]);
    yjb.f1->size[0] = 1;
    yjb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yjb.f1, tmp);
    yjb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[294].f1[0],
        &vjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[294].f1[1],
        &wjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[294].f1[2],
        &xjb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[294].f1[3],
        &yjb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(akb.f1->size[0] * akb.f1->size[1]);
    akb.f1->size[0] = 1;
    akb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(akb.f1, tmp);
    akb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bkb.f1->size[0] * bkb.f1->size[1]);
    bkb.f1->size[0] = 1;
    bkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bkb.f1, tmp);
    bkb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ckb.f1->size[0] * ckb.f1->size[1]);
    ckb.f1->size[0] = 1;
    ckb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ckb.f1, tmp);
    ckb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dkb.f1->size[0] * dkb.f1->size[1]);
    dkb.f1->size[0] = 1;
    dkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dkb.f1, tmp);
    dkb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[296].f1[0],
        &akb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[296].f1[1],
        &bkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[296].f1[2],
        &ckb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[296].f1[3],
        &dkb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ekb.f1->size[0] * ekb.f1->size[1]);
    ekb.f1->size[0] = 1;
    ekb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ekb.f1, tmp);
    ekb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fkb.f1->size[0] * fkb.f1->size[1]);
    fkb.f1->size[0] = 1;
    fkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fkb.f1, tmp);
    fkb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gkb.f1->size[0] * gkb.f1->size[1]);
    gkb.f1->size[0] = 1;
    gkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gkb.f1, tmp);
    gkb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hkb.f1->size[0] * hkb.f1->size[1]);
    hkb.f1->size[0] = 1;
    hkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hkb.f1, tmp);
    hkb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[297].f1[0],
        &ekb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[297].f1[1],
        &fkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[297].f1[2],
        &gkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[297].f1[3],
        &hkb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ikb.f1->size[0] * ikb.f1->size[1]);
    ikb.f1->size[0] = 1;
    ikb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ikb.f1, tmp);
    ikb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jkb.f1->size[0] * jkb.f1->size[1]);
    jkb.f1->size[0] = 1;
    jkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jkb.f1, tmp);
    jkb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kkb.f1->size[0] * kkb.f1->size[1]);
    kkb.f1->size[0] = 1;
    kkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kkb.f1, tmp);
    kkb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lkb.f1->size[0] * lkb.f1->size[1]);
    lkb.f1->size[0] = 1;
    lkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lkb.f1, tmp);
    lkb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[298].f1[0],
        &ikb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[298].f1[1],
        &jkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[298].f1[2],
        &kkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[298].f1[3],
        &lkb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mkb.f1->size[0] * mkb.f1->size[1]);
    mkb.f1->size[0] = 1;
    mkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mkb.f1, tmp);
    mkb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nkb.f1->size[0] * nkb.f1->size[1]);
    nkb.f1->size[0] = 1;
    nkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nkb.f1, tmp);
    nkb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(okb.f1->size[0] * okb.f1->size[1]);
    okb.f1->size[0] = 1;
    okb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(okb.f1, tmp);
    okb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pkb.f1->size[0] * pkb.f1->size[1]);
    pkb.f1->size[0] = 1;
    pkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pkb.f1, tmp);
    pkb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[299].f1[0],
        &mkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[299].f1[1],
        &nkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[299].f1[2],
        &okb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[299].f1[3],
        &pkb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qkb.f1->size[0] * qkb.f1->size[1]);
    qkb.f1->size[0] = 1;
    qkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qkb.f1, tmp);
    qkb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rkb.f1->size[0] * rkb.f1->size[1]);
    rkb.f1->size[0] = 1;
    rkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rkb.f1, tmp);
    rkb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(skb.f1->size[0] * skb.f1->size[1]);
    skb.f1->size[0] = 1;
    skb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(skb.f1, tmp);
    skb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tkb.f1->size[0] * tkb.f1->size[1]);
    tkb.f1->size[0] = 1;
    tkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tkb.f1, tmp);
    tkb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[301].f1[0],
        &qkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[301].f1[1],
        &rkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[301].f1[2],
        &skb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[301].f1[3],
        &tkb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ukb.f1->size[0] * ukb.f1->size[1]);
    ukb.f1->size[0] = 1;
    ukb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ukb.f1, tmp);
    ukb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vkb.f1->size[0] * vkb.f1->size[1]);
    vkb.f1->size[0] = 1;
    vkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vkb.f1, tmp);
    vkb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wkb.f1->size[0] * wkb.f1->size[1]);
    wkb.f1->size[0] = 1;
    wkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wkb.f1, tmp);
    wkb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xkb.f1->size[0] * xkb.f1->size[1]);
    xkb.f1->size[0] = 1;
    xkb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xkb.f1, tmp);
    xkb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[302].f1[0],
        &ukb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[302].f1[1],
        &vkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[302].f1[2],
        &wkb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[302].f1[3],
        &xkb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ykb.f1->size[0] * ykb.f1->size[1]);
    ykb.f1->size[0] = 1;
    ykb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ykb.f1, tmp);
    ykb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(alb.f1->size[0] * alb.f1->size[1]);
    alb.f1->size[0] = 1;
    alb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(alb.f1, tmp);
    alb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(blb.f1->size[0] * blb.f1->size[1]);
    blb.f1->size[0] = 1;
    blb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(blb.f1, tmp);
    blb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(clb.f1->size[0] * clb.f1->size[1]);
    clb.f1->size[0] = 1;
    clb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(clb.f1, tmp);
    clb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[304].f1[0],
        &ykb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[304].f1[1],
        &alb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[304].f1[2],
        &blb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[304].f1[3],
        &clb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dlb.f1->size[0] * dlb.f1->size[1]);
    dlb.f1->size[0] = 1;
    dlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dlb.f1, tmp);
    dlb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(elb.f1->size[0] * elb.f1->size[1]);
    elb.f1->size[0] = 1;
    elb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(elb.f1, tmp);
    elb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(flb.f1->size[0] * flb.f1->size[1]);
    flb.f1->size[0] = 1;
    flb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(flb.f1, tmp);
    flb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(glb.f1->size[0] * glb.f1->size[1]);
    glb.f1->size[0] = 1;
    glb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(glb.f1, tmp);
    glb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[306].f1[0],
        &dlb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[306].f1[1],
        &elb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[306].f1[2],
        &flb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[306].f1[3],
        &glb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hlb.f1->size[0] * hlb.f1->size[1]);
    hlb.f1->size[0] = 1;
    hlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hlb.f1, tmp);
    hlb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ilb.f1->size[0] * ilb.f1->size[1]);
    ilb.f1->size[0] = 1;
    ilb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ilb.f1, tmp);
    ilb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jlb.f1->size[0] * jlb.f1->size[1]);
    jlb.f1->size[0] = 1;
    jlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jlb.f1, tmp);
    jlb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(klb.f1->size[0] * klb.f1->size[1]);
    klb.f1->size[0] = 1;
    klb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(klb.f1, tmp);
    klb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[307].f1[0],
        &hlb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[307].f1[1],
        &ilb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[307].f1[2],
        &jlb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[307].f1[3],
        &klb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(llb.f1->size[0] * llb.f1->size[1]);
    llb.f1->size[0] = 1;
    llb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(llb.f1, tmp);
    llb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mlb.f1->size[0] * mlb.f1->size[1]);
    mlb.f1->size[0] = 1;
    mlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mlb.f1, tmp);
    mlb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nlb.f1->size[0] * nlb.f1->size[1]);
    nlb.f1->size[0] = 1;
    nlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nlb.f1, tmp);
    nlb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(olb.f1->size[0] * olb.f1->size[1]);
    olb.f1->size[0] = 1;
    olb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(olb.f1, tmp);
    olb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[308].f1[0],
        &llb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[308].f1[1],
        &mlb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[308].f1[2],
        &nlb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[308].f1[3],
        &olb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(plb.f1->size[0] * plb.f1->size[1]);
    plb.f1->size[0] = 1;
    plb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(plb.f1, tmp);
    plb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qlb.f1->size[0] * qlb.f1->size[1]);
    qlb.f1->size[0] = 1;
    qlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qlb.f1, tmp);
    qlb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rlb.f1->size[0] * rlb.f1->size[1]);
    rlb.f1->size[0] = 1;
    rlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rlb.f1, tmp);
    rlb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(slb.f1->size[0] * slb.f1->size[1]);
    slb.f1->size[0] = 1;
    slb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(slb.f1, tmp);
    slb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[309].f1[0],
        &plb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[309].f1[1],
        &qlb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[309].f1[2],
        &rlb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[309].f1[3],
        &slb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(tlb.f1->size[0] * tlb.f1->size[1]);
    tlb.f1->size[0] = 1;
    tlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tlb.f1, tmp);
    tlb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ulb.f1->size[0] * ulb.f1->size[1]);
    ulb.f1->size[0] = 1;
    ulb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ulb.f1, tmp);
    ulb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vlb.f1->size[0] * vlb.f1->size[1]);
    vlb.f1->size[0] = 1;
    vlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vlb.f1, tmp);
    vlb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wlb.f1->size[0] * wlb.f1->size[1]);
    wlb.f1->size[0] = 1;
    wlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wlb.f1, tmp);
    wlb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[310].f1[0],
        &tlb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[310].f1[1],
        &ulb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[310].f1[2],
        &vlb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[310].f1[3],
        &wlb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xlb.f1->size[0] * xlb.f1->size[1]);
    xlb.f1->size[0] = 1;
    xlb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xlb.f1, tmp);
    xlb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ylb.f1->size[0] * ylb.f1->size[1]);
    ylb.f1->size[0] = 1;
    ylb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ylb.f1, tmp);
    ylb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(amb.f1->size[0] * amb.f1->size[1]);
    amb.f1->size[0] = 1;
    amb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(amb.f1, tmp);
    amb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bmb.f1->size[0] * bmb.f1->size[1]);
    bmb.f1->size[0] = 1;
    bmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bmb.f1, tmp);
    bmb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[312].f1[0],
        &xlb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[312].f1[1],
        &ylb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[312].f1[2],
        &amb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[312].f1[3],
        &bmb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cmb.f1->size[0] * cmb.f1->size[1]);
    cmb.f1->size[0] = 1;
    cmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cmb.f1, tmp);
    cmb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dmb.f1->size[0] * dmb.f1->size[1]);
    dmb.f1->size[0] = 1;
    dmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dmb.f1, tmp);
    dmb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(emb.f1->size[0] * emb.f1->size[1]);
    emb.f1->size[0] = 1;
    emb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(emb.f1, tmp);
    emb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fmb.f1->size[0] * fmb.f1->size[1]);
    fmb.f1->size[0] = 1;
    fmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fmb.f1, tmp);
    fmb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[314].f1[0],
        &cmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[314].f1[1],
        &dmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[314].f1[2],
        &emb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[314].f1[3],
        &fmb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gmb.f1->size[0] * gmb.f1->size[1]);
    gmb.f1->size[0] = 1;
    gmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gmb.f1, tmp);
    gmb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hmb.f1->size[0] * hmb.f1->size[1]);
    hmb.f1->size[0] = 1;
    hmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hmb.f1, tmp);
    hmb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(imb.f1->size[0] * imb.f1->size[1]);
    imb.f1->size[0] = 1;
    imb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(imb.f1, tmp);
    imb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jmb.f1->size[0] * jmb.f1->size[1]);
    jmb.f1->size[0] = 1;
    jmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jmb.f1, tmp);
    jmb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[316].f1[0],
        &gmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[316].f1[1],
        &hmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[316].f1[2],
        &imb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[316].f1[3],
        &jmb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(kmb.f1->size[0] * kmb.f1->size[1]);
    kmb.f1->size[0] = 1;
    kmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kmb.f1, tmp);
    kmb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lmb.f1->size[0] * lmb.f1->size[1]);
    lmb.f1->size[0] = 1;
    lmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lmb.f1, tmp);
    lmb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mmb.f1->size[0] * mmb.f1->size[1]);
    mmb.f1->size[0] = 1;
    mmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mmb.f1, tmp);
    mmb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nmb.f1->size[0] * nmb.f1->size[1]);
    nmb.f1->size[0] = 1;
    nmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nmb.f1, tmp);
    nmb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[317].f1[0],
        &kmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[317].f1[1],
        &lmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[317].f1[2],
        &mmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[317].f1[3],
        &nmb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(omb.f1->size[0] * omb.f1->size[1]);
    omb.f1->size[0] = 1;
    omb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(omb.f1, tmp);
    omb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pmb.f1->size[0] * pmb.f1->size[1]);
    pmb.f1->size[0] = 1;
    pmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pmb.f1, tmp);
    pmb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qmb.f1->size[0] * qmb.f1->size[1]);
    qmb.f1->size[0] = 1;
    qmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qmb.f1, tmp);
    qmb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rmb.f1->size[0] * rmb.f1->size[1]);
    rmb.f1->size[0] = 1;
    rmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rmb.f1, tmp);
    rmb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[318].f1[0],
        &omb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[318].f1[1],
        &pmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[318].f1[2],
        &qmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[318].f1[3],
        &rmb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(smb.f1->size[0] * smb.f1->size[1]);
    smb.f1->size[0] = 1;
    smb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(smb.f1, tmp);
    smb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tmb.f1->size[0] * tmb.f1->size[1]);
    tmb.f1->size[0] = 1;
    tmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tmb.f1, tmp);
    tmb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(umb.f1->size[0] * umb.f1->size[1]);
    umb.f1->size[0] = 1;
    umb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(umb.f1, tmp);
    umb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vmb.f1->size[0] * vmb.f1->size[1]);
    vmb.f1->size[0] = 1;
    vmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vmb.f1, tmp);
    vmb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[319].f1[0],
        &smb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[319].f1[1],
        &tmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[319].f1[2],
        &umb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[319].f1[3],
        &vmb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wmb.f1->size[0] * wmb.f1->size[1]);
    wmb.f1->size[0] = 1;
    wmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wmb.f1, tmp);
    wmb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xmb.f1->size[0] * xmb.f1->size[1]);
    xmb.f1->size[0] = 1;
    xmb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xmb.f1, tmp);
    xmb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ymb.f1->size[0] * ymb.f1->size[1]);
    ymb.f1->size[0] = 1;
    ymb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ymb.f1, tmp);
    ymb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(anb.f1->size[0] * anb.f1->size[1]);
    anb.f1->size[0] = 1;
    anb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(anb.f1, tmp);
    anb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[321].f1[0],
        &wmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[321].f1[1],
        &xmb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[321].f1[2],
        &ymb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[321].f1[3],
        &anb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(bnb.f1->size[0] * bnb.f1->size[1]);
    bnb.f1->size[0] = 1;
    bnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bnb.f1, tmp);
    bnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cnb.f1->size[0] * cnb.f1->size[1]);
    cnb.f1->size[0] = 1;
    cnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cnb.f1, tmp);
    cnb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dnb.f1->size[0] * dnb.f1->size[1]);
    dnb.f1->size[0] = 1;
    dnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dnb.f1, tmp);
    dnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(enb.f1->size[0] * enb.f1->size[1]);
    enb.f1->size[0] = 1;
    enb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(enb.f1, tmp);
    enb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[322].f1[0],
        &bnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[322].f1[1],
        &cnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[322].f1[2],
        &dnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[322].f1[3],
        &enb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fnb.f1->size[0] * fnb.f1->size[1]);
    fnb.f1->size[0] = 1;
    fnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fnb.f1, tmp);
    fnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gnb.f1->size[0] * gnb.f1->size[1]);
    gnb.f1->size[0] = 1;
    gnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gnb.f1, tmp);
    gnb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hnb.f1->size[0] * hnb.f1->size[1]);
    hnb.f1->size[0] = 1;
    hnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hnb.f1, tmp);
    hnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(inb.f1->size[0] * inb.f1->size[1]);
    inb.f1->size[0] = 1;
    inb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(inb.f1, tmp);
    inb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[324].f1[0],
        &fnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[324].f1[1],
        &gnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[324].f1[2],
        &hnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[324].f1[3],
        &inb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jnb.f1->size[0] * jnb.f1->size[1]);
    jnb.f1->size[0] = 1;
    jnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jnb.f1, tmp);
    jnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(knb.f1->size[0] * knb.f1->size[1]);
    knb.f1->size[0] = 1;
    knb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(knb.f1, tmp);
    knb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lnb.f1->size[0] * lnb.f1->size[1]);
    lnb.f1->size[0] = 1;
    lnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lnb.f1, tmp);
    lnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mnb.f1->size[0] * mnb.f1->size[1]);
    mnb.f1->size[0] = 1;
    mnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mnb.f1, tmp);
    mnb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[326].f1[0],
        &jnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[326].f1[1],
        &knb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[326].f1[2],
        &lnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[326].f1[3],
        &mnb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nnb.f1->size[0] * nnb.f1->size[1]);
    nnb.f1->size[0] = 1;
    nnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nnb.f1, tmp);
    nnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(onb.f1->size[0] * onb.f1->size[1]);
    onb.f1->size[0] = 1;
    onb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(onb.f1, tmp);
    onb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pnb.f1->size[0] * pnb.f1->size[1]);
    pnb.f1->size[0] = 1;
    pnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pnb.f1, tmp);
    pnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qnb.f1->size[0] * qnb.f1->size[1]);
    qnb.f1->size[0] = 1;
    qnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qnb.f1, tmp);
    qnb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[327].f1[0],
        &nnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[327].f1[1],
        &onb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[327].f1[2],
        &pnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[327].f1[3],
        &qnb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rnb.f1->size[0] * rnb.f1->size[1]);
    rnb.f1->size[0] = 1;
    rnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rnb.f1, tmp);
    rnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(snb.f1->size[0] * snb.f1->size[1]);
    snb.f1->size[0] = 1;
    snb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(snb.f1, tmp);
    snb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tnb.f1->size[0] * tnb.f1->size[1]);
    tnb.f1->size[0] = 1;
    tnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tnb.f1, tmp);
    tnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(unb.f1->size[0] * unb.f1->size[1]);
    unb.f1->size[0] = 1;
    unb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(unb.f1, tmp);
    unb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[328].f1[0],
        &rnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[328].f1[1],
        &snb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[328].f1[2],
        &tnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[328].f1[3],
        &unb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vnb.f1->size[0] * vnb.f1->size[1]);
    vnb.f1->size[0] = 1;
    vnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vnb.f1, tmp);
    vnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wnb.f1->size[0] * wnb.f1->size[1]);
    wnb.f1->size[0] = 1;
    wnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wnb.f1, tmp);
    wnb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xnb.f1->size[0] * xnb.f1->size[1]);
    xnb.f1->size[0] = 1;
    xnb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xnb.f1, tmp);
    xnb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ynb.f1->size[0] * ynb.f1->size[1]);
    ynb.f1->size[0] = 1;
    ynb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ynb.f1, tmp);
    ynb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[329].f1[0],
        &vnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[329].f1[1],
        &wnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[329].f1[2],
        &xnb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[329].f1[3],
        &ynb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(aob.f1->size[0] * aob.f1->size[1]);
    aob.f1->size[0] = 1;
    aob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aob.f1, tmp);
    aob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bob.f1->size[0] * bob.f1->size[1]);
    bob.f1->size[0] = 1;
    bob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bob.f1, tmp);
    bob.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cob.f1->size[0] * cob.f1->size[1]);
    cob.f1->size[0] = 1;
    cob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cob.f1, tmp);
    cob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dob.f1->size[0] * dob.f1->size[1]);
    dob.f1->size[0] = 1;
    dob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dob.f1, tmp);
    dob.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[330].f1[0],
        &aob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[330].f1[1],
        &bob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[330].f1[2],
        &cob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[330].f1[3],
        &dob);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(eob.f1->size[0] * eob.f1->size[1]);
    eob.f1->size[0] = 1;
    eob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eob.f1, tmp);
    eob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fob.f1->size[0] * fob.f1->size[1]);
    fob.f1->size[0] = 1;
    fob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fob.f1, tmp);
    fob.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gob.f1->size[0] * gob.f1->size[1]);
    gob.f1->size[0] = 1;
    gob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gob.f1, tmp);
    gob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hob.f1->size[0] * hob.f1->size[1]);
    hob.f1->size[0] = 1;
    hob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hob.f1, tmp);
    hob.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[334].f1[0],
        &eob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[334].f1[1],
        &fob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[334].f1[2],
        &gob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[334].f1[3],
        &hob);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(iob.f1->size[0] * iob.f1->size[1]);
    iob.f1->size[0] = 1;
    iob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iob.f1, tmp);
    iob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(job.f1->size[0] * job.f1->size[1]);
    job.f1->size[0] = 1;
    job.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(job.f1, tmp);
    job.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kob.f1->size[0] * kob.f1->size[1]);
    kob.f1->size[0] = 1;
    kob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kob.f1, tmp);
    kob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lob.f1->size[0] * lob.f1->size[1]);
    lob.f1->size[0] = 1;
    lob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lob.f1, tmp);
    lob.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[336].f1[0],
        &iob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[336].f1[1],
        &job);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[336].f1[2],
        &kob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[336].f1[3],
        &lob);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mob.f1->size[0] * mob.f1->size[1]);
    mob.f1->size[0] = 1;
    mob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mob.f1, tmp);
    mob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nob.f1->size[0] * nob.f1->size[1]);
    nob.f1->size[0] = 1;
    nob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nob.f1, tmp);
    nob.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(oob.f1->size[0] * oob.f1->size[1]);
    oob.f1->size[0] = 1;
    oob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oob.f1, tmp);
    oob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pob.f1->size[0] * pob.f1->size[1]);
    pob.f1->size[0] = 1;
    pob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pob.f1, tmp);
    pob.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[337].f1[0],
        &mob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[337].f1[1],
        &nob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[337].f1[2],
        &oob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[337].f1[3],
        &pob);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qob.f1->size[0] * qob.f1->size[1]);
    qob.f1->size[0] = 1;
    qob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qob.f1, tmp);
    qob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rob.f1->size[0] * rob.f1->size[1]);
    rob.f1->size[0] = 1;
    rob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rob.f1, tmp);
    rob.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sob.f1->size[0] * sob.f1->size[1]);
    sob.f1->size[0] = 1;
    sob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sob.f1, tmp);
    sob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tob.f1->size[0] * tob.f1->size[1]);
    tob.f1->size[0] = 1;
    tob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tob.f1, tmp);
    tob.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[338].f1[0],
        &qob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[338].f1[1],
        &rob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[338].f1[2],
        &sob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[338].f1[3],
        &tob);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(uob.f1->size[0] * uob.f1->size[1]);
    uob.f1->size[0] = 1;
    uob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uob.f1, tmp);
    uob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vob.f1->size[0] * vob.f1->size[1]);
    vob.f1->size[0] = 1;
    vob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vob.f1, tmp);
    vob.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wob.f1->size[0] * wob.f1->size[1]);
    wob.f1->size[0] = 1;
    wob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wob.f1, tmp);
    wob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xob.f1->size[0] * xob.f1->size[1]);
    xob.f1->size[0] = 1;
    xob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xob.f1, tmp);
    xob.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[339].f1[0],
        &uob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[339].f1[1],
        &vob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[339].f1[2],
        &wob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[339].f1[3],
        &xob);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(yob.f1->size[0] * yob.f1->size[1]);
    yob.f1->size[0] = 1;
    yob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yob.f1, tmp);
    yob.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(apb.f1->size[0] * apb.f1->size[1]);
    apb.f1->size[0] = 1;
    apb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(apb.f1, tmp);
    apb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bpb.f1->size[0] * bpb.f1->size[1]);
    bpb.f1->size[0] = 1;
    bpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bpb.f1, tmp);
    bpb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cpb.f1->size[0] * cpb.f1->size[1]);
    cpb.f1->size[0] = 1;
    cpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cpb.f1, tmp);
    cpb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[341].f1[0],
        &yob);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[341].f1[1],
        &apb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[341].f1[2],
        &bpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[341].f1[3],
        &cpb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dpb.f1->size[0] * dpb.f1->size[1]);
    dpb.f1->size[0] = 1;
    dpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dpb.f1, tmp);
    dpb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(epb.f1->size[0] * epb.f1->size[1]);
    epb.f1->size[0] = 1;
    epb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(epb.f1, tmp);
    epb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fpb.f1->size[0] * fpb.f1->size[1]);
    fpb.f1->size[0] = 1;
    fpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fpb.f1, tmp);
    fpb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gpb.f1->size[0] * gpb.f1->size[1]);
    gpb.f1->size[0] = 1;
    gpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gpb.f1, tmp);
    gpb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[344].f1[0],
        &dpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[344].f1[1],
        &epb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[344].f1[2],
        &fpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[344].f1[3],
        &gpb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hpb.f1->size[0] * hpb.f1->size[1]);
    hpb.f1->size[0] = 1;
    hpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hpb.f1, tmp);
    hpb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ipb.f1->size[0] * ipb.f1->size[1]);
    ipb.f1->size[0] = 1;
    ipb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ipb.f1, tmp);
    ipb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jpb.f1->size[0] * jpb.f1->size[1]);
    jpb.f1->size[0] = 1;
    jpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jpb.f1, tmp);
    jpb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kpb.f1->size[0] * kpb.f1->size[1]);
    kpb.f1->size[0] = 1;
    kpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kpb.f1, tmp);
    kpb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[346].f1[0],
        &hpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[346].f1[1],
        &ipb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[346].f1[2],
        &jpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[346].f1[3],
        &kpb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(lpb.f1->size[0] * lpb.f1->size[1]);
    lpb.f1->size[0] = 1;
    lpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lpb.f1, tmp);
    lpb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mpb.f1->size[0] * mpb.f1->size[1]);
    mpb.f1->size[0] = 1;
    mpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mpb.f1, tmp);
    mpb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(npb.f1->size[0] * npb.f1->size[1]);
    npb.f1->size[0] = 1;
    npb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(npb.f1, tmp);
    npb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(opb.f1->size[0] * opb.f1->size[1]);
    opb.f1->size[0] = 1;
    opb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(opb.f1, tmp);
    opb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[347].f1[0],
        &lpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[347].f1[1],
        &mpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[347].f1[2],
        &npb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[347].f1[3],
        &opb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ppb.f1->size[0] * ppb.f1->size[1]);
    ppb.f1->size[0] = 1;
    ppb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ppb.f1, tmp);
    ppb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qpb.f1->size[0] * qpb.f1->size[1]);
    qpb.f1->size[0] = 1;
    qpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qpb.f1, tmp);
    qpb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rpb.f1->size[0] * rpb.f1->size[1]);
    rpb.f1->size[0] = 1;
    rpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rpb.f1, tmp);
    rpb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(spb.f1->size[0] * spb.f1->size[1]);
    spb.f1->size[0] = 1;
    spb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(spb.f1, tmp);
    spb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[348].f1[0],
        &ppb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[348].f1[1],
        &qpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[348].f1[2],
        &rpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[348].f1[3],
        &spb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(tpb.f1->size[0] * tpb.f1->size[1]);
    tpb.f1->size[0] = 1;
    tpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tpb.f1, tmp);
    tpb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(upb.f1->size[0] * upb.f1->size[1]);
    upb.f1->size[0] = 1;
    upb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(upb.f1, tmp);
    upb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vpb.f1->size[0] * vpb.f1->size[1]);
    vpb.f1->size[0] = 1;
    vpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vpb.f1, tmp);
    vpb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wpb.f1->size[0] * wpb.f1->size[1]);
    wpb.f1->size[0] = 1;
    wpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wpb.f1, tmp);
    wpb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[349].f1[0],
        &tpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[349].f1[1],
        &upb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[349].f1[2],
        &vpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[349].f1[3],
        &wpb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xpb.f1->size[0] * xpb.f1->size[1]);
    xpb.f1->size[0] = 1;
    xpb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xpb.f1, tmp);
    xpb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ypb.f1->size[0] * ypb.f1->size[1]);
    ypb.f1->size[0] = 1;
    ypb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ypb.f1, tmp);
    ypb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aqb.f1->size[0] * aqb.f1->size[1]);
    aqb.f1->size[0] = 1;
    aqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aqb.f1, tmp);
    aqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bqb.f1->size[0] * bqb.f1->size[1]);
    bqb.f1->size[0] = 1;
    bqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bqb.f1, tmp);
    bqb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[350].f1[0],
        &xpb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[350].f1[1],
        &ypb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[350].f1[2],
        &aqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[350].f1[3],
        &bqb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cqb.f1->size[0] * cqb.f1->size[1]);
    cqb.f1->size[0] = 1;
    cqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cqb.f1, tmp);
    cqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dqb.f1->size[0] * dqb.f1->size[1]);
    dqb.f1->size[0] = 1;
    dqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dqb.f1, tmp);
    dqb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eqb.f1->size[0] * eqb.f1->size[1]);
    eqb.f1->size[0] = 1;
    eqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eqb.f1, tmp);
    eqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fqb.f1->size[0] * fqb.f1->size[1]);
    fqb.f1->size[0] = 1;
    fqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fqb.f1, tmp);
    fqb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[351].f1[0],
        &cqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[351].f1[1],
        &dqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[351].f1[2],
        &eqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[351].f1[3],
        &fqb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gqb.f1->size[0] * gqb.f1->size[1]);
    gqb.f1->size[0] = 1;
    gqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gqb.f1, tmp);
    gqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hqb.f1->size[0] * hqb.f1->size[1]);
    hqb.f1->size[0] = 1;
    hqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hqb.f1, tmp);
    hqb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iqb.f1->size[0] * iqb.f1->size[1]);
    iqb.f1->size[0] = 1;
    iqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iqb.f1, tmp);
    iqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jqb.f1->size[0] * jqb.f1->size[1]);
    jqb.f1->size[0] = 1;
    jqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jqb.f1, tmp);
    jqb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[352].f1[0],
        &gqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[352].f1[1],
        &hqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[352].f1[2],
        &iqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[352].f1[3],
        &jqb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(kqb.f1->size[0] * kqb.f1->size[1]);
    kqb.f1->size[0] = 1;
    kqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kqb.f1, tmp);
    kqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lqb.f1->size[0] * lqb.f1->size[1]);
    lqb.f1->size[0] = 1;
    lqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lqb.f1, tmp);
    lqb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mqb.f1->size[0] * mqb.f1->size[1]);
    mqb.f1->size[0] = 1;
    mqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mqb.f1, tmp);
    mqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nqb.f1->size[0] * nqb.f1->size[1]);
    nqb.f1->size[0] = 1;
    nqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nqb.f1, tmp);
    nqb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[354].f1[0],
        &kqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[354].f1[1],
        &lqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[354].f1[2],
        &mqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[354].f1[3],
        &nqb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(oqb.f1->size[0] * oqb.f1->size[1]);
    oqb.f1->size[0] = 1;
    oqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oqb.f1, tmp);
    oqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pqb.f1->size[0] * pqb.f1->size[1]);
    pqb.f1->size[0] = 1;
    pqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pqb.f1, tmp);
    pqb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qqb.f1->size[0] * qqb.f1->size[1]);
    qqb.f1->size[0] = 1;
    qqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qqb.f1, tmp);
    qqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rqb.f1->size[0] * rqb.f1->size[1]);
    rqb.f1->size[0] = 1;
    rqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rqb.f1, tmp);
    rqb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[356].f1[0],
        &oqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[356].f1[1],
        &pqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[356].f1[2],
        &qqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[356].f1[3],
        &rqb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(sqb.f1->size[0] * sqb.f1->size[1]);
    sqb.f1->size[0] = 1;
    sqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sqb.f1, tmp);
    sqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tqb.f1->size[0] * tqb.f1->size[1]);
    tqb.f1->size[0] = 1;
    tqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tqb.f1, tmp);
    tqb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uqb.f1->size[0] * uqb.f1->size[1]);
    uqb.f1->size[0] = 1;
    uqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uqb.f1, tmp);
    uqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vqb.f1->size[0] * vqb.f1->size[1]);
    vqb.f1->size[0] = 1;
    vqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vqb.f1, tmp);
    vqb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[357].f1[0],
        &sqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[357].f1[1],
        &tqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[357].f1[2],
        &uqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[357].f1[3],
        &vqb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wqb.f1->size[0] * wqb.f1->size[1]);
    wqb.f1->size[0] = 1;
    wqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wqb.f1, tmp);
    wqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xqb.f1->size[0] * xqb.f1->size[1]);
    xqb.f1->size[0] = 1;
    xqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xqb.f1, tmp);
    xqb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yqb.f1->size[0] * yqb.f1->size[1]);
    yqb.f1->size[0] = 1;
    yqb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yqb.f1, tmp);
    yqb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(arb.f1->size[0] * arb.f1->size[1]);
    arb.f1->size[0] = 1;
    arb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(arb.f1, tmp);
    arb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[358].f1[0],
        &wqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[358].f1[1],
        &xqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[358].f1[2],
        &yqb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[358].f1[3],
        &arb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(brb.f1->size[0] * brb.f1->size[1]);
    brb.f1->size[0] = 1;
    brb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(brb.f1, tmp);
    brb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(crb.f1->size[0] * crb.f1->size[1]);
    crb.f1->size[0] = 1;
    crb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(crb.f1, tmp);
    crb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(drb.f1->size[0] * drb.f1->size[1]);
    drb.f1->size[0] = 1;
    drb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(drb.f1, tmp);
    drb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(erb.f1->size[0] * erb.f1->size[1]);
    erb.f1->size[0] = 1;
    erb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(erb.f1, tmp);
    erb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[359].f1[0],
        &brb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[359].f1[1],
        &crb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[359].f1[2],
        &drb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[359].f1[3],
        &erb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(frb.f1->size[0] * frb.f1->size[1]);
    frb.f1->size[0] = 1;
    frb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(frb.f1, tmp);
    frb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(grb.f1->size[0] * grb.f1->size[1]);
    grb.f1->size[0] = 1;
    grb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(grb.f1, tmp);
    grb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hrb.f1->size[0] * hrb.f1->size[1]);
    hrb.f1->size[0] = 1;
    hrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hrb.f1, tmp);
    hrb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(irb.f1->size[0] * irb.f1->size[1]);
    irb.f1->size[0] = 1;
    irb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(irb.f1, tmp);
    irb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[362].f1[0],
        &frb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[362].f1[1],
        &grb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[362].f1[2],
        &hrb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[362].f1[3],
        &irb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jrb.f1->size[0] * jrb.f1->size[1]);
    jrb.f1->size[0] = 1;
    jrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jrb.f1, tmp);
    jrb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(krb.f1->size[0] * krb.f1->size[1]);
    krb.f1->size[0] = 1;
    krb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(krb.f1, tmp);
    krb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lrb.f1->size[0] * lrb.f1->size[1]);
    lrb.f1->size[0] = 1;
    lrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lrb.f1, tmp);
    lrb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mrb.f1->size[0] * mrb.f1->size[1]);
    mrb.f1->size[0] = 1;
    mrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mrb.f1, tmp);
    mrb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[364].f1[0],
        &jrb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[364].f1[1],
        &krb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[364].f1[2],
        &lrb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[364].f1[3],
        &mrb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nrb.f1->size[0] * nrb.f1->size[1]);
    nrb.f1->size[0] = 1;
    nrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nrb.f1, tmp);
    nrb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(orb.f1->size[0] * orb.f1->size[1]);
    orb.f1->size[0] = 1;
    orb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(orb.f1, tmp);
    orb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(prb.f1->size[0] * prb.f1->size[1]);
    prb.f1->size[0] = 1;
    prb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(prb.f1, tmp);
    prb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qrb.f1->size[0] * qrb.f1->size[1]);
    qrb.f1->size[0] = 1;
    qrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qrb.f1, tmp);
    qrb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[366].f1[0],
        &nrb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[366].f1[1],
        &orb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[366].f1[2],
        &prb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[366].f1[3],
        &qrb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rrb.f1->size[0] * rrb.f1->size[1]);
    rrb.f1->size[0] = 1;
    rrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rrb.f1, tmp);
    rrb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(srb.f1->size[0] * srb.f1->size[1]);
    srb.f1->size[0] = 1;
    srb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(srb.f1, tmp);
    srb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(trb.f1->size[0] * trb.f1->size[1]);
    trb.f1->size[0] = 1;
    trb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(trb.f1, tmp);
    trb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(urb.f1->size[0] * urb.f1->size[1]);
    urb.f1->size[0] = 1;
    urb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(urb.f1, tmp);
    urb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[367].f1[0],
        &rrb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[367].f1[1],
        &srb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[367].f1[2],
        &trb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[367].f1[3],
        &urb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vrb.f1->size[0] * vrb.f1->size[1]);
    vrb.f1->size[0] = 1;
    vrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vrb.f1, tmp);
    vrb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wrb.f1->size[0] * wrb.f1->size[1]);
    wrb.f1->size[0] = 1;
    wrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wrb.f1, tmp);
    wrb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xrb.f1->size[0] * xrb.f1->size[1]);
    xrb.f1->size[0] = 1;
    xrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xrb.f1, tmp);
    xrb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yrb.f1->size[0] * yrb.f1->size[1]);
    yrb.f1->size[0] = 1;
    yrb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yrb.f1, tmp);
    yrb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[368].f1[0],
        &vrb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[368].f1[1],
        &wrb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[368].f1[2],
        &xrb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[368].f1[3],
        &yrb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(asb.f1->size[0] * asb.f1->size[1]);
    asb.f1->size[0] = 1;
    asb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(asb.f1, tmp);
    asb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bsb.f1->size[0] * bsb.f1->size[1]);
    bsb.f1->size[0] = 1;
    bsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bsb.f1, tmp);
    bsb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(csb.f1->size[0] * csb.f1->size[1]);
    csb.f1->size[0] = 1;
    csb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(csb.f1, tmp);
    csb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dsb.f1->size[0] * dsb.f1->size[1]);
    dsb.f1->size[0] = 1;
    dsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dsb.f1, tmp);
    dsb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[369].f1[0],
        &asb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[369].f1[1],
        &bsb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[369].f1[2],
        &csb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[369].f1[3],
        &dsb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(esb.f1->size[0] * esb.f1->size[1]);
    esb.f1->size[0] = 1;
    esb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(esb.f1, tmp);
    esb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fsb.f1->size[0] * fsb.f1->size[1]);
    fsb.f1->size[0] = 1;
    fsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fsb.f1, tmp);
    fsb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gsb.f1->size[0] * gsb.f1->size[1]);
    gsb.f1->size[0] = 1;
    gsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gsb.f1, tmp);
    gsb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hsb.f1->size[0] * hsb.f1->size[1]);
    hsb.f1->size[0] = 1;
    hsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hsb.f1, tmp);
    hsb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[372].f1[0],
        &esb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[372].f1[1],
        &fsb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[372].f1[2],
        &gsb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[372].f1[3],
        &hsb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(isb.f1->size[0] * isb.f1->size[1]);
    isb.f1->size[0] = 1;
    isb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(isb.f1, tmp);
    isb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jsb.f1->size[0] * jsb.f1->size[1]);
    jsb.f1->size[0] = 1;
    jsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jsb.f1, tmp);
    jsb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ksb.f1->size[0] * ksb.f1->size[1]);
    ksb.f1->size[0] = 1;
    ksb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ksb.f1, tmp);
    ksb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lsb.f1->size[0] * lsb.f1->size[1]);
    lsb.f1->size[0] = 1;
    lsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lsb.f1, tmp);
    lsb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[374].f1[0],
        &isb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[374].f1[1],
        &jsb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[374].f1[2],
        &ksb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[374].f1[3],
        &lsb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(msb.f1->size[0] * msb.f1->size[1]);
    msb.f1->size[0] = 1;
    msb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(msb.f1, tmp);
    msb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nsb.f1->size[0] * nsb.f1->size[1]);
    nsb.f1->size[0] = 1;
    nsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nsb.f1, tmp);
    nsb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(osb.f1->size[0] * osb.f1->size[1]);
    osb.f1->size[0] = 1;
    osb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(osb.f1, tmp);
    osb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(psb.f1->size[0] * psb.f1->size[1]);
    psb.f1->size[0] = 1;
    psb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(psb.f1, tmp);
    psb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[376].f1[0],
        &msb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[376].f1[1],
        &nsb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[376].f1[2],
        &osb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[376].f1[3],
        &psb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qsb.f1->size[0] * qsb.f1->size[1]);
    qsb.f1->size[0] = 1;
    qsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qsb.f1, tmp);
    qsb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rsb.f1->size[0] * rsb.f1->size[1]);
    rsb.f1->size[0] = 1;
    rsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rsb.f1, tmp);
    rsb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ssb.f1->size[0] * ssb.f1->size[1]);
    ssb.f1->size[0] = 1;
    ssb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ssb.f1, tmp);
    ssb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tsb.f1->size[0] * tsb.f1->size[1]);
    tsb.f1->size[0] = 1;
    tsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tsb.f1, tmp);
    tsb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[377].f1[0],
        &qsb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[377].f1[1],
        &rsb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[377].f1[2],
        &ssb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[377].f1[3],
        &tsb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(usb.f1->size[0] * usb.f1->size[1]);
    usb.f1->size[0] = 1;
    usb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(usb.f1, tmp);
    usb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vsb.f1->size[0] * vsb.f1->size[1]);
    vsb.f1->size[0] = 1;
    vsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vsb.f1, tmp);
    vsb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wsb.f1->size[0] * wsb.f1->size[1]);
    wsb.f1->size[0] = 1;
    wsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wsb.f1, tmp);
    wsb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xsb.f1->size[0] * xsb.f1->size[1]);
    xsb.f1->size[0] = 1;
    xsb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xsb.f1, tmp);
    xsb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[378].f1[0],
        &usb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[378].f1[1],
        &vsb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[378].f1[2],
        &wsb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[378].f1[3],
        &xsb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ysb.f1->size[0] * ysb.f1->size[1]);
    ysb.f1->size[0] = 1;
    ysb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ysb.f1, tmp);
    ysb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(atb.f1->size[0] * atb.f1->size[1]);
    atb.f1->size[0] = 1;
    atb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(atb.f1, tmp);
    atb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(btb.f1->size[0] * btb.f1->size[1]);
    btb.f1->size[0] = 1;
    btb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(btb.f1, tmp);
    btb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ctb.f1->size[0] * ctb.f1->size[1]);
    ctb.f1->size[0] = 1;
    ctb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ctb.f1, tmp);
    ctb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[379].f1[0],
        &ysb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[379].f1[1],
        &atb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[379].f1[2],
        &btb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[379].f1[3],
        &ctb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dtb.f1->size[0] * dtb.f1->size[1]);
    dtb.f1->size[0] = 1;
    dtb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dtb.f1, tmp);
    dtb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(etb.f1->size[0] * etb.f1->size[1]);
    etb.f1->size[0] = 1;
    etb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(etb.f1, tmp);
    etb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ftb.f1->size[0] * ftb.f1->size[1]);
    ftb.f1->size[0] = 1;
    ftb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ftb.f1, tmp);
    ftb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gtb.f1->size[0] * gtb.f1->size[1]);
    gtb.f1->size[0] = 1;
    gtb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gtb.f1, tmp);
    gtb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[381].f1[0],
        &dtb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[381].f1[1],
        &etb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[381].f1[2],
        &ftb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[381].f1[3],
        &gtb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(htb.f1->size[0] * htb.f1->size[1]);
    htb.f1->size[0] = 1;
    htb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(htb.f1, tmp);
    htb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(itb.f1->size[0] * itb.f1->size[1]);
    itb.f1->size[0] = 1;
    itb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(itb.f1, tmp);
    itb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jtb.f1->size[0] * jtb.f1->size[1]);
    jtb.f1->size[0] = 1;
    jtb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jtb.f1, tmp);
    jtb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ktb.f1->size[0] * ktb.f1->size[1]);
    ktb.f1->size[0] = 1;
    ktb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ktb.f1, tmp);
    ktb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[382].f1[0],
        &htb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[382].f1[1],
        &itb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[382].f1[2],
        &jtb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[382].f1[3],
        &ktb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ltb.f1->size[0] * ltb.f1->size[1]);
    ltb.f1->size[0] = 1;
    ltb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ltb.f1, tmp);
    ltb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mtb.f1->size[0] * mtb.f1->size[1]);
    mtb.f1->size[0] = 1;
    mtb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mtb.f1, tmp);
    mtb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ntb.f1->size[0] * ntb.f1->size[1]);
    ntb.f1->size[0] = 1;
    ntb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ntb.f1, tmp);
    ntb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(otb.f1->size[0] * otb.f1->size[1]);
    otb.f1->size[0] = 1;
    otb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(otb.f1, tmp);
    otb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[384].f1[0],
        &ltb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[384].f1[1],
        &mtb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[384].f1[2],
        &ntb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[384].f1[3],
        &otb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ptb.f1->size[0] * ptb.f1->size[1]);
    ptb.f1->size[0] = 1;
    ptb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ptb.f1, tmp);
    ptb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qtb.f1->size[0] * qtb.f1->size[1]);
    qtb.f1->size[0] = 1;
    qtb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qtb.f1, tmp);
    qtb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rtb.f1->size[0] * rtb.f1->size[1]);
    rtb.f1->size[0] = 1;
    rtb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rtb.f1, tmp);
    rtb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(stb.f1->size[0] * stb.f1->size[1]);
    stb.f1->size[0] = 1;
    stb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(stb.f1, tmp);
    stb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[386].f1[0],
        &ptb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[386].f1[1],
        &qtb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[386].f1[2],
        &rtb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[386].f1[3],
        &stb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ttb.f1->size[0] * ttb.f1->size[1]);
    ttb.f1->size[0] = 1;
    ttb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ttb.f1, tmp);
    ttb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(utb.f1->size[0] * utb.f1->size[1]);
    utb.f1->size[0] = 1;
    utb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(utb.f1, tmp);
    utb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vtb.f1->size[0] * vtb.f1->size[1]);
    vtb.f1->size[0] = 1;
    vtb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vtb.f1, tmp);
    vtb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wtb.f1->size[0] * wtb.f1->size[1]);
    wtb.f1->size[0] = 1;
    wtb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wtb.f1, tmp);
    wtb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[387].f1[0],
        &ttb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[387].f1[1],
        &utb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[387].f1[2],
        &vtb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[387].f1[3],
        &wtb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xtb.f1->size[0] * xtb.f1->size[1]);
    xtb.f1->size[0] = 1;
    xtb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xtb.f1, tmp);
    xtb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ytb.f1->size[0] * ytb.f1->size[1]);
    ytb.f1->size[0] = 1;
    ytb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ytb.f1, tmp);
    ytb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aub.f1->size[0] * aub.f1->size[1]);
    aub.f1->size[0] = 1;
    aub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aub.f1, tmp);
    aub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bub.f1->size[0] * bub.f1->size[1]);
    bub.f1->size[0] = 1;
    bub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bub.f1, tmp);
    bub.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[388].f1[0],
        &xtb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[388].f1[1],
        &ytb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[388].f1[2],
        &aub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[388].f1[3],
        &bub);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cub.f1->size[0] * cub.f1->size[1]);
    cub.f1->size[0] = 1;
    cub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cub.f1, tmp);
    cub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dub.f1->size[0] * dub.f1->size[1]);
    dub.f1->size[0] = 1;
    dub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dub.f1, tmp);
    dub.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eub.f1->size[0] * eub.f1->size[1]);
    eub.f1->size[0] = 1;
    eub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eub.f1, tmp);
    eub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fub.f1->size[0] * fub.f1->size[1]);
    fub.f1->size[0] = 1;
    fub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fub.f1, tmp);
    fub.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[389].f1[0],
        &cub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[389].f1[1],
        &dub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[389].f1[2],
        &eub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[389].f1[3],
        &fub);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gub.f1->size[0] * gub.f1->size[1]);
    gub.f1->size[0] = 1;
    gub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gub.f1, tmp);
    gub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hub.f1->size[0] * hub.f1->size[1]);
    hub.f1->size[0] = 1;
    hub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hub.f1, tmp);
    hub.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iub.f1->size[0] * iub.f1->size[1]);
    iub.f1->size[0] = 1;
    iub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iub.f1, tmp);
    iub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jub.f1->size[0] * jub.f1->size[1]);
    jub.f1->size[0] = 1;
    jub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jub.f1, tmp);
    jub.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[390].f1[0],
        &gub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[390].f1[1],
        &hub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[390].f1[2],
        &iub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[390].f1[3],
        &jub);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(kub.f1->size[0] * kub.f1->size[1]);
    kub.f1->size[0] = 1;
    kub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kub.f1, tmp);
    kub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lub.f1->size[0] * lub.f1->size[1]);
    lub.f1->size[0] = 1;
    lub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lub.f1, tmp);
    lub.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mub.f1->size[0] * mub.f1->size[1]);
    mub.f1->size[0] = 1;
    mub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mub.f1, tmp);
    mub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nub.f1->size[0] * nub.f1->size[1]);
    nub.f1->size[0] = 1;
    nub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nub.f1, tmp);
    nub.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[391].f1[0],
        &kub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[391].f1[1],
        &lub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[391].f1[2],
        &mub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[391].f1[3],
        &nub);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(oub.f1->size[0] * oub.f1->size[1]);
    oub.f1->size[0] = 1;
    oub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oub.f1, tmp);
    oub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pub.f1->size[0] * pub.f1->size[1]);
    pub.f1->size[0] = 1;
    pub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pub.f1, tmp);
    pub.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qub.f1->size[0] * qub.f1->size[1]);
    qub.f1->size[0] = 1;
    qub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qub.f1, tmp);
    qub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rub.f1->size[0] * rub.f1->size[1]);
    rub.f1->size[0] = 1;
    rub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rub.f1, tmp);
    rub.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[392].f1[0],
        &oub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[392].f1[1],
        &pub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[392].f1[2],
        &qub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[392].f1[3],
        &rub);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(sub.f1->size[0] * sub.f1->size[1]);
    sub.f1->size[0] = 1;
    sub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sub.f1, tmp);
    sub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tub.f1->size[0] * tub.f1->size[1]);
    tub.f1->size[0] = 1;
    tub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tub.f1, tmp);
    tub.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uub.f1->size[0] * uub.f1->size[1]);
    uub.f1->size[0] = 1;
    uub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uub.f1, tmp);
    uub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vub.f1->size[0] * vub.f1->size[1]);
    vub.f1->size[0] = 1;
    vub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vub.f1, tmp);
    vub.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[394].f1[0],
        &sub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[394].f1[1],
        &tub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[394].f1[2],
        &uub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[394].f1[3],
        &vub);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wub.f1->size[0] * wub.f1->size[1]);
    wub.f1->size[0] = 1;
    wub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wub.f1, tmp);
    wub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xub.f1->size[0] * xub.f1->size[1]);
    xub.f1->size[0] = 1;
    xub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xub.f1, tmp);
    xub.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yub.f1->size[0] * yub.f1->size[1]);
    yub.f1->size[0] = 1;
    yub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yub.f1, tmp);
    yub.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(avb.f1->size[0] * avb.f1->size[1]);
    avb.f1->size[0] = 1;
    avb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(avb.f1, tmp);
    avb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[396].f1[0],
        &wub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[396].f1[1],
        &xub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[396].f1[2],
        &yub);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[396].f1[3],
        &avb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(bvb.f1->size[0] * bvb.f1->size[1]);
    bvb.f1->size[0] = 1;
    bvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bvb.f1, tmp);
    bvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cvb.f1->size[0] * cvb.f1->size[1]);
    cvb.f1->size[0] = 1;
    cvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cvb.f1, tmp);
    cvb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dvb.f1->size[0] * dvb.f1->size[1]);
    dvb.f1->size[0] = 1;
    dvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dvb.f1, tmp);
    dvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(evb.f1->size[0] * evb.f1->size[1]);
    evb.f1->size[0] = 1;
    evb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(evb.f1, tmp);
    evb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[397].f1[0],
        &bvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[397].f1[1],
        &cvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[397].f1[2],
        &dvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[397].f1[3],
        &evb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fvb.f1->size[0] * fvb.f1->size[1]);
    fvb.f1->size[0] = 1;
    fvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fvb.f1, tmp);
    fvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gvb.f1->size[0] * gvb.f1->size[1]);
    gvb.f1->size[0] = 1;
    gvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gvb.f1, tmp);
    gvb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hvb.f1->size[0] * hvb.f1->size[1]);
    hvb.f1->size[0] = 1;
    hvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hvb.f1, tmp);
    hvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ivb.f1->size[0] * ivb.f1->size[1]);
    ivb.f1->size[0] = 1;
    ivb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ivb.f1, tmp);
    ivb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[398].f1[0],
        &fvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[398].f1[1],
        &gvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[398].f1[2],
        &hvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[398].f1[3],
        &ivb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jvb.f1->size[0] * jvb.f1->size[1]);
    jvb.f1->size[0] = 1;
    jvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jvb.f1, tmp);
    jvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kvb.f1->size[0] * kvb.f1->size[1]);
    kvb.f1->size[0] = 1;
    kvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kvb.f1, tmp);
    kvb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lvb.f1->size[0] * lvb.f1->size[1]);
    lvb.f1->size[0] = 1;
    lvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lvb.f1, tmp);
    lvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mvb.f1->size[0] * mvb.f1->size[1]);
    mvb.f1->size[0] = 1;
    mvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mvb.f1, tmp);
    mvb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[399].f1[0],
        &jvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[399].f1[1],
        &kvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[399].f1[2],
        &lvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[399].f1[3],
        &mvb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nvb.f1->size[0] * nvb.f1->size[1]);
    nvb.f1->size[0] = 1;
    nvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nvb.f1, tmp);
    nvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ovb.f1->size[0] * ovb.f1->size[1]);
    ovb.f1->size[0] = 1;
    ovb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ovb.f1, tmp);
    ovb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pvb.f1->size[0] * pvb.f1->size[1]);
    pvb.f1->size[0] = 1;
    pvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pvb.f1, tmp);
    pvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qvb.f1->size[0] * qvb.f1->size[1]);
    qvb.f1->size[0] = 1;
    qvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qvb.f1, tmp);
    qvb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[402].f1[0],
        &nvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[402].f1[1],
        &ovb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[402].f1[2],
        &pvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[402].f1[3],
        &qvb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rvb.f1->size[0] * rvb.f1->size[1]);
    rvb.f1->size[0] = 1;
    rvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rvb.f1, tmp);
    rvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(svb.f1->size[0] * svb.f1->size[1]);
    svb.f1->size[0] = 1;
    svb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(svb.f1, tmp);
    svb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tvb.f1->size[0] * tvb.f1->size[1]);
    tvb.f1->size[0] = 1;
    tvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tvb.f1, tmp);
    tvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uvb.f1->size[0] * uvb.f1->size[1]);
    uvb.f1->size[0] = 1;
    uvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uvb.f1, tmp);
    uvb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[404].f1[0],
        &rvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[404].f1[1],
        &svb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[404].f1[2],
        &tvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[404].f1[3],
        &uvb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vvb.f1->size[0] * vvb.f1->size[1]);
    vvb.f1->size[0] = 1;
    vvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vvb.f1, tmp);
    vvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wvb.f1->size[0] * wvb.f1->size[1]);
    wvb.f1->size[0] = 1;
    wvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wvb.f1, tmp);
    wvb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xvb.f1->size[0] * xvb.f1->size[1]);
    xvb.f1->size[0] = 1;
    xvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xvb.f1, tmp);
    xvb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yvb.f1->size[0] * yvb.f1->size[1]);
    yvb.f1->size[0] = 1;
    yvb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yvb.f1, tmp);
    yvb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[406].f1[0],
        &vvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[406].f1[1],
        &wvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[406].f1[2],
        &xvb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[406].f1[3],
        &yvb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(awb.f1->size[0] * awb.f1->size[1]);
    awb.f1->size[0] = 1;
    awb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(awb.f1, tmp);
    awb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bwb.f1->size[0] * bwb.f1->size[1]);
    bwb.f1->size[0] = 1;
    bwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bwb.f1, tmp);
    bwb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cwb.f1->size[0] * cwb.f1->size[1]);
    cwb.f1->size[0] = 1;
    cwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cwb.f1, tmp);
    cwb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dwb.f1->size[0] * dwb.f1->size[1]);
    dwb.f1->size[0] = 1;
    dwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dwb.f1, tmp);
    dwb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[407].f1[0],
        &awb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[407].f1[1],
        &bwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[407].f1[2],
        &cwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[407].f1[3],
        &dwb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ewb.f1->size[0] * ewb.f1->size[1]);
    ewb.f1->size[0] = 1;
    ewb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ewb.f1, tmp);
    ewb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fwb.f1->size[0] * fwb.f1->size[1]);
    fwb.f1->size[0] = 1;
    fwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fwb.f1, tmp);
    fwb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gwb.f1->size[0] * gwb.f1->size[1]);
    gwb.f1->size[0] = 1;
    gwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gwb.f1, tmp);
    gwb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hwb.f1->size[0] * hwb.f1->size[1]);
    hwb.f1->size[0] = 1;
    hwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hwb.f1, tmp);
    hwb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[408].f1[0],
        &ewb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[408].f1[1],
        &fwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[408].f1[2],
        &gwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[408].f1[3],
        &hwb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(iwb.f1->size[0] * iwb.f1->size[1]);
    iwb.f1->size[0] = 1;
    iwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iwb.f1, tmp);
    iwb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jwb.f1->size[0] * jwb.f1->size[1]);
    jwb.f1->size[0] = 1;
    jwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jwb.f1, tmp);
    jwb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kwb.f1->size[0] * kwb.f1->size[1]);
    kwb.f1->size[0] = 1;
    kwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kwb.f1, tmp);
    kwb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lwb.f1->size[0] * lwb.f1->size[1]);
    lwb.f1->size[0] = 1;
    lwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lwb.f1, tmp);
    lwb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[409].f1[0],
        &iwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[409].f1[1],
        &jwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[409].f1[2],
        &kwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[409].f1[3],
        &lwb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mwb.f1->size[0] * mwb.f1->size[1]);
    mwb.f1->size[0] = 1;
    mwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mwb.f1, tmp);
    mwb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nwb.f1->size[0] * nwb.f1->size[1]);
    nwb.f1->size[0] = 1;
    nwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nwb.f1, tmp);
    nwb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(owb.f1->size[0] * owb.f1->size[1]);
    owb.f1->size[0] = 1;
    owb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(owb.f1, tmp);
    owb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pwb.f1->size[0] * pwb.f1->size[1]);
    pwb.f1->size[0] = 1;
    pwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pwb.f1, tmp);
    pwb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[411].f1[0],
        &mwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[411].f1[1],
        &nwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[411].f1[2],
        &owb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[411].f1[3],
        &pwb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qwb.f1->size[0] * qwb.f1->size[1]);
    qwb.f1->size[0] = 1;
    qwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qwb.f1, tmp);
    qwb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rwb.f1->size[0] * rwb.f1->size[1]);
    rwb.f1->size[0] = 1;
    rwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rwb.f1, tmp);
    rwb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(swb.f1->size[0] * swb.f1->size[1]);
    swb.f1->size[0] = 1;
    swb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(swb.f1, tmp);
    swb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(twb.f1->size[0] * twb.f1->size[1]);
    twb.f1->size[0] = 1;
    twb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(twb.f1, tmp);
    twb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[414].f1[0],
        &qwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[414].f1[1],
        &rwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[414].f1[2],
        &swb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[414].f1[3],
        &twb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(uwb.f1->size[0] * uwb.f1->size[1]);
    uwb.f1->size[0] = 1;
    uwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uwb.f1, tmp);
    uwb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vwb.f1->size[0] * vwb.f1->size[1]);
    vwb.f1->size[0] = 1;
    vwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vwb.f1, tmp);
    vwb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wwb.f1->size[0] * wwb.f1->size[1]);
    wwb.f1->size[0] = 1;
    wwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wwb.f1, tmp);
    wwb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xwb.f1->size[0] * xwb.f1->size[1]);
    xwb.f1->size[0] = 1;
    xwb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xwb.f1, tmp);
    xwb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[416].f1[0],
        &uwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[416].f1[1],
        &vwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[416].f1[2],
        &wwb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[416].f1[3],
        &xwb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ywb.f1->size[0] * ywb.f1->size[1]);
    ywb.f1->size[0] = 1;
    ywb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ywb.f1, tmp);
    ywb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(axb.f1->size[0] * axb.f1->size[1]);
    axb.f1->size[0] = 1;
    axb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(axb.f1, tmp);
    axb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bxb.f1->size[0] * bxb.f1->size[1]);
    bxb.f1->size[0] = 1;
    bxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bxb.f1, tmp);
    bxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cxb.f1->size[0] * cxb.f1->size[1]);
    cxb.f1->size[0] = 1;
    cxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cxb.f1, tmp);
    cxb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[417].f1[0],
        &ywb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[417].f1[1],
        &axb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[417].f1[2],
        &bxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[417].f1[3],
        &cxb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dxb.f1->size[0] * dxb.f1->size[1]);
    dxb.f1->size[0] = 1;
    dxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dxb.f1, tmp);
    dxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(exb.f1->size[0] * exb.f1->size[1]);
    exb.f1->size[0] = 1;
    exb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(exb.f1, tmp);
    exb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fxb.f1->size[0] * fxb.f1->size[1]);
    fxb.f1->size[0] = 1;
    fxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fxb.f1, tmp);
    fxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gxb.f1->size[0] * gxb.f1->size[1]);
    gxb.f1->size[0] = 1;
    gxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gxb.f1, tmp);
    gxb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[418].f1[0],
        &dxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[418].f1[1],
        &exb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[418].f1[2],
        &fxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[418].f1[3],
        &gxb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hxb.f1->size[0] * hxb.f1->size[1]);
    hxb.f1->size[0] = 1;
    hxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hxb.f1, tmp);
    hxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ixb.f1->size[0] * ixb.f1->size[1]);
    ixb.f1->size[0] = 1;
    ixb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ixb.f1, tmp);
    ixb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jxb.f1->size[0] * jxb.f1->size[1]);
    jxb.f1->size[0] = 1;
    jxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jxb.f1, tmp);
    jxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kxb.f1->size[0] * kxb.f1->size[1]);
    kxb.f1->size[0] = 1;
    kxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kxb.f1, tmp);
    kxb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[419].f1[0],
        &hxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[419].f1[1],
        &ixb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[419].f1[2],
        &jxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[419].f1[3],
        &kxb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(lxb.f1->size[0] * lxb.f1->size[1]);
    lxb.f1->size[0] = 1;
    lxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lxb.f1, tmp);
    lxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mxb.f1->size[0] * mxb.f1->size[1]);
    mxb.f1->size[0] = 1;
    mxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mxb.f1, tmp);
    mxb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nxb.f1->size[0] * nxb.f1->size[1]);
    nxb.f1->size[0] = 1;
    nxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nxb.f1, tmp);
    nxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(oxb.f1->size[0] * oxb.f1->size[1]);
    oxb.f1->size[0] = 1;
    oxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oxb.f1, tmp);
    oxb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[422].f1[0],
        &lxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[422].f1[1],
        &mxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[422].f1[2],
        &nxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[422].f1[3],
        &oxb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(pxb.f1->size[0] * pxb.f1->size[1]);
    pxb.f1->size[0] = 1;
    pxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pxb.f1, tmp);
    pxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qxb.f1->size[0] * qxb.f1->size[1]);
    qxb.f1->size[0] = 1;
    qxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qxb.f1, tmp);
    qxb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rxb.f1->size[0] * rxb.f1->size[1]);
    rxb.f1->size[0] = 1;
    rxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rxb.f1, tmp);
    rxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sxb.f1->size[0] * sxb.f1->size[1]);
    sxb.f1->size[0] = 1;
    sxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sxb.f1, tmp);
    sxb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[424].f1[0],
        &pxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[424].f1[1],
        &qxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[424].f1[2],
        &rxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[424].f1[3],
        &sxb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(txb.f1->size[0] * txb.f1->size[1]);
    txb.f1->size[0] = 1;
    txb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(txb.f1, tmp);
    txb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uxb.f1->size[0] * uxb.f1->size[1]);
    uxb.f1->size[0] = 1;
    uxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uxb.f1, tmp);
    uxb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vxb.f1->size[0] * vxb.f1->size[1]);
    vxb.f1->size[0] = 1;
    vxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vxb.f1, tmp);
    vxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wxb.f1->size[0] * wxb.f1->size[1]);
    wxb.f1->size[0] = 1;
    wxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wxb.f1, tmp);
    wxb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[426].f1[0],
        &txb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[426].f1[1],
        &uxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[426].f1[2],
        &vxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[426].f1[3],
        &wxb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xxb.f1->size[0] * xxb.f1->size[1]);
    xxb.f1->size[0] = 1;
    xxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xxb.f1, tmp);
    xxb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yxb.f1->size[0] * yxb.f1->size[1]);
    yxb.f1->size[0] = 1;
    yxb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yxb.f1, tmp);
    yxb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ayb.f1->size[0] * ayb.f1->size[1]);
    ayb.f1->size[0] = 1;
    ayb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ayb.f1, tmp);
    ayb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(byb.f1->size[0] * byb.f1->size[1]);
    byb.f1->size[0] = 1;
    byb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(byb.f1, tmp);
    byb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[427].f1[0],
        &xxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[427].f1[1],
        &yxb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[427].f1[2],
        &ayb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[427].f1[3],
        &byb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cyb.f1->size[0] * cyb.f1->size[1]);
    cyb.f1->size[0] = 1;
    cyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cyb.f1, tmp);
    cyb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dyb.f1->size[0] * dyb.f1->size[1]);
    dyb.f1->size[0] = 1;
    dyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dyb.f1, tmp);
    dyb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eyb.f1->size[0] * eyb.f1->size[1]);
    eyb.f1->size[0] = 1;
    eyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eyb.f1, tmp);
    eyb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fyb.f1->size[0] * fyb.f1->size[1]);
    fyb.f1->size[0] = 1;
    fyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fyb.f1, tmp);
    fyb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[428].f1[0],
        &cyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[428].f1[1],
        &dyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[428].f1[2],
        &eyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[428].f1[3],
        &fyb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gyb.f1->size[0] * gyb.f1->size[1]);
    gyb.f1->size[0] = 1;
    gyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gyb.f1, tmp);
    gyb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hyb.f1->size[0] * hyb.f1->size[1]);
    hyb.f1->size[0] = 1;
    hyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hyb.f1, tmp);
    hyb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iyb.f1->size[0] * iyb.f1->size[1]);
    iyb.f1->size[0] = 1;
    iyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iyb.f1, tmp);
    iyb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jyb.f1->size[0] * jyb.f1->size[1]);
    jyb.f1->size[0] = 1;
    jyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jyb.f1, tmp);
    jyb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[429].f1[0],
        &gyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[429].f1[1],
        &hyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[429].f1[2],
        &iyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[429].f1[3],
        &jyb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(kyb.f1->size[0] * kyb.f1->size[1]);
    kyb.f1->size[0] = 1;
    kyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kyb.f1, tmp);
    kyb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lyb.f1->size[0] * lyb.f1->size[1]);
    lyb.f1->size[0] = 1;
    lyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lyb.f1, tmp);
    lyb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(myb.f1->size[0] * myb.f1->size[1]);
    myb.f1->size[0] = 1;
    myb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(myb.f1, tmp);
    myb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nyb.f1->size[0] * nyb.f1->size[1]);
    nyb.f1->size[0] = 1;
    nyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nyb.f1, tmp);
    nyb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[432].f1[0],
        &kyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[432].f1[1],
        &lyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[432].f1[2],
        &myb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[432].f1[3],
        &nyb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(oyb.f1->size[0] * oyb.f1->size[1]);
    oyb.f1->size[0] = 1;
    oyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oyb.f1, tmp);
    oyb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pyb.f1->size[0] * pyb.f1->size[1]);
    pyb.f1->size[0] = 1;
    pyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pyb.f1, tmp);
    pyb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qyb.f1->size[0] * qyb.f1->size[1]);
    qyb.f1->size[0] = 1;
    qyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qyb.f1, tmp);
    qyb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ryb.f1->size[0] * ryb.f1->size[1]);
    ryb.f1->size[0] = 1;
    ryb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ryb.f1, tmp);
    ryb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[434].f1[0],
        &oyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[434].f1[1],
        &pyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[434].f1[2],
        &qyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[434].f1[3],
        &ryb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(syb.f1->size[0] * syb.f1->size[1]);
    syb.f1->size[0] = 1;
    syb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(syb.f1, tmp);
    syb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tyb.f1->size[0] * tyb.f1->size[1]);
    tyb.f1->size[0] = 1;
    tyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tyb.f1, tmp);
    tyb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uyb.f1->size[0] * uyb.f1->size[1]);
    uyb.f1->size[0] = 1;
    uyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uyb.f1, tmp);
    uyb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vyb.f1->size[0] * vyb.f1->size[1]);
    vyb.f1->size[0] = 1;
    vyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vyb.f1, tmp);
    vyb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[436].f1[0],
        &syb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[436].f1[1],
        &tyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[436].f1[2],
        &uyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[436].f1[3],
        &vyb);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wyb.f1->size[0] * wyb.f1->size[1]);
    wyb.f1->size[0] = 1;
    wyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wyb.f1, tmp);
    wyb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xyb.f1->size[0] * xyb.f1->size[1]);
    xyb.f1->size[0] = 1;
    xyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xyb.f1, tmp);
    xyb.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yyb.f1->size[0] * yyb.f1->size[1]);
    yyb.f1->size[0] = 1;
    yyb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yyb.f1, tmp);
    yyb.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(aac.f1->size[0] * aac.f1->size[1]);
    aac.f1->size[0] = 1;
    aac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aac.f1, tmp);
    aac.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[437].f1[0],
        &wyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[437].f1[1],
        &xyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[437].f1[2],
        &yyb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[437].f1[3],
        &aac);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(bac.f1->size[0] * bac.f1->size[1]);
    bac.f1->size[0] = 1;
    bac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bac.f1, tmp);
    bac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cac.f1->size[0] * cac.f1->size[1]);
    cac.f1->size[0] = 1;
    cac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cac.f1, tmp);
    cac.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dac.f1->size[0] * dac.f1->size[1]);
    dac.f1->size[0] = 1;
    dac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dac.f1, tmp);
    dac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(eac.f1->size[0] * eac.f1->size[1]);
    eac.f1->size[0] = 1;
    eac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eac.f1, tmp);
    eac.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[438].f1[0],
        &bac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[438].f1[1],
        &cac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[438].f1[2],
        &dac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[438].f1[3],
        &eac);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fac.f1->size[0] * fac.f1->size[1]);
    fac.f1->size[0] = 1;
    fac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fac.f1, tmp);
    fac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gac.f1->size[0] * gac.f1->size[1]);
    gac.f1->size[0] = 1;
    gac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gac.f1, tmp);
    gac.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hac.f1->size[0] * hac.f1->size[1]);
    hac.f1->size[0] = 1;
    hac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hac.f1, tmp);
    hac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(iac.f1->size[0] * iac.f1->size[1]);
    iac.f1->size[0] = 1;
    iac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iac.f1, tmp);
    iac.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[439].f1[0],
        &fac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[439].f1[1],
        &gac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[439].f1[2],
        &hac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[439].f1[3],
        &iac);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jac.f1->size[0] * jac.f1->size[1]);
    jac.f1->size[0] = 1;
    jac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jac.f1, tmp);
    jac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kac.f1->size[0] * kac.f1->size[1]);
    kac.f1->size[0] = 1;
    kac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kac.f1, tmp);
    kac.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lac.f1->size[0] * lac.f1->size[1]);
    lac.f1->size[0] = 1;
    lac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lac.f1, tmp);
    lac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mac.f1->size[0] * mac.f1->size[1]);
    mac.f1->size[0] = 1;
    mac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mac.f1, tmp);
    mac.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[440].f1[0],
        &jac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[440].f1[1],
        &kac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[440].f1[2],
        &lac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[440].f1[3],
        &mac);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nac.f1->size[0] * nac.f1->size[1]);
    nac.f1->size[0] = 1;
    nac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nac.f1, tmp);
    nac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(oac.f1->size[0] * oac.f1->size[1]);
    oac.f1->size[0] = 1;
    oac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oac.f1, tmp);
    oac.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pac.f1->size[0] * pac.f1->size[1]);
    pac.f1->size[0] = 1;
    pac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pac.f1, tmp);
    pac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qac.f1->size[0] * qac.f1->size[1]);
    qac.f1->size[0] = 1;
    qac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qac.f1, tmp);
    qac.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[442].f1[0],
        &nac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[442].f1[1],
        &oac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[442].f1[2],
        &pac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[442].f1[3],
        &qac);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rac.f1->size[0] * rac.f1->size[1]);
    rac.f1->size[0] = 1;
    rac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rac.f1, tmp);
    rac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sac.f1->size[0] * sac.f1->size[1]);
    sac.f1->size[0] = 1;
    sac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sac.f1, tmp);
    sac.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tac.f1->size[0] * tac.f1->size[1]);
    tac.f1->size[0] = 1;
    tac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tac.f1, tmp);
    tac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uac.f1->size[0] * uac.f1->size[1]);
    uac.f1->size[0] = 1;
    uac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uac.f1, tmp);
    uac.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[444].f1[0],
        &rac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[444].f1[1],
        &sac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[444].f1[2],
        &tac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[444].f1[3],
        &uac);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vac.f1->size[0] * vac.f1->size[1]);
    vac.f1->size[0] = 1;
    vac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vac.f1, tmp);
    vac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wac.f1->size[0] * wac.f1->size[1]);
    wac.f1->size[0] = 1;
    wac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wac.f1, tmp);
    wac.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xac.f1->size[0] * xac.f1->size[1]);
    xac.f1->size[0] = 1;
    xac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xac.f1, tmp);
    xac.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yac.f1->size[0] * yac.f1->size[1]);
    yac.f1->size[0] = 1;
    yac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yac.f1, tmp);
    yac.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[446].f1[0],
        &vac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[446].f1[1],
        &wac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[446].f1[2],
        &xac);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[446].f1[3],
        &yac);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(abc.f1->size[0] * abc.f1->size[1]);
    abc.f1->size[0] = 1;
    abc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(abc.f1, tmp);
    abc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bbc.f1->size[0] * bbc.f1->size[1]);
    bbc.f1->size[0] = 1;
    bbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bbc.f1, tmp);
    bbc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cbc.f1->size[0] * cbc.f1->size[1]);
    cbc.f1->size[0] = 1;
    cbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cbc.f1, tmp);
    cbc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dbc.f1->size[0] * dbc.f1->size[1]);
    dbc.f1->size[0] = 1;
    dbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dbc.f1, tmp);
    dbc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[447].f1[0],
        &abc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[447].f1[1],
        &bbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[447].f1[2],
        &cbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[447].f1[3],
        &dbc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ebc.f1->size[0] * ebc.f1->size[1]);
    ebc.f1->size[0] = 1;
    ebc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ebc.f1, tmp);
    ebc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fbc.f1->size[0] * fbc.f1->size[1]);
    fbc.f1->size[0] = 1;
    fbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fbc.f1, tmp);
    fbc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gbc.f1->size[0] * gbc.f1->size[1]);
    gbc.f1->size[0] = 1;
    gbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gbc.f1, tmp);
    gbc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hbc.f1->size[0] * hbc.f1->size[1]);
    hbc.f1->size[0] = 1;
    hbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hbc.f1, tmp);
    hbc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[448].f1[0],
        &ebc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[448].f1[1],
        &fbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[448].f1[2],
        &gbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[448].f1[3],
        &hbc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ibc.f1->size[0] * ibc.f1->size[1]);
    ibc.f1->size[0] = 1;
    ibc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ibc.f1, tmp);
    ibc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jbc.f1->size[0] * jbc.f1->size[1]);
    jbc.f1->size[0] = 1;
    jbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jbc.f1, tmp);
    jbc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kbc.f1->size[0] * kbc.f1->size[1]);
    kbc.f1->size[0] = 1;
    kbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kbc.f1, tmp);
    kbc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lbc.f1->size[0] * lbc.f1->size[1]);
    lbc.f1->size[0] = 1;
    lbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lbc.f1, tmp);
    lbc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[449].f1[0],
        &ibc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[449].f1[1],
        &jbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[449].f1[2],
        &kbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[449].f1[3],
        &lbc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mbc.f1->size[0] * mbc.f1->size[1]);
    mbc.f1->size[0] = 1;
    mbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mbc.f1, tmp);
    mbc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nbc.f1->size[0] * nbc.f1->size[1]);
    nbc.f1->size[0] = 1;
    nbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nbc.f1, tmp);
    nbc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(obc.f1->size[0] * obc.f1->size[1]);
    obc.f1->size[0] = 1;
    obc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(obc.f1, tmp);
    obc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pbc.f1->size[0] * pbc.f1->size[1]);
    pbc.f1->size[0] = 1;
    pbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pbc.f1, tmp);
    pbc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[451].f1[0],
        &mbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[451].f1[1],
        &nbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[451].f1[2],
        &obc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[451].f1[3],
        &pbc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qbc.f1->size[0] * qbc.f1->size[1]);
    qbc.f1->size[0] = 1;
    qbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qbc.f1, tmp);
    qbc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rbc.f1->size[0] * rbc.f1->size[1]);
    rbc.f1->size[0] = 1;
    rbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rbc.f1, tmp);
    rbc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sbc.f1->size[0] * sbc.f1->size[1]);
    sbc.f1->size[0] = 1;
    sbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sbc.f1, tmp);
    sbc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tbc.f1->size[0] * tbc.f1->size[1]);
    tbc.f1->size[0] = 1;
    tbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tbc.f1, tmp);
    tbc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[452].f1[0],
        &qbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[452].f1[1],
        &rbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[452].f1[2],
        &sbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[452].f1[3],
        &tbc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ubc.f1->size[0] * ubc.f1->size[1]);
    ubc.f1->size[0] = 1;
    ubc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ubc.f1, tmp);
    ubc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vbc.f1->size[0] * vbc.f1->size[1]);
    vbc.f1->size[0] = 1;
    vbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vbc.f1, tmp);
    vbc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wbc.f1->size[0] * wbc.f1->size[1]);
    wbc.f1->size[0] = 1;
    wbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wbc.f1, tmp);
    wbc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xbc.f1->size[0] * xbc.f1->size[1]);
    xbc.f1->size[0] = 1;
    xbc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xbc.f1, tmp);
    xbc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[454].f1[0],
        &ubc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[454].f1[1],
        &vbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[454].f1[2],
        &wbc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[454].f1[3],
        &xbc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ybc.f1->size[0] * ybc.f1->size[1]);
    ybc.f1->size[0] = 1;
    ybc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ybc.f1, tmp);
    ybc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(acc.f1->size[0] * acc.f1->size[1]);
    acc.f1->size[0] = 1;
    acc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(acc.f1, tmp);
    acc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bcc.f1->size[0] * bcc.f1->size[1]);
    bcc.f1->size[0] = 1;
    bcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bcc.f1, tmp);
    bcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ccc.f1->size[0] * ccc.f1->size[1]);
    ccc.f1->size[0] = 1;
    ccc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ccc.f1, tmp);
    ccc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[456].f1[0],
        &ybc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[456].f1[1],
        &acc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[456].f1[2],
        &bcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[456].f1[3],
        &ccc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dcc.f1->size[0] * dcc.f1->size[1]);
    dcc.f1->size[0] = 1;
    dcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dcc.f1, tmp);
    dcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ecc.f1->size[0] * ecc.f1->size[1]);
    ecc.f1->size[0] = 1;
    ecc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ecc.f1, tmp);
    ecc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fcc.f1->size[0] * fcc.f1->size[1]);
    fcc.f1->size[0] = 1;
    fcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fcc.f1, tmp);
    fcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gcc.f1->size[0] * gcc.f1->size[1]);
    gcc.f1->size[0] = 1;
    gcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gcc.f1, tmp);
    gcc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[457].f1[0],
        &dcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[457].f1[1],
        &ecc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[457].f1[2],
        &fcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[457].f1[3],
        &gcc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hcc.f1->size[0] * hcc.f1->size[1]);
    hcc.f1->size[0] = 1;
    hcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hcc.f1, tmp);
    hcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(icc.f1->size[0] * icc.f1->size[1]);
    icc.f1->size[0] = 1;
    icc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(icc.f1, tmp);
    icc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jcc.f1->size[0] * jcc.f1->size[1]);
    jcc.f1->size[0] = 1;
    jcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jcc.f1, tmp);
    jcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kcc.f1->size[0] * kcc.f1->size[1]);
    kcc.f1->size[0] = 1;
    kcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kcc.f1, tmp);
    kcc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[458].f1[0],
        &hcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[458].f1[1],
        &icc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[458].f1[2],
        &jcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[458].f1[3],
        &kcc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(lcc.f1->size[0] * lcc.f1->size[1]);
    lcc.f1->size[0] = 1;
    lcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lcc.f1, tmp);
    lcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mcc.f1->size[0] * mcc.f1->size[1]);
    mcc.f1->size[0] = 1;
    mcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mcc.f1, tmp);
    mcc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ncc.f1->size[0] * ncc.f1->size[1]);
    ncc.f1->size[0] = 1;
    ncc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ncc.f1, tmp);
    ncc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(occ.f1->size[0] * occ.f1->size[1]);
    occ.f1->size[0] = 1;
    occ.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(occ.f1, tmp);
    occ.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[459].f1[0],
        &lcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[459].f1[1],
        &mcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[459].f1[2],
        &ncc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[459].f1[3],
        &occ);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(pcc.f1->size[0] * pcc.f1->size[1]);
    pcc.f1->size[0] = 1;
    pcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pcc.f1, tmp);
    pcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qcc.f1->size[0] * qcc.f1->size[1]);
    qcc.f1->size[0] = 1;
    qcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qcc.f1, tmp);
    qcc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rcc.f1->size[0] * rcc.f1->size[1]);
    rcc.f1->size[0] = 1;
    rcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rcc.f1, tmp);
    rcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(scc.f1->size[0] * scc.f1->size[1]);
    scc.f1->size[0] = 1;
    scc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(scc.f1, tmp);
    scc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[460].f1[0],
        &pcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[460].f1[1],
        &qcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[460].f1[2],
        &rcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[460].f1[3],
        &scc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(tcc.f1->size[0] * tcc.f1->size[1]);
    tcc.f1->size[0] = 1;
    tcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tcc.f1, tmp);
    tcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ucc.f1->size[0] * ucc.f1->size[1]);
    ucc.f1->size[0] = 1;
    ucc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ucc.f1, tmp);
    ucc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vcc.f1->size[0] * vcc.f1->size[1]);
    vcc.f1->size[0] = 1;
    vcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vcc.f1, tmp);
    vcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wcc.f1->size[0] * wcc.f1->size[1]);
    wcc.f1->size[0] = 1;
    wcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wcc.f1, tmp);
    wcc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[462].f1[0],
        &tcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[462].f1[1],
        &ucc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[462].f1[2],
        &vcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[462].f1[3],
        &wcc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(xcc.f1->size[0] * xcc.f1->size[1]);
    xcc.f1->size[0] = 1;
    xcc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xcc.f1, tmp);
    xcc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ycc.f1->size[0] * ycc.f1->size[1]);
    ycc.f1->size[0] = 1;
    ycc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ycc.f1, tmp);
    ycc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(adc.f1->size[0] * adc.f1->size[1]);
    adc.f1->size[0] = 1;
    adc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(adc.f1, tmp);
    adc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bdc.f1->size[0] * bdc.f1->size[1]);
    bdc.f1->size[0] = 1;
    bdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bdc.f1, tmp);
    bdc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[464].f1[0],
        &xcc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[464].f1[1],
        &ycc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[464].f1[2],
        &adc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[464].f1[3],
        &bdc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(cdc.f1->size[0] * cdc.f1->size[1]);
    cdc.f1->size[0] = 1;
    cdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cdc.f1, tmp);
    cdc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ddc.f1->size[0] * ddc.f1->size[1]);
    ddc.f1->size[0] = 1;
    ddc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ddc.f1, tmp);
    ddc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(edc.f1->size[0] * edc.f1->size[1]);
    edc.f1->size[0] = 1;
    edc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(edc.f1, tmp);
    edc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fdc.f1->size[0] * fdc.f1->size[1]);
    fdc.f1->size[0] = 1;
    fdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fdc.f1, tmp);
    fdc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[466].f1[0],
        &cdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[466].f1[1],
        &ddc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[466].f1[2],
        &edc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[466].f1[3],
        &fdc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(gdc.f1->size[0] * gdc.f1->size[1]);
    gdc.f1->size[0] = 1;
    gdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gdc.f1, tmp);
    gdc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hdc.f1->size[0] * hdc.f1->size[1]);
    hdc.f1->size[0] = 1;
    hdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hdc.f1, tmp);
    hdc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(idc.f1->size[0] * idc.f1->size[1]);
    idc.f1->size[0] = 1;
    idc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(idc.f1, tmp);
    idc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jdc.f1->size[0] * jdc.f1->size[1]);
    jdc.f1->size[0] = 1;
    jdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jdc.f1, tmp);
    jdc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[467].f1[0],
        &gdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[467].f1[1],
        &hdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[467].f1[2],
        &idc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[467].f1[3],
        &jdc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(kdc.f1->size[0] * kdc.f1->size[1]);
    kdc.f1->size[0] = 1;
    kdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kdc.f1, tmp);
    kdc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ldc.f1->size[0] * ldc.f1->size[1]);
    ldc.f1->size[0] = 1;
    ldc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ldc.f1, tmp);
    ldc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mdc.f1->size[0] * mdc.f1->size[1]);
    mdc.f1->size[0] = 1;
    mdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mdc.f1, tmp);
    mdc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ndc.f1->size[0] * ndc.f1->size[1]);
    ndc.f1->size[0] = 1;
    ndc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ndc.f1, tmp);
    ndc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[468].f1[0],
        &kdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[468].f1[1],
        &ldc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[468].f1[2],
        &mdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[468].f1[3],
        &ndc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(odc.f1->size[0] * odc.f1->size[1]);
    odc.f1->size[0] = 1;
    odc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(odc.f1, tmp);
    odc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pdc.f1->size[0] * pdc.f1->size[1]);
    pdc.f1->size[0] = 1;
    pdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pdc.f1, tmp);
    pdc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qdc.f1->size[0] * qdc.f1->size[1]);
    qdc.f1->size[0] = 1;
    qdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qdc.f1, tmp);
    qdc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rdc.f1->size[0] * rdc.f1->size[1]);
    rdc.f1->size[0] = 1;
    rdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rdc.f1, tmp);
    rdc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[469].f1[0],
        &odc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[469].f1[1],
        &pdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[469].f1[2],
        &qdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[469].f1[3],
        &rdc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(sdc.f1->size[0] * sdc.f1->size[1]);
    sdc.f1->size[0] = 1;
    sdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sdc.f1, tmp);
    sdc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tdc.f1->size[0] * tdc.f1->size[1]);
    tdc.f1->size[0] = 1;
    tdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tdc.f1, tmp);
    tdc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(udc.f1->size[0] * udc.f1->size[1]);
    udc.f1->size[0] = 1;
    udc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(udc.f1, tmp);
    udc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vdc.f1->size[0] * vdc.f1->size[1]);
    vdc.f1->size[0] = 1;
    vdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vdc.f1, tmp);
    vdc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[472].f1[0],
        &sdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[472].f1[1],
        &tdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[472].f1[2],
        &udc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[472].f1[3],
        &vdc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(wdc.f1->size[0] * wdc.f1->size[1]);
    wdc.f1->size[0] = 1;
    wdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wdc.f1, tmp);
    wdc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xdc.f1->size[0] * xdc.f1->size[1]);
    xdc.f1->size[0] = 1;
    xdc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xdc.f1, tmp);
    xdc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ydc.f1->size[0] * ydc.f1->size[1]);
    ydc.f1->size[0] = 1;
    ydc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ydc.f1, tmp);
    ydc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(aec.f1->size[0] * aec.f1->size[1]);
    aec.f1->size[0] = 1;
    aec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aec.f1, tmp);
    aec.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[474].f1[0],
        &wdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[474].f1[1],
        &xdc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[474].f1[2],
        &ydc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[474].f1[3],
        &aec);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(bec.f1->size[0] * bec.f1->size[1]);
    bec.f1->size[0] = 1;
    bec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bec.f1, tmp);
    bec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cec.f1->size[0] * cec.f1->size[1]);
    cec.f1->size[0] = 1;
    cec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cec.f1, tmp);
    cec.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dec.f1->size[0] * dec.f1->size[1]);
    dec.f1->size[0] = 1;
    dec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dec.f1, tmp);
    dec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(eec.f1->size[0] * eec.f1->size[1]);
    eec.f1->size[0] = 1;
    eec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eec.f1, tmp);
    eec.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[476].f1[0],
        &bec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[476].f1[1],
        &cec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[476].f1[2],
        &dec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[476].f1[3],
        &eec);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(fec.f1->size[0] * fec.f1->size[1]);
    fec.f1->size[0] = 1;
    fec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fec.f1, tmp);
    fec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gec.f1->size[0] * gec.f1->size[1]);
    gec.f1->size[0] = 1;
    gec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gec.f1, tmp);
    gec.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hec.f1->size[0] * hec.f1->size[1]);
    hec.f1->size[0] = 1;
    hec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hec.f1, tmp);
    hec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(iec.f1->size[0] * iec.f1->size[1]);
    iec.f1->size[0] = 1;
    iec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iec.f1, tmp);
    iec.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[477].f1[0],
        &fec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[477].f1[1],
        &gec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[477].f1[2],
        &hec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[477].f1[3],
        &iec);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(jec.f1->size[0] * jec.f1->size[1]);
    jec.f1->size[0] = 1;
    jec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jec.f1, tmp);
    jec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kec.f1->size[0] * kec.f1->size[1]);
    kec.f1->size[0] = 1;
    kec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kec.f1, tmp);
    kec.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lec.f1->size[0] * lec.f1->size[1]);
    lec.f1->size[0] = 1;
    lec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lec.f1, tmp);
    lec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mec.f1->size[0] * mec.f1->size[1]);
    mec.f1->size[0] = 1;
    mec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mec.f1, tmp);
    mec.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[478].f1[0],
        &jec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[478].f1[1],
        &kec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[478].f1[2],
        &lec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[478].f1[3],
        &mec);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(nec.f1->size[0] * nec.f1->size[1]);
    nec.f1->size[0] = 1;
    nec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nec.f1, tmp);
    nec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(oec.f1->size[0] * oec.f1->size[1]);
    oec.f1->size[0] = 1;
    oec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oec.f1, tmp);
    oec.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pec.f1->size[0] * pec.f1->size[1]);
    pec.f1->size[0] = 1;
    pec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pec.f1, tmp);
    pec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qec.f1->size[0] * qec.f1->size[1]);
    qec.f1->size[0] = 1;
    qec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qec.f1, tmp);
    qec.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[479].f1[0],
        &nec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[479].f1[1],
        &oec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[479].f1[2],
        &pec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[479].f1[3],
        &qec);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(rec.f1->size[0] * rec.f1->size[1]);
    rec.f1->size[0] = 1;
    rec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rec.f1, tmp);
    rec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sec.f1->size[0] * sec.f1->size[1]);
    sec.f1->size[0] = 1;
    sec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sec.f1, tmp);
    sec.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tec.f1->size[0] * tec.f1->size[1]);
    tec.f1->size[0] = 1;
    tec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tec.f1, tmp);
    tec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uec.f1->size[0] * uec.f1->size[1]);
    uec.f1->size[0] = 1;
    uec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uec.f1, tmp);
    uec.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[484].f1[0],
        &rec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[484].f1[1],
        &sec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[484].f1[2],
        &tec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[484].f1[3],
        &uec);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(vec.f1->size[0] * vec.f1->size[1]);
    vec.f1->size[0] = 1;
    vec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vec.f1, tmp);
    vec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wec.f1->size[0] * wec.f1->size[1]);
    wec.f1->size[0] = 1;
    wec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wec.f1, tmp);
    wec.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xec.f1->size[0] * xec.f1->size[1]);
    xec.f1->size[0] = 1;
    xec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xec.f1, tmp);
    xec.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yec.f1->size[0] * yec.f1->size[1]);
    yec.f1->size[0] = 1;
    yec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yec.f1, tmp);
    yec.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[486].f1[0],
        &vec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[486].f1[1],
        &wec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[486].f1[2],
        &xec);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[486].f1[3],
        &yec);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(afc.f1->size[0] * afc.f1->size[1]);
    afc.f1->size[0] = 1;
    afc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(afc.f1, tmp);
    afc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bfc.f1->size[0] * bfc.f1->size[1]);
    bfc.f1->size[0] = 1;
    bfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bfc.f1, tmp);
    bfc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cfc.f1->size[0] * cfc.f1->size[1]);
    cfc.f1->size[0] = 1;
    cfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cfc.f1, tmp);
    cfc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dfc.f1->size[0] * dfc.f1->size[1]);
    dfc.f1->size[0] = 1;
    dfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dfc.f1, tmp);
    dfc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[487].f1[0],
        &afc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[487].f1[1],
        &bfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[487].f1[2],
        &cfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[487].f1[3],
        &dfc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(efc.f1->size[0] * efc.f1->size[1]);
    efc.f1->size[0] = 1;
    efc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(efc.f1, tmp);
    efc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ffc.f1->size[0] * ffc.f1->size[1]);
    ffc.f1->size[0] = 1;
    ffc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ffc.f1, tmp);
    ffc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gfc.f1->size[0] * gfc.f1->size[1]);
    gfc.f1->size[0] = 1;
    gfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gfc.f1, tmp);
    gfc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hfc.f1->size[0] * hfc.f1->size[1]);
    hfc.f1->size[0] = 1;
    hfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hfc.f1, tmp);
    hfc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[488].f1[0],
        &efc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[488].f1[1],
        &ffc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[488].f1[2],
        &gfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[488].f1[3],
        &hfc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ifc.f1->size[0] * ifc.f1->size[1]);
    ifc.f1->size[0] = 1;
    ifc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ifc.f1, tmp);
    ifc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jfc.f1->size[0] * jfc.f1->size[1]);
    jfc.f1->size[0] = 1;
    jfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jfc.f1, tmp);
    jfc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kfc.f1->size[0] * kfc.f1->size[1]);
    kfc.f1->size[0] = 1;
    kfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kfc.f1, tmp);
    kfc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lfc.f1->size[0] * lfc.f1->size[1]);
    lfc.f1->size[0] = 1;
    lfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lfc.f1, tmp);
    lfc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[489].f1[0],
        &ifc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[489].f1[1],
        &jfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[489].f1[2],
        &kfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[489].f1[3],
        &lfc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(mfc.f1->size[0] * mfc.f1->size[1]);
    mfc.f1->size[0] = 1;
    mfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mfc.f1, tmp);
    mfc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nfc.f1->size[0] * nfc.f1->size[1]);
    nfc.f1->size[0] = 1;
    nfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nfc.f1, tmp);
    nfc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ofc.f1->size[0] * ofc.f1->size[1]);
    ofc.f1->size[0] = 1;
    ofc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ofc.f1, tmp);
    ofc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pfc.f1->size[0] * pfc.f1->size[1]);
    pfc.f1->size[0] = 1;
    pfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pfc.f1, tmp);
    pfc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[491].f1[0],
        &mfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[491].f1[1],
        &nfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[491].f1[2],
        &ofc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[491].f1[3],
        &pfc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(qfc.f1->size[0] * qfc.f1->size[1]);
    qfc.f1->size[0] = 1;
    qfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qfc.f1, tmp);
    qfc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rfc.f1->size[0] * rfc.f1->size[1]);
    rfc.f1->size[0] = 1;
    rfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rfc.f1, tmp);
    rfc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sfc.f1->size[0] * sfc.f1->size[1]);
    sfc.f1->size[0] = 1;
    sfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sfc.f1, tmp);
    sfc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tfc.f1->size[0] * tfc.f1->size[1]);
    tfc.f1->size[0] = 1;
    tfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tfc.f1, tmp);
    tfc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[494].f1[0],
        &qfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[494].f1[1],
        &rfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[494].f1[2],
        &sfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[494].f1[3],
        &tfc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(ufc.f1->size[0] * ufc.f1->size[1]);
    ufc.f1->size[0] = 1;
    ufc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ufc.f1, tmp);
    ufc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vfc.f1->size[0] * vfc.f1->size[1]);
    vfc.f1->size[0] = 1;
    vfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vfc.f1, tmp);
    vfc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wfc.f1->size[0] * wfc.f1->size[1]);
    wfc.f1->size[0] = 1;
    wfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wfc.f1, tmp);
    wfc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xfc.f1->size[0] * xfc.f1->size[1]);
    xfc.f1->size[0] = 1;
    xfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xfc.f1, tmp);
    xfc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[496].f1[0],
        &ufc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[496].f1[1],
        &vfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[496].f1[2],
        &wfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[496].f1[3],
        &xfc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(yfc.f1->size[0] * yfc.f1->size[1]);
    yfc.f1->size[0] = 1;
    yfc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yfc.f1, tmp);
    yfc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(agc.f1->size[0] * agc.f1->size[1]);
    agc.f1->size[0] = 1;
    agc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(agc.f1, tmp);
    agc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bgc.f1->size[0] * bgc.f1->size[1]);
    bgc.f1->size[0] = 1;
    bgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bgc.f1, tmp);
    bgc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cgc.f1->size[0] * cgc.f1->size[1]);
    cgc.f1->size[0] = 1;
    cgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cgc.f1, tmp);
    cgc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[497].f1[0],
        &yfc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[497].f1[1],
        &agc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[497].f1[2],
        &bgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[497].f1[3],
        &cgc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(dgc.f1->size[0] * dgc.f1->size[1]);
    dgc.f1->size[0] = 1;
    dgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dgc.f1, tmp);
    dgc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(egc.f1->size[0] * egc.f1->size[1]);
    egc.f1->size[0] = 1;
    egc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(egc.f1, tmp);
    egc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fgc.f1->size[0] * fgc.f1->size[1]);
    fgc.f1->size[0] = 1;
    fgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fgc.f1, tmp);
    fgc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ggc.f1->size[0] * ggc.f1->size[1]);
    ggc.f1->size[0] = 1;
    ggc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ggc.f1, tmp);
    ggc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[498].f1[0],
        &dgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[498].f1[1],
        &egc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[498].f1[2],
        &fgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[498].f1[3],
        &ggc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(hgc.f1->size[0] * hgc.f1->size[1]);
    hgc.f1->size[0] = 1;
    hgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hgc.f1, tmp);
    hgc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(igc.f1->size[0] * igc.f1->size[1]);
    igc.f1->size[0] = 1;
    igc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(igc.f1, tmp);
    igc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jgc.f1->size[0] * jgc.f1->size[1]);
    jgc.f1->size[0] = 1;
    jgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jgc.f1, tmp);
    jgc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kgc.f1->size[0] * kgc.f1->size[1]);
    kgc.f1->size[0] = 1;
    kgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kgc.f1, tmp);
    kgc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[499].f1[0],
        &hgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[499].f1[1],
        &igc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[499].f1[2],
        &jgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[499].f1[3],
        &kgc);

    // '<S284>:1:54'
    tmp = static_cast<int32_T>(lgc.f1->size[0] * lgc.f1->size[1]);
    lgc.f1->size[0] = 1;
    lgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lgc.f1, tmp);
    lgc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mgc.f1->size[0] * mgc.f1->size[1]);
    mgc.f1->size[0] = 1;
    mgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mgc.f1, tmp);
    mgc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ngc.f1->size[0] * ngc.f1->size[1]);
    ngc.f1->size[0] = 1;
    ngc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ngc.f1, tmp);
    ngc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ogc.f1->size[0] * ogc.f1->size[1]);
    ogc.f1->size[0] = 1;
    ogc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ogc.f1, tmp);
    ogc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[80].f1[0], &lgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[80].f1[1], &mgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[80].f1[2], &ngc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[80].f1[3], &ogc);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(pgc.f1->size[0] * pgc.f1->size[1]);
    pgc.f1->size[0] = 1;
    pgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pgc.f1, tmp);
    pgc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qgc.f1->size[0] * qgc.f1->size[1]);
    qgc.f1->size[0] = 1;
    qgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qgc.f1, tmp);
    qgc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rgc.f1->size[0] * rgc.f1->size[1]);
    rgc.f1->size[0] = 1;
    rgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rgc.f1, tmp);
    rgc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sgc.f1->size[0] * sgc.f1->size[1]);
    sgc.f1->size[0] = 1;
    sgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sgc.f1, tmp);
    sgc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[110].f1[0],
        &pgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[110].f1[1],
        &qgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[110].f1[2],
        &rgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[110].f1[3],
        &sgc);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(tgc.f1->size[0] * tgc.f1->size[1]);
    tgc.f1->size[0] = 1;
    tgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tgc.f1, tmp);
    tgc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ugc.f1->size[0] * ugc.f1->size[1]);
    ugc.f1->size[0] = 1;
    ugc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ugc.f1, tmp);
    ugc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vgc.f1->size[0] * vgc.f1->size[1]);
    vgc.f1->size[0] = 1;
    vgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vgc.f1, tmp);
    vgc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wgc.f1->size[0] * wgc.f1->size[1]);
    wgc.f1->size[0] = 1;
    wgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wgc.f1, tmp);
    wgc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[130].f1[0],
        &tgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[130].f1[1],
        &ugc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[130].f1[2],
        &vgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[130].f1[3],
        &wgc);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(xgc.f1->size[0] * xgc.f1->size[1]);
    xgc.f1->size[0] = 1;
    xgc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xgc.f1, tmp);
    xgc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ygc.f1->size[0] * ygc.f1->size[1]);
    ygc.f1->size[0] = 1;
    ygc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ygc.f1, tmp);
    ygc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ahc.f1->size[0] * ahc.f1->size[1]);
    ahc.f1->size[0] = 1;
    ahc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ahc.f1, tmp);
    ahc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bhc.f1->size[0] * bhc.f1->size[1]);
    bhc.f1->size[0] = 1;
    bhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bhc.f1, tmp);
    bhc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[140].f1[0],
        &xgc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[140].f1[1],
        &ygc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[140].f1[2],
        &ahc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[140].f1[3],
        &bhc);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(chc.f1->size[0] * chc.f1->size[1]);
    chc.f1->size[0] = 1;
    chc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(chc.f1, tmp);
    chc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dhc.f1->size[0] * dhc.f1->size[1]);
    dhc.f1->size[0] = 1;
    dhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dhc.f1, tmp);
    dhc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ehc.f1->size[0] * ehc.f1->size[1]);
    ehc.f1->size[0] = 1;
    ehc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ehc.f1, tmp);
    ehc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fhc.f1->size[0] * fhc.f1->size[1]);
    fhc.f1->size[0] = 1;
    fhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fhc.f1, tmp);
    fhc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[150].f1[0],
        &chc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[150].f1[1],
        &dhc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[150].f1[2],
        &ehc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[150].f1[3],
        &fhc);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(ghc.f1->size[0] * ghc.f1->size[1]);
    ghc.f1->size[0] = 1;
    ghc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ghc.f1, tmp);
    ghc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hhc.f1->size[0] * hhc.f1->size[1]);
    hhc.f1->size[0] = 1;
    hhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hhc.f1, tmp);
    hhc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ihc.f1->size[0] * ihc.f1->size[1]);
    ihc.f1->size[0] = 1;
    ihc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ihc.f1, tmp);
    ihc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jhc.f1->size[0] * jhc.f1->size[1]);
    jhc.f1->size[0] = 1;
    jhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jhc.f1, tmp);
    jhc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[170].f1[0],
        &ghc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[170].f1[1],
        &hhc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[170].f1[2],
        &ihc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[170].f1[3],
        &jhc);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(khc.f1->size[0] * khc.f1->size[1]);
    khc.f1->size[0] = 1;
    khc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(khc.f1, tmp);
    khc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lhc.f1->size[0] * lhc.f1->size[1]);
    lhc.f1->size[0] = 1;
    lhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lhc.f1, tmp);
    lhc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mhc.f1->size[0] * mhc.f1->size[1]);
    mhc.f1->size[0] = 1;
    mhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mhc.f1, tmp);
    mhc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nhc.f1->size[0] * nhc.f1->size[1]);
    nhc.f1->size[0] = 1;
    nhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nhc.f1, tmp);
    nhc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[180].f1[0],
        &khc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[180].f1[1],
        &lhc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[180].f1[2],
        &mhc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[180].f1[3],
        &nhc);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(ohc.f1->size[0] * ohc.f1->size[1]);
    ohc.f1->size[0] = 1;
    ohc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ohc.f1, tmp);
    ohc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(phc.f1->size[0] * phc.f1->size[1]);
    phc.f1->size[0] = 1;
    phc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(phc.f1, tmp);
    phc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qhc.f1->size[0] * qhc.f1->size[1]);
    qhc.f1->size[0] = 1;
    qhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qhc.f1, tmp);
    qhc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rhc.f1->size[0] * rhc.f1->size[1]);
    rhc.f1->size[0] = 1;
    rhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rhc.f1, tmp);
    rhc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[190].f1[0],
        &ohc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[190].f1[1],
        &phc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[190].f1[2],
        &qhc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[190].f1[3],
        &rhc);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(shc.f1->size[0] * shc.f1->size[1]);
    shc.f1->size[0] = 1;
    shc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(shc.f1, tmp);
    shc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(thc.f1->size[0] * thc.f1->size[1]);
    thc.f1->size[0] = 1;
    thc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(thc.f1, tmp);
    thc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uhc.f1->size[0] * uhc.f1->size[1]);
    uhc.f1->size[0] = 1;
    uhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uhc.f1, tmp);
    uhc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vhc.f1->size[0] * vhc.f1->size[1]);
    vhc.f1->size[0] = 1;
    vhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vhc.f1, tmp);
    vhc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[230].f1[0],
        &shc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[230].f1[1],
        &thc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[230].f1[2],
        &uhc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[230].f1[3],
        &vhc);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(whc.f1->size[0] * whc.f1->size[1]);
    whc.f1->size[0] = 1;
    whc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(whc.f1, tmp);
    whc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xhc.f1->size[0] * xhc.f1->size[1]);
    xhc.f1->size[0] = 1;
    xhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xhc.f1, tmp);
    xhc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yhc.f1->size[0] * yhc.f1->size[1]);
    yhc.f1->size[0] = 1;
    yhc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yhc.f1, tmp);
    yhc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(aic.f1->size[0] * aic.f1->size[1]);
    aic.f1->size[0] = 1;
    aic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aic.f1, tmp);
    aic.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[240].f1[0],
        &whc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[240].f1[1],
        &xhc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[240].f1[2],
        &yhc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[240].f1[3],
        &aic);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(bic.f1->size[0] * bic.f1->size[1]);
    bic.f1->size[0] = 1;
    bic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bic.f1, tmp);
    bic.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cic.f1->size[0] * cic.f1->size[1]);
    cic.f1->size[0] = 1;
    cic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cic.f1, tmp);
    cic.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dic.f1->size[0] * dic.f1->size[1]);
    dic.f1->size[0] = 1;
    dic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dic.f1, tmp);
    dic.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(eic.f1->size[0] * eic.f1->size[1]);
    eic.f1->size[0] = 1;
    eic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eic.f1, tmp);
    eic.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[342].f1[0],
        &bic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[342].f1[1],
        &cic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[342].f1[2],
        &dic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[342].f1[3],
        &eic);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(fic.f1->size[0] * fic.f1->size[1]);
    fic.f1->size[0] = 1;
    fic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fic.f1, tmp);
    fic.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gic.f1->size[0] * gic.f1->size[1]);
    gic.f1->size[0] = 1;
    gic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gic.f1, tmp);
    gic.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hic.f1->size[0] * hic.f1->size[1]);
    hic.f1->size[0] = 1;
    hic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hic.f1, tmp);
    hic.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(iic.f1->size[0] * iic.f1->size[1]);
    iic.f1->size[0] = 1;
    iic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iic.f1, tmp);
    iic.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[360].f1[0],
        &fic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[360].f1[1],
        &gic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[360].f1[2],
        &hic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[360].f1[3],
        &iic);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(jic.f1->size[0] * jic.f1->size[1]);
    jic.f1->size[0] = 1;
    jic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jic.f1, tmp);
    jic.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kic.f1->size[0] * kic.f1->size[1]);
    kic.f1->size[0] = 1;
    kic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kic.f1, tmp);
    kic.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lic.f1->size[0] * lic.f1->size[1]);
    lic.f1->size[0] = 1;
    lic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lic.f1, tmp);
    lic.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mic.f1->size[0] * mic.f1->size[1]);
    mic.f1->size[0] = 1;
    mic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mic.f1, tmp);
    mic.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[380].f1[0],
        &jic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[380].f1[1],
        &kic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[380].f1[2],
        &lic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[380].f1[3],
        &mic);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(nic.f1->size[0] * nic.f1->size[1]);
    nic.f1->size[0] = 1;
    nic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nic.f1, tmp);
    nic.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oic.f1->size[0] * oic.f1->size[1]);
    oic.f1->size[0] = 1;
    oic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oic.f1, tmp);
    oic.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pic.f1->size[0] * pic.f1->size[1]);
    pic.f1->size[0] = 1;
    pic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pic.f1, tmp);
    pic.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qic.f1->size[0] * qic.f1->size[1]);
    qic.f1->size[0] = 1;
    qic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qic.f1, tmp);
    qic.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[400].f1[0],
        &nic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[400].f1[1],
        &oic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[400].f1[2],
        &pic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[400].f1[3],
        &qic);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(ric.f1->size[0] * ric.f1->size[1]);
    ric.f1->size[0] = 1;
    ric.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ric.f1, tmp);
    ric.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sic.f1->size[0] * sic.f1->size[1]);
    sic.f1->size[0] = 1;
    sic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sic.f1, tmp);
    sic.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tic.f1->size[0] * tic.f1->size[1]);
    tic.f1->size[0] = 1;
    tic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tic.f1, tmp);
    tic.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uic.f1->size[0] * uic.f1->size[1]);
    uic.f1->size[0] = 1;
    uic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uic.f1, tmp);
    uic.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[410].f1[0],
        &ric);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[410].f1[1],
        &sic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[410].f1[2],
        &tic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[410].f1[3],
        &uic);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(vic.f1->size[0] * vic.f1->size[1]);
    vic.f1->size[0] = 1;
    vic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vic.f1, tmp);
    vic.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wic.f1->size[0] * wic.f1->size[1]);
    wic.f1->size[0] = 1;
    wic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wic.f1, tmp);
    wic.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xic.f1->size[0] * xic.f1->size[1]);
    xic.f1->size[0] = 1;
    xic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xic.f1, tmp);
    xic.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yic.f1->size[0] * yic.f1->size[1]);
    yic.f1->size[0] = 1;
    yic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yic.f1, tmp);
    yic.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[420].f1[0],
        &vic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[420].f1[1],
        &wic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[420].f1[2],
        &xic);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[420].f1[3],
        &yic);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(ajc.f1->size[0] * ajc.f1->size[1]);
    ajc.f1->size[0] = 1;
    ajc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ajc.f1, tmp);
    ajc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bjc.f1->size[0] * bjc.f1->size[1]);
    bjc.f1->size[0] = 1;
    bjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bjc.f1, tmp);
    bjc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cjc.f1->size[0] * cjc.f1->size[1]);
    cjc.f1->size[0] = 1;
    cjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cjc.f1, tmp);
    cjc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(djc.f1->size[0] * djc.f1->size[1]);
    djc.f1->size[0] = 1;
    djc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(djc.f1, tmp);
    djc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[480].f1[0],
        &ajc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[480].f1[1],
        &bjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[480].f1[2],
        &cjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[480].f1[3],
        &djc);

    // '<S284>:1:59'
    tmp = static_cast<int32_T>(ejc.f1->size[0] * ejc.f1->size[1]);
    ejc.f1->size[0] = 1;
    ejc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ejc.f1, tmp);
    ejc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fjc.f1->size[0] * fjc.f1->size[1]);
    fjc.f1->size[0] = 1;
    fjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fjc.f1, tmp);
    fjc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gjc.f1->size[0] * gjc.f1->size[1]);
    gjc.f1->size[0] = 1;
    gjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gjc.f1, tmp);
    gjc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hjc.f1->size[0] * hjc.f1->size[1]);
    hjc.f1->size[0] = 1;
    hjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hjc.f1, tmp);
    hjc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[90].f1[0], &ejc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[90].f1[1], &fjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[90].f1[2], &gjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[90].f1[3], &hjc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(ijc.f1->size[0] * ijc.f1->size[1]);
    ijc.f1->size[0] = 1;
    ijc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ijc.f1, tmp);
    ijc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jjc.f1->size[0] * jjc.f1->size[1]);
    jjc.f1->size[0] = 1;
    jjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jjc.f1, tmp);
    jjc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kjc.f1->size[0] * kjc.f1->size[1]);
    kjc.f1->size[0] = 1;
    kjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kjc.f1, tmp);
    kjc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ljc.f1->size[0] * ljc.f1->size[1]);
    ljc.f1->size[0] = 1;
    ljc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ljc.f1, tmp);
    ljc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[131].f1[0],
        &ijc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[131].f1[1],
        &jjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[131].f1[2],
        &kjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[131].f1[3],
        &ljc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(mjc.f1->size[0] * mjc.f1->size[1]);
    mjc.f1->size[0] = 1;
    mjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mjc.f1, tmp);
    mjc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(njc.f1->size[0] * njc.f1->size[1]);
    njc.f1->size[0] = 1;
    njc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(njc.f1, tmp);
    njc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ojc.f1->size[0] * ojc.f1->size[1]);
    ojc.f1->size[0] = 1;
    ojc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ojc.f1, tmp);
    ojc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pjc.f1->size[0] * pjc.f1->size[1]);
    pjc.f1->size[0] = 1;
    pjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pjc.f1, tmp);
    pjc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[160].f1[0],
        &mjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[160].f1[1],
        &njc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[160].f1[2],
        &ojc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[160].f1[3],
        &pjc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(qjc.f1->size[0] * qjc.f1->size[1]);
    qjc.f1->size[0] = 1;
    qjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qjc.f1, tmp);
    qjc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rjc.f1->size[0] * rjc.f1->size[1]);
    rjc.f1->size[0] = 1;
    rjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rjc.f1, tmp);
    rjc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sjc.f1->size[0] * sjc.f1->size[1]);
    sjc.f1->size[0] = 1;
    sjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sjc.f1, tmp);
    sjc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tjc.f1->size[0] * tjc.f1->size[1]);
    tjc.f1->size[0] = 1;
    tjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tjc.f1, tmp);
    tjc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[210].f1[0],
        &qjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[210].f1[1],
        &rjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[210].f1[2],
        &sjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[210].f1[3],
        &tjc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(ujc.f1->size[0] * ujc.f1->size[1]);
    ujc.f1->size[0] = 1;
    ujc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ujc.f1, tmp);
    ujc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vjc.f1->size[0] * vjc.f1->size[1]);
    vjc.f1->size[0] = 1;
    vjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vjc.f1, tmp);
    vjc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wjc.f1->size[0] * wjc.f1->size[1]);
    wjc.f1->size[0] = 1;
    wjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wjc.f1, tmp);
    wjc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xjc.f1->size[0] * xjc.f1->size[1]);
    xjc.f1->size[0] = 1;
    xjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xjc.f1, tmp);
    xjc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[213].f1[0],
        &ujc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[213].f1[1],
        &vjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[213].f1[2],
        &wjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[213].f1[3],
        &xjc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(yjc.f1->size[0] * yjc.f1->size[1]);
    yjc.f1->size[0] = 1;
    yjc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yjc.f1, tmp);
    yjc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(akc.f1->size[0] * akc.f1->size[1]);
    akc.f1->size[0] = 1;
    akc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(akc.f1, tmp);
    akc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bkc.f1->size[0] * bkc.f1->size[1]);
    bkc.f1->size[0] = 1;
    bkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bkc.f1, tmp);
    bkc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ckc.f1->size[0] * ckc.f1->size[1]);
    ckc.f1->size[0] = 1;
    ckc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ckc.f1, tmp);
    ckc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[250].f1[0],
        &yjc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[250].f1[1],
        &akc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[250].f1[2],
        &bkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[250].f1[3],
        &ckc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(dkc.f1->size[0] * dkc.f1->size[1]);
    dkc.f1->size[0] = 1;
    dkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dkc.f1, tmp);
    dkc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ekc.f1->size[0] * ekc.f1->size[1]);
    ekc.f1->size[0] = 1;
    ekc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ekc.f1, tmp);
    ekc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fkc.f1->size[0] * fkc.f1->size[1]);
    fkc.f1->size[0] = 1;
    fkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fkc.f1, tmp);
    fkc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gkc.f1->size[0] * gkc.f1->size[1]);
    gkc.f1->size[0] = 1;
    gkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gkc.f1, tmp);
    gkc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[270].f1[0],
        &dkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[270].f1[1],
        &ekc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[270].f1[2],
        &fkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[270].f1[3],
        &gkc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(hkc.f1->size[0] * hkc.f1->size[1]);
    hkc.f1->size[0] = 1;
    hkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hkc.f1, tmp);
    hkc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ikc.f1->size[0] * ikc.f1->size[1]);
    ikc.f1->size[0] = 1;
    ikc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ikc.f1, tmp);
    ikc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jkc.f1->size[0] * jkc.f1->size[1]);
    jkc.f1->size[0] = 1;
    jkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jkc.f1, tmp);
    jkc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kkc.f1->size[0] * kkc.f1->size[1]);
    kkc.f1->size[0] = 1;
    kkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kkc.f1, tmp);
    kkc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[311].f1[0],
        &hkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[311].f1[1],
        &ikc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[311].f1[2],
        &jkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[311].f1[3],
        &kkc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(lkc.f1->size[0] * lkc.f1->size[1]);
    lkc.f1->size[0] = 1;
    lkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lkc.f1, tmp);
    lkc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mkc.f1->size[0] * mkc.f1->size[1]);
    mkc.f1->size[0] = 1;
    mkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mkc.f1, tmp);
    mkc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nkc.f1->size[0] * nkc.f1->size[1]);
    nkc.f1->size[0] = 1;
    nkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nkc.f1, tmp);
    nkc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(okc.f1->size[0] * okc.f1->size[1]);
    okc.f1->size[0] = 1;
    okc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(okc.f1, tmp);
    okc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[320].f1[0],
        &lkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[320].f1[1],
        &mkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[320].f1[2],
        &nkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[320].f1[3],
        &okc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(pkc.f1->size[0] * pkc.f1->size[1]);
    pkc.f1->size[0] = 1;
    pkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pkc.f1, tmp);
    pkc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qkc.f1->size[0] * qkc.f1->size[1]);
    qkc.f1->size[0] = 1;
    qkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qkc.f1, tmp);
    qkc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rkc.f1->size[0] * rkc.f1->size[1]);
    rkc.f1->size[0] = 1;
    rkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rkc.f1, tmp);
    rkc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(skc.f1->size[0] * skc.f1->size[1]);
    skc.f1->size[0] = 1;
    skc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(skc.f1, tmp);
    skc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[331].f1[0],
        &pkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[331].f1[1],
        &qkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[331].f1[2],
        &rkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[331].f1[3],
        &skc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(tkc.f1->size[0] * tkc.f1->size[1]);
    tkc.f1->size[0] = 1;
    tkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tkc.f1, tmp);
    tkc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ukc.f1->size[0] * ukc.f1->size[1]);
    ukc.f1->size[0] = 1;
    ukc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ukc.f1, tmp);
    ukc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vkc.f1->size[0] * vkc.f1->size[1]);
    vkc.f1->size[0] = 1;
    vkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vkc.f1, tmp);
    vkc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wkc.f1->size[0] * wkc.f1->size[1]);
    wkc.f1->size[0] = 1;
    wkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wkc.f1, tmp);
    wkc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[340].f1[0],
        &tkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[340].f1[1],
        &ukc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[340].f1[2],
        &vkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[340].f1[3],
        &wkc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(xkc.f1->size[0] * xkc.f1->size[1]);
    xkc.f1->size[0] = 1;
    xkc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xkc.f1, tmp);
    xkc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ykc.f1->size[0] * ykc.f1->size[1]);
    ykc.f1->size[0] = 1;
    ykc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ykc.f1, tmp);
    ykc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(alc.f1->size[0] * alc.f1->size[1]);
    alc.f1->size[0] = 1;
    alc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(alc.f1, tmp);
    alc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(blc.f1->size[0] * blc.f1->size[1]);
    blc.f1->size[0] = 1;
    blc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(blc.f1, tmp);
    blc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[370].f1[0],
        &xkc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[370].f1[1],
        &ykc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[370].f1[2],
        &alc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[370].f1[3],
        &blc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(clc.f1->size[0] * clc.f1->size[1]);
    clc.f1->size[0] = 1;
    clc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(clc.f1, tmp);
    clc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dlc.f1->size[0] * dlc.f1->size[1]);
    dlc.f1->size[0] = 1;
    dlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dlc.f1, tmp);
    dlc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(elc.f1->size[0] * elc.f1->size[1]);
    elc.f1->size[0] = 1;
    elc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(elc.f1, tmp);
    elc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(flc.f1->size[0] * flc.f1->size[1]);
    flc.f1->size[0] = 1;
    flc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(flc.f1, tmp);
    flc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[371].f1[0],
        &clc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[371].f1[1],
        &dlc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[371].f1[2],
        &elc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[371].f1[3],
        &flc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(glc.f1->size[0] * glc.f1->size[1]);
    glc.f1->size[0] = 1;
    glc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(glc.f1, tmp);
    glc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hlc.f1->size[0] * hlc.f1->size[1]);
    hlc.f1->size[0] = 1;
    hlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hlc.f1, tmp);
    hlc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ilc.f1->size[0] * ilc.f1->size[1]);
    ilc.f1->size[0] = 1;
    ilc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ilc.f1, tmp);
    ilc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jlc.f1->size[0] * jlc.f1->size[1]);
    jlc.f1->size[0] = 1;
    jlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jlc.f1, tmp);
    jlc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[401].f1[0],
        &glc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[401].f1[1],
        &hlc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[401].f1[2],
        &ilc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[401].f1[3],
        &jlc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(klc.f1->size[0] * klc.f1->size[1]);
    klc.f1->size[0] = 1;
    klc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(klc.f1, tmp);
    klc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(llc.f1->size[0] * llc.f1->size[1]);
    llc.f1->size[0] = 1;
    llc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(llc.f1, tmp);
    llc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mlc.f1->size[0] * mlc.f1->size[1]);
    mlc.f1->size[0] = 1;
    mlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mlc.f1, tmp);
    mlc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nlc.f1->size[0] * nlc.f1->size[1]);
    nlc.f1->size[0] = 1;
    nlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nlc.f1, tmp);
    nlc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[430].f1[0],
        &klc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[430].f1[1],
        &llc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[430].f1[2],
        &mlc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[430].f1[3],
        &nlc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(olc.f1->size[0] * olc.f1->size[1]);
    olc.f1->size[0] = 1;
    olc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(olc.f1, tmp);
    olc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(plc.f1->size[0] * plc.f1->size[1]);
    plc.f1->size[0] = 1;
    plc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(plc.f1, tmp);
    plc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qlc.f1->size[0] * qlc.f1->size[1]);
    qlc.f1->size[0] = 1;
    qlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qlc.f1, tmp);
    qlc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rlc.f1->size[0] * rlc.f1->size[1]);
    rlc.f1->size[0] = 1;
    rlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rlc.f1, tmp);
    rlc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[450].f1[0],
        &olc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[450].f1[1],
        &plc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[450].f1[2],
        &qlc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[450].f1[3],
        &rlc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(slc.f1->size[0] * slc.f1->size[1]);
    slc.f1->size[0] = 1;
    slc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(slc.f1, tmp);
    slc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tlc.f1->size[0] * tlc.f1->size[1]);
    tlc.f1->size[0] = 1;
    tlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tlc.f1, tmp);
    tlc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ulc.f1->size[0] * ulc.f1->size[1]);
    ulc.f1->size[0] = 1;
    ulc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ulc.f1, tmp);
    ulc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vlc.f1->size[0] * vlc.f1->size[1]);
    vlc.f1->size[0] = 1;
    vlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vlc.f1, tmp);
    vlc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[470].f1[0],
        &slc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[470].f1[1],
        &tlc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[470].f1[2],
        &ulc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[470].f1[3],
        &vlc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(wlc.f1->size[0] * wlc.f1->size[1]);
    wlc.f1->size[0] = 1;
    wlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wlc.f1, tmp);
    wlc.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xlc.f1->size[0] * xlc.f1->size[1]);
    xlc.f1->size[0] = 1;
    xlc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xlc.f1, tmp);
    xlc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ylc.f1->size[0] * ylc.f1->size[1]);
    ylc.f1->size[0] = 1;
    ylc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ylc.f1, tmp);
    ylc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(amc.f1->size[0] * amc.f1->size[1]);
    amc.f1->size[0] = 1;
    amc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(amc.f1, tmp);
    amc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[490].f1[0],
        &wlc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[490].f1[1],
        &xlc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[490].f1[2],
        &ylc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[490].f1[3],
        &amc);

    // '<S284>:1:64'
    tmp = static_cast<int32_T>(bmc.f1->size[0] * bmc.f1->size[1]);
    bmc.f1->size[0] = 1;
    bmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bmc.f1, tmp);
    bmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cmc.f1->size[0] * cmc.f1->size[1]);
    cmc.f1->size[0] = 1;
    cmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cmc.f1, tmp);
    cmc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dmc.f1->size[0] * dmc.f1->size[1]);
    dmc.f1->size[0] = 1;
    dmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dmc.f1, tmp);
    dmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(emc.f1->size[0] * emc.f1->size[1]);
    emc.f1->size[0] = 1;
    emc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(emc.f1, tmp);
    emc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[18].f1[0], &bmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[18].f1[1], &cmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[18].f1[2], &dmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[18].f1[3], &emc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(fmc.f1->size[0] * fmc.f1->size[1]);
    fmc.f1->size[0] = 1;
    fmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fmc.f1, tmp);
    fmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gmc.f1->size[0] * gmc.f1->size[1]);
    gmc.f1->size[0] = 1;
    gmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gmc.f1, tmp);
    gmc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hmc.f1->size[0] * hmc.f1->size[1]);
    hmc.f1->size[0] = 1;
    hmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hmc.f1, tmp);
    hmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(imc.f1->size[0] * imc.f1->size[1]);
    imc.f1->size[0] = 1;
    imc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(imc.f1, tmp);
    imc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[19].f1[0], &fmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[19].f1[1], &gmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[19].f1[2], &hmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[19].f1[3], &imc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(jmc.f1->size[0] * jmc.f1->size[1]);
    jmc.f1->size[0] = 1;
    jmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jmc.f1, tmp);
    jmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kmc.f1->size[0] * kmc.f1->size[1]);
    kmc.f1->size[0] = 1;
    kmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kmc.f1, tmp);
    kmc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lmc.f1->size[0] * lmc.f1->size[1]);
    lmc.f1->size[0] = 1;
    lmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lmc.f1, tmp);
    lmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mmc.f1->size[0] * mmc.f1->size[1]);
    mmc.f1->size[0] = 1;
    mmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mmc.f1, tmp);
    mmc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[25].f1[0], &jmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[25].f1[1], &kmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[25].f1[2], &lmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[25].f1[3], &mmc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(nmc.f1->size[0] * nmc.f1->size[1]);
    nmc.f1->size[0] = 1;
    nmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nmc.f1, tmp);
    nmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(omc.f1->size[0] * omc.f1->size[1]);
    omc.f1->size[0] = 1;
    omc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(omc.f1, tmp);
    omc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pmc.f1->size[0] * pmc.f1->size[1]);
    pmc.f1->size[0] = 1;
    pmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pmc.f1, tmp);
    pmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qmc.f1->size[0] * qmc.f1->size[1]);
    qmc.f1->size[0] = 1;
    qmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qmc.f1, tmp);
    qmc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[35].f1[0], &nmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[35].f1[1], &omc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[35].f1[2], &pmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[35].f1[3], &qmc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(rmc.f1->size[0] * rmc.f1->size[1]);
    rmc.f1->size[0] = 1;
    rmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rmc.f1, tmp);
    rmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(smc.f1->size[0] * smc.f1->size[1]);
    smc.f1->size[0] = 1;
    smc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(smc.f1, tmp);
    smc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tmc.f1->size[0] * tmc.f1->size[1]);
    tmc.f1->size[0] = 1;
    tmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tmc.f1, tmp);
    tmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(umc.f1->size[0] * umc.f1->size[1]);
    umc.f1->size[0] = 1;
    umc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(umc.f1, tmp);
    umc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[45].f1[0], &rmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[45].f1[1], &smc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[45].f1[2], &tmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[45].f1[3], &umc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(vmc.f1->size[0] * vmc.f1->size[1]);
    vmc.f1->size[0] = 1;
    vmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vmc.f1, tmp);
    vmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wmc.f1->size[0] * wmc.f1->size[1]);
    wmc.f1->size[0] = 1;
    wmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wmc.f1, tmp);
    wmc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xmc.f1->size[0] * xmc.f1->size[1]);
    xmc.f1->size[0] = 1;
    xmc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xmc.f1, tmp);
    xmc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ymc.f1->size[0] * ymc.f1->size[1]);
    ymc.f1->size[0] = 1;
    ymc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ymc.f1, tmp);
    ymc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[52].f1[0], &vmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[52].f1[1], &wmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[52].f1[2], &xmc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[52].f1[3], &ymc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(anc.f1->size[0] * anc.f1->size[1]);
    anc.f1->size[0] = 1;
    anc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(anc.f1, tmp);
    anc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bnc.f1->size[0] * bnc.f1->size[1]);
    bnc.f1->size[0] = 1;
    bnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bnc.f1, tmp);
    bnc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cnc.f1->size[0] * cnc.f1->size[1]);
    cnc.f1->size[0] = 1;
    cnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cnc.f1, tmp);
    cnc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dnc.f1->size[0] * dnc.f1->size[1]);
    dnc.f1->size[0] = 1;
    dnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dnc.f1, tmp);
    dnc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[53].f1[0], &anc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[53].f1[1], &bnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[53].f1[2], &cnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[53].f1[3], &dnc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(enc.f1->size[0] * enc.f1->size[1]);
    enc.f1->size[0] = 1;
    enc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(enc.f1, tmp);
    enc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fnc.f1->size[0] * fnc.f1->size[1]);
    fnc.f1->size[0] = 1;
    fnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fnc.f1, tmp);
    fnc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gnc.f1->size[0] * gnc.f1->size[1]);
    gnc.f1->size[0] = 1;
    gnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gnc.f1, tmp);
    gnc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hnc.f1->size[0] * hnc.f1->size[1]);
    hnc.f1->size[0] = 1;
    hnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hnc.f1, tmp);
    hnc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[55].f1[0], &enc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[55].f1[1], &fnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[55].f1[2], &gnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[55].f1[3], &hnc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(inc.f1->size[0] * inc.f1->size[1]);
    inc.f1->size[0] = 1;
    inc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(inc.f1, tmp);
    inc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jnc.f1->size[0] * jnc.f1->size[1]);
    jnc.f1->size[0] = 1;
    jnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jnc.f1, tmp);
    jnc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(knc.f1->size[0] * knc.f1->size[1]);
    knc.f1->size[0] = 1;
    knc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(knc.f1, tmp);
    knc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lnc.f1->size[0] * lnc.f1->size[1]);
    lnc.f1->size[0] = 1;
    lnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lnc.f1, tmp);
    lnc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[65].f1[0], &inc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[65].f1[1], &jnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[65].f1[2], &knc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[65].f1[3], &lnc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(mnc.f1->size[0] * mnc.f1->size[1]);
    mnc.f1->size[0] = 1;
    mnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mnc.f1, tmp);
    mnc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nnc.f1->size[0] * nnc.f1->size[1]);
    nnc.f1->size[0] = 1;
    nnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nnc.f1, tmp);
    nnc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(onc.f1->size[0] * onc.f1->size[1]);
    onc.f1->size[0] = 1;
    onc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(onc.f1, tmp);
    onc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pnc.f1->size[0] * pnc.f1->size[1]);
    pnc.f1->size[0] = 1;
    pnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pnc.f1, tmp);
    pnc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[75].f1[0], &mnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[75].f1[1], &nnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[75].f1[2], &onc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[75].f1[3], &pnc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(qnc.f1->size[0] * qnc.f1->size[1]);
    qnc.f1->size[0] = 1;
    qnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qnc.f1, tmp);
    qnc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rnc.f1->size[0] * rnc.f1->size[1]);
    rnc.f1->size[0] = 1;
    rnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rnc.f1, tmp);
    rnc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(snc.f1->size[0] * snc.f1->size[1]);
    snc.f1->size[0] = 1;
    snc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(snc.f1, tmp);
    snc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tnc.f1->size[0] * tnc.f1->size[1]);
    tnc.f1->size[0] = 1;
    tnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tnc.f1, tmp);
    tnc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[85].f1[0], &qnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[85].f1[1], &rnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[85].f1[2], &snc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[85].f1[3], &tnc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(unc.f1->size[0] * unc.f1->size[1]);
    unc.f1->size[0] = 1;
    unc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(unc.f1, tmp);
    unc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vnc.f1->size[0] * vnc.f1->size[1]);
    vnc.f1->size[0] = 1;
    vnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vnc.f1, tmp);
    vnc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wnc.f1->size[0] * wnc.f1->size[1]);
    wnc.f1->size[0] = 1;
    wnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wnc.f1, tmp);
    wnc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xnc.f1->size[0] * xnc.f1->size[1]);
    xnc.f1->size[0] = 1;
    xnc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xnc.f1, tmp);
    xnc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[91].f1[0], &unc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[91].f1[1], &vnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[91].f1[2], &wnc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[91].f1[3], &xnc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ync.f1->size[0] * ync.f1->size[1]);
    ync.f1->size[0] = 1;
    ync.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ync.f1, tmp);
    ync.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aoc.f1->size[0] * aoc.f1->size[1]);
    aoc.f1->size[0] = 1;
    aoc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aoc.f1, tmp);
    aoc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(boc.f1->size[0] * boc.f1->size[1]);
    boc.f1->size[0] = 1;
    boc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(boc.f1, tmp);
    boc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(coc.f1->size[0] * coc.f1->size[1]);
    coc.f1->size[0] = 1;
    coc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(coc.f1, tmp);
    coc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[95].f1[0], &ync);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[95].f1[1], &aoc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[95].f1[2], &boc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[95].f1[3], &coc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(doc.f1->size[0] * doc.f1->size[1]);
    doc.f1->size[0] = 1;
    doc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(doc.f1, tmp);
    doc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eoc.f1->size[0] * eoc.f1->size[1]);
    eoc.f1->size[0] = 1;
    eoc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eoc.f1, tmp);
    eoc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(foc.f1->size[0] * foc.f1->size[1]);
    foc.f1->size[0] = 1;
    foc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(foc.f1, tmp);
    foc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(goc.f1->size[0] * goc.f1->size[1]);
    goc.f1->size[0] = 1;
    goc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(goc.f1, tmp);
    goc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[102].f1[0],
        &doc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[102].f1[1],
        &eoc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[102].f1[2],
        &foc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[102].f1[3],
        &goc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(hoc.f1->size[0] * hoc.f1->size[1]);
    hoc.f1->size[0] = 1;
    hoc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hoc.f1, tmp);
    hoc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ioc.f1->size[0] * ioc.f1->size[1]);
    ioc.f1->size[0] = 1;
    ioc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ioc.f1, tmp);
    ioc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(joc.f1->size[0] * joc.f1->size[1]);
    joc.f1->size[0] = 1;
    joc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(joc.f1, tmp);
    joc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(koc.f1->size[0] * koc.f1->size[1]);
    koc.f1->size[0] = 1;
    koc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(koc.f1, tmp);
    koc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[105].f1[0],
        &hoc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[105].f1[1],
        &ioc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[105].f1[2],
        &joc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[105].f1[3],
        &koc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(loc.f1->size[0] * loc.f1->size[1]);
    loc.f1->size[0] = 1;
    loc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(loc.f1, tmp);
    loc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(moc.f1->size[0] * moc.f1->size[1]);
    moc.f1->size[0] = 1;
    moc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(moc.f1, tmp);
    moc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(noc.f1->size[0] * noc.f1->size[1]);
    noc.f1->size[0] = 1;
    noc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(noc.f1, tmp);
    noc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ooc.f1->size[0] * ooc.f1->size[1]);
    ooc.f1->size[0] = 1;
    ooc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ooc.f1, tmp);
    ooc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[113].f1[0],
        &loc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[113].f1[1],
        &moc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[113].f1[2],
        &noc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[113].f1[3],
        &ooc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(poc.f1->size[0] * poc.f1->size[1]);
    poc.f1->size[0] = 1;
    poc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(poc.f1, tmp);
    poc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qoc.f1->size[0] * qoc.f1->size[1]);
    qoc.f1->size[0] = 1;
    qoc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qoc.f1, tmp);
    qoc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(roc.f1->size[0] * roc.f1->size[1]);
    roc.f1->size[0] = 1;
    roc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(roc.f1, tmp);
    roc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(soc.f1->size[0] * soc.f1->size[1]);
    soc.f1->size[0] = 1;
    soc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(soc.f1, tmp);
    soc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[115].f1[0],
        &poc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[115].f1[1],
        &qoc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[115].f1[2],
        &roc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[115].f1[3],
        &soc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(toc.f1->size[0] * toc.f1->size[1]);
    toc.f1->size[0] = 1;
    toc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(toc.f1, tmp);
    toc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uoc.f1->size[0] * uoc.f1->size[1]);
    uoc.f1->size[0] = 1;
    uoc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uoc.f1, tmp);
    uoc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(voc.f1->size[0] * voc.f1->size[1]);
    voc.f1->size[0] = 1;
    voc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(voc.f1, tmp);
    voc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(woc.f1->size[0] * woc.f1->size[1]);
    woc.f1->size[0] = 1;
    woc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(woc.f1, tmp);
    woc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[120].f1[0],
        &toc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[120].f1[1],
        &uoc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[120].f1[2],
        &voc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[120].f1[3],
        &woc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(xoc.f1->size[0] * xoc.f1->size[1]);
    xoc.f1->size[0] = 1;
    xoc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xoc.f1, tmp);
    xoc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yoc.f1->size[0] * yoc.f1->size[1]);
    yoc.f1->size[0] = 1;
    yoc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yoc.f1, tmp);
    yoc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(apc.f1->size[0] * apc.f1->size[1]);
    apc.f1->size[0] = 1;
    apc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(apc.f1, tmp);
    apc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bpc.f1->size[0] * bpc.f1->size[1]);
    bpc.f1->size[0] = 1;
    bpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bpc.f1, tmp);
    bpc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[125].f1[0],
        &xoc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[125].f1[1],
        &yoc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[125].f1[2],
        &apc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[125].f1[3],
        &bpc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(cpc.f1->size[0] * cpc.f1->size[1]);
    cpc.f1->size[0] = 1;
    cpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cpc.f1, tmp);
    cpc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dpc.f1->size[0] * dpc.f1->size[1]);
    dpc.f1->size[0] = 1;
    dpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dpc.f1, tmp);
    dpc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(epc.f1->size[0] * epc.f1->size[1]);
    epc.f1->size[0] = 1;
    epc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(epc.f1, tmp);
    epc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fpc.f1->size[0] * fpc.f1->size[1]);
    fpc.f1->size[0] = 1;
    fpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fpc.f1, tmp);
    fpc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[135].f1[0],
        &cpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[135].f1[1],
        &dpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[135].f1[2],
        &epc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[135].f1[3],
        &fpc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(gpc.f1->size[0] * gpc.f1->size[1]);
    gpc.f1->size[0] = 1;
    gpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gpc.f1, tmp);
    gpc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hpc.f1->size[0] * hpc.f1->size[1]);
    hpc.f1->size[0] = 1;
    hpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hpc.f1, tmp);
    hpc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ipc.f1->size[0] * ipc.f1->size[1]);
    ipc.f1->size[0] = 1;
    ipc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ipc.f1, tmp);
    ipc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jpc.f1->size[0] * jpc.f1->size[1]);
    jpc.f1->size[0] = 1;
    jpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jpc.f1, tmp);
    jpc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[141].f1[0],
        &gpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[141].f1[1],
        &hpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[141].f1[2],
        &ipc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[141].f1[3],
        &jpc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(kpc.f1->size[0] * kpc.f1->size[1]);
    kpc.f1->size[0] = 1;
    kpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kpc.f1, tmp);
    kpc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lpc.f1->size[0] * lpc.f1->size[1]);
    lpc.f1->size[0] = 1;
    lpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lpc.f1, tmp);
    lpc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mpc.f1->size[0] * mpc.f1->size[1]);
    mpc.f1->size[0] = 1;
    mpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mpc.f1, tmp);
    mpc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(npc.f1->size[0] * npc.f1->size[1]);
    npc.f1->size[0] = 1;
    npc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(npc.f1, tmp);
    npc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[145].f1[0],
        &kpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[145].f1[1],
        &lpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[145].f1[2],
        &mpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[145].f1[3],
        &npc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(opc.f1->size[0] * opc.f1->size[1]);
    opc.f1->size[0] = 1;
    opc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(opc.f1, tmp);
    opc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ppc.f1->size[0] * ppc.f1->size[1]);
    ppc.f1->size[0] = 1;
    ppc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ppc.f1, tmp);
    ppc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qpc.f1->size[0] * qpc.f1->size[1]);
    qpc.f1->size[0] = 1;
    qpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qpc.f1, tmp);
    qpc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rpc.f1->size[0] * rpc.f1->size[1]);
    rpc.f1->size[0] = 1;
    rpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rpc.f1, tmp);
    rpc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[152].f1[0],
        &opc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[152].f1[1],
        &ppc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[152].f1[2],
        &qpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[152].f1[3],
        &rpc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(spc.f1->size[0] * spc.f1->size[1]);
    spc.f1->size[0] = 1;
    spc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(spc.f1, tmp);
    spc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tpc.f1->size[0] * tpc.f1->size[1]);
    tpc.f1->size[0] = 1;
    tpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tpc.f1, tmp);
    tpc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(upc.f1->size[0] * upc.f1->size[1]);
    upc.f1->size[0] = 1;
    upc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(upc.f1, tmp);
    upc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vpc.f1->size[0] * vpc.f1->size[1]);
    vpc.f1->size[0] = 1;
    vpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vpc.f1, tmp);
    vpc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[154].f1[0],
        &spc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[154].f1[1],
        &tpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[154].f1[2],
        &upc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[154].f1[3],
        &vpc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(wpc.f1->size[0] * wpc.f1->size[1]);
    wpc.f1->size[0] = 1;
    wpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wpc.f1, tmp);
    wpc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xpc.f1->size[0] * xpc.f1->size[1]);
    xpc.f1->size[0] = 1;
    xpc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xpc.f1, tmp);
    xpc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ypc.f1->size[0] * ypc.f1->size[1]);
    ypc.f1->size[0] = 1;
    ypc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ypc.f1, tmp);
    ypc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aqc.f1->size[0] * aqc.f1->size[1]);
    aqc.f1->size[0] = 1;
    aqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aqc.f1, tmp);
    aqc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[155].f1[0],
        &wpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[155].f1[1],
        &xpc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[155].f1[2],
        &ypc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[155].f1[3],
        &aqc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(bqc.f1->size[0] * bqc.f1->size[1]);
    bqc.f1->size[0] = 1;
    bqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bqc.f1, tmp);
    bqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cqc.f1->size[0] * cqc.f1->size[1]);
    cqc.f1->size[0] = 1;
    cqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cqc.f1, tmp);
    cqc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dqc.f1->size[0] * dqc.f1->size[1]);
    dqc.f1->size[0] = 1;
    dqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dqc.f1, tmp);
    dqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eqc.f1->size[0] * eqc.f1->size[1]);
    eqc.f1->size[0] = 1;
    eqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eqc.f1, tmp);
    eqc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[161].f1[0],
        &bqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[161].f1[1],
        &cqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[161].f1[2],
        &dqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[161].f1[3],
        &eqc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(fqc.f1->size[0] * fqc.f1->size[1]);
    fqc.f1->size[0] = 1;
    fqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fqc.f1, tmp);
    fqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gqc.f1->size[0] * gqc.f1->size[1]);
    gqc.f1->size[0] = 1;
    gqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gqc.f1, tmp);
    gqc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hqc.f1->size[0] * hqc.f1->size[1]);
    hqc.f1->size[0] = 1;
    hqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hqc.f1, tmp);
    hqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iqc.f1->size[0] * iqc.f1->size[1]);
    iqc.f1->size[0] = 1;
    iqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iqc.f1, tmp);
    iqc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[165].f1[0],
        &fqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[165].f1[1],
        &gqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[165].f1[2],
        &hqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[165].f1[3],
        &iqc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(jqc.f1->size[0] * jqc.f1->size[1]);
    jqc.f1->size[0] = 1;
    jqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jqc.f1, tmp);
    jqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kqc.f1->size[0] * kqc.f1->size[1]);
    kqc.f1->size[0] = 1;
    kqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kqc.f1, tmp);
    kqc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lqc.f1->size[0] * lqc.f1->size[1]);
    lqc.f1->size[0] = 1;
    lqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lqc.f1, tmp);
    lqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mqc.f1->size[0] * mqc.f1->size[1]);
    mqc.f1->size[0] = 1;
    mqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mqc.f1, tmp);
    mqc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[173].f1[0],
        &jqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[173].f1[1],
        &kqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[173].f1[2],
        &lqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[173].f1[3],
        &mqc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(nqc.f1->size[0] * nqc.f1->size[1]);
    nqc.f1->size[0] = 1;
    nqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nqc.f1, tmp);
    nqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oqc.f1->size[0] * oqc.f1->size[1]);
    oqc.f1->size[0] = 1;
    oqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oqc.f1, tmp);
    oqc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pqc.f1->size[0] * pqc.f1->size[1]);
    pqc.f1->size[0] = 1;
    pqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pqc.f1, tmp);
    pqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qqc.f1->size[0] * qqc.f1->size[1]);
    qqc.f1->size[0] = 1;
    qqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qqc.f1, tmp);
    qqc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[174].f1[0],
        &nqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[174].f1[1],
        &oqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[174].f1[2],
        &pqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[174].f1[3],
        &qqc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(rqc.f1->size[0] * rqc.f1->size[1]);
    rqc.f1->size[0] = 1;
    rqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rqc.f1, tmp);
    rqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sqc.f1->size[0] * sqc.f1->size[1]);
    sqc.f1->size[0] = 1;
    sqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sqc.f1, tmp);
    sqc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tqc.f1->size[0] * tqc.f1->size[1]);
    tqc.f1->size[0] = 1;
    tqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tqc.f1, tmp);
    tqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uqc.f1->size[0] * uqc.f1->size[1]);
    uqc.f1->size[0] = 1;
    uqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uqc.f1, tmp);
    uqc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[175].f1[0],
        &rqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[175].f1[1],
        &sqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[175].f1[2],
        &tqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[175].f1[3],
        &uqc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(vqc.f1->size[0] * vqc.f1->size[1]);
    vqc.f1->size[0] = 1;
    vqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vqc.f1, tmp);
    vqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wqc.f1->size[0] * wqc.f1->size[1]);
    wqc.f1->size[0] = 1;
    wqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wqc.f1, tmp);
    wqc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xqc.f1->size[0] * xqc.f1->size[1]);
    xqc.f1->size[0] = 1;
    xqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xqc.f1, tmp);
    xqc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yqc.f1->size[0] * yqc.f1->size[1]);
    yqc.f1->size[0] = 1;
    yqc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yqc.f1, tmp);
    yqc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[183].f1[0],
        &vqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[183].f1[1],
        &wqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[183].f1[2],
        &xqc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[183].f1[3],
        &yqc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(arc.f1->size[0] * arc.f1->size[1]);
    arc.f1->size[0] = 1;
    arc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(arc.f1, tmp);
    arc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(brc.f1->size[0] * brc.f1->size[1]);
    brc.f1->size[0] = 1;
    brc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(brc.f1, tmp);
    brc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(crc.f1->size[0] * crc.f1->size[1]);
    crc.f1->size[0] = 1;
    crc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(crc.f1, tmp);
    crc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(drc.f1->size[0] * drc.f1->size[1]);
    drc.f1->size[0] = 1;
    drc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(drc.f1, tmp);
    drc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[185].f1[0],
        &arc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[185].f1[1],
        &brc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[185].f1[2],
        &crc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[185].f1[3],
        &drc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(erc.f1->size[0] * erc.f1->size[1]);
    erc.f1->size[0] = 1;
    erc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(erc.f1, tmp);
    erc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(frc.f1->size[0] * frc.f1->size[1]);
    frc.f1->size[0] = 1;
    frc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(frc.f1, tmp);
    frc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(grc.f1->size[0] * grc.f1->size[1]);
    grc.f1->size[0] = 1;
    grc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(grc.f1, tmp);
    grc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hrc.f1->size[0] * hrc.f1->size[1]);
    hrc.f1->size[0] = 1;
    hrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hrc.f1, tmp);
    hrc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[191].f1[0],
        &erc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[191].f1[1],
        &frc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[191].f1[2],
        &grc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[191].f1[3],
        &hrc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(irc.f1->size[0] * irc.f1->size[1]);
    irc.f1->size[0] = 1;
    irc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(irc.f1, tmp);
    irc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jrc.f1->size[0] * jrc.f1->size[1]);
    jrc.f1->size[0] = 1;
    jrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jrc.f1, tmp);
    jrc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(krc.f1->size[0] * krc.f1->size[1]);
    krc.f1->size[0] = 1;
    krc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(krc.f1, tmp);
    krc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lrc.f1->size[0] * lrc.f1->size[1]);
    lrc.f1->size[0] = 1;
    lrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lrc.f1, tmp);
    lrc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[195].f1[0],
        &irc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[195].f1[1],
        &jrc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[195].f1[2],
        &krc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[195].f1[3],
        &lrc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(mrc.f1->size[0] * mrc.f1->size[1]);
    mrc.f1->size[0] = 1;
    mrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mrc.f1, tmp);
    mrc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nrc.f1->size[0] * nrc.f1->size[1]);
    nrc.f1->size[0] = 1;
    nrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nrc.f1, tmp);
    nrc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(orc.f1->size[0] * orc.f1->size[1]);
    orc.f1->size[0] = 1;
    orc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(orc.f1, tmp);
    orc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(prc.f1->size[0] * prc.f1->size[1]);
    prc.f1->size[0] = 1;
    prc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(prc.f1, tmp);
    prc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[200].f1[0],
        &mrc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[200].f1[1],
        &nrc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[200].f1[2],
        &orc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[200].f1[3],
        &prc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(qrc.f1->size[0] * qrc.f1->size[1]);
    qrc.f1->size[0] = 1;
    qrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qrc.f1, tmp);
    qrc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rrc.f1->size[0] * rrc.f1->size[1]);
    rrc.f1->size[0] = 1;
    rrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rrc.f1, tmp);
    rrc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(src.f1->size[0] * src.f1->size[1]);
    src.f1->size[0] = 1;
    src.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(src.f1, tmp);
    src.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(trc.f1->size[0] * trc.f1->size[1]);
    trc.f1->size[0] = 1;
    trc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(trc.f1, tmp);
    trc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[203].f1[0],
        &qrc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[203].f1[1],
        &rrc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[203].f1[2],
        &src);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[203].f1[3],
        &trc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(urc.f1->size[0] * urc.f1->size[1]);
    urc.f1->size[0] = 1;
    urc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(urc.f1, tmp);
    urc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vrc.f1->size[0] * vrc.f1->size[1]);
    vrc.f1->size[0] = 1;
    vrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vrc.f1, tmp);
    vrc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wrc.f1->size[0] * wrc.f1->size[1]);
    wrc.f1->size[0] = 1;
    wrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wrc.f1, tmp);
    wrc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xrc.f1->size[0] * xrc.f1->size[1]);
    xrc.f1->size[0] = 1;
    xrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xrc.f1, tmp);
    xrc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[205].f1[0],
        &urc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[205].f1[1],
        &vrc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[205].f1[2],
        &wrc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[205].f1[3],
        &xrc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(yrc.f1->size[0] * yrc.f1->size[1]);
    yrc.f1->size[0] = 1;
    yrc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yrc.f1, tmp);
    yrc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(asc.f1->size[0] * asc.f1->size[1]);
    asc.f1->size[0] = 1;
    asc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(asc.f1, tmp);
    asc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bsc.f1->size[0] * bsc.f1->size[1]);
    bsc.f1->size[0] = 1;
    bsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bsc.f1, tmp);
    bsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(csc.f1->size[0] * csc.f1->size[1]);
    csc.f1->size[0] = 1;
    csc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(csc.f1, tmp);
    csc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[214].f1[0],
        &yrc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[214].f1[1],
        &asc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[214].f1[2],
        &bsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[214].f1[3],
        &csc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(dsc.f1->size[0] * dsc.f1->size[1]);
    dsc.f1->size[0] = 1;
    dsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dsc.f1, tmp);
    dsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(esc.f1->size[0] * esc.f1->size[1]);
    esc.f1->size[0] = 1;
    esc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(esc.f1, tmp);
    esc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fsc.f1->size[0] * fsc.f1->size[1]);
    fsc.f1->size[0] = 1;
    fsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fsc.f1, tmp);
    fsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gsc.f1->size[0] * gsc.f1->size[1]);
    gsc.f1->size[0] = 1;
    gsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gsc.f1, tmp);
    gsc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[215].f1[0],
        &dsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[215].f1[1],
        &esc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[215].f1[2],
        &fsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[215].f1[3],
        &gsc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(hsc.f1->size[0] * hsc.f1->size[1]);
    hsc.f1->size[0] = 1;
    hsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hsc.f1, tmp);
    hsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(isc.f1->size[0] * isc.f1->size[1]);
    isc.f1->size[0] = 1;
    isc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(isc.f1, tmp);
    isc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jsc.f1->size[0] * jsc.f1->size[1]);
    jsc.f1->size[0] = 1;
    jsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jsc.f1, tmp);
    jsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ksc.f1->size[0] * ksc.f1->size[1]);
    ksc.f1->size[0] = 1;
    ksc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ksc.f1, tmp);
    ksc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[222].f1[0],
        &hsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[222].f1[1],
        &isc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[222].f1[2],
        &jsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[222].f1[3],
        &ksc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(lsc.f1->size[0] * lsc.f1->size[1]);
    lsc.f1->size[0] = 1;
    lsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lsc.f1, tmp);
    lsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(msc.f1->size[0] * msc.f1->size[1]);
    msc.f1->size[0] = 1;
    msc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(msc.f1, tmp);
    msc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nsc.f1->size[0] * nsc.f1->size[1]);
    nsc.f1->size[0] = 1;
    nsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nsc.f1, tmp);
    nsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(osc.f1->size[0] * osc.f1->size[1]);
    osc.f1->size[0] = 1;
    osc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(osc.f1, tmp);
    osc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[223].f1[0],
        &lsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[223].f1[1],
        &msc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[223].f1[2],
        &nsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[223].f1[3],
        &osc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(psc.f1->size[0] * psc.f1->size[1]);
    psc.f1->size[0] = 1;
    psc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(psc.f1, tmp);
    psc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qsc.f1->size[0] * qsc.f1->size[1]);
    qsc.f1->size[0] = 1;
    qsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qsc.f1, tmp);
    qsc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rsc.f1->size[0] * rsc.f1->size[1]);
    rsc.f1->size[0] = 1;
    rsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rsc.f1, tmp);
    rsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ssc.f1->size[0] * ssc.f1->size[1]);
    ssc.f1->size[0] = 1;
    ssc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ssc.f1, tmp);
    ssc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[225].f1[0],
        &psc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[225].f1[1],
        &qsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[225].f1[2],
        &rsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[225].f1[3],
        &ssc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(tsc.f1->size[0] * tsc.f1->size[1]);
    tsc.f1->size[0] = 1;
    tsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tsc.f1, tmp);
    tsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(usc.f1->size[0] * usc.f1->size[1]);
    usc.f1->size[0] = 1;
    usc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(usc.f1, tmp);
    usc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vsc.f1->size[0] * vsc.f1->size[1]);
    vsc.f1->size[0] = 1;
    vsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vsc.f1, tmp);
    vsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wsc.f1->size[0] * wsc.f1->size[1]);
    wsc.f1->size[0] = 1;
    wsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wsc.f1, tmp);
    wsc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[233].f1[0],
        &tsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[233].f1[1],
        &usc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[233].f1[2],
        &vsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[233].f1[3],
        &wsc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(xsc.f1->size[0] * xsc.f1->size[1]);
    xsc.f1->size[0] = 1;
    xsc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xsc.f1, tmp);
    xsc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ysc.f1->size[0] * ysc.f1->size[1]);
    ysc.f1->size[0] = 1;
    ysc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ysc.f1, tmp);
    ysc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(atc.f1->size[0] * atc.f1->size[1]);
    atc.f1->size[0] = 1;
    atc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(atc.f1, tmp);
    atc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(btc.f1->size[0] * btc.f1->size[1]);
    btc.f1->size[0] = 1;
    btc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(btc.f1, tmp);
    btc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[235].f1[0],
        &xsc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[235].f1[1],
        &ysc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[235].f1[2],
        &atc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[235].f1[3],
        &btc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ctc.f1->size[0] * ctc.f1->size[1]);
    ctc.f1->size[0] = 1;
    ctc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ctc.f1, tmp);
    ctc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dtc.f1->size[0] * dtc.f1->size[1]);
    dtc.f1->size[0] = 1;
    dtc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dtc.f1, tmp);
    dtc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(etc.f1->size[0] * etc.f1->size[1]);
    etc.f1->size[0] = 1;
    etc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(etc.f1, tmp);
    etc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ftc.f1->size[0] * ftc.f1->size[1]);
    ftc.f1->size[0] = 1;
    ftc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ftc.f1, tmp);
    ftc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[241].f1[0],
        &ctc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[241].f1[1],
        &dtc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[241].f1[2],
        &etc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[241].f1[3],
        &ftc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(gtc.f1->size[0] * gtc.f1->size[1]);
    gtc.f1->size[0] = 1;
    gtc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gtc.f1, tmp);
    gtc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(htc.f1->size[0] * htc.f1->size[1]);
    htc.f1->size[0] = 1;
    htc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(htc.f1, tmp);
    htc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(itc.f1->size[0] * itc.f1->size[1]);
    itc.f1->size[0] = 1;
    itc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(itc.f1, tmp);
    itc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jtc.f1->size[0] * jtc.f1->size[1]);
    jtc.f1->size[0] = 1;
    jtc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jtc.f1, tmp);
    jtc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[243].f1[0],
        &gtc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[243].f1[1],
        &htc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[243].f1[2],
        &itc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[243].f1[3],
        &jtc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ktc.f1->size[0] * ktc.f1->size[1]);
    ktc.f1->size[0] = 1;
    ktc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ktc.f1, tmp);
    ktc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ltc.f1->size[0] * ltc.f1->size[1]);
    ltc.f1->size[0] = 1;
    ltc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ltc.f1, tmp);
    ltc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mtc.f1->size[0] * mtc.f1->size[1]);
    mtc.f1->size[0] = 1;
    mtc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mtc.f1, tmp);
    mtc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ntc.f1->size[0] * ntc.f1->size[1]);
    ntc.f1->size[0] = 1;
    ntc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ntc.f1, tmp);
    ntc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[245].f1[0],
        &ktc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[245].f1[1],
        &ltc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[245].f1[2],
        &mtc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[245].f1[3],
        &ntc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(otc.f1->size[0] * otc.f1->size[1]);
    otc.f1->size[0] = 1;
    otc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(otc.f1, tmp);
    otc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ptc.f1->size[0] * ptc.f1->size[1]);
    ptc.f1->size[0] = 1;
    ptc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ptc.f1, tmp);
    ptc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qtc.f1->size[0] * qtc.f1->size[1]);
    qtc.f1->size[0] = 1;
    qtc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qtc.f1, tmp);
    qtc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rtc.f1->size[0] * rtc.f1->size[1]);
    rtc.f1->size[0] = 1;
    rtc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rtc.f1, tmp);
    rtc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[252].f1[0],
        &otc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[252].f1[1],
        &ptc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[252].f1[2],
        &qtc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[252].f1[3],
        &rtc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(stc.f1->size[0] * stc.f1->size[1]);
    stc.f1->size[0] = 1;
    stc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(stc.f1, tmp);
    stc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ttc.f1->size[0] * ttc.f1->size[1]);
    ttc.f1->size[0] = 1;
    ttc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ttc.f1, tmp);
    ttc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(utc.f1->size[0] * utc.f1->size[1]);
    utc.f1->size[0] = 1;
    utc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(utc.f1, tmp);
    utc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vtc.f1->size[0] * vtc.f1->size[1]);
    vtc.f1->size[0] = 1;
    vtc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vtc.f1, tmp);
    vtc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[253].f1[0],
        &stc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[253].f1[1],
        &ttc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[253].f1[2],
        &utc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[253].f1[3],
        &vtc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(wtc.f1->size[0] * wtc.f1->size[1]);
    wtc.f1->size[0] = 1;
    wtc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wtc.f1, tmp);
    wtc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xtc.f1->size[0] * xtc.f1->size[1]);
    xtc.f1->size[0] = 1;
    xtc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xtc.f1, tmp);
    xtc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ytc.f1->size[0] * ytc.f1->size[1]);
    ytc.f1->size[0] = 1;
    ytc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ytc.f1, tmp);
    ytc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(auc.f1->size[0] * auc.f1->size[1]);
    auc.f1->size[0] = 1;
    auc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(auc.f1, tmp);
    auc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[255].f1[0],
        &wtc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[255].f1[1],
        &xtc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[255].f1[2],
        &ytc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[255].f1[3],
        &auc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(buc.f1->size[0] * buc.f1->size[1]);
    buc.f1->size[0] = 1;
    buc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(buc.f1, tmp);
    buc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cuc.f1->size[0] * cuc.f1->size[1]);
    cuc.f1->size[0] = 1;
    cuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cuc.f1, tmp);
    cuc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(duc.f1->size[0] * duc.f1->size[1]);
    duc.f1->size[0] = 1;
    duc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(duc.f1, tmp);
    duc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(euc.f1->size[0] * euc.f1->size[1]);
    euc.f1->size[0] = 1;
    euc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(euc.f1, tmp);
    euc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[263].f1[0],
        &buc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[263].f1[1],
        &cuc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[263].f1[2],
        &duc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[263].f1[3],
        &euc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(fuc.f1->size[0] * fuc.f1->size[1]);
    fuc.f1->size[0] = 1;
    fuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fuc.f1, tmp);
    fuc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(guc.f1->size[0] * guc.f1->size[1]);
    guc.f1->size[0] = 1;
    guc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(guc.f1, tmp);
    guc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(huc.f1->size[0] * huc.f1->size[1]);
    huc.f1->size[0] = 1;
    huc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(huc.f1, tmp);
    huc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iuc.f1->size[0] * iuc.f1->size[1]);
    iuc.f1->size[0] = 1;
    iuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iuc.f1, tmp);
    iuc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[265].f1[0],
        &fuc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[265].f1[1],
        &guc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[265].f1[2],
        &huc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[265].f1[3],
        &iuc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(juc.f1->size[0] * juc.f1->size[1]);
    juc.f1->size[0] = 1;
    juc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(juc.f1, tmp);
    juc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kuc.f1->size[0] * kuc.f1->size[1]);
    kuc.f1->size[0] = 1;
    kuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kuc.f1, tmp);
    kuc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(luc.f1->size[0] * luc.f1->size[1]);
    luc.f1->size[0] = 1;
    luc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(luc.f1, tmp);
    luc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(muc.f1->size[0] * muc.f1->size[1]);
    muc.f1->size[0] = 1;
    muc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(muc.f1, tmp);
    muc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[271].f1[0],
        &juc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[271].f1[1],
        &kuc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[271].f1[2],
        &luc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[271].f1[3],
        &muc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(nuc.f1->size[0] * nuc.f1->size[1]);
    nuc.f1->size[0] = 1;
    nuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nuc.f1, tmp);
    nuc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ouc.f1->size[0] * ouc.f1->size[1]);
    ouc.f1->size[0] = 1;
    ouc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ouc.f1, tmp);
    ouc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(puc.f1->size[0] * puc.f1->size[1]);
    puc.f1->size[0] = 1;
    puc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(puc.f1, tmp);
    puc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(quc.f1->size[0] * quc.f1->size[1]);
    quc.f1->size[0] = 1;
    quc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(quc.f1, tmp);
    quc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[272].f1[0],
        &nuc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[272].f1[1],
        &ouc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[272].f1[2],
        &puc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[272].f1[3],
        &quc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ruc.f1->size[0] * ruc.f1->size[1]);
    ruc.f1->size[0] = 1;
    ruc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ruc.f1, tmp);
    ruc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(suc.f1->size[0] * suc.f1->size[1]);
    suc.f1->size[0] = 1;
    suc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(suc.f1, tmp);
    suc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tuc.f1->size[0] * tuc.f1->size[1]);
    tuc.f1->size[0] = 1;
    tuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tuc.f1, tmp);
    tuc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uuc.f1->size[0] * uuc.f1->size[1]);
    uuc.f1->size[0] = 1;
    uuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uuc.f1, tmp);
    uuc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[273].f1[0],
        &ruc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[273].f1[1],
        &suc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[273].f1[2],
        &tuc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[273].f1[3],
        &uuc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(vuc.f1->size[0] * vuc.f1->size[1]);
    vuc.f1->size[0] = 1;
    vuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vuc.f1, tmp);
    vuc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wuc.f1->size[0] * wuc.f1->size[1]);
    wuc.f1->size[0] = 1;
    wuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wuc.f1, tmp);
    wuc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xuc.f1->size[0] * xuc.f1->size[1]);
    xuc.f1->size[0] = 1;
    xuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xuc.f1, tmp);
    xuc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yuc.f1->size[0] * yuc.f1->size[1]);
    yuc.f1->size[0] = 1;
    yuc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yuc.f1, tmp);
    yuc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[275].f1[0],
        &vuc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[275].f1[1],
        &wuc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[275].f1[2],
        &xuc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[275].f1[3],
        &yuc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(avc.f1->size[0] * avc.f1->size[1]);
    avc.f1->size[0] = 1;
    avc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(avc.f1, tmp);
    avc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bvc.f1->size[0] * bvc.f1->size[1]);
    bvc.f1->size[0] = 1;
    bvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bvc.f1, tmp);
    bvc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cvc.f1->size[0] * cvc.f1->size[1]);
    cvc.f1->size[0] = 1;
    cvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cvc.f1, tmp);
    cvc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dvc.f1->size[0] * dvc.f1->size[1]);
    dvc.f1->size[0] = 1;
    dvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dvc.f1, tmp);
    dvc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[281].f1[0],
        &avc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[281].f1[1],
        &bvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[281].f1[2],
        &cvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[281].f1[3],
        &dvc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(evc.f1->size[0] * evc.f1->size[1]);
    evc.f1->size[0] = 1;
    evc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(evc.f1, tmp);
    evc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fvc.f1->size[0] * fvc.f1->size[1]);
    fvc.f1->size[0] = 1;
    fvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fvc.f1, tmp);
    fvc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gvc.f1->size[0] * gvc.f1->size[1]);
    gvc.f1->size[0] = 1;
    gvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gvc.f1, tmp);
    gvc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hvc.f1->size[0] * hvc.f1->size[1]);
    hvc.f1->size[0] = 1;
    hvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hvc.f1, tmp);
    hvc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[283].f1[0],
        &evc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[283].f1[1],
        &fvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[283].f1[2],
        &gvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[283].f1[3],
        &hvc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ivc.f1->size[0] * ivc.f1->size[1]);
    ivc.f1->size[0] = 1;
    ivc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ivc.f1, tmp);
    ivc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jvc.f1->size[0] * jvc.f1->size[1]);
    jvc.f1->size[0] = 1;
    jvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jvc.f1, tmp);
    jvc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kvc.f1->size[0] * kvc.f1->size[1]);
    kvc.f1->size[0] = 1;
    kvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kvc.f1, tmp);
    kvc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lvc.f1->size[0] * lvc.f1->size[1]);
    lvc.f1->size[0] = 1;
    lvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lvc.f1, tmp);
    lvc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[285].f1[0],
        &ivc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[285].f1[1],
        &jvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[285].f1[2],
        &kvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[285].f1[3],
        &lvc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(mvc.f1->size[0] * mvc.f1->size[1]);
    mvc.f1->size[0] = 1;
    mvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mvc.f1, tmp);
    mvc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nvc.f1->size[0] * nvc.f1->size[1]);
    nvc.f1->size[0] = 1;
    nvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nvc.f1, tmp);
    nvc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ovc.f1->size[0] * ovc.f1->size[1]);
    ovc.f1->size[0] = 1;
    ovc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ovc.f1, tmp);
    ovc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pvc.f1->size[0] * pvc.f1->size[1]);
    pvc.f1->size[0] = 1;
    pvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pvc.f1, tmp);
    pvc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[292].f1[0],
        &mvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[292].f1[1],
        &nvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[292].f1[2],
        &ovc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[292].f1[3],
        &pvc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(qvc.f1->size[0] * qvc.f1->size[1]);
    qvc.f1->size[0] = 1;
    qvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qvc.f1, tmp);
    qvc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rvc.f1->size[0] * rvc.f1->size[1]);
    rvc.f1->size[0] = 1;
    rvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rvc.f1, tmp);
    rvc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(svc.f1->size[0] * svc.f1->size[1]);
    svc.f1->size[0] = 1;
    svc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(svc.f1, tmp);
    svc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tvc.f1->size[0] * tvc.f1->size[1]);
    tvc.f1->size[0] = 1;
    tvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tvc.f1, tmp);
    tvc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[293].f1[0],
        &qvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[293].f1[1],
        &rvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[293].f1[2],
        &svc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[293].f1[3],
        &tvc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(uvc.f1->size[0] * uvc.f1->size[1]);
    uvc.f1->size[0] = 1;
    uvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uvc.f1, tmp);
    uvc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vvc.f1->size[0] * vvc.f1->size[1]);
    vvc.f1->size[0] = 1;
    vvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vvc.f1, tmp);
    vvc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wvc.f1->size[0] * wvc.f1->size[1]);
    wvc.f1->size[0] = 1;
    wvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wvc.f1, tmp);
    wvc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xvc.f1->size[0] * xvc.f1->size[1]);
    xvc.f1->size[0] = 1;
    xvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xvc.f1, tmp);
    xvc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[295].f1[0],
        &uvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[295].f1[1],
        &vvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[295].f1[2],
        &wvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[295].f1[3],
        &xvc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(yvc.f1->size[0] * yvc.f1->size[1]);
    yvc.f1->size[0] = 1;
    yvc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yvc.f1, tmp);
    yvc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(awc.f1->size[0] * awc.f1->size[1]);
    awc.f1->size[0] = 1;
    awc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(awc.f1, tmp);
    awc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bwc.f1->size[0] * bwc.f1->size[1]);
    bwc.f1->size[0] = 1;
    bwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bwc.f1, tmp);
    bwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cwc.f1->size[0] * cwc.f1->size[1]);
    cwc.f1->size[0] = 1;
    cwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cwc.f1, tmp);
    cwc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[300].f1[0],
        &yvc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[300].f1[1],
        &awc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[300].f1[2],
        &bwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[300].f1[3],
        &cwc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(dwc.f1->size[0] * dwc.f1->size[1]);
    dwc.f1->size[0] = 1;
    dwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dwc.f1, tmp);
    dwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ewc.f1->size[0] * ewc.f1->size[1]);
    ewc.f1->size[0] = 1;
    ewc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ewc.f1, tmp);
    ewc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fwc.f1->size[0] * fwc.f1->size[1]);
    fwc.f1->size[0] = 1;
    fwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fwc.f1, tmp);
    fwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gwc.f1->size[0] * gwc.f1->size[1]);
    gwc.f1->size[0] = 1;
    gwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gwc.f1, tmp);
    gwc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[303].f1[0],
        &dwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[303].f1[1],
        &ewc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[303].f1[2],
        &fwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[303].f1[3],
        &gwc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(hwc.f1->size[0] * hwc.f1->size[1]);
    hwc.f1->size[0] = 1;
    hwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hwc.f1, tmp);
    hwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iwc.f1->size[0] * iwc.f1->size[1]);
    iwc.f1->size[0] = 1;
    iwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iwc.f1, tmp);
    iwc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jwc.f1->size[0] * jwc.f1->size[1]);
    jwc.f1->size[0] = 1;
    jwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jwc.f1, tmp);
    jwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kwc.f1->size[0] * kwc.f1->size[1]);
    kwc.f1->size[0] = 1;
    kwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kwc.f1, tmp);
    kwc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[305].f1[0],
        &hwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[305].f1[1],
        &iwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[305].f1[2],
        &jwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[305].f1[3],
        &kwc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(lwc.f1->size[0] * lwc.f1->size[1]);
    lwc.f1->size[0] = 1;
    lwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lwc.f1, tmp);
    lwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mwc.f1->size[0] * mwc.f1->size[1]);
    mwc.f1->size[0] = 1;
    mwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mwc.f1, tmp);
    mwc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nwc.f1->size[0] * nwc.f1->size[1]);
    nwc.f1->size[0] = 1;
    nwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nwc.f1, tmp);
    nwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(owc.f1->size[0] * owc.f1->size[1]);
    owc.f1->size[0] = 1;
    owc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(owc.f1, tmp);
    owc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[313].f1[0],
        &lwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[313].f1[1],
        &mwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[313].f1[2],
        &nwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[313].f1[3],
        &owc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(pwc.f1->size[0] * pwc.f1->size[1]);
    pwc.f1->size[0] = 1;
    pwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pwc.f1, tmp);
    pwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qwc.f1->size[0] * qwc.f1->size[1]);
    qwc.f1->size[0] = 1;
    qwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qwc.f1, tmp);
    qwc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rwc.f1->size[0] * rwc.f1->size[1]);
    rwc.f1->size[0] = 1;
    rwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rwc.f1, tmp);
    rwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(swc.f1->size[0] * swc.f1->size[1]);
    swc.f1->size[0] = 1;
    swc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(swc.f1, tmp);
    swc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[315].f1[0],
        &pwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[315].f1[1],
        &qwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[315].f1[2],
        &rwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[315].f1[3],
        &swc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(twc.f1->size[0] * twc.f1->size[1]);
    twc.f1->size[0] = 1;
    twc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(twc.f1, tmp);
    twc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uwc.f1->size[0] * uwc.f1->size[1]);
    uwc.f1->size[0] = 1;
    uwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uwc.f1, tmp);
    uwc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vwc.f1->size[0] * vwc.f1->size[1]);
    vwc.f1->size[0] = 1;
    vwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vwc.f1, tmp);
    vwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wwc.f1->size[0] * wwc.f1->size[1]);
    wwc.f1->size[0] = 1;
    wwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wwc.f1, tmp);
    wwc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[323].f1[0],
        &twc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[323].f1[1],
        &uwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[323].f1[2],
        &vwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[323].f1[3],
        &wwc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(xwc.f1->size[0] * xwc.f1->size[1]);
    xwc.f1->size[0] = 1;
    xwc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xwc.f1, tmp);
    xwc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ywc.f1->size[0] * ywc.f1->size[1]);
    ywc.f1->size[0] = 1;
    ywc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ywc.f1, tmp);
    ywc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(axc.f1->size[0] * axc.f1->size[1]);
    axc.f1->size[0] = 1;
    axc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(axc.f1, tmp);
    axc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bxc.f1->size[0] * bxc.f1->size[1]);
    bxc.f1->size[0] = 1;
    bxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bxc.f1, tmp);
    bxc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[325].f1[0],
        &xwc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[325].f1[1],
        &ywc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[325].f1[2],
        &axc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[325].f1[3],
        &bxc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(cxc.f1->size[0] * cxc.f1->size[1]);
    cxc.f1->size[0] = 1;
    cxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cxc.f1, tmp);
    cxc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dxc.f1->size[0] * dxc.f1->size[1]);
    dxc.f1->size[0] = 1;
    dxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dxc.f1, tmp);
    dxc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(exc.f1->size[0] * exc.f1->size[1]);
    exc.f1->size[0] = 1;
    exc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(exc.f1, tmp);
    exc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fxc.f1->size[0] * fxc.f1->size[1]);
    fxc.f1->size[0] = 1;
    fxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fxc.f1, tmp);
    fxc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[332].f1[0],
        &cxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[332].f1[1],
        &dxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[332].f1[2],
        &exc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[332].f1[3],
        &fxc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(gxc.f1->size[0] * gxc.f1->size[1]);
    gxc.f1->size[0] = 1;
    gxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gxc.f1, tmp);
    gxc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hxc.f1->size[0] * hxc.f1->size[1]);
    hxc.f1->size[0] = 1;
    hxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hxc.f1, tmp);
    hxc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ixc.f1->size[0] * ixc.f1->size[1]);
    ixc.f1->size[0] = 1;
    ixc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ixc.f1, tmp);
    ixc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jxc.f1->size[0] * jxc.f1->size[1]);
    jxc.f1->size[0] = 1;
    jxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jxc.f1, tmp);
    jxc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[333].f1[0],
        &gxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[333].f1[1],
        &hxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[333].f1[2],
        &ixc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[333].f1[3],
        &jxc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(kxc.f1->size[0] * kxc.f1->size[1]);
    kxc.f1->size[0] = 1;
    kxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kxc.f1, tmp);
    kxc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lxc.f1->size[0] * lxc.f1->size[1]);
    lxc.f1->size[0] = 1;
    lxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lxc.f1, tmp);
    lxc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mxc.f1->size[0] * mxc.f1->size[1]);
    mxc.f1->size[0] = 1;
    mxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mxc.f1, tmp);
    mxc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nxc.f1->size[0] * nxc.f1->size[1]);
    nxc.f1->size[0] = 1;
    nxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nxc.f1, tmp);
    nxc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[335].f1[0],
        &kxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[335].f1[1],
        &lxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[335].f1[2],
        &mxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[335].f1[3],
        &nxc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(oxc.f1->size[0] * oxc.f1->size[1]);
    oxc.f1->size[0] = 1;
    oxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oxc.f1, tmp);
    oxc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pxc.f1->size[0] * pxc.f1->size[1]);
    pxc.f1->size[0] = 1;
    pxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pxc.f1, tmp);
    pxc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qxc.f1->size[0] * qxc.f1->size[1]);
    qxc.f1->size[0] = 1;
    qxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qxc.f1, tmp);
    qxc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rxc.f1->size[0] * rxc.f1->size[1]);
    rxc.f1->size[0] = 1;
    rxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rxc.f1, tmp);
    rxc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[343].f1[0],
        &oxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[343].f1[1],
        &pxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[343].f1[2],
        &qxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[343].f1[3],
        &rxc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(sxc.f1->size[0] * sxc.f1->size[1]);
    sxc.f1->size[0] = 1;
    sxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sxc.f1, tmp);
    sxc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(txc.f1->size[0] * txc.f1->size[1]);
    txc.f1->size[0] = 1;
    txc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(txc.f1, tmp);
    txc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uxc.f1->size[0] * uxc.f1->size[1]);
    uxc.f1->size[0] = 1;
    uxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uxc.f1, tmp);
    uxc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vxc.f1->size[0] * vxc.f1->size[1]);
    vxc.f1->size[0] = 1;
    vxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vxc.f1, tmp);
    vxc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[345].f1[0],
        &sxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[345].f1[1],
        &txc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[345].f1[2],
        &uxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[345].f1[3],
        &vxc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(wxc.f1->size[0] * wxc.f1->size[1]);
    wxc.f1->size[0] = 1;
    wxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wxc.f1, tmp);
    wxc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xxc.f1->size[0] * xxc.f1->size[1]);
    xxc.f1->size[0] = 1;
    xxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xxc.f1, tmp);
    xxc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yxc.f1->size[0] * yxc.f1->size[1]);
    yxc.f1->size[0] = 1;
    yxc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yxc.f1, tmp);
    yxc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ayc.f1->size[0] * ayc.f1->size[1]);
    ayc.f1->size[0] = 1;
    ayc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ayc.f1, tmp);
    ayc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[353].f1[0],
        &wxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[353].f1[1],
        &xxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[353].f1[2],
        &yxc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[353].f1[3],
        &ayc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(byc.f1->size[0] * byc.f1->size[1]);
    byc.f1->size[0] = 1;
    byc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(byc.f1, tmp);
    byc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cyc.f1->size[0] * cyc.f1->size[1]);
    cyc.f1->size[0] = 1;
    cyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cyc.f1, tmp);
    cyc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dyc.f1->size[0] * dyc.f1->size[1]);
    dyc.f1->size[0] = 1;
    dyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dyc.f1, tmp);
    dyc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eyc.f1->size[0] * eyc.f1->size[1]);
    eyc.f1->size[0] = 1;
    eyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eyc.f1, tmp);
    eyc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[355].f1[0],
        &byc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[355].f1[1],
        &cyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[355].f1[2],
        &dyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[355].f1[3],
        &eyc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(fyc.f1->size[0] * fyc.f1->size[1]);
    fyc.f1->size[0] = 1;
    fyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fyc.f1, tmp);
    fyc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gyc.f1->size[0] * gyc.f1->size[1]);
    gyc.f1->size[0] = 1;
    gyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gyc.f1, tmp);
    gyc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hyc.f1->size[0] * hyc.f1->size[1]);
    hyc.f1->size[0] = 1;
    hyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hyc.f1, tmp);
    hyc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iyc.f1->size[0] * iyc.f1->size[1]);
    iyc.f1->size[0] = 1;
    iyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iyc.f1, tmp);
    iyc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[361].f1[0],
        &fyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[361].f1[1],
        &gyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[361].f1[2],
        &hyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[361].f1[3],
        &iyc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(jyc.f1->size[0] * jyc.f1->size[1]);
    jyc.f1->size[0] = 1;
    jyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jyc.f1, tmp);
    jyc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kyc.f1->size[0] * kyc.f1->size[1]);
    kyc.f1->size[0] = 1;
    kyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kyc.f1, tmp);
    kyc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lyc.f1->size[0] * lyc.f1->size[1]);
    lyc.f1->size[0] = 1;
    lyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lyc.f1, tmp);
    lyc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(myc.f1->size[0] * myc.f1->size[1]);
    myc.f1->size[0] = 1;
    myc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(myc.f1, tmp);
    myc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[363].f1[0],
        &jyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[363].f1[1],
        &kyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[363].f1[2],
        &lyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[363].f1[3],
        &myc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(nyc.f1->size[0] * nyc.f1->size[1]);
    nyc.f1->size[0] = 1;
    nyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nyc.f1, tmp);
    nyc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oyc.f1->size[0] * oyc.f1->size[1]);
    oyc.f1->size[0] = 1;
    oyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oyc.f1, tmp);
    oyc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pyc.f1->size[0] * pyc.f1->size[1]);
    pyc.f1->size[0] = 1;
    pyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pyc.f1, tmp);
    pyc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qyc.f1->size[0] * qyc.f1->size[1]);
    qyc.f1->size[0] = 1;
    qyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qyc.f1, tmp);
    qyc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[365].f1[0],
        &nyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[365].f1[1],
        &oyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[365].f1[2],
        &pyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[365].f1[3],
        &qyc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ryc.f1->size[0] * ryc.f1->size[1]);
    ryc.f1->size[0] = 1;
    ryc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ryc.f1, tmp);
    ryc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(syc.f1->size[0] * syc.f1->size[1]);
    syc.f1->size[0] = 1;
    syc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(syc.f1, tmp);
    syc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tyc.f1->size[0] * tyc.f1->size[1]);
    tyc.f1->size[0] = 1;
    tyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tyc.f1, tmp);
    tyc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uyc.f1->size[0] * uyc.f1->size[1]);
    uyc.f1->size[0] = 1;
    uyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uyc.f1, tmp);
    uyc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[373].f1[0],
        &ryc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[373].f1[1],
        &syc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[373].f1[2],
        &tyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[373].f1[3],
        &uyc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(vyc.f1->size[0] * vyc.f1->size[1]);
    vyc.f1->size[0] = 1;
    vyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vyc.f1, tmp);
    vyc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wyc.f1->size[0] * wyc.f1->size[1]);
    wyc.f1->size[0] = 1;
    wyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wyc.f1, tmp);
    wyc.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xyc.f1->size[0] * xyc.f1->size[1]);
    xyc.f1->size[0] = 1;
    xyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xyc.f1, tmp);
    xyc.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yyc.f1->size[0] * yyc.f1->size[1]);
    yyc.f1->size[0] = 1;
    yyc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yyc.f1, tmp);
    yyc.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[375].f1[0],
        &vyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[375].f1[1],
        &wyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[375].f1[2],
        &xyc);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[375].f1[3],
        &yyc);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(aad.f1->size[0] * aad.f1->size[1]);
    aad.f1->size[0] = 1;
    aad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aad.f1, tmp);
    aad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bad.f1->size[0] * bad.f1->size[1]);
    bad.f1->size[0] = 1;
    bad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bad.f1, tmp);
    bad.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cad.f1->size[0] * cad.f1->size[1]);
    cad.f1->size[0] = 1;
    cad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cad.f1, tmp);
    cad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dad.f1->size[0] * dad.f1->size[1]);
    dad.f1->size[0] = 1;
    dad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dad.f1, tmp);
    dad.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[383].f1[0],
        &aad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[383].f1[1],
        &bad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[383].f1[2],
        &cad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[383].f1[3],
        &dad);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ead.f1->size[0] * ead.f1->size[1]);
    ead.f1->size[0] = 1;
    ead.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ead.f1, tmp);
    ead.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fad.f1->size[0] * fad.f1->size[1]);
    fad.f1->size[0] = 1;
    fad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fad.f1, tmp);
    fad.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gad.f1->size[0] * gad.f1->size[1]);
    gad.f1->size[0] = 1;
    gad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gad.f1, tmp);
    gad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(had.f1->size[0] * had.f1->size[1]);
    had.f1->size[0] = 1;
    had.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(had.f1, tmp);
    had.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[385].f1[0],
        &ead);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[385].f1[1],
        &fad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[385].f1[2],
        &gad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[385].f1[3],
        &had);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(iad.f1->size[0] * iad.f1->size[1]);
    iad.f1->size[0] = 1;
    iad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iad.f1, tmp);
    iad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jad.f1->size[0] * jad.f1->size[1]);
    jad.f1->size[0] = 1;
    jad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jad.f1, tmp);
    jad.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kad.f1->size[0] * kad.f1->size[1]);
    kad.f1->size[0] = 1;
    kad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kad.f1, tmp);
    kad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lad.f1->size[0] * lad.f1->size[1]);
    lad.f1->size[0] = 1;
    lad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lad.f1, tmp);
    lad.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[393].f1[0],
        &iad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[393].f1[1],
        &jad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[393].f1[2],
        &kad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[393].f1[3],
        &lad);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(mad.f1->size[0] * mad.f1->size[1]);
    mad.f1->size[0] = 1;
    mad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mad.f1, tmp);
    mad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nad.f1->size[0] * nad.f1->size[1]);
    nad.f1->size[0] = 1;
    nad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nad.f1, tmp);
    nad.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(oad.f1->size[0] * oad.f1->size[1]);
    oad.f1->size[0] = 1;
    oad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oad.f1, tmp);
    oad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pad.f1->size[0] * pad.f1->size[1]);
    pad.f1->size[0] = 1;
    pad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pad.f1, tmp);
    pad.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[395].f1[0],
        &mad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[395].f1[1],
        &nad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[395].f1[2],
        &oad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[395].f1[3],
        &pad);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(qad.f1->size[0] * qad.f1->size[1]);
    qad.f1->size[0] = 1;
    qad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qad.f1, tmp);
    qad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rad.f1->size[0] * rad.f1->size[1]);
    rad.f1->size[0] = 1;
    rad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rad.f1, tmp);
    rad.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sad.f1->size[0] * sad.f1->size[1]);
    sad.f1->size[0] = 1;
    sad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sad.f1, tmp);
    sad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tad.f1->size[0] * tad.f1->size[1]);
    tad.f1->size[0] = 1;
    tad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tad.f1, tmp);
    tad.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[403].f1[0],
        &qad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[403].f1[1],
        &rad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[403].f1[2],
        &sad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[403].f1[3],
        &tad);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(uad.f1->size[0] * uad.f1->size[1]);
    uad.f1->size[0] = 1;
    uad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uad.f1, tmp);
    uad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vad.f1->size[0] * vad.f1->size[1]);
    vad.f1->size[0] = 1;
    vad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vad.f1, tmp);
    vad.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wad.f1->size[0] * wad.f1->size[1]);
    wad.f1->size[0] = 1;
    wad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wad.f1, tmp);
    wad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xad.f1->size[0] * xad.f1->size[1]);
    xad.f1->size[0] = 1;
    xad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xad.f1, tmp);
    xad.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[405].f1[0],
        &uad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[405].f1[1],
        &vad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[405].f1[2],
        &wad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[405].f1[3],
        &xad);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(yad.f1->size[0] * yad.f1->size[1]);
    yad.f1->size[0] = 1;
    yad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yad.f1, tmp);
    yad.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(abd.f1->size[0] * abd.f1->size[1]);
    abd.f1->size[0] = 1;
    abd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(abd.f1, tmp);
    abd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bbd.f1->size[0] * bbd.f1->size[1]);
    bbd.f1->size[0] = 1;
    bbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bbd.f1, tmp);
    bbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cbd.f1->size[0] * cbd.f1->size[1]);
    cbd.f1->size[0] = 1;
    cbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cbd.f1, tmp);
    cbd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[412].f1[0],
        &yad);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[412].f1[1],
        &abd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[412].f1[2],
        &bbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[412].f1[3],
        &cbd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(dbd.f1->size[0] * dbd.f1->size[1]);
    dbd.f1->size[0] = 1;
    dbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dbd.f1, tmp);
    dbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ebd.f1->size[0] * ebd.f1->size[1]);
    ebd.f1->size[0] = 1;
    ebd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ebd.f1, tmp);
    ebd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fbd.f1->size[0] * fbd.f1->size[1]);
    fbd.f1->size[0] = 1;
    fbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fbd.f1, tmp);
    fbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gbd.f1->size[0] * gbd.f1->size[1]);
    gbd.f1->size[0] = 1;
    gbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gbd.f1, tmp);
    gbd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[413].f1[0],
        &dbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[413].f1[1],
        &ebd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[413].f1[2],
        &fbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[413].f1[3],
        &gbd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(hbd.f1->size[0] * hbd.f1->size[1]);
    hbd.f1->size[0] = 1;
    hbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hbd.f1, tmp);
    hbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ibd.f1->size[0] * ibd.f1->size[1]);
    ibd.f1->size[0] = 1;
    ibd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ibd.f1, tmp);
    ibd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jbd.f1->size[0] * jbd.f1->size[1]);
    jbd.f1->size[0] = 1;
    jbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jbd.f1, tmp);
    jbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kbd.f1->size[0] * kbd.f1->size[1]);
    kbd.f1->size[0] = 1;
    kbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kbd.f1, tmp);
    kbd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[415].f1[0],
        &hbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[415].f1[1],
        &ibd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[415].f1[2],
        &jbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[415].f1[3],
        &kbd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(lbd.f1->size[0] * lbd.f1->size[1]);
    lbd.f1->size[0] = 1;
    lbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lbd.f1, tmp);
    lbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mbd.f1->size[0] * mbd.f1->size[1]);
    mbd.f1->size[0] = 1;
    mbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mbd.f1, tmp);
    mbd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nbd.f1->size[0] * nbd.f1->size[1]);
    nbd.f1->size[0] = 1;
    nbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nbd.f1, tmp);
    nbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(obd.f1->size[0] * obd.f1->size[1]);
    obd.f1->size[0] = 1;
    obd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(obd.f1, tmp);
    obd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[421].f1[0],
        &lbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[421].f1[1],
        &mbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[421].f1[2],
        &nbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[421].f1[3],
        &obd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(pbd.f1->size[0] * pbd.f1->size[1]);
    pbd.f1->size[0] = 1;
    pbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pbd.f1, tmp);
    pbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qbd.f1->size[0] * qbd.f1->size[1]);
    qbd.f1->size[0] = 1;
    qbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qbd.f1, tmp);
    qbd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rbd.f1->size[0] * rbd.f1->size[1]);
    rbd.f1->size[0] = 1;
    rbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rbd.f1, tmp);
    rbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sbd.f1->size[0] * sbd.f1->size[1]);
    sbd.f1->size[0] = 1;
    sbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sbd.f1, tmp);
    sbd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[423].f1[0],
        &pbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[423].f1[1],
        &qbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[423].f1[2],
        &rbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[423].f1[3],
        &sbd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(tbd.f1->size[0] * tbd.f1->size[1]);
    tbd.f1->size[0] = 1;
    tbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tbd.f1, tmp);
    tbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ubd.f1->size[0] * ubd.f1->size[1]);
    ubd.f1->size[0] = 1;
    ubd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ubd.f1, tmp);
    ubd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vbd.f1->size[0] * vbd.f1->size[1]);
    vbd.f1->size[0] = 1;
    vbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vbd.f1, tmp);
    vbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wbd.f1->size[0] * wbd.f1->size[1]);
    wbd.f1->size[0] = 1;
    wbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wbd.f1, tmp);
    wbd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[425].f1[0],
        &tbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[425].f1[1],
        &ubd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[425].f1[2],
        &vbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[425].f1[3],
        &wbd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(xbd.f1->size[0] * xbd.f1->size[1]);
    xbd.f1->size[0] = 1;
    xbd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xbd.f1, tmp);
    xbd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ybd.f1->size[0] * ybd.f1->size[1]);
    ybd.f1->size[0] = 1;
    ybd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ybd.f1, tmp);
    ybd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(acd.f1->size[0] * acd.f1->size[1]);
    acd.f1->size[0] = 1;
    acd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(acd.f1, tmp);
    acd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bcd.f1->size[0] * bcd.f1->size[1]);
    bcd.f1->size[0] = 1;
    bcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bcd.f1, tmp);
    bcd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[431].f1[0],
        &xbd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[431].f1[1],
        &ybd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[431].f1[2],
        &acd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[431].f1[3],
        &bcd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ccd.f1->size[0] * ccd.f1->size[1]);
    ccd.f1->size[0] = 1;
    ccd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ccd.f1, tmp);
    ccd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dcd.f1->size[0] * dcd.f1->size[1]);
    dcd.f1->size[0] = 1;
    dcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dcd.f1, tmp);
    dcd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ecd.f1->size[0] * ecd.f1->size[1]);
    ecd.f1->size[0] = 1;
    ecd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ecd.f1, tmp);
    ecd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fcd.f1->size[0] * fcd.f1->size[1]);
    fcd.f1->size[0] = 1;
    fcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fcd.f1, tmp);
    fcd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[433].f1[0],
        &ccd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[433].f1[1],
        &dcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[433].f1[2],
        &ecd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[433].f1[3],
        &fcd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(gcd.f1->size[0] * gcd.f1->size[1]);
    gcd.f1->size[0] = 1;
    gcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gcd.f1, tmp);
    gcd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hcd.f1->size[0] * hcd.f1->size[1]);
    hcd.f1->size[0] = 1;
    hcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hcd.f1, tmp);
    hcd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(icd.f1->size[0] * icd.f1->size[1]);
    icd.f1->size[0] = 1;
    icd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(icd.f1, tmp);
    icd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jcd.f1->size[0] * jcd.f1->size[1]);
    jcd.f1->size[0] = 1;
    jcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jcd.f1, tmp);
    jcd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[435].f1[0],
        &gcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[435].f1[1],
        &hcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[435].f1[2],
        &icd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[435].f1[3],
        &jcd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(kcd.f1->size[0] * kcd.f1->size[1]);
    kcd.f1->size[0] = 1;
    kcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kcd.f1, tmp);
    kcd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lcd.f1->size[0] * lcd.f1->size[1]);
    lcd.f1->size[0] = 1;
    lcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lcd.f1, tmp);
    lcd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mcd.f1->size[0] * mcd.f1->size[1]);
    mcd.f1->size[0] = 1;
    mcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mcd.f1, tmp);
    mcd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ncd.f1->size[0] * ncd.f1->size[1]);
    ncd.f1->size[0] = 1;
    ncd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ncd.f1, tmp);
    ncd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[441].f1[0],
        &kcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[441].f1[1],
        &lcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[441].f1[2],
        &mcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[441].f1[3],
        &ncd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ocd.f1->size[0] * ocd.f1->size[1]);
    ocd.f1->size[0] = 1;
    ocd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ocd.f1, tmp);
    ocd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pcd.f1->size[0] * pcd.f1->size[1]);
    pcd.f1->size[0] = 1;
    pcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pcd.f1, tmp);
    pcd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qcd.f1->size[0] * qcd.f1->size[1]);
    qcd.f1->size[0] = 1;
    qcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qcd.f1, tmp);
    qcd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rcd.f1->size[0] * rcd.f1->size[1]);
    rcd.f1->size[0] = 1;
    rcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rcd.f1, tmp);
    rcd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[443].f1[0],
        &ocd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[443].f1[1],
        &pcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[443].f1[2],
        &qcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[443].f1[3],
        &rcd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(scd.f1->size[0] * scd.f1->size[1]);
    scd.f1->size[0] = 1;
    scd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(scd.f1, tmp);
    scd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tcd.f1->size[0] * tcd.f1->size[1]);
    tcd.f1->size[0] = 1;
    tcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tcd.f1, tmp);
    tcd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ucd.f1->size[0] * ucd.f1->size[1]);
    ucd.f1->size[0] = 1;
    ucd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ucd.f1, tmp);
    ucd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vcd.f1->size[0] * vcd.f1->size[1]);
    vcd.f1->size[0] = 1;
    vcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vcd.f1, tmp);
    vcd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[445].f1[0],
        &scd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[445].f1[1],
        &tcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[445].f1[2],
        &ucd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[445].f1[3],
        &vcd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(wcd.f1->size[0] * wcd.f1->size[1]);
    wcd.f1->size[0] = 1;
    wcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wcd.f1, tmp);
    wcd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xcd.f1->size[0] * xcd.f1->size[1]);
    xcd.f1->size[0] = 1;
    xcd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xcd.f1, tmp);
    xcd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ycd.f1->size[0] * ycd.f1->size[1]);
    ycd.f1->size[0] = 1;
    ycd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ycd.f1, tmp);
    ycd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(add.f1->size[0] * add.f1->size[1]);
    add.f1->size[0] = 1;
    add.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(add.f1, tmp);
    add.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[453].f1[0],
        &wcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[453].f1[1],
        &xcd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[453].f1[2],
        &ycd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[453].f1[3],
        &add);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(bdd.f1->size[0] * bdd.f1->size[1]);
    bdd.f1->size[0] = 1;
    bdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bdd.f1, tmp);
    bdd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cdd.f1->size[0] * cdd.f1->size[1]);
    cdd.f1->size[0] = 1;
    cdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cdd.f1, tmp);
    cdd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ddd.f1->size[0] * ddd.f1->size[1]);
    ddd.f1->size[0] = 1;
    ddd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ddd.f1, tmp);
    ddd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(edd.f1->size[0] * edd.f1->size[1]);
    edd.f1->size[0] = 1;
    edd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(edd.f1, tmp);
    edd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[455].f1[0],
        &bdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[455].f1[1],
        &cdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[455].f1[2],
        &ddd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[455].f1[3],
        &edd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(fdd.f1->size[0] * fdd.f1->size[1]);
    fdd.f1->size[0] = 1;
    fdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fdd.f1, tmp);
    fdd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gdd.f1->size[0] * gdd.f1->size[1]);
    gdd.f1->size[0] = 1;
    gdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gdd.f1, tmp);
    gdd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hdd.f1->size[0] * hdd.f1->size[1]);
    hdd.f1->size[0] = 1;
    hdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hdd.f1, tmp);
    hdd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(idd.f1->size[0] * idd.f1->size[1]);
    idd.f1->size[0] = 1;
    idd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(idd.f1, tmp);
    idd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[461].f1[0],
        &fdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[461].f1[1],
        &gdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[461].f1[2],
        &hdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[461].f1[3],
        &idd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(jdd.f1->size[0] * jdd.f1->size[1]);
    jdd.f1->size[0] = 1;
    jdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jdd.f1, tmp);
    jdd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kdd.f1->size[0] * kdd.f1->size[1]);
    kdd.f1->size[0] = 1;
    kdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kdd.f1, tmp);
    kdd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ldd.f1->size[0] * ldd.f1->size[1]);
    ldd.f1->size[0] = 1;
    ldd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ldd.f1, tmp);
    ldd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mdd.f1->size[0] * mdd.f1->size[1]);
    mdd.f1->size[0] = 1;
    mdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mdd.f1, tmp);
    mdd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[463].f1[0],
        &jdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[463].f1[1],
        &kdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[463].f1[2],
        &ldd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[463].f1[3],
        &mdd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ndd.f1->size[0] * ndd.f1->size[1]);
    ndd.f1->size[0] = 1;
    ndd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ndd.f1, tmp);
    ndd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(odd.f1->size[0] * odd.f1->size[1]);
    odd.f1->size[0] = 1;
    odd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(odd.f1, tmp);
    odd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pdd.f1->size[0] * pdd.f1->size[1]);
    pdd.f1->size[0] = 1;
    pdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pdd.f1, tmp);
    pdd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qdd.f1->size[0] * qdd.f1->size[1]);
    qdd.f1->size[0] = 1;
    qdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qdd.f1, tmp);
    qdd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[465].f1[0],
        &ndd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[465].f1[1],
        &odd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[465].f1[2],
        &pdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[465].f1[3],
        &qdd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(rdd.f1->size[0] * rdd.f1->size[1]);
    rdd.f1->size[0] = 1;
    rdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rdd.f1, tmp);
    rdd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sdd.f1->size[0] * sdd.f1->size[1]);
    sdd.f1->size[0] = 1;
    sdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sdd.f1, tmp);
    sdd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tdd.f1->size[0] * tdd.f1->size[1]);
    tdd.f1->size[0] = 1;
    tdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tdd.f1, tmp);
    tdd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(udd.f1->size[0] * udd.f1->size[1]);
    udd.f1->size[0] = 1;
    udd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(udd.f1, tmp);
    udd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[471].f1[0],
        &rdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[471].f1[1],
        &sdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[471].f1[2],
        &tdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[471].f1[3],
        &udd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(vdd.f1->size[0] * vdd.f1->size[1]);
    vdd.f1->size[0] = 1;
    vdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vdd.f1, tmp);
    vdd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wdd.f1->size[0] * wdd.f1->size[1]);
    wdd.f1->size[0] = 1;
    wdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wdd.f1, tmp);
    wdd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xdd.f1->size[0] * xdd.f1->size[1]);
    xdd.f1->size[0] = 1;
    xdd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xdd.f1, tmp);
    xdd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ydd.f1->size[0] * ydd.f1->size[1]);
    ydd.f1->size[0] = 1;
    ydd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ydd.f1, tmp);
    ydd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[473].f1[0],
        &vdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[473].f1[1],
        &wdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[473].f1[2],
        &xdd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[473].f1[3],
        &ydd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(aed.f1->size[0] * aed.f1->size[1]);
    aed.f1->size[0] = 1;
    aed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aed.f1, tmp);
    aed.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bed.f1->size[0] * bed.f1->size[1]);
    bed.f1->size[0] = 1;
    bed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bed.f1, tmp);
    bed.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ced.f1->size[0] * ced.f1->size[1]);
    ced.f1->size[0] = 1;
    ced.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ced.f1, tmp);
    ced.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ded.f1->size[0] * ded.f1->size[1]);
    ded.f1->size[0] = 1;
    ded.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ded.f1, tmp);
    ded.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[475].f1[0],
        &aed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[475].f1[1],
        &bed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[475].f1[2],
        &ced);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[475].f1[3],
        &ded);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(eed.f1->size[0] * eed.f1->size[1]);
    eed.f1->size[0] = 1;
    eed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eed.f1, tmp);
    eed.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fed.f1->size[0] * fed.f1->size[1]);
    fed.f1->size[0] = 1;
    fed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fed.f1, tmp);
    fed.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ged.f1->size[0] * ged.f1->size[1]);
    ged.f1->size[0] = 1;
    ged.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ged.f1, tmp);
    ged.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hed.f1->size[0] * hed.f1->size[1]);
    hed.f1->size[0] = 1;
    hed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hed.f1, tmp);
    hed.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[481].f1[0],
        &eed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[481].f1[1],
        &fed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[481].f1[2],
        &ged);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[481].f1[3],
        &hed);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ied.f1->size[0] * ied.f1->size[1]);
    ied.f1->size[0] = 1;
    ied.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ied.f1, tmp);
    ied.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jed.f1->size[0] * jed.f1->size[1]);
    jed.f1->size[0] = 1;
    jed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jed.f1, tmp);
    jed.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ked.f1->size[0] * ked.f1->size[1]);
    ked.f1->size[0] = 1;
    ked.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ked.f1, tmp);
    ked.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(led.f1->size[0] * led.f1->size[1]);
    led.f1->size[0] = 1;
    led.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(led.f1, tmp);
    led.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[482].f1[0],
        &ied);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[482].f1[1],
        &jed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[482].f1[2],
        &ked);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[482].f1[3],
        &led);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(med.f1->size[0] * med.f1->size[1]);
    med.f1->size[0] = 1;
    med.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(med.f1, tmp);
    med.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ned.f1->size[0] * ned.f1->size[1]);
    ned.f1->size[0] = 1;
    ned.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ned.f1, tmp);
    ned.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(oed.f1->size[0] * oed.f1->size[1]);
    oed.f1->size[0] = 1;
    oed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oed.f1, tmp);
    oed.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ped.f1->size[0] * ped.f1->size[1]);
    ped.f1->size[0] = 1;
    ped.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ped.f1, tmp);
    ped.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[483].f1[0],
        &med);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[483].f1[1],
        &ned);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[483].f1[2],
        &oed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[483].f1[3],
        &ped);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(qed.f1->size[0] * qed.f1->size[1]);
    qed.f1->size[0] = 1;
    qed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qed.f1, tmp);
    qed.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(red.f1->size[0] * red.f1->size[1]);
    red.f1->size[0] = 1;
    red.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(red.f1, tmp);
    red.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sed.f1->size[0] * sed.f1->size[1]);
    sed.f1->size[0] = 1;
    sed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sed.f1, tmp);
    sed.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ted.f1->size[0] * ted.f1->size[1]);
    ted.f1->size[0] = 1;
    ted.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ted.f1, tmp);
    ted.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[485].f1[0],
        &qed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[485].f1[1],
        &red);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[485].f1[2],
        &sed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[485].f1[3],
        &ted);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(ued.f1->size[0] * ued.f1->size[1]);
    ued.f1->size[0] = 1;
    ued.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ued.f1, tmp);
    ued.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ved.f1->size[0] * ved.f1->size[1]);
    ved.f1->size[0] = 1;
    ved.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ved.f1, tmp);
    ved.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wed.f1->size[0] * wed.f1->size[1]);
    wed.f1->size[0] = 1;
    wed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wed.f1, tmp);
    wed.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xed.f1->size[0] * xed.f1->size[1]);
    xed.f1->size[0] = 1;
    xed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xed.f1, tmp);
    xed.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[492].f1[0],
        &ued);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[492].f1[1],
        &ved);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[492].f1[2],
        &wed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[492].f1[3],
        &xed);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(yed.f1->size[0] * yed.f1->size[1]);
    yed.f1->size[0] = 1;
    yed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yed.f1, tmp);
    yed.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(afd.f1->size[0] * afd.f1->size[1]);
    afd.f1->size[0] = 1;
    afd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(afd.f1, tmp);
    afd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bfd.f1->size[0] * bfd.f1->size[1]);
    bfd.f1->size[0] = 1;
    bfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bfd.f1, tmp);
    bfd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cfd.f1->size[0] * cfd.f1->size[1]);
    cfd.f1->size[0] = 1;
    cfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cfd.f1, tmp);
    cfd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[493].f1[0],
        &yed);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[493].f1[1],
        &afd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[493].f1[2],
        &bfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[493].f1[3],
        &cfd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(dfd.f1->size[0] * dfd.f1->size[1]);
    dfd.f1->size[0] = 1;
    dfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dfd.f1, tmp);
    dfd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(efd.f1->size[0] * efd.f1->size[1]);
    efd.f1->size[0] = 1;
    efd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(efd.f1, tmp);
    efd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ffd.f1->size[0] * ffd.f1->size[1]);
    ffd.f1->size[0] = 1;
    ffd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ffd.f1, tmp);
    ffd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gfd.f1->size[0] * gfd.f1->size[1]);
    gfd.f1->size[0] = 1;
    gfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gfd.f1, tmp);
    gfd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[495].f1[0],
        &dfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[495].f1[1],
        &efd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[495].f1[2],
        &ffd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType1List[495].f1[3],
        &gfd);

    // '<S284>:1:69'
    tmp = static_cast<int32_T>(hfd.f1->size[0] * hfd.f1->size[1]);
    hfd.f1->size[0] = 1;
    hfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hfd.f1, tmp);
    hfd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ifd.f1->size[0] * ifd.f1->size[1]);
    ifd.f1->size[0] = 1;
    ifd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ifd.f1, tmp);
    ifd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jfd.f1->size[0] * jfd.f1->size[1]);
    jfd.f1->size[0] = 1;
    jfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jfd.f1, tmp);
    jfd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kfd.f1->size[0] * kfd.f1->size[1]);
    kfd.f1->size[0] = 1;
    kfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kfd.f1, tmp);
    kfd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[39].f1[0], &hfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[39].f1[1], &ifd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[39].f1[2], &jfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[39].f1[3], &kfd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(lfd.f1->size[0] * lfd.f1->size[1]);
    lfd.f1->size[0] = 1;
    lfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lfd.f1, tmp);
    lfd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mfd.f1->size[0] * mfd.f1->size[1]);
    mfd.f1->size[0] = 1;
    mfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mfd.f1, tmp);
    mfd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nfd.f1->size[0] * nfd.f1->size[1]);
    nfd.f1->size[0] = 1;
    nfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nfd.f1, tmp);
    nfd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ofd.f1->size[0] * ofd.f1->size[1]);
    ofd.f1->size[0] = 1;
    ofd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ofd.f1, tmp);
    ofd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[42].f1[0], &lfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[42].f1[1], &mfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[42].f1[2], &nfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[42].f1[3], &ofd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(pfd.f1->size[0] * pfd.f1->size[1]);
    pfd.f1->size[0] = 1;
    pfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pfd.f1, tmp);
    pfd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qfd.f1->size[0] * qfd.f1->size[1]);
    qfd.f1->size[0] = 1;
    qfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qfd.f1, tmp);
    qfd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rfd.f1->size[0] * rfd.f1->size[1]);
    rfd.f1->size[0] = 1;
    rfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rfd.f1, tmp);
    rfd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sfd.f1->size[0] * sfd.f1->size[1]);
    sfd.f1->size[0] = 1;
    sfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sfd.f1, tmp);
    sfd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[53].f1[0], &pfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[53].f1[1], &qfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[53].f1[2], &rfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[53].f1[3], &sfd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(tfd.f1->size[0] * tfd.f1->size[1]);
    tfd.f1->size[0] = 1;
    tfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tfd.f1, tmp);
    tfd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ufd.f1->size[0] * ufd.f1->size[1]);
    ufd.f1->size[0] = 1;
    ufd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ufd.f1, tmp);
    ufd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vfd.f1->size[0] * vfd.f1->size[1]);
    vfd.f1->size[0] = 1;
    vfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vfd.f1, tmp);
    vfd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wfd.f1->size[0] * wfd.f1->size[1]);
    wfd.f1->size[0] = 1;
    wfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wfd.f1, tmp);
    wfd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[79].f1[0], &tfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[79].f1[1], &ufd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[79].f1[2], &vfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[79].f1[3], &wfd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(xfd.f1->size[0] * xfd.f1->size[1]);
    xfd.f1->size[0] = 1;
    xfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xfd.f1, tmp);
    xfd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yfd.f1->size[0] * yfd.f1->size[1]);
    yfd.f1->size[0] = 1;
    yfd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yfd.f1, tmp);
    yfd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(agd.f1->size[0] * agd.f1->size[1]);
    agd.f1->size[0] = 1;
    agd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(agd.f1, tmp);
    agd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bgd.f1->size[0] * bgd.f1->size[1]);
    bgd.f1->size[0] = 1;
    bgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bgd.f1, tmp);
    bgd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[81].f1[0], &xfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[81].f1[1], &yfd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[81].f1[2], &agd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[81].f1[3], &bgd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(cgd.f1->size[0] * cgd.f1->size[1]);
    cgd.f1->size[0] = 1;
    cgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cgd.f1, tmp);
    cgd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dgd.f1->size[0] * dgd.f1->size[1]);
    dgd.f1->size[0] = 1;
    dgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dgd.f1, tmp);
    dgd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(egd.f1->size[0] * egd.f1->size[1]);
    egd.f1->size[0] = 1;
    egd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(egd.f1, tmp);
    egd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fgd.f1->size[0] * fgd.f1->size[1]);
    fgd.f1->size[0] = 1;
    fgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fgd.f1, tmp);
    fgd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[91].f1[0], &cgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[91].f1[1], &dgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[91].f1[2], &egd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[91].f1[3], &fgd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ggd.f1->size[0] * ggd.f1->size[1]);
    ggd.f1->size[0] = 1;
    ggd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ggd.f1, tmp);
    ggd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hgd.f1->size[0] * hgd.f1->size[1]);
    hgd.f1->size[0] = 1;
    hgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hgd.f1, tmp);
    hgd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(igd.f1->size[0] * igd.f1->size[1]);
    igd.f1->size[0] = 1;
    igd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(igd.f1, tmp);
    igd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jgd.f1->size[0] * jgd.f1->size[1]);
    jgd.f1->size[0] = 1;
    jgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jgd.f1, tmp);
    jgd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[94].f1[0], &ggd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[94].f1[1], &hgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[94].f1[2], &igd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[94].f1[3], &jgd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(kgd.f1->size[0] * kgd.f1->size[1]);
    kgd.f1->size[0] = 1;
    kgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kgd.f1, tmp);
    kgd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lgd.f1->size[0] * lgd.f1->size[1]);
    lgd.f1->size[0] = 1;
    lgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lgd.f1, tmp);
    lgd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mgd.f1->size[0] * mgd.f1->size[1]);
    mgd.f1->size[0] = 1;
    mgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mgd.f1, tmp);
    mgd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ngd.f1->size[0] * ngd.f1->size[1]);
    ngd.f1->size[0] = 1;
    ngd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ngd.f1, tmp);
    ngd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[96].f1[0], &kgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[96].f1[1], &lgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[96].f1[2], &mgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[96].f1[3], &ngd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ogd.f1->size[0] * ogd.f1->size[1]);
    ogd.f1->size[0] = 1;
    ogd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ogd.f1, tmp);
    ogd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pgd.f1->size[0] * pgd.f1->size[1]);
    pgd.f1->size[0] = 1;
    pgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pgd.f1, tmp);
    pgd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qgd.f1->size[0] * qgd.f1->size[1]);
    qgd.f1->size[0] = 1;
    qgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qgd.f1, tmp);
    qgd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rgd.f1->size[0] * rgd.f1->size[1]);
    rgd.f1->size[0] = 1;
    rgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rgd.f1, tmp);
    rgd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[97].f1[0], &ogd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[97].f1[1], &pgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[97].f1[2], &qgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[97].f1[3], &rgd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(sgd.f1->size[0] * sgd.f1->size[1]);
    sgd.f1->size[0] = 1;
    sgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sgd.f1, tmp);
    sgd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tgd.f1->size[0] * tgd.f1->size[1]);
    tgd.f1->size[0] = 1;
    tgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tgd.f1, tmp);
    tgd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ugd.f1->size[0] * ugd.f1->size[1]);
    ugd.f1->size[0] = 1;
    ugd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ugd.f1, tmp);
    ugd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vgd.f1->size[0] * vgd.f1->size[1]);
    vgd.f1->size[0] = 1;
    vgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vgd.f1, tmp);
    vgd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[98].f1[0], &sgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[98].f1[1], &tgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[98].f1[2], &ugd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[98].f1[3], &vgd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(wgd.f1->size[0] * wgd.f1->size[1]);
    wgd.f1->size[0] = 1;
    wgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wgd.f1, tmp);
    wgd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xgd.f1->size[0] * xgd.f1->size[1]);
    xgd.f1->size[0] = 1;
    xgd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xgd.f1, tmp);
    xgd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ygd.f1->size[0] * ygd.f1->size[1]);
    ygd.f1->size[0] = 1;
    ygd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ygd.f1, tmp);
    ygd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ahd.f1->size[0] * ahd.f1->size[1]);
    ahd.f1->size[0] = 1;
    ahd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ahd.f1, tmp);
    ahd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[103].f1[0],
        &wgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[103].f1[1],
        &xgd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[103].f1[2],
        &ygd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[103].f1[3],
        &ahd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(bhd.f1->size[0] * bhd.f1->size[1]);
    bhd.f1->size[0] = 1;
    bhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bhd.f1, tmp);
    bhd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(chd.f1->size[0] * chd.f1->size[1]);
    chd.f1->size[0] = 1;
    chd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(chd.f1, tmp);
    chd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dhd.f1->size[0] * dhd.f1->size[1]);
    dhd.f1->size[0] = 1;
    dhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dhd.f1, tmp);
    dhd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ehd.f1->size[0] * ehd.f1->size[1]);
    ehd.f1->size[0] = 1;
    ehd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ehd.f1, tmp);
    ehd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[104].f1[0],
        &bhd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[104].f1[1],
        &chd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[104].f1[2],
        &dhd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[104].f1[3],
        &ehd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(fhd.f1->size[0] * fhd.f1->size[1]);
    fhd.f1->size[0] = 1;
    fhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fhd.f1, tmp);
    fhd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ghd.f1->size[0] * ghd.f1->size[1]);
    ghd.f1->size[0] = 1;
    ghd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ghd.f1, tmp);
    ghd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hhd.f1->size[0] * hhd.f1->size[1]);
    hhd.f1->size[0] = 1;
    hhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hhd.f1, tmp);
    hhd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ihd.f1->size[0] * ihd.f1->size[1]);
    ihd.f1->size[0] = 1;
    ihd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ihd.f1, tmp);
    ihd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[106].f1[0],
        &fhd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[106].f1[1],
        &ghd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[106].f1[2],
        &hhd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[106].f1[3],
        &ihd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(jhd.f1->size[0] * jhd.f1->size[1]);
    jhd.f1->size[0] = 1;
    jhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jhd.f1, tmp);
    jhd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(khd.f1->size[0] * khd.f1->size[1]);
    khd.f1->size[0] = 1;
    khd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(khd.f1, tmp);
    khd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lhd.f1->size[0] * lhd.f1->size[1]);
    lhd.f1->size[0] = 1;
    lhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lhd.f1, tmp);
    lhd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mhd.f1->size[0] * mhd.f1->size[1]);
    mhd.f1->size[0] = 1;
    mhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mhd.f1, tmp);
    mhd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[108].f1[0],
        &jhd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[108].f1[1],
        &khd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[108].f1[2],
        &lhd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[108].f1[3],
        &mhd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(nhd.f1->size[0] * nhd.f1->size[1]);
    nhd.f1->size[0] = 1;
    nhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nhd.f1, tmp);
    nhd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ohd.f1->size[0] * ohd.f1->size[1]);
    ohd.f1->size[0] = 1;
    ohd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ohd.f1, tmp);
    ohd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(phd.f1->size[0] * phd.f1->size[1]);
    phd.f1->size[0] = 1;
    phd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(phd.f1, tmp);
    phd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qhd.f1->size[0] * qhd.f1->size[1]);
    qhd.f1->size[0] = 1;
    qhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qhd.f1, tmp);
    qhd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[113].f1[0],
        &nhd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[113].f1[1],
        &ohd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[113].f1[2],
        &phd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[113].f1[3],
        &qhd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(rhd.f1->size[0] * rhd.f1->size[1]);
    rhd.f1->size[0] = 1;
    rhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rhd.f1, tmp);
    rhd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(shd.f1->size[0] * shd.f1->size[1]);
    shd.f1->size[0] = 1;
    shd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(shd.f1, tmp);
    shd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(thd.f1->size[0] * thd.f1->size[1]);
    thd.f1->size[0] = 1;
    thd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(thd.f1, tmp);
    thd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uhd.f1->size[0] * uhd.f1->size[1]);
    uhd.f1->size[0] = 1;
    uhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uhd.f1, tmp);
    uhd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[114].f1[0],
        &rhd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[114].f1[1],
        &shd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[114].f1[2],
        &thd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[114].f1[3],
        &uhd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(vhd.f1->size[0] * vhd.f1->size[1]);
    vhd.f1->size[0] = 1;
    vhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vhd.f1, tmp);
    vhd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(whd.f1->size[0] * whd.f1->size[1]);
    whd.f1->size[0] = 1;
    whd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(whd.f1, tmp);
    whd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xhd.f1->size[0] * xhd.f1->size[1]);
    xhd.f1->size[0] = 1;
    xhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xhd.f1, tmp);
    xhd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yhd.f1->size[0] * yhd.f1->size[1]);
    yhd.f1->size[0] = 1;
    yhd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yhd.f1, tmp);
    yhd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[118].f1[0],
        &vhd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[118].f1[1],
        &whd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[118].f1[2],
        &xhd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[118].f1[3],
        &yhd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(aid.f1->size[0] * aid.f1->size[1]);
    aid.f1->size[0] = 1;
    aid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aid.f1, tmp);
    aid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bid.f1->size[0] * bid.f1->size[1]);
    bid.f1->size[0] = 1;
    bid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bid.f1, tmp);
    bid.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cid.f1->size[0] * cid.f1->size[1]);
    cid.f1->size[0] = 1;
    cid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cid.f1, tmp);
    cid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(did.f1->size[0] * did.f1->size[1]);
    did.f1->size[0] = 1;
    did.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(did.f1, tmp);
    did.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[122].f1[0],
        &aid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[122].f1[1],
        &bid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[122].f1[2],
        &cid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[122].f1[3],
        &did);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(eid.f1->size[0] * eid.f1->size[1]);
    eid.f1->size[0] = 1;
    eid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eid.f1, tmp);
    eid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fid.f1->size[0] * fid.f1->size[1]);
    fid.f1->size[0] = 1;
    fid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fid.f1, tmp);
    fid.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gid.f1->size[0] * gid.f1->size[1]);
    gid.f1->size[0] = 1;
    gid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gid.f1, tmp);
    gid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hid.f1->size[0] * hid.f1->size[1]);
    hid.f1->size[0] = 1;
    hid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hid.f1, tmp);
    hid.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[123].f1[0],
        &eid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[123].f1[1],
        &fid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[123].f1[2],
        &gid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[123].f1[3],
        &hid);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(iid.f1->size[0] * iid.f1->size[1]);
    iid.f1->size[0] = 1;
    iid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iid.f1, tmp);
    iid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jid.f1->size[0] * jid.f1->size[1]);
    jid.f1->size[0] = 1;
    jid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jid.f1, tmp);
    jid.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kid.f1->size[0] * kid.f1->size[1]);
    kid.f1->size[0] = 1;
    kid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kid.f1, tmp);
    kid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lid.f1->size[0] * lid.f1->size[1]);
    lid.f1->size[0] = 1;
    lid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lid.f1, tmp);
    lid.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[125].f1[0],
        &iid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[125].f1[1],
        &jid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[125].f1[2],
        &kid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[125].f1[3],
        &lid);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(mid.f1->size[0] * mid.f1->size[1]);
    mid.f1->size[0] = 1;
    mid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mid.f1, tmp);
    mid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nid.f1->size[0] * nid.f1->size[1]);
    nid.f1->size[0] = 1;
    nid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nid.f1, tmp);
    nid.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(oid.f1->size[0] * oid.f1->size[1]);
    oid.f1->size[0] = 1;
    oid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oid.f1, tmp);
    oid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pid.f1->size[0] * pid.f1->size[1]);
    pid.f1->size[0] = 1;
    pid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pid.f1, tmp);
    pid.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[134].f1[0],
        &mid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[134].f1[1],
        &nid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[134].f1[2],
        &oid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[134].f1[3],
        &pid);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(qid.f1->size[0] * qid.f1->size[1]);
    qid.f1->size[0] = 1;
    qid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qid.f1, tmp);
    qid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rid.f1->size[0] * rid.f1->size[1]);
    rid.f1->size[0] = 1;
    rid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rid.f1, tmp);
    rid.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sid.f1->size[0] * sid.f1->size[1]);
    sid.f1->size[0] = 1;
    sid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sid.f1, tmp);
    sid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tid_0.f1->size[0] * tid_0.f1->size[1]);
    tid_0.f1->size[0] = 1;
    tid_0.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tid_0.f1, tmp);
    tid_0.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[141].f1[0],
        &qid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[141].f1[1],
        &rid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[141].f1[2],
        &sid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[141].f1[3],
        &tid_0);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(uid.f1->size[0] * uid.f1->size[1]);
    uid.f1->size[0] = 1;
    uid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uid.f1, tmp);
    uid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vid.f1->size[0] * vid.f1->size[1]);
    vid.f1->size[0] = 1;
    vid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vid.f1, tmp);
    vid.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wid.f1->size[0] * wid.f1->size[1]);
    wid.f1->size[0] = 1;
    wid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wid.f1, tmp);
    wid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xid.f1->size[0] * xid.f1->size[1]);
    xid.f1->size[0] = 1;
    xid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xid.f1, tmp);
    xid.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[144].f1[0],
        &uid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[144].f1[1],
        &vid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[144].f1[2],
        &wid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[144].f1[3],
        &xid);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(yid.f1->size[0] * yid.f1->size[1]);
    yid.f1->size[0] = 1;
    yid.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yid.f1, tmp);
    yid.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ajd.f1->size[0] * ajd.f1->size[1]);
    ajd.f1->size[0] = 1;
    ajd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ajd.f1, tmp);
    ajd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bjd.f1->size[0] * bjd.f1->size[1]);
    bjd.f1->size[0] = 1;
    bjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bjd.f1, tmp);
    bjd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cjd.f1->size[0] * cjd.f1->size[1]);
    cjd.f1->size[0] = 1;
    cjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cjd.f1, tmp);
    cjd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[153].f1[0],
        &yid);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[153].f1[1],
        &ajd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[153].f1[2],
        &bjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[153].f1[3],
        &cjd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(djd.f1->size[0] * djd.f1->size[1]);
    djd.f1->size[0] = 1;
    djd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(djd.f1, tmp);
    djd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ejd.f1->size[0] * ejd.f1->size[1]);
    ejd.f1->size[0] = 1;
    ejd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ejd.f1, tmp);
    ejd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fjd.f1->size[0] * fjd.f1->size[1]);
    fjd.f1->size[0] = 1;
    fjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fjd.f1, tmp);
    fjd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gjd.f1->size[0] * gjd.f1->size[1]);
    gjd.f1->size[0] = 1;
    gjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gjd.f1, tmp);
    gjd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[154].f1[0],
        &djd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[154].f1[1],
        &ejd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[154].f1[2],
        &fjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[154].f1[3],
        &gjd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(hjd.f1->size[0] * hjd.f1->size[1]);
    hjd.f1->size[0] = 1;
    hjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hjd.f1, tmp);
    hjd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ijd.f1->size[0] * ijd.f1->size[1]);
    ijd.f1->size[0] = 1;
    ijd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ijd.f1, tmp);
    ijd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jjd.f1->size[0] * jjd.f1->size[1]);
    jjd.f1->size[0] = 1;
    jjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jjd.f1, tmp);
    jjd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kjd.f1->size[0] * kjd.f1->size[1]);
    kjd.f1->size[0] = 1;
    kjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kjd.f1, tmp);
    kjd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[155].f1[0],
        &hjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[155].f1[1],
        &ijd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[155].f1[2],
        &jjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[155].f1[3],
        &kjd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ljd.f1->size[0] * ljd.f1->size[1]);
    ljd.f1->size[0] = 1;
    ljd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ljd.f1, tmp);
    ljd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mjd.f1->size[0] * mjd.f1->size[1]);
    mjd.f1->size[0] = 1;
    mjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mjd.f1, tmp);
    mjd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(njd.f1->size[0] * njd.f1->size[1]);
    njd.f1->size[0] = 1;
    njd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(njd.f1, tmp);
    njd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ojd.f1->size[0] * ojd.f1->size[1]);
    ojd.f1->size[0] = 1;
    ojd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ojd.f1, tmp);
    ojd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[164].f1[0],
        &ljd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[164].f1[1],
        &mjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[164].f1[2],
        &njd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[164].f1[3],
        &ojd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(pjd.f1->size[0] * pjd.f1->size[1]);
    pjd.f1->size[0] = 1;
    pjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pjd.f1, tmp);
    pjd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qjd.f1->size[0] * qjd.f1->size[1]);
    qjd.f1->size[0] = 1;
    qjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qjd.f1, tmp);
    qjd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rjd.f1->size[0] * rjd.f1->size[1]);
    rjd.f1->size[0] = 1;
    rjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rjd.f1, tmp);
    rjd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sjd.f1->size[0] * sjd.f1->size[1]);
    sjd.f1->size[0] = 1;
    sjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sjd.f1, tmp);
    sjd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[172].f1[0],
        &pjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[172].f1[1],
        &qjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[172].f1[2],
        &rjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[172].f1[3],
        &sjd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(tjd.f1->size[0] * tjd.f1->size[1]);
    tjd.f1->size[0] = 1;
    tjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tjd.f1, tmp);
    tjd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ujd.f1->size[0] * ujd.f1->size[1]);
    ujd.f1->size[0] = 1;
    ujd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ujd.f1, tmp);
    ujd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vjd.f1->size[0] * vjd.f1->size[1]);
    vjd.f1->size[0] = 1;
    vjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vjd.f1, tmp);
    vjd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wjd.f1->size[0] * wjd.f1->size[1]);
    wjd.f1->size[0] = 1;
    wjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wjd.f1, tmp);
    wjd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[173].f1[0],
        &tjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[173].f1[1],
        &ujd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[173].f1[2],
        &vjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[173].f1[3],
        &wjd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(xjd.f1->size[0] * xjd.f1->size[1]);
    xjd.f1->size[0] = 1;
    xjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xjd.f1, tmp);
    xjd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yjd.f1->size[0] * yjd.f1->size[1]);
    yjd.f1->size[0] = 1;
    yjd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yjd.f1, tmp);
    yjd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(akd.f1->size[0] * akd.f1->size[1]);
    akd.f1->size[0] = 1;
    akd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(akd.f1, tmp);
    akd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bkd.f1->size[0] * bkd.f1->size[1]);
    bkd.f1->size[0] = 1;
    bkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bkd.f1, tmp);
    bkd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[184].f1[0],
        &xjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[184].f1[1],
        &yjd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[184].f1[2],
        &akd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[184].f1[3],
        &bkd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ckd.f1->size[0] * ckd.f1->size[1]);
    ckd.f1->size[0] = 1;
    ckd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ckd.f1, tmp);
    ckd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dkd.f1->size[0] * dkd.f1->size[1]);
    dkd.f1->size[0] = 1;
    dkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dkd.f1, tmp);
    dkd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ekd.f1->size[0] * ekd.f1->size[1]);
    ekd.f1->size[0] = 1;
    ekd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ekd.f1, tmp);
    ekd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fkd.f1->size[0] * fkd.f1->size[1]);
    fkd.f1->size[0] = 1;
    fkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fkd.f1, tmp);
    fkd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[191].f1[0],
        &ckd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[191].f1[1],
        &dkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[191].f1[2],
        &ekd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[191].f1[3],
        &fkd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(gkd.f1->size[0] * gkd.f1->size[1]);
    gkd.f1->size[0] = 1;
    gkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gkd.f1, tmp);
    gkd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hkd.f1->size[0] * hkd.f1->size[1]);
    hkd.f1->size[0] = 1;
    hkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hkd.f1, tmp);
    hkd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ikd.f1->size[0] * ikd.f1->size[1]);
    ikd.f1->size[0] = 1;
    ikd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ikd.f1, tmp);
    ikd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jkd.f1->size[0] * jkd.f1->size[1]);
    jkd.f1->size[0] = 1;
    jkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jkd.f1, tmp);
    jkd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[192].f1[0],
        &gkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[192].f1[1],
        &hkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[192].f1[2],
        &ikd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[192].f1[3],
        &jkd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(kkd.f1->size[0] * kkd.f1->size[1]);
    kkd.f1->size[0] = 1;
    kkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kkd.f1, tmp);
    kkd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lkd.f1->size[0] * lkd.f1->size[1]);
    lkd.f1->size[0] = 1;
    lkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lkd.f1, tmp);
    lkd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mkd.f1->size[0] * mkd.f1->size[1]);
    mkd.f1->size[0] = 1;
    mkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mkd.f1, tmp);
    mkd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nkd.f1->size[0] * nkd.f1->size[1]);
    nkd.f1->size[0] = 1;
    nkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nkd.f1, tmp);
    nkd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[200].f1[0],
        &kkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[200].f1[1],
        &lkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[200].f1[2],
        &mkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[200].f1[3],
        &nkd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(okd.f1->size[0] * okd.f1->size[1]);
    okd.f1->size[0] = 1;
    okd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(okd.f1, tmp);
    okd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pkd.f1->size[0] * pkd.f1->size[1]);
    pkd.f1->size[0] = 1;
    pkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pkd.f1, tmp);
    pkd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qkd.f1->size[0] * qkd.f1->size[1]);
    qkd.f1->size[0] = 1;
    qkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qkd.f1, tmp);
    qkd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rkd.f1->size[0] * rkd.f1->size[1]);
    rkd.f1->size[0] = 1;
    rkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rkd.f1, tmp);
    rkd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[201].f1[0],
        &okd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[201].f1[1],
        &pkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[201].f1[2],
        &qkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[201].f1[3],
        &rkd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(skd.f1->size[0] * skd.f1->size[1]);
    skd.f1->size[0] = 1;
    skd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(skd.f1, tmp);
    skd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tkd.f1->size[0] * tkd.f1->size[1]);
    tkd.f1->size[0] = 1;
    tkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tkd.f1, tmp);
    tkd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ukd.f1->size[0] * ukd.f1->size[1]);
    ukd.f1->size[0] = 1;
    ukd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ukd.f1, tmp);
    ukd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vkd.f1->size[0] * vkd.f1->size[1]);
    vkd.f1->size[0] = 1;
    vkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vkd.f1, tmp);
    vkd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[202].f1[0],
        &skd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[202].f1[1],
        &tkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[202].f1[2],
        &ukd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[202].f1[3],
        &vkd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(wkd.f1->size[0] * wkd.f1->size[1]);
    wkd.f1->size[0] = 1;
    wkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wkd.f1, tmp);
    wkd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xkd.f1->size[0] * xkd.f1->size[1]);
    xkd.f1->size[0] = 1;
    xkd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xkd.f1, tmp);
    xkd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ykd.f1->size[0] * ykd.f1->size[1]);
    ykd.f1->size[0] = 1;
    ykd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ykd.f1, tmp);
    ykd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ald.f1->size[0] * ald.f1->size[1]);
    ald.f1->size[0] = 1;
    ald.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ald.f1, tmp);
    ald.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[203].f1[0],
        &wkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[203].f1[1],
        &xkd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[203].f1[2],
        &ykd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[203].f1[3],
        &ald);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(bld.f1->size[0] * bld.f1->size[1]);
    bld.f1->size[0] = 1;
    bld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bld.f1, tmp);
    bld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cld.f1->size[0] * cld.f1->size[1]);
    cld.f1->size[0] = 1;
    cld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cld.f1, tmp);
    cld.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dld.f1->size[0] * dld.f1->size[1]);
    dld.f1->size[0] = 1;
    dld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dld.f1, tmp);
    dld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(eld.f1->size[0] * eld.f1->size[1]);
    eld.f1->size[0] = 1;
    eld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eld.f1, tmp);
    eld.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[212].f1[0],
        &bld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[212].f1[1],
        &cld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[212].f1[2],
        &dld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[212].f1[3],
        &eld);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(fld.f1->size[0] * fld.f1->size[1]);
    fld.f1->size[0] = 1;
    fld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fld.f1, tmp);
    fld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gld.f1->size[0] * gld.f1->size[1]);
    gld.f1->size[0] = 1;
    gld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gld.f1, tmp);
    gld.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hld.f1->size[0] * hld.f1->size[1]);
    hld.f1->size[0] = 1;
    hld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hld.f1, tmp);
    hld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ild.f1->size[0] * ild.f1->size[1]);
    ild.f1->size[0] = 1;
    ild.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ild.f1, tmp);
    ild.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[213].f1[0],
        &fld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[213].f1[1],
        &gld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[213].f1[2],
        &hld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[213].f1[3],
        &ild);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(jld.f1->size[0] * jld.f1->size[1]);
    jld.f1->size[0] = 1;
    jld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jld.f1, tmp);
    jld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kld.f1->size[0] * kld.f1->size[1]);
    kld.f1->size[0] = 1;
    kld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kld.f1, tmp);
    kld.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lld.f1->size[0] * lld.f1->size[1]);
    lld.f1->size[0] = 1;
    lld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lld.f1, tmp);
    lld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mld.f1->size[0] * mld.f1->size[1]);
    mld.f1->size[0] = 1;
    mld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mld.f1, tmp);
    mld.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[218].f1[0],
        &jld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[218].f1[1],
        &kld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[218].f1[2],
        &lld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[218].f1[3],
        &mld);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(nld.f1->size[0] * nld.f1->size[1]);
    nld.f1->size[0] = 1;
    nld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nld.f1, tmp);
    nld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(old.f1->size[0] * old.f1->size[1]);
    old.f1->size[0] = 1;
    old.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(old.f1, tmp);
    old.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pld.f1->size[0] * pld.f1->size[1]);
    pld.f1->size[0] = 1;
    pld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pld.f1, tmp);
    pld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qld.f1->size[0] * qld.f1->size[1]);
    qld.f1->size[0] = 1;
    qld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qld.f1, tmp);
    qld.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[221].f1[0],
        &nld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[221].f1[1],
        &old);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[221].f1[2],
        &pld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[221].f1[3],
        &qld);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(rld.f1->size[0] * rld.f1->size[1]);
    rld.f1->size[0] = 1;
    rld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rld.f1, tmp);
    rld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sld.f1->size[0] * sld.f1->size[1]);
    sld.f1->size[0] = 1;
    sld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sld.f1, tmp);
    sld.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tld.f1->size[0] * tld.f1->size[1]);
    tld.f1->size[0] = 1;
    tld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tld.f1, tmp);
    tld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uld.f1->size[0] * uld.f1->size[1]);
    uld.f1->size[0] = 1;
    uld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uld.f1, tmp);
    uld.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[224].f1[0],
        &rld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[224].f1[1],
        &sld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[224].f1[2],
        &tld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[224].f1[3],
        &uld);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(vld.f1->size[0] * vld.f1->size[1]);
    vld.f1->size[0] = 1;
    vld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vld.f1, tmp);
    vld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wld.f1->size[0] * wld.f1->size[1]);
    wld.f1->size[0] = 1;
    wld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wld.f1, tmp);
    wld.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xld.f1->size[0] * xld.f1->size[1]);
    xld.f1->size[0] = 1;
    xld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xld.f1, tmp);
    xld.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yld.f1->size[0] * yld.f1->size[1]);
    yld.f1->size[0] = 1;
    yld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yld.f1, tmp);
    yld.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[227].f1[0],
        &vld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[227].f1[1],
        &wld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[227].f1[2],
        &xld);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[227].f1[3],
        &yld);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(amd.f1->size[0] * amd.f1->size[1]);
    amd.f1->size[0] = 1;
    amd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(amd.f1, tmp);
    amd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bmd.f1->size[0] * bmd.f1->size[1]);
    bmd.f1->size[0] = 1;
    bmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bmd.f1, tmp);
    bmd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cmd.f1->size[0] * cmd.f1->size[1]);
    cmd.f1->size[0] = 1;
    cmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cmd.f1, tmp);
    cmd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dmd.f1->size[0] * dmd.f1->size[1]);
    dmd.f1->size[0] = 1;
    dmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dmd.f1, tmp);
    dmd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[230].f1[0],
        &amd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[230].f1[1],
        &bmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[230].f1[2],
        &cmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[230].f1[3],
        &dmd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(emd.f1->size[0] * emd.f1->size[1]);
    emd.f1->size[0] = 1;
    emd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(emd.f1, tmp);
    emd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fmd.f1->size[0] * fmd.f1->size[1]);
    fmd.f1->size[0] = 1;
    fmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fmd.f1, tmp);
    fmd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gmd.f1->size[0] * gmd.f1->size[1]);
    gmd.f1->size[0] = 1;
    gmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gmd.f1, tmp);
    gmd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hmd.f1->size[0] * hmd.f1->size[1]);
    hmd.f1->size[0] = 1;
    hmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hmd.f1, tmp);
    hmd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[232].f1[0],
        &emd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[232].f1[1],
        &fmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[232].f1[2],
        &gmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[232].f1[3],
        &hmd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(imd.f1->size[0] * imd.f1->size[1]);
    imd.f1->size[0] = 1;
    imd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(imd.f1, tmp);
    imd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jmd.f1->size[0] * jmd.f1->size[1]);
    jmd.f1->size[0] = 1;
    jmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jmd.f1, tmp);
    jmd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kmd.f1->size[0] * kmd.f1->size[1]);
    kmd.f1->size[0] = 1;
    kmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kmd.f1, tmp);
    kmd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lmd.f1->size[0] * lmd.f1->size[1]);
    lmd.f1->size[0] = 1;
    lmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lmd.f1, tmp);
    lmd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[233].f1[0],
        &imd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[233].f1[1],
        &jmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[233].f1[2],
        &kmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[233].f1[3],
        &lmd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(mmd.f1->size[0] * mmd.f1->size[1]);
    mmd.f1->size[0] = 1;
    mmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mmd.f1, tmp);
    mmd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nmd.f1->size[0] * nmd.f1->size[1]);
    nmd.f1->size[0] = 1;
    nmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nmd.f1, tmp);
    nmd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(omd.f1->size[0] * omd.f1->size[1]);
    omd.f1->size[0] = 1;
    omd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(omd.f1, tmp);
    omd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pmd.f1->size[0] * pmd.f1->size[1]);
    pmd.f1->size[0] = 1;
    pmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pmd.f1, tmp);
    pmd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[238].f1[0],
        &mmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[238].f1[1],
        &nmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[238].f1[2],
        &omd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[238].f1[3],
        &pmd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(qmd.f1->size[0] * qmd.f1->size[1]);
    qmd.f1->size[0] = 1;
    qmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qmd.f1, tmp);
    qmd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rmd.f1->size[0] * rmd.f1->size[1]);
    rmd.f1->size[0] = 1;
    rmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rmd.f1, tmp);
    rmd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(smd.f1->size[0] * smd.f1->size[1]);
    smd.f1->size[0] = 1;
    smd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(smd.f1, tmp);
    smd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tmd.f1->size[0] * tmd.f1->size[1]);
    tmd.f1->size[0] = 1;
    tmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tmd.f1, tmp);
    tmd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[240].f1[0],
        &qmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[240].f1[1],
        &rmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[240].f1[2],
        &smd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[240].f1[3],
        &tmd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(umd.f1->size[0] * umd.f1->size[1]);
    umd.f1->size[0] = 1;
    umd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(umd.f1, tmp);
    umd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vmd.f1->size[0] * vmd.f1->size[1]);
    vmd.f1->size[0] = 1;
    vmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vmd.f1, tmp);
    vmd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wmd.f1->size[0] * wmd.f1->size[1]);
    wmd.f1->size[0] = 1;
    wmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wmd.f1, tmp);
    wmd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xmd.f1->size[0] * xmd.f1->size[1]);
    xmd.f1->size[0] = 1;
    xmd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xmd.f1, tmp);
    xmd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[241].f1[0],
        &umd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[241].f1[1],
        &vmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[241].f1[2],
        &wmd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[241].f1[3],
        &xmd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ymd.f1->size[0] * ymd.f1->size[1]);
    ymd.f1->size[0] = 1;
    ymd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ymd.f1, tmp);
    ymd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bnd.f1->size[0] * bnd.f1->size[1]);
    bnd.f1->size[0] = 1;
    bnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bnd.f1, tmp);
    bnd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cnd.f1->size[0] * cnd.f1->size[1]);
    cnd.f1->size[0] = 1;
    cnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cnd.f1, tmp);
    cnd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dnd.f1->size[0] * dnd.f1->size[1]);
    dnd.f1->size[0] = 1;
    dnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dnd.f1, tmp);
    dnd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[242].f1[0],
        &ymd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[242].f1[1],
        &bnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[242].f1[2],
        &cnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[242].f1[3],
        &dnd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(end.f1->size[0] * end.f1->size[1]);
    end.f1->size[0] = 1;
    end.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(end.f1, tmp);
    end.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fnd.f1->size[0] * fnd.f1->size[1]);
    fnd.f1->size[0] = 1;
    fnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fnd.f1, tmp);
    fnd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gnd.f1->size[0] * gnd.f1->size[1]);
    gnd.f1->size[0] = 1;
    gnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gnd.f1, tmp);
    gnd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hnd.f1->size[0] * hnd.f1->size[1]);
    hnd.f1->size[0] = 1;
    hnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hnd.f1, tmp);
    hnd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[250].f1[0],
        &end);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[250].f1[1],
        &fnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[250].f1[2],
        &gnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[250].f1[3],
        &hnd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ind.f1->size[0] * ind.f1->size[1]);
    ind.f1->size[0] = 1;
    ind.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ind.f1, tmp);
    ind.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jnd.f1->size[0] * jnd.f1->size[1]);
    jnd.f1->size[0] = 1;
    jnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jnd.f1, tmp);
    jnd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(knd.f1->size[0] * knd.f1->size[1]);
    knd.f1->size[0] = 1;
    knd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(knd.f1, tmp);
    knd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lnd.f1->size[0] * lnd.f1->size[1]);
    lnd.f1->size[0] = 1;
    lnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lnd.f1, tmp);
    lnd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[252].f1[0],
        &ind);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[252].f1[1],
        &jnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[252].f1[2],
        &knd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[252].f1[3],
        &lnd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(mnd.f1->size[0] * mnd.f1->size[1]);
    mnd.f1->size[0] = 1;
    mnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mnd.f1, tmp);
    mnd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nnd.f1->size[0] * nnd.f1->size[1]);
    nnd.f1->size[0] = 1;
    nnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nnd.f1, tmp);
    nnd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ond.f1->size[0] * ond.f1->size[1]);
    ond.f1->size[0] = 1;
    ond.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ond.f1, tmp);
    ond.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pnd.f1->size[0] * pnd.f1->size[1]);
    pnd.f1->size[0] = 1;
    pnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pnd.f1, tmp);
    pnd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[253].f1[0],
        &mnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[253].f1[1],
        &nnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[253].f1[2],
        &ond);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[253].f1[3],
        &pnd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(qnd.f1->size[0] * qnd.f1->size[1]);
    qnd.f1->size[0] = 1;
    qnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qnd.f1, tmp);
    qnd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rnd.f1->size[0] * rnd.f1->size[1]);
    rnd.f1->size[0] = 1;
    rnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rnd.f1, tmp);
    rnd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(snd.f1->size[0] * snd.f1->size[1]);
    snd.f1->size[0] = 1;
    snd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(snd.f1, tmp);
    snd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tnd.f1->size[0] * tnd.f1->size[1]);
    tnd.f1->size[0] = 1;
    tnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tnd.f1, tmp);
    tnd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[254].f1[0],
        &qnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[254].f1[1],
        &rnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[254].f1[2],
        &snd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[254].f1[3],
        &tnd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(und.f1->size[0] * und.f1->size[1]);
    und.f1->size[0] = 1;
    und.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(und.f1, tmp);
    und.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vnd.f1->size[0] * vnd.f1->size[1]);
    vnd.f1->size[0] = 1;
    vnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vnd.f1, tmp);
    vnd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wnd.f1->size[0] * wnd.f1->size[1]);
    wnd.f1->size[0] = 1;
    wnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wnd.f1, tmp);
    wnd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xnd.f1->size[0] * xnd.f1->size[1]);
    xnd.f1->size[0] = 1;
    xnd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xnd.f1, tmp);
    xnd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[257].f1[0],
        &und);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[257].f1[1],
        &vnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[257].f1[2],
        &wnd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[257].f1[3],
        &xnd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ynd.f1->size[0] * ynd.f1->size[1]);
    ynd.f1->size[0] = 1;
    ynd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ynd.f1, tmp);
    ynd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(aod.f1->size[0] * aod.f1->size[1]);
    aod.f1->size[0] = 1;
    aod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aod.f1, tmp);
    aod.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bod.f1->size[0] * bod.f1->size[1]);
    bod.f1->size[0] = 1;
    bod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bod.f1, tmp);
    bod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cod.f1->size[0] * cod.f1->size[1]);
    cod.f1->size[0] = 1;
    cod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cod.f1, tmp);
    cod.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[258].f1[0],
        &ynd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[258].f1[1],
        &aod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[258].f1[2],
        &bod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[258].f1[3],
        &cod);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(dod.f1->size[0] * dod.f1->size[1]);
    dod.f1->size[0] = 1;
    dod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dod.f1, tmp);
    dod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(eod.f1->size[0] * eod.f1->size[1]);
    eod.f1->size[0] = 1;
    eod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eod.f1, tmp);
    eod.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fod.f1->size[0] * fod.f1->size[1]);
    fod.f1->size[0] = 1;
    fod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fod.f1, tmp);
    fod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(god.f1->size[0] * god.f1->size[1]);
    god.f1->size[0] = 1;
    god.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(god.f1, tmp);
    god.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[261].f1[0],
        &dod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[261].f1[1],
        &eod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[261].f1[2],
        &fod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[261].f1[3],
        &god);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(hod.f1->size[0] * hod.f1->size[1]);
    hod.f1->size[0] = 1;
    hod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hod.f1, tmp);
    hod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(iod.f1->size[0] * iod.f1->size[1]);
    iod.f1->size[0] = 1;
    iod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iod.f1, tmp);
    iod.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jod.f1->size[0] * jod.f1->size[1]);
    jod.f1->size[0] = 1;
    jod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jod.f1, tmp);
    jod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kod.f1->size[0] * kod.f1->size[1]);
    kod.f1->size[0] = 1;
    kod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kod.f1, tmp);
    kod.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[272].f1[0],
        &hod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[272].f1[1],
        &iod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[272].f1[2],
        &jod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[272].f1[3],
        &kod);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(lod.f1->size[0] * lod.f1->size[1]);
    lod.f1->size[0] = 1;
    lod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lod.f1, tmp);
    lod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nod.f1->size[0] * nod.f1->size[1]);
    nod.f1->size[0] = 1;
    nod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nod.f1, tmp);
    nod.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ood.f1->size[0] * ood.f1->size[1]);
    ood.f1->size[0] = 1;
    ood.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ood.f1, tmp);
    ood.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pod.f1->size[0] * pod.f1->size[1]);
    pod.f1->size[0] = 1;
    pod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pod.f1, tmp);
    pod.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[278].f1[0],
        &lod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[278].f1[1],
        &nod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[278].f1[2],
        &ood);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[278].f1[3],
        &pod);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(qod.f1->size[0] * qod.f1->size[1]);
    qod.f1->size[0] = 1;
    qod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qod.f1, tmp);
    qod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rod.f1->size[0] * rod.f1->size[1]);
    rod.f1->size[0] = 1;
    rod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rod.f1, tmp);
    rod.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sod.f1->size[0] * sod.f1->size[1]);
    sod.f1->size[0] = 1;
    sod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sod.f1, tmp);
    sod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tod.f1->size[0] * tod.f1->size[1]);
    tod.f1->size[0] = 1;
    tod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tod.f1, tmp);
    tod.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[280].f1[0],
        &qod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[280].f1[1],
        &rod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[280].f1[2],
        &sod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[280].f1[3],
        &tod);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(uod.f1->size[0] * uod.f1->size[1]);
    uod.f1->size[0] = 1;
    uod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uod.f1, tmp);
    uod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vod.f1->size[0] * vod.f1->size[1]);
    vod.f1->size[0] = 1;
    vod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vod.f1, tmp);
    vod.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wod.f1->size[0] * wod.f1->size[1]);
    wod.f1->size[0] = 1;
    wod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wod.f1, tmp);
    wod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xod.f1->size[0] * xod.f1->size[1]);
    xod.f1->size[0] = 1;
    xod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xod.f1, tmp);
    xod.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[282].f1[0],
        &uod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[282].f1[1],
        &vod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[282].f1[2],
        &wod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[282].f1[3],
        &xod);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(yod.f1->size[0] * yod.f1->size[1]);
    yod.f1->size[0] = 1;
    yod.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yod.f1, tmp);
    yod.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(apd.f1->size[0] * apd.f1->size[1]);
    apd.f1->size[0] = 1;
    apd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(apd.f1, tmp);
    apd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bpd.f1->size[0] * bpd.f1->size[1]);
    bpd.f1->size[0] = 1;
    bpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bpd.f1, tmp);
    bpd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cpd.f1->size[0] * cpd.f1->size[1]);
    cpd.f1->size[0] = 1;
    cpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cpd.f1, tmp);
    cpd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[283].f1[0],
        &yod);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[283].f1[1],
        &apd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[283].f1[2],
        &bpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[283].f1[3],
        &cpd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(dpd.f1->size[0] * dpd.f1->size[1]);
    dpd.f1->size[0] = 1;
    dpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dpd.f1, tmp);
    dpd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(epd.f1->size[0] * epd.f1->size[1]);
    epd.f1->size[0] = 1;
    epd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(epd.f1, tmp);
    epd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fpd.f1->size[0] * fpd.f1->size[1]);
    fpd.f1->size[0] = 1;
    fpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fpd.f1, tmp);
    fpd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gpd.f1->size[0] * gpd.f1->size[1]);
    gpd.f1->size[0] = 1;
    gpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gpd.f1, tmp);
    gpd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[287].f1[0],
        &dpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[287].f1[1],
        &epd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[287].f1[2],
        &fpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[287].f1[3],
        &gpd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(hpd.f1->size[0] * hpd.f1->size[1]);
    hpd.f1->size[0] = 1;
    hpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hpd.f1, tmp);
    hpd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ipd.f1->size[0] * ipd.f1->size[1]);
    ipd.f1->size[0] = 1;
    ipd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ipd.f1, tmp);
    ipd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jpd.f1->size[0] * jpd.f1->size[1]);
    jpd.f1->size[0] = 1;
    jpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jpd.f1, tmp);
    jpd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kpd.f1->size[0] * kpd.f1->size[1]);
    kpd.f1->size[0] = 1;
    kpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kpd.f1, tmp);
    kpd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[291].f1[0],
        &hpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[291].f1[1],
        &ipd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[291].f1[2],
        &jpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[291].f1[3],
        &kpd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(lpd.f1->size[0] * lpd.f1->size[1]);
    lpd.f1->size[0] = 1;
    lpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lpd.f1, tmp);
    lpd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mpd.f1->size[0] * mpd.f1->size[1]);
    mpd.f1->size[0] = 1;
    mpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mpd.f1, tmp);
    mpd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(npd.f1->size[0] * npd.f1->size[1]);
    npd.f1->size[0] = 1;
    npd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(npd.f1, tmp);
    npd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(opd.f1->size[0] * opd.f1->size[1]);
    opd.f1->size[0] = 1;
    opd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(opd.f1, tmp);
    opd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[296].f1[0],
        &lpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[296].f1[1],
        &mpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[296].f1[2],
        &npd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[296].f1[3],
        &opd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ppd.f1->size[0] * ppd.f1->size[1]);
    ppd.f1->size[0] = 1;
    ppd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ppd.f1, tmp);
    ppd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qpd.f1->size[0] * qpd.f1->size[1]);
    qpd.f1->size[0] = 1;
    qpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qpd.f1, tmp);
    qpd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rpd.f1->size[0] * rpd.f1->size[1]);
    rpd.f1->size[0] = 1;
    rpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rpd.f1, tmp);
    rpd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(spd.f1->size[0] * spd.f1->size[1]);
    spd.f1->size[0] = 1;
    spd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(spd.f1, tmp);
    spd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[298].f1[0],
        &ppd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[298].f1[1],
        &qpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[298].f1[2],
        &rpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[298].f1[3],
        &spd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(tpd.f1->size[0] * tpd.f1->size[1]);
    tpd.f1->size[0] = 1;
    tpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tpd.f1, tmp);
    tpd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(upd.f1->size[0] * upd.f1->size[1]);
    upd.f1->size[0] = 1;
    upd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(upd.f1, tmp);
    upd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vpd.f1->size[0] * vpd.f1->size[1]);
    vpd.f1->size[0] = 1;
    vpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vpd.f1, tmp);
    vpd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wpd.f1->size[0] * wpd.f1->size[1]);
    wpd.f1->size[0] = 1;
    wpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wpd.f1, tmp);
    wpd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[306].f1[0],
        &tpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[306].f1[1],
        &upd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[306].f1[2],
        &vpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[306].f1[3],
        &wpd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(xpd.f1->size[0] * xpd.f1->size[1]);
    xpd.f1->size[0] = 1;
    xpd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xpd.f1, tmp);
    xpd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ypd.f1->size[0] * ypd.f1->size[1]);
    ypd.f1->size[0] = 1;
    ypd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ypd.f1, tmp);
    ypd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aqd.f1->size[0] * aqd.f1->size[1]);
    aqd.f1->size[0] = 1;
    aqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aqd.f1, tmp);
    aqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bqd.f1->size[0] * bqd.f1->size[1]);
    bqd.f1->size[0] = 1;
    bqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bqd.f1, tmp);
    bqd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[307].f1[0],
        &xpd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[307].f1[1],
        &ypd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[307].f1[2],
        &aqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[307].f1[3],
        &bqd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(cqd.f1->size[0] * cqd.f1->size[1]);
    cqd.f1->size[0] = 1;
    cqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cqd.f1, tmp);
    cqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dqd.f1->size[0] * dqd.f1->size[1]);
    dqd.f1->size[0] = 1;
    dqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dqd.f1, tmp);
    dqd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eqd.f1->size[0] * eqd.f1->size[1]);
    eqd.f1->size[0] = 1;
    eqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eqd.f1, tmp);
    eqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fqd.f1->size[0] * fqd.f1->size[1]);
    fqd.f1->size[0] = 1;
    fqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fqd.f1, tmp);
    fqd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[311].f1[0],
        &cqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[311].f1[1],
        &dqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[311].f1[2],
        &eqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[311].f1[3],
        &fqd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(gqd.f1->size[0] * gqd.f1->size[1]);
    gqd.f1->size[0] = 1;
    gqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gqd.f1, tmp);
    gqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hqd.f1->size[0] * hqd.f1->size[1]);
    hqd.f1->size[0] = 1;
    hqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hqd.f1, tmp);
    hqd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iqd.f1->size[0] * iqd.f1->size[1]);
    iqd.f1->size[0] = 1;
    iqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iqd.f1, tmp);
    iqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jqd.f1->size[0] * jqd.f1->size[1]);
    jqd.f1->size[0] = 1;
    jqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jqd.f1, tmp);
    jqd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[314].f1[0],
        &gqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[314].f1[1],
        &hqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[314].f1[2],
        &iqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[314].f1[3],
        &jqd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(kqd.f1->size[0] * kqd.f1->size[1]);
    kqd.f1->size[0] = 1;
    kqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kqd.f1, tmp);
    kqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lqd.f1->size[0] * lqd.f1->size[1]);
    lqd.f1->size[0] = 1;
    lqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lqd.f1, tmp);
    lqd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mqd.f1->size[0] * mqd.f1->size[1]);
    mqd.f1->size[0] = 1;
    mqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mqd.f1, tmp);
    mqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nqd.f1->size[0] * nqd.f1->size[1]);
    nqd.f1->size[0] = 1;
    nqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nqd.f1, tmp);
    nqd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[324].f1[0],
        &kqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[324].f1[1],
        &lqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[324].f1[2],
        &mqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[324].f1[3],
        &nqd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(oqd.f1->size[0] * oqd.f1->size[1]);
    oqd.f1->size[0] = 1;
    oqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oqd.f1, tmp);
    oqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pqd.f1->size[0] * pqd.f1->size[1]);
    pqd.f1->size[0] = 1;
    pqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pqd.f1, tmp);
    pqd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qqd.f1->size[0] * qqd.f1->size[1]);
    qqd.f1->size[0] = 1;
    qqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qqd.f1, tmp);
    qqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rqd.f1->size[0] * rqd.f1->size[1]);
    rqd.f1->size[0] = 1;
    rqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rqd.f1, tmp);
    rqd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[327].f1[0],
        &oqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[327].f1[1],
        &pqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[327].f1[2],
        &qqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[327].f1[3],
        &rqd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(sqd.f1->size[0] * sqd.f1->size[1]);
    sqd.f1->size[0] = 1;
    sqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sqd.f1, tmp);
    sqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tqd.f1->size[0] * tqd.f1->size[1]);
    tqd.f1->size[0] = 1;
    tqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tqd.f1, tmp);
    tqd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uqd.f1->size[0] * uqd.f1->size[1]);
    uqd.f1->size[0] = 1;
    uqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uqd.f1, tmp);
    uqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vqd.f1->size[0] * vqd.f1->size[1]);
    vqd.f1->size[0] = 1;
    vqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vqd.f1, tmp);
    vqd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[330].f1[0],
        &sqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[330].f1[1],
        &tqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[330].f1[2],
        &uqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[330].f1[3],
        &vqd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(wqd.f1->size[0] * wqd.f1->size[1]);
    wqd.f1->size[0] = 1;
    wqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wqd.f1, tmp);
    wqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xqd.f1->size[0] * xqd.f1->size[1]);
    xqd.f1->size[0] = 1;
    xqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xqd.f1, tmp);
    xqd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yqd.f1->size[0] * yqd.f1->size[1]);
    yqd.f1->size[0] = 1;
    yqd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yqd.f1, tmp);
    yqd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ard.f1->size[0] * ard.f1->size[1]);
    ard.f1->size[0] = 1;
    ard.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ard.f1, tmp);
    ard.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[341].f1[0],
        &wqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[341].f1[1],
        &xqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[341].f1[2],
        &yqd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[341].f1[3],
        &ard);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(brd.f1->size[0] * brd.f1->size[1]);
    brd.f1->size[0] = 1;
    brd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(brd.f1, tmp);
    brd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(crd.f1->size[0] * crd.f1->size[1]);
    crd.f1->size[0] = 1;
    crd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(crd.f1, tmp);
    crd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(drd.f1->size[0] * drd.f1->size[1]);
    drd.f1->size[0] = 1;
    drd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(drd.f1, tmp);
    drd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(erd.f1->size[0] * erd.f1->size[1]);
    erd.f1->size[0] = 1;
    erd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(erd.f1, tmp);
    erd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[346].f1[0],
        &brd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[346].f1[1],
        &crd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[346].f1[2],
        &drd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[346].f1[3],
        &erd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(frd.f1->size[0] * frd.f1->size[1]);
    frd.f1->size[0] = 1;
    frd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(frd.f1, tmp);
    frd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(grd.f1->size[0] * grd.f1->size[1]);
    grd.f1->size[0] = 1;
    grd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(grd.f1, tmp);
    grd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hrd.f1->size[0] * hrd.f1->size[1]);
    hrd.f1->size[0] = 1;
    hrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hrd.f1, tmp);
    hrd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ird.f1->size[0] * ird.f1->size[1]);
    ird.f1->size[0] = 1;
    ird.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ird.f1, tmp);
    ird.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[347].f1[0],
        &frd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[347].f1[1],
        &grd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[347].f1[2],
        &hrd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[347].f1[3],
        &ird);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(jrd.f1->size[0] * jrd.f1->size[1]);
    jrd.f1->size[0] = 1;
    jrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jrd.f1, tmp);
    jrd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(krd.f1->size[0] * krd.f1->size[1]);
    krd.f1->size[0] = 1;
    krd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(krd.f1, tmp);
    krd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lrd.f1->size[0] * lrd.f1->size[1]);
    lrd.f1->size[0] = 1;
    lrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lrd.f1, tmp);
    lrd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mrd.f1->size[0] * mrd.f1->size[1]);
    mrd.f1->size[0] = 1;
    mrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mrd.f1, tmp);
    mrd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[351].f1[0],
        &jrd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[351].f1[1],
        &krd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[351].f1[2],
        &lrd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[351].f1[3],
        &mrd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(nrd.f1->size[0] * nrd.f1->size[1]);
    nrd.f1->size[0] = 1;
    nrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nrd.f1, tmp);
    nrd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ord.f1->size[0] * ord.f1->size[1]);
    ord.f1->size[0] = 1;
    ord.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ord.f1, tmp);
    ord.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(prd.f1->size[0] * prd.f1->size[1]);
    prd.f1->size[0] = 1;
    prd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(prd.f1, tmp);
    prd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qrd.f1->size[0] * qrd.f1->size[1]);
    qrd.f1->size[0] = 1;
    qrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qrd.f1, tmp);
    qrd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[366].f1[0],
        &nrd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[366].f1[1],
        &ord);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[366].f1[2],
        &prd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[366].f1[3],
        &qrd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(rrd.f1->size[0] * rrd.f1->size[1]);
    rrd.f1->size[0] = 1;
    rrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rrd.f1, tmp);
    rrd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(srd.f1->size[0] * srd.f1->size[1]);
    srd.f1->size[0] = 1;
    srd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(srd.f1, tmp);
    srd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(trd.f1->size[0] * trd.f1->size[1]);
    trd.f1->size[0] = 1;
    trd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(trd.f1, tmp);
    trd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(urd.f1->size[0] * urd.f1->size[1]);
    urd.f1->size[0] = 1;
    urd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(urd.f1, tmp);
    urd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[371].f1[0],
        &rrd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[371].f1[1],
        &srd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[371].f1[2],
        &trd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[371].f1[3],
        &urd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(vrd.f1->size[0] * vrd.f1->size[1]);
    vrd.f1->size[0] = 1;
    vrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vrd.f1, tmp);
    vrd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wrd.f1->size[0] * wrd.f1->size[1]);
    wrd.f1->size[0] = 1;
    wrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wrd.f1, tmp);
    wrd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xrd.f1->size[0] * xrd.f1->size[1]);
    xrd.f1->size[0] = 1;
    xrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xrd.f1, tmp);
    xrd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yrd.f1->size[0] * yrd.f1->size[1]);
    yrd.f1->size[0] = 1;
    yrd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yrd.f1, tmp);
    yrd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[378].f1[0],
        &vrd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[378].f1[1],
        &wrd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[378].f1[2],
        &xrd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[378].f1[3],
        &yrd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(asd.f1->size[0] * asd.f1->size[1]);
    asd.f1->size[0] = 1;
    asd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(asd.f1, tmp);
    asd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bsd.f1->size[0] * bsd.f1->size[1]);
    bsd.f1->size[0] = 1;
    bsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bsd.f1, tmp);
    bsd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(csd.f1->size[0] * csd.f1->size[1]);
    csd.f1->size[0] = 1;
    csd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(csd.f1, tmp);
    csd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dsd.f1->size[0] * dsd.f1->size[1]);
    dsd.f1->size[0] = 1;
    dsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dsd.f1, tmp);
    dsd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[381].f1[0],
        &asd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[381].f1[1],
        &bsd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[381].f1[2],
        &csd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[381].f1[3],
        &dsd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(esd.f1->size[0] * esd.f1->size[1]);
    esd.f1->size[0] = 1;
    esd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(esd.f1, tmp);
    esd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fsd.f1->size[0] * fsd.f1->size[1]);
    fsd.f1->size[0] = 1;
    fsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fsd.f1, tmp);
    fsd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gsd.f1->size[0] * gsd.f1->size[1]);
    gsd.f1->size[0] = 1;
    gsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gsd.f1, tmp);
    gsd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hsd.f1->size[0] * hsd.f1->size[1]);
    hsd.f1->size[0] = 1;
    hsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hsd.f1, tmp);
    hsd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[386].f1[0],
        &esd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[386].f1[1],
        &fsd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[386].f1[2],
        &gsd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[386].f1[3],
        &hsd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(isd.f1->size[0] * isd.f1->size[1]);
    isd.f1->size[0] = 1;
    isd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(isd.f1, tmp);
    isd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jsd.f1->size[0] * jsd.f1->size[1]);
    jsd.f1->size[0] = 1;
    jsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jsd.f1, tmp);
    jsd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ksd.f1->size[0] * ksd.f1->size[1]);
    ksd.f1->size[0] = 1;
    ksd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ksd.f1, tmp);
    ksd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lsd.f1->size[0] * lsd.f1->size[1]);
    lsd.f1->size[0] = 1;
    lsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lsd.f1, tmp);
    lsd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[388].f1[0],
        &isd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[388].f1[1],
        &jsd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[388].f1[2],
        &ksd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[388].f1[3],
        &lsd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(msd.f1->size[0] * msd.f1->size[1]);
    msd.f1->size[0] = 1;
    msd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(msd.f1, tmp);
    msd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nsd.f1->size[0] * nsd.f1->size[1]);
    nsd.f1->size[0] = 1;
    nsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nsd.f1, tmp);
    nsd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(osd.f1->size[0] * osd.f1->size[1]);
    osd.f1->size[0] = 1;
    osd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(osd.f1, tmp);
    osd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(psd.f1->size[0] * psd.f1->size[1]);
    psd.f1->size[0] = 1;
    psd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(psd.f1, tmp);
    psd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[390].f1[0],
        &msd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[390].f1[1],
        &nsd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[390].f1[2],
        &osd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[390].f1[3],
        &psd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(qsd.f1->size[0] * qsd.f1->size[1]);
    qsd.f1->size[0] = 1;
    qsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qsd.f1, tmp);
    qsd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rsd.f1->size[0] * rsd.f1->size[1]);
    rsd.f1->size[0] = 1;
    rsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rsd.f1, tmp);
    rsd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ssd.f1->size[0] * ssd.f1->size[1]);
    ssd.f1->size[0] = 1;
    ssd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ssd.f1, tmp);
    ssd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tsd.f1->size[0] * tsd.f1->size[1]);
    tsd.f1->size[0] = 1;
    tsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tsd.f1, tmp);
    tsd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[391].f1[0],
        &qsd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[391].f1[1],
        &rsd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[391].f1[2],
        &ssd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[391].f1[3],
        &tsd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(usd.f1->size[0] * usd.f1->size[1]);
    usd.f1->size[0] = 1;
    usd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(usd.f1, tmp);
    usd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vsd.f1->size[0] * vsd.f1->size[1]);
    vsd.f1->size[0] = 1;
    vsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vsd.f1, tmp);
    vsd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wsd.f1->size[0] * wsd.f1->size[1]);
    wsd.f1->size[0] = 1;
    wsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wsd.f1, tmp);
    wsd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xsd.f1->size[0] * xsd.f1->size[1]);
    xsd.f1->size[0] = 1;
    xsd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xsd.f1, tmp);
    xsd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[397].f1[0],
        &usd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[397].f1[1],
        &vsd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[397].f1[2],
        &wsd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[397].f1[3],
        &xsd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ysd.f1->size[0] * ysd.f1->size[1]);
    ysd.f1->size[0] = 1;
    ysd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ysd.f1, tmp);
    ysd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(atd.f1->size[0] * atd.f1->size[1]);
    atd.f1->size[0] = 1;
    atd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(atd.f1, tmp);
    atd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(btd.f1->size[0] * btd.f1->size[1]);
    btd.f1->size[0] = 1;
    btd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(btd.f1, tmp);
    btd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ctd.f1->size[0] * ctd.f1->size[1]);
    ctd.f1->size[0] = 1;
    ctd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ctd.f1, tmp);
    ctd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[402].f1[0],
        &ysd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[402].f1[1],
        &atd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[402].f1[2],
        &btd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[402].f1[3],
        &ctd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(dtd.f1->size[0] * dtd.f1->size[1]);
    dtd.f1->size[0] = 1;
    dtd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dtd.f1, tmp);
    dtd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(etd.f1->size[0] * etd.f1->size[1]);
    etd.f1->size[0] = 1;
    etd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(etd.f1, tmp);
    etd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ftd.f1->size[0] * ftd.f1->size[1]);
    ftd.f1->size[0] = 1;
    ftd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ftd.f1, tmp);
    ftd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gtd.f1->size[0] * gtd.f1->size[1]);
    gtd.f1->size[0] = 1;
    gtd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gtd.f1, tmp);
    gtd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[411].f1[0],
        &dtd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[411].f1[1],
        &etd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[411].f1[2],
        &ftd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[411].f1[3],
        &gtd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(htd.f1->size[0] * htd.f1->size[1]);
    htd.f1->size[0] = 1;
    htd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(htd.f1, tmp);
    htd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(itd.f1->size[0] * itd.f1->size[1]);
    itd.f1->size[0] = 1;
    itd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(itd.f1, tmp);
    itd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jtd.f1->size[0] * jtd.f1->size[1]);
    jtd.f1->size[0] = 1;
    jtd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jtd.f1, tmp);
    jtd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ktd.f1->size[0] * ktd.f1->size[1]);
    ktd.f1->size[0] = 1;
    ktd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ktd.f1, tmp);
    ktd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[412].f1[0],
        &htd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[412].f1[1],
        &itd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[412].f1[2],
        &jtd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[412].f1[3],
        &ktd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ltd.f1->size[0] * ltd.f1->size[1]);
    ltd.f1->size[0] = 1;
    ltd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ltd.f1, tmp);
    ltd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mtd.f1->size[0] * mtd.f1->size[1]);
    mtd.f1->size[0] = 1;
    mtd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mtd.f1, tmp);
    mtd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ntd.f1->size[0] * ntd.f1->size[1]);
    ntd.f1->size[0] = 1;
    ntd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ntd.f1, tmp);
    ntd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(otd.f1->size[0] * otd.f1->size[1]);
    otd.f1->size[0] = 1;
    otd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(otd.f1, tmp);
    otd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[432].f1[0],
        &ltd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[432].f1[1],
        &mtd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[432].f1[2],
        &ntd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[432].f1[3],
        &otd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ptd.f1->size[0] * ptd.f1->size[1]);
    ptd.f1->size[0] = 1;
    ptd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ptd.f1, tmp);
    ptd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qtd.f1->size[0] * qtd.f1->size[1]);
    qtd.f1->size[0] = 1;
    qtd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qtd.f1, tmp);
    qtd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rtd.f1->size[0] * rtd.f1->size[1]);
    rtd.f1->size[0] = 1;
    rtd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rtd.f1, tmp);
    rtd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ttd.f1->size[0] * ttd.f1->size[1]);
    ttd.f1->size[0] = 1;
    ttd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ttd.f1, tmp);
    ttd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[434].f1[0],
        &ptd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[434].f1[1],
        &qtd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[434].f1[2],
        &rtd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[434].f1[3],
        &ttd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(utd.f1->size[0] * utd.f1->size[1]);
    utd.f1->size[0] = 1;
    utd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(utd.f1, tmp);
    utd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vtd.f1->size[0] * vtd.f1->size[1]);
    vtd.f1->size[0] = 1;
    vtd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vtd.f1, tmp);
    vtd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wtd.f1->size[0] * wtd.f1->size[1]);
    wtd.f1->size[0] = 1;
    wtd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wtd.f1, tmp);
    wtd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xtd.f1->size[0] * xtd.f1->size[1]);
    xtd.f1->size[0] = 1;
    xtd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xtd.f1, tmp);
    xtd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[456].f1[0],
        &utd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[456].f1[1],
        &vtd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[456].f1[2],
        &wtd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[456].f1[3],
        &xtd);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(ytd.f1->size[0] * ytd.f1->size[1]);
    ytd.f1->size[0] = 1;
    ytd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ytd.f1, tmp);
    ytd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(aud.f1->size[0] * aud.f1->size[1]);
    aud.f1->size[0] = 1;
    aud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aud.f1, tmp);
    aud.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bud.f1->size[0] * bud.f1->size[1]);
    bud.f1->size[0] = 1;
    bud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bud.f1, tmp);
    bud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cud.f1->size[0] * cud.f1->size[1]);
    cud.f1->size[0] = 1;
    cud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cud.f1, tmp);
    cud.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[460].f1[0],
        &ytd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[460].f1[1],
        &aud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[460].f1[2],
        &bud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[460].f1[3],
        &cud);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(dud.f1->size[0] * dud.f1->size[1]);
    dud.f1->size[0] = 1;
    dud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dud.f1, tmp);
    dud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(eud.f1->size[0] * eud.f1->size[1]);
    eud.f1->size[0] = 1;
    eud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eud.f1, tmp);
    eud.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fud.f1->size[0] * fud.f1->size[1]);
    fud.f1->size[0] = 1;
    fud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fud.f1, tmp);
    fud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gud.f1->size[0] * gud.f1->size[1]);
    gud.f1->size[0] = 1;
    gud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gud.f1, tmp);
    gud.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[462].f1[0],
        &dud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[462].f1[1],
        &eud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[462].f1[2],
        &fud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[462].f1[3],
        &gud);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(hud.f1->size[0] * hud.f1->size[1]);
    hud.f1->size[0] = 1;
    hud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hud.f1, tmp);
    hud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(iud.f1->size[0] * iud.f1->size[1]);
    iud.f1->size[0] = 1;
    iud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iud.f1, tmp);
    iud.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jud.f1->size[0] * jud.f1->size[1]);
    jud.f1->size[0] = 1;
    jud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jud.f1, tmp);
    jud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kud.f1->size[0] * kud.f1->size[1]);
    kud.f1->size[0] = 1;
    kud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kud.f1, tmp);
    kud.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[471].f1[0],
        &hud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[471].f1[1],
        &iud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[471].f1[2],
        &jud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[471].f1[3],
        &kud);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(lud.f1->size[0] * lud.f1->size[1]);
    lud.f1->size[0] = 1;
    lud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lud.f1, tmp);
    lud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mud.f1->size[0] * mud.f1->size[1]);
    mud.f1->size[0] = 1;
    mud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mud.f1, tmp);
    mud.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nud.f1->size[0] * nud.f1->size[1]);
    nud.f1->size[0] = 1;
    nud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nud.f1, tmp);
    nud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(oud.f1->size[0] * oud.f1->size[1]);
    oud.f1->size[0] = 1;
    oud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oud.f1, tmp);
    oud.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[483].f1[0],
        &lud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[483].f1[1],
        &mud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[483].f1[2],
        &nud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[483].f1[3],
        &oud);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(pud.f1->size[0] * pud.f1->size[1]);
    pud.f1->size[0] = 1;
    pud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pud.f1, tmp);
    pud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qud.f1->size[0] * qud.f1->size[1]);
    qud.f1->size[0] = 1;
    qud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qud.f1, tmp);
    qud.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rud.f1->size[0] * rud.f1->size[1]);
    rud.f1->size[0] = 1;
    rud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rud.f1, tmp);
    rud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sud.f1->size[0] * sud.f1->size[1]);
    sud.f1->size[0] = 1;
    sud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sud.f1, tmp);
    sud.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[496].f1[0],
        &pud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[496].f1[1],
        &qud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[496].f1[2],
        &rud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[496].f1[3],
        &sud);

    // '<S284>:1:76'
    tmp = static_cast<int32_T>(tud.f1->size[0] * tud.f1->size[1]);
    tud.f1->size[0] = 1;
    tud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tud.f1, tmp);
    tud.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uud.f1->size[0] * uud.f1->size[1]);
    uud.f1->size[0] = 1;
    uud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uud.f1, tmp);
    uud.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vud.f1->size[0] * vud.f1->size[1]);
    vud.f1->size[0] = 1;
    vud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vud.f1, tmp);
    vud.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wud.f1->size[0] * wud.f1->size[1]);
    wud.f1->size[0] = 1;
    wud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wud.f1, tmp);
    wud.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[10].f1[0], &tud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[10].f1[1], &uud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[10].f1[2], &vud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[10].f1[3], &wud);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(xud.f1->size[0] * xud.f1->size[1]);
    xud.f1->size[0] = 1;
    xud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xud.f1, tmp);
    xud.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yud.f1->size[0] * yud.f1->size[1]);
    yud.f1->size[0] = 1;
    yud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yud.f1, tmp);
    yud.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(avd.f1->size[0] * avd.f1->size[1]);
    avd.f1->size[0] = 1;
    avd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(avd.f1, tmp);
    avd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bvd.f1->size[0] * bvd.f1->size[1]);
    bvd.f1->size[0] = 1;
    bvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bvd.f1, tmp);
    bvd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[11].f1[0], &xud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[11].f1[1], &yud);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[11].f1[2], &avd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[11].f1[3], &bvd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(cvd.f1->size[0] * cvd.f1->size[1]);
    cvd.f1->size[0] = 1;
    cvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cvd.f1, tmp);
    cvd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dvd.f1->size[0] * dvd.f1->size[1]);
    dvd.f1->size[0] = 1;
    dvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dvd.f1, tmp);
    dvd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(evd.f1->size[0] * evd.f1->size[1]);
    evd.f1->size[0] = 1;
    evd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(evd.f1, tmp);
    evd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fvd.f1->size[0] * fvd.f1->size[1]);
    fvd.f1->size[0] = 1;
    fvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fvd.f1, tmp);
    fvd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[12].f1[0], &cvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[12].f1[1], &dvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[12].f1[2], &evd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[12].f1[3], &fvd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(gvd.f1->size[0] * gvd.f1->size[1]);
    gvd.f1->size[0] = 1;
    gvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gvd.f1, tmp);
    gvd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hvd.f1->size[0] * hvd.f1->size[1]);
    hvd.f1->size[0] = 1;
    hvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hvd.f1, tmp);
    hvd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ivd.f1->size[0] * ivd.f1->size[1]);
    ivd.f1->size[0] = 1;
    ivd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ivd.f1, tmp);
    ivd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jvd.f1->size[0] * jvd.f1->size[1]);
    jvd.f1->size[0] = 1;
    jvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jvd.f1, tmp);
    jvd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[13].f1[0], &gvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[13].f1[1], &hvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[13].f1[2], &ivd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[13].f1[3], &jvd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(kvd.f1->size[0] * kvd.f1->size[1]);
    kvd.f1->size[0] = 1;
    kvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kvd.f1, tmp);
    kvd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lvd.f1->size[0] * lvd.f1->size[1]);
    lvd.f1->size[0] = 1;
    lvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lvd.f1, tmp);
    lvd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mvd.f1->size[0] * mvd.f1->size[1]);
    mvd.f1->size[0] = 1;
    mvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mvd.f1, tmp);
    mvd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nvd.f1->size[0] * nvd.f1->size[1]);
    nvd.f1->size[0] = 1;
    nvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nvd.f1, tmp);
    nvd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[14].f1[0], &kvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[14].f1[1], &lvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[14].f1[2], &mvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[14].f1[3], &nvd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(ovd.f1->size[0] * ovd.f1->size[1]);
    ovd.f1->size[0] = 1;
    ovd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ovd.f1, tmp);
    ovd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pvd.f1->size[0] * pvd.f1->size[1]);
    pvd.f1->size[0] = 1;
    pvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pvd.f1, tmp);
    pvd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qvd.f1->size[0] * qvd.f1->size[1]);
    qvd.f1->size[0] = 1;
    qvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qvd.f1, tmp);
    qvd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rvd.f1->size[0] * rvd.f1->size[1]);
    rvd.f1->size[0] = 1;
    rvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rvd.f1, tmp);
    rvd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[15].f1[0], &ovd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[15].f1[1], &pvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[15].f1[2], &qvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[15].f1[3], &rvd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(svd.f1->size[0] * svd.f1->size[1]);
    svd.f1->size[0] = 1;
    svd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(svd.f1, tmp);
    svd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tvd.f1->size[0] * tvd.f1->size[1]);
    tvd.f1->size[0] = 1;
    tvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tvd.f1, tmp);
    tvd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uvd.f1->size[0] * uvd.f1->size[1]);
    uvd.f1->size[0] = 1;
    uvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uvd.f1, tmp);
    uvd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vvd.f1->size[0] * vvd.f1->size[1]);
    vvd.f1->size[0] = 1;
    vvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vvd.f1, tmp);
    vvd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[16].f1[0], &svd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[16].f1[1], &tvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[16].f1[2], &uvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[16].f1[3], &vvd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(wvd.f1->size[0] * wvd.f1->size[1]);
    wvd.f1->size[0] = 1;
    wvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wvd.f1, tmp);
    wvd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xvd.f1->size[0] * xvd.f1->size[1]);
    xvd.f1->size[0] = 1;
    xvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xvd.f1, tmp);
    xvd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yvd.f1->size[0] * yvd.f1->size[1]);
    yvd.f1->size[0] = 1;
    yvd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yvd.f1, tmp);
    yvd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(awd.f1->size[0] * awd.f1->size[1]);
    awd.f1->size[0] = 1;
    awd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(awd.f1, tmp);
    awd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[18].f1[0], &wvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[18].f1[1], &xvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[18].f1[2], &yvd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[18].f1[3], &awd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(bwd.f1->size[0] * bwd.f1->size[1]);
    bwd.f1->size[0] = 1;
    bwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bwd.f1, tmp);
    bwd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cwd.f1->size[0] * cwd.f1->size[1]);
    cwd.f1->size[0] = 1;
    cwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cwd.f1, tmp);
    cwd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dwd.f1->size[0] * dwd.f1->size[1]);
    dwd.f1->size[0] = 1;
    dwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dwd.f1, tmp);
    dwd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ewd.f1->size[0] * ewd.f1->size[1]);
    ewd.f1->size[0] = 1;
    ewd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ewd.f1, tmp);
    ewd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[19].f1[0], &bwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[19].f1[1], &cwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[19].f1[2], &dwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[19].f1[3], &ewd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(fwd.f1->size[0] * fwd.f1->size[1]);
    fwd.f1->size[0] = 1;
    fwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fwd.f1, tmp);
    fwd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gwd.f1->size[0] * gwd.f1->size[1]);
    gwd.f1->size[0] = 1;
    gwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gwd.f1, tmp);
    gwd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hwd.f1->size[0] * hwd.f1->size[1]);
    hwd.f1->size[0] = 1;
    hwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hwd.f1, tmp);
    hwd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(iwd.f1->size[0] * iwd.f1->size[1]);
    iwd.f1->size[0] = 1;
    iwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iwd.f1, tmp);
    iwd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[43].f1[0], &fwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[43].f1[1], &gwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[43].f1[2], &hwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[43].f1[3], &iwd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(jwd.f1->size[0] * jwd.f1->size[1]);
    jwd.f1->size[0] = 1;
    jwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jwd.f1, tmp);
    jwd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kwd.f1->size[0] * kwd.f1->size[1]);
    kwd.f1->size[0] = 1;
    kwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kwd.f1, tmp);
    kwd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lwd.f1->size[0] * lwd.f1->size[1]);
    lwd.f1->size[0] = 1;
    lwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lwd.f1, tmp);
    lwd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mwd.f1->size[0] * mwd.f1->size[1]);
    mwd.f1->size[0] = 1;
    mwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mwd.f1, tmp);
    mwd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[52].f1[0], &jwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[52].f1[1], &kwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[52].f1[2], &lwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[52].f1[3], &mwd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(nwd.f1->size[0] * nwd.f1->size[1]);
    nwd.f1->size[0] = 1;
    nwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nwd.f1, tmp);
    nwd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(owd.f1->size[0] * owd.f1->size[1]);
    owd.f1->size[0] = 1;
    owd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(owd.f1, tmp);
    owd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pwd.f1->size[0] * pwd.f1->size[1]);
    pwd.f1->size[0] = 1;
    pwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pwd.f1, tmp);
    pwd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qwd.f1->size[0] * qwd.f1->size[1]);
    qwd.f1->size[0] = 1;
    qwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qwd.f1, tmp);
    qwd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[63].f1[0], &nwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[63].f1[1], &owd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[63].f1[2], &pwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[63].f1[3], &qwd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(rwd.f1->size[0] * rwd.f1->size[1]);
    rwd.f1->size[0] = 1;
    rwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rwd.f1, tmp);
    rwd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(swd.f1->size[0] * swd.f1->size[1]);
    swd.f1->size[0] = 1;
    swd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(swd.f1, tmp);
    swd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(twd.f1->size[0] * twd.f1->size[1]);
    twd.f1->size[0] = 1;
    twd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(twd.f1, tmp);
    twd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uwd.f1->size[0] * uwd.f1->size[1]);
    uwd.f1->size[0] = 1;
    uwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uwd.f1, tmp);
    uwd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[78].f1[0], &rwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[78].f1[1], &swd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[78].f1[2], &twd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[78].f1[3], &uwd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(vwd.f1->size[0] * vwd.f1->size[1]);
    vwd.f1->size[0] = 1;
    vwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vwd.f1, tmp);
    vwd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wwd.f1->size[0] * wwd.f1->size[1]);
    wwd.f1->size[0] = 1;
    wwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wwd.f1, tmp);
    wwd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xwd.f1->size[0] * xwd.f1->size[1]);
    xwd.f1->size[0] = 1;
    xwd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xwd.f1, tmp);
    xwd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ywd.f1->size[0] * ywd.f1->size[1]);
    ywd.f1->size[0] = 1;
    ywd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ywd.f1, tmp);
    ywd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[95].f1[0], &vwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[95].f1[1], &wwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[95].f1[2], &xwd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[95].f1[3], &ywd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(axd.f1->size[0] * axd.f1->size[1]);
    axd.f1->size[0] = 1;
    axd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(axd.f1, tmp);
    axd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bxd.f1->size[0] * bxd.f1->size[1]);
    bxd.f1->size[0] = 1;
    bxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bxd.f1, tmp);
    bxd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cxd.f1->size[0] * cxd.f1->size[1]);
    cxd.f1->size[0] = 1;
    cxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cxd.f1, tmp);
    cxd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dxd.f1->size[0] * dxd.f1->size[1]);
    dxd.f1->size[0] = 1;
    dxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dxd.f1, tmp);
    dxd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[102].f1[0],
        &axd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[102].f1[1],
        &bxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[102].f1[2],
        &cxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[102].f1[3],
        &dxd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(exd.f1->size[0] * exd.f1->size[1]);
    exd.f1->size[0] = 1;
    exd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(exd.f1, tmp);
    exd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fxd.f1->size[0] * fxd.f1->size[1]);
    fxd.f1->size[0] = 1;
    fxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fxd.f1, tmp);
    fxd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gxd.f1->size[0] * gxd.f1->size[1]);
    gxd.f1->size[0] = 1;
    gxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gxd.f1, tmp);
    gxd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hxd.f1->size[0] * hxd.f1->size[1]);
    hxd.f1->size[0] = 1;
    hxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hxd.f1, tmp);
    hxd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[105].f1[0],
        &exd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[105].f1[1],
        &fxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[105].f1[2],
        &gxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[105].f1[3],
        &hxd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(ixd.f1->size[0] * ixd.f1->size[1]);
    ixd.f1->size[0] = 1;
    ixd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ixd.f1, tmp);
    ixd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jxd.f1->size[0] * jxd.f1->size[1]);
    jxd.f1->size[0] = 1;
    jxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jxd.f1, tmp);
    jxd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kxd.f1->size[0] * kxd.f1->size[1]);
    kxd.f1->size[0] = 1;
    kxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kxd.f1, tmp);
    kxd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lxd.f1->size[0] * lxd.f1->size[1]);
    lxd.f1->size[0] = 1;
    lxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lxd.f1, tmp);
    lxd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[115].f1[0],
        &ixd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[115].f1[1],
        &jxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[115].f1[2],
        &kxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[115].f1[3],
        &lxd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(mxd.f1->size[0] * mxd.f1->size[1]);
    mxd.f1->size[0] = 1;
    mxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mxd.f1, tmp);
    mxd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nxd.f1->size[0] * nxd.f1->size[1]);
    nxd.f1->size[0] = 1;
    nxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nxd.f1, tmp);
    nxd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(oxd.f1->size[0] * oxd.f1->size[1]);
    oxd.f1->size[0] = 1;
    oxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oxd.f1, tmp);
    oxd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pxd.f1->size[0] * pxd.f1->size[1]);
    pxd.f1->size[0] = 1;
    pxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pxd.f1, tmp);
    pxd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[121].f1[0],
        &mxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[121].f1[1],
        &nxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[121].f1[2],
        &oxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[121].f1[3],
        &pxd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(qxd.f1->size[0] * qxd.f1->size[1]);
    qxd.f1->size[0] = 1;
    qxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qxd.f1, tmp);
    qxd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rxd.f1->size[0] * rxd.f1->size[1]);
    rxd.f1->size[0] = 1;
    rxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rxd.f1, tmp);
    rxd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sxd.f1->size[0] * sxd.f1->size[1]);
    sxd.f1->size[0] = 1;
    sxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sxd.f1, tmp);
    sxd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(txd.f1->size[0] * txd.f1->size[1]);
    txd.f1->size[0] = 1;
    txd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(txd.f1, tmp);
    txd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[132].f1[0],
        &qxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[132].f1[1],
        &rxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[132].f1[2],
        &sxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[132].f1[3],
        &txd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(uxd.f1->size[0] * uxd.f1->size[1]);
    uxd.f1->size[0] = 1;
    uxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uxd.f1, tmp);
    uxd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vxd.f1->size[0] * vxd.f1->size[1]);
    vxd.f1->size[0] = 1;
    vxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vxd.f1, tmp);
    vxd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wxd.f1->size[0] * wxd.f1->size[1]);
    wxd.f1->size[0] = 1;
    wxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wxd.f1, tmp);
    wxd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xxd.f1->size[0] * xxd.f1->size[1]);
    xxd.f1->size[0] = 1;
    xxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xxd.f1, tmp);
    xxd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[152].f1[0],
        &uxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[152].f1[1],
        &vxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[152].f1[2],
        &wxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[152].f1[3],
        &xxd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(yxd.f1->size[0] * yxd.f1->size[1]);
    yxd.f1->size[0] = 1;
    yxd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yxd.f1, tmp);
    yxd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ayd.f1->size[0] * ayd.f1->size[1]);
    ayd.f1->size[0] = 1;
    ayd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ayd.f1, tmp);
    ayd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(byd.f1->size[0] * byd.f1->size[1]);
    byd.f1->size[0] = 1;
    byd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(byd.f1, tmp);
    byd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cyd.f1->size[0] * cyd.f1->size[1]);
    cyd.f1->size[0] = 1;
    cyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cyd.f1, tmp);
    cyd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[161].f1[0],
        &yxd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[161].f1[1],
        &ayd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[161].f1[2],
        &byd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[161].f1[3],
        &cyd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(dyd.f1->size[0] * dyd.f1->size[1]);
    dyd.f1->size[0] = 1;
    dyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dyd.f1, tmp);
    dyd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eyd.f1->size[0] * eyd.f1->size[1]);
    eyd.f1->size[0] = 1;
    eyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eyd.f1, tmp);
    eyd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fyd.f1->size[0] * fyd.f1->size[1]);
    fyd.f1->size[0] = 1;
    fyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fyd.f1, tmp);
    fyd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gyd.f1->size[0] * gyd.f1->size[1]);
    gyd.f1->size[0] = 1;
    gyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gyd.f1, tmp);
    gyd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[163].f1[0],
        &dyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[163].f1[1],
        &eyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[163].f1[2],
        &fyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[163].f1[3],
        &gyd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(hyd.f1->size[0] * hyd.f1->size[1]);
    hyd.f1->size[0] = 1;
    hyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hyd.f1, tmp);
    hyd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iyd.f1->size[0] * iyd.f1->size[1]);
    iyd.f1->size[0] = 1;
    iyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iyd.f1, tmp);
    iyd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jyd.f1->size[0] * jyd.f1->size[1]);
    jyd.f1->size[0] = 1;
    jyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jyd.f1, tmp);
    jyd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kyd.f1->size[0] * kyd.f1->size[1]);
    kyd.f1->size[0] = 1;
    kyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kyd.f1, tmp);
    kyd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[182].f1[0],
        &hyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[182].f1[1],
        &iyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[182].f1[2],
        &jyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[182].f1[3],
        &kyd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(lyd.f1->size[0] * lyd.f1->size[1]);
    lyd.f1->size[0] = 1;
    lyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lyd.f1, tmp);
    lyd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(myd.f1->size[0] * myd.f1->size[1]);
    myd.f1->size[0] = 1;
    myd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(myd.f1, tmp);
    myd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nyd.f1->size[0] * nyd.f1->size[1]);
    nyd.f1->size[0] = 1;
    nyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nyd.f1, tmp);
    nyd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(oyd.f1->size[0] * oyd.f1->size[1]);
    oyd.f1->size[0] = 1;
    oyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oyd.f1, tmp);
    oyd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[183].f1[0],
        &lyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[183].f1[1],
        &myd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[183].f1[2],
        &nyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[183].f1[3],
        &oyd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(pyd.f1->size[0] * pyd.f1->size[1]);
    pyd.f1->size[0] = 1;
    pyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pyd.f1, tmp);
    pyd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qyd.f1->size[0] * qyd.f1->size[1]);
    qyd.f1->size[0] = 1;
    qyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qyd.f1, tmp);
    qyd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ryd.f1->size[0] * ryd.f1->size[1]);
    ryd.f1->size[0] = 1;
    ryd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ryd.f1, tmp);
    ryd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(syd.f1->size[0] * syd.f1->size[1]);
    syd.f1->size[0] = 1;
    syd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(syd.f1, tmp);
    syd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[193].f1[0],
        &pyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[193].f1[1],
        &qyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[193].f1[2],
        &ryd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[193].f1[3],
        &syd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(tyd.f1->size[0] * tyd.f1->size[1]);
    tyd.f1->size[0] = 1;
    tyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tyd.f1, tmp);
    tyd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uyd.f1->size[0] * uyd.f1->size[1]);
    uyd.f1->size[0] = 1;
    uyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uyd.f1, tmp);
    uyd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vyd.f1->size[0] * vyd.f1->size[1]);
    vyd.f1->size[0] = 1;
    vyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vyd.f1, tmp);
    vyd.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wyd.f1->size[0] * wyd.f1->size[1]);
    wyd.f1->size[0] = 1;
    wyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wyd.f1, tmp);
    wyd.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[222].f1[0],
        &tyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[222].f1[1],
        &uyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[222].f1[2],
        &vyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[222].f1[3],
        &wyd);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(xyd.f1->size[0] * xyd.f1->size[1]);
    xyd.f1->size[0] = 1;
    xyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xyd.f1, tmp);
    xyd.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yyd.f1->size[0] * yyd.f1->size[1]);
    yyd.f1->size[0] = 1;
    yyd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yyd.f1, tmp);
    yyd.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aae.f1->size[0] * aae.f1->size[1]);
    aae.f1->size[0] = 1;
    aae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aae.f1, tmp);
    aae.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bae.f1->size[0] * bae.f1->size[1]);
    bae.f1->size[0] = 1;
    bae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bae.f1, tmp);
    bae.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[226].f1[0],
        &xyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[226].f1[1],
        &yyd);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[226].f1[2],
        &aae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[226].f1[3],
        &bae);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(cae.f1->size[0] * cae.f1->size[1]);
    cae.f1->size[0] = 1;
    cae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cae.f1, tmp);
    cae.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dae.f1->size[0] * dae.f1->size[1]);
    dae.f1->size[0] = 1;
    dae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dae.f1, tmp);
    dae.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eae.f1->size[0] * eae.f1->size[1]);
    eae.f1->size[0] = 1;
    eae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eae.f1, tmp);
    eae.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fae.f1->size[0] * fae.f1->size[1]);
    fae.f1->size[0] = 1;
    fae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fae.f1, tmp);
    fae.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[231].f1[0],
        &cae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[231].f1[1],
        &dae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[231].f1[2],
        &eae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[231].f1[3],
        &fae);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(gae.f1->size[0] * gae.f1->size[1]);
    gae.f1->size[0] = 1;
    gae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gae.f1, tmp);
    gae.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hae.f1->size[0] * hae.f1->size[1]);
    hae.f1->size[0] = 1;
    hae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hae.f1, tmp);
    hae.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iae.f1->size[0] * iae.f1->size[1]);
    iae.f1->size[0] = 1;
    iae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iae.f1, tmp);
    iae.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jae.f1->size[0] * jae.f1->size[1]);
    jae.f1->size[0] = 1;
    jae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jae.f1, tmp);
    jae.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[243].f1[0],
        &gae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[243].f1[1],
        &hae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[243].f1[2],
        &iae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[243].f1[3],
        &jae);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(kae.f1->size[0] * kae.f1->size[1]);
    kae.f1->size[0] = 1;
    kae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kae.f1, tmp);
    kae.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lae.f1->size[0] * lae.f1->size[1]);
    lae.f1->size[0] = 1;
    lae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lae.f1, tmp);
    lae.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mae.f1->size[0] * mae.f1->size[1]);
    mae.f1->size[0] = 1;
    mae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mae.f1, tmp);
    mae.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nae.f1->size[0] * nae.f1->size[1]);
    nae.f1->size[0] = 1;
    nae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nae.f1, tmp);
    nae.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[244].f1[0],
        &kae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[244].f1[1],
        &lae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[244].f1[2],
        &mae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[244].f1[3],
        &nae);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(oae.f1->size[0] * oae.f1->size[1]);
    oae.f1->size[0] = 1;
    oae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oae.f1, tmp);
    oae.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pae.f1->size[0] * pae.f1->size[1]);
    pae.f1->size[0] = 1;
    pae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pae.f1, tmp);
    pae.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qae.f1->size[0] * qae.f1->size[1]);
    qae.f1->size[0] = 1;
    qae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qae.f1, tmp);
    qae.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rae.f1->size[0] * rae.f1->size[1]);
    rae.f1->size[0] = 1;
    rae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rae.f1, tmp);
    rae.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[281].f1[0],
        &oae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[281].f1[1],
        &pae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[281].f1[2],
        &qae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[281].f1[3],
        &rae);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(sae.f1->size[0] * sae.f1->size[1]);
    sae.f1->size[0] = 1;
    sae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sae.f1, tmp);
    sae.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tae.f1->size[0] * tae.f1->size[1]);
    tae.f1->size[0] = 1;
    tae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tae.f1, tmp);
    tae.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uae.f1->size[0] * uae.f1->size[1]);
    uae.f1->size[0] = 1;
    uae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uae.f1, tmp);
    uae.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vae.f1->size[0] * vae.f1->size[1]);
    vae.f1->size[0] = 1;
    vae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vae.f1, tmp);
    vae.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[301].f1[0],
        &sae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[301].f1[1],
        &tae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[301].f1[2],
        &uae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[301].f1[3],
        &vae);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(wae.f1->size[0] * wae.f1->size[1]);
    wae.f1->size[0] = 1;
    wae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wae.f1, tmp);
    wae.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xae.f1->size[0] * xae.f1->size[1]);
    xae.f1->size[0] = 1;
    xae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xae.f1, tmp);
    xae.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yae.f1->size[0] * yae.f1->size[1]);
    yae.f1->size[0] = 1;
    yae.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yae.f1, tmp);
    yae.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(abe.f1->size[0] * abe.f1->size[1]);
    abe.f1->size[0] = 1;
    abe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(abe.f1, tmp);
    abe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[312].f1[0],
        &wae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[312].f1[1],
        &xae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[312].f1[2],
        &yae);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[312].f1[3],
        &abe);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(bbe.f1->size[0] * bbe.f1->size[1]);
    bbe.f1->size[0] = 1;
    bbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bbe.f1, tmp);
    bbe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cbe.f1->size[0] * cbe.f1->size[1]);
    cbe.f1->size[0] = 1;
    cbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cbe.f1, tmp);
    cbe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dbe.f1->size[0] * dbe.f1->size[1]);
    dbe.f1->size[0] = 1;
    dbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dbe.f1, tmp);
    dbe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ebe.f1->size[0] * ebe.f1->size[1]);
    ebe.f1->size[0] = 1;
    ebe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ebe.f1, tmp);
    ebe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[328].f1[0],
        &bbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[328].f1[1],
        &cbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[328].f1[2],
        &dbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[328].f1[3],
        &ebe);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(fbe.f1->size[0] * fbe.f1->size[1]);
    fbe.f1->size[0] = 1;
    fbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fbe.f1, tmp);
    fbe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gbe.f1->size[0] * gbe.f1->size[1]);
    gbe.f1->size[0] = 1;
    gbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gbe.f1, tmp);
    gbe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hbe.f1->size[0] * hbe.f1->size[1]);
    hbe.f1->size[0] = 1;
    hbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hbe.f1, tmp);
    hbe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ibe.f1->size[0] * ibe.f1->size[1]);
    ibe.f1->size[0] = 1;
    ibe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ibe.f1, tmp);
    ibe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[331].f1[0],
        &fbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[331].f1[1],
        &gbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[331].f1[2],
        &hbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[331].f1[3],
        &ibe);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(jbe.f1->size[0] * jbe.f1->size[1]);
    jbe.f1->size[0] = 1;
    jbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jbe.f1, tmp);
    jbe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kbe.f1->size[0] * kbe.f1->size[1]);
    kbe.f1->size[0] = 1;
    kbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kbe.f1, tmp);
    kbe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lbe.f1->size[0] * lbe.f1->size[1]);
    lbe.f1->size[0] = 1;
    lbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lbe.f1, tmp);
    lbe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mbe.f1->size[0] * mbe.f1->size[1]);
    mbe.f1->size[0] = 1;
    mbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mbe.f1, tmp);
    mbe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[343].f1[0],
        &jbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[343].f1[1],
        &kbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[343].f1[2],
        &lbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[343].f1[3],
        &mbe);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(nbe.f1->size[0] * nbe.f1->size[1]);
    nbe.f1->size[0] = 1;
    nbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nbe.f1, tmp);
    nbe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(obe.f1->size[0] * obe.f1->size[1]);
    obe.f1->size[0] = 1;
    obe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(obe.f1, tmp);
    obe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pbe.f1->size[0] * pbe.f1->size[1]);
    pbe.f1->size[0] = 1;
    pbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pbe.f1, tmp);
    pbe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qbe.f1->size[0] * qbe.f1->size[1]);
    qbe.f1->size[0] = 1;
    qbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qbe.f1, tmp);
    qbe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[377].f1[0],
        &nbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[377].f1[1],
        &obe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[377].f1[2],
        &pbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[377].f1[3],
        &qbe);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(rbe.f1->size[0] * rbe.f1->size[1]);
    rbe.f1->size[0] = 1;
    rbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rbe.f1, tmp);
    rbe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sbe.f1->size[0] * sbe.f1->size[1]);
    sbe.f1->size[0] = 1;
    sbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sbe.f1, tmp);
    sbe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tbe.f1->size[0] * tbe.f1->size[1]);
    tbe.f1->size[0] = 1;
    tbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tbe.f1, tmp);
    tbe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ube.f1->size[0] * ube.f1->size[1]);
    ube.f1->size[0] = 1;
    ube.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ube.f1, tmp);
    ube.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[382].f1[0],
        &rbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[382].f1[1],
        &sbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[382].f1[2],
        &tbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[382].f1[3],
        &ube);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(vbe.f1->size[0] * vbe.f1->size[1]);
    vbe.f1->size[0] = 1;
    vbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vbe.f1, tmp);
    vbe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wbe.f1->size[0] * wbe.f1->size[1]);
    wbe.f1->size[0] = 1;
    wbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wbe.f1, tmp);
    wbe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xbe.f1->size[0] * xbe.f1->size[1]);
    xbe.f1->size[0] = 1;
    xbe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xbe.f1, tmp);
    xbe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ybe.f1->size[0] * ybe.f1->size[1]);
    ybe.f1->size[0] = 1;
    ybe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ybe.f1, tmp);
    ybe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[410].f1[0],
        &vbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[410].f1[1],
        &wbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[410].f1[2],
        &xbe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[410].f1[3],
        &ybe);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(ace.f1->size[0] * ace.f1->size[1]);
    ace.f1->size[0] = 1;
    ace.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ace.f1, tmp);
    ace.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bce.f1->size[0] * bce.f1->size[1]);
    bce.f1->size[0] = 1;
    bce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bce.f1, tmp);
    bce.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cce.f1->size[0] * cce.f1->size[1]);
    cce.f1->size[0] = 1;
    cce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cce.f1, tmp);
    cce.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dce.f1->size[0] * dce.f1->size[1]);
    dce.f1->size[0] = 1;
    dce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dce.f1, tmp);
    dce.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[420].f1[0],
        &ace);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[420].f1[1],
        &bce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[420].f1[2],
        &cce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[420].f1[3],
        &dce);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(ece.f1->size[0] * ece.f1->size[1]);
    ece.f1->size[0] = 1;
    ece.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ece.f1, tmp);
    ece.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fce.f1->size[0] * fce.f1->size[1]);
    fce.f1->size[0] = 1;
    fce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fce.f1, tmp);
    fce.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gce.f1->size[0] * gce.f1->size[1]);
    gce.f1->size[0] = 1;
    gce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gce.f1, tmp);
    gce.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hce.f1->size[0] * hce.f1->size[1]);
    hce.f1->size[0] = 1;
    hce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hce.f1, tmp);
    hce.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[431].f1[0],
        &ece);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[431].f1[1],
        &fce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[431].f1[2],
        &gce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[431].f1[3],
        &hce);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(ice.f1->size[0] * ice.f1->size[1]);
    ice.f1->size[0] = 1;
    ice.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ice.f1, tmp);
    ice.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jce.f1->size[0] * jce.f1->size[1]);
    jce.f1->size[0] = 1;
    jce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jce.f1, tmp);
    jce.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kce.f1->size[0] * kce.f1->size[1]);
    kce.f1->size[0] = 1;
    kce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kce.f1, tmp);
    kce.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lce.f1->size[0] * lce.f1->size[1]);
    lce.f1->size[0] = 1;
    lce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lce.f1, tmp);
    lce.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[436].f1[0],
        &ice);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[436].f1[1],
        &jce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[436].f1[2],
        &kce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[436].f1[3],
        &lce);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(mce.f1->size[0] * mce.f1->size[1]);
    mce.f1->size[0] = 1;
    mce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mce.f1, tmp);
    mce.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nce.f1->size[0] * nce.f1->size[1]);
    nce.f1->size[0] = 1;
    nce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nce.f1, tmp);
    nce.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(oce.f1->size[0] * oce.f1->size[1]);
    oce.f1->size[0] = 1;
    oce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oce.f1, tmp);
    oce.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pce.f1->size[0] * pce.f1->size[1]);
    pce.f1->size[0] = 1;
    pce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pce.f1, tmp);
    pce.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[472].f1[0],
        &mce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[472].f1[1],
        &nce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[472].f1[2],
        &oce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[472].f1[3],
        &pce);

    // '<S284>:1:81'
    tmp = static_cast<int32_T>(qce.f1->size[0] * qce.f1->size[1]);
    qce.f1->size[0] = 1;
    qce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qce.f1, tmp);
    qce.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rce.f1->size[0] * rce.f1->size[1]);
    rce.f1->size[0] = 1;
    rce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rce.f1, tmp);
    rce.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sce.f1->size[0] * sce.f1->size[1]);
    sce.f1->size[0] = 1;
    sce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sce.f1, tmp);
    sce.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tce.f1->size[0] * tce.f1->size[1]);
    tce.f1->size[0] = 1;
    tce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tce.f1, tmp);
    tce.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[17].f1[0], &qce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[17].f1[1], &rce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[17].f1[2], &sce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[17].f1[3], &tce);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(uce.f1->size[0] * uce.f1->size[1]);
    uce.f1->size[0] = 1;
    uce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uce.f1, tmp);
    uce.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vce.f1->size[0] * vce.f1->size[1]);
    vce.f1->size[0] = 1;
    vce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vce.f1, tmp);
    vce.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wce.f1->size[0] * wce.f1->size[1]);
    wce.f1->size[0] = 1;
    wce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wce.f1, tmp);
    wce.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xce.f1->size[0] * xce.f1->size[1]);
    xce.f1->size[0] = 1;
    xce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xce.f1, tmp);
    xce.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[50].f1[0], &uce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[50].f1[1], &vce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[50].f1[2], &wce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[50].f1[3], &xce);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(yce.f1->size[0] * yce.f1->size[1]);
    yce.f1->size[0] = 1;
    yce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yce.f1, tmp);
    yce.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ade.f1->size[0] * ade.f1->size[1]);
    ade.f1->size[0] = 1;
    ade.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ade.f1, tmp);
    ade.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bde.f1->size[0] * bde.f1->size[1]);
    bde.f1->size[0] = 1;
    bde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bde.f1, tmp);
    bde.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cde.f1->size[0] * cde.f1->size[1]);
    cde.f1->size[0] = 1;
    cde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cde.f1, tmp);
    cde.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[51].f1[0], &yce);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[51].f1[1], &ade);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[51].f1[2], &bde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[51].f1[3], &cde);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(dde.f1->size[0] * dde.f1->size[1]);
    dde.f1->size[0] = 1;
    dde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dde.f1, tmp);
    dde.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ede.f1->size[0] * ede.f1->size[1]);
    ede.f1->size[0] = 1;
    ede.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ede.f1, tmp);
    ede.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fde.f1->size[0] * fde.f1->size[1]);
    fde.f1->size[0] = 1;
    fde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fde.f1, tmp);
    fde.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gde.f1->size[0] * gde.f1->size[1]);
    gde.f1->size[0] = 1;
    gde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gde.f1, tmp);
    gde.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[54].f1[0], &dde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[54].f1[1], &ede);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[54].f1[2], &fde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[54].f1[3], &gde);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(hde.f1->size[0] * hde.f1->size[1]);
    hde.f1->size[0] = 1;
    hde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hde.f1, tmp);
    hde.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ide.f1->size[0] * ide.f1->size[1]);
    ide.f1->size[0] = 1;
    ide.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ide.f1, tmp);
    ide.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jde.f1->size[0] * jde.f1->size[1]);
    jde.f1->size[0] = 1;
    jde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jde.f1, tmp);
    jde.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kde.f1->size[0] * kde.f1->size[1]);
    kde.f1->size[0] = 1;
    kde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kde.f1, tmp);
    kde.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[61].f1[0], &hde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[61].f1[1], &ide);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[61].f1[2], &jde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[61].f1[3], &kde);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(lde.f1->size[0] * lde.f1->size[1]);
    lde.f1->size[0] = 1;
    lde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lde.f1, tmp);
    lde.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mde.f1->size[0] * mde.f1->size[1]);
    mde.f1->size[0] = 1;
    mde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mde.f1, tmp);
    mde.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nde.f1->size[0] * nde.f1->size[1]);
    nde.f1->size[0] = 1;
    nde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nde.f1, tmp);
    nde.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ode.f1->size[0] * ode.f1->size[1]);
    ode.f1->size[0] = 1;
    ode.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ode.f1, tmp);
    ode.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[72].f1[0], &lde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[72].f1[1], &mde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[72].f1[2], &nde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[72].f1[3], &ode);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(pde.f1->size[0] * pde.f1->size[1]);
    pde.f1->size[0] = 1;
    pde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pde.f1, tmp);
    pde.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qde.f1->size[0] * qde.f1->size[1]);
    qde.f1->size[0] = 1;
    qde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qde.f1, tmp);
    qde.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rde.f1->size[0] * rde.f1->size[1]);
    rde.f1->size[0] = 1;
    rde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rde.f1, tmp);
    rde.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sde.f1->size[0] * sde.f1->size[1]);
    sde.f1->size[0] = 1;
    sde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sde.f1, tmp);
    sde.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[83].f1[0], &pde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[83].f1[1], &qde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[83].f1[2], &rde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[83].f1[3], &sde);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(tde.f1->size[0] * tde.f1->size[1]);
    tde.f1->size[0] = 1;
    tde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tde.f1, tmp);
    tde.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ude.f1->size[0] * ude.f1->size[1]);
    ude.f1->size[0] = 1;
    ude.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ude.f1, tmp);
    ude.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vde.f1->size[0] * vde.f1->size[1]);
    vde.f1->size[0] = 1;
    vde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vde.f1, tmp);
    vde.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wde.f1->size[0] * wde.f1->size[1]);
    wde.f1->size[0] = 1;
    wde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wde.f1, tmp);
    wde.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[85].f1[0], &tde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[85].f1[1], &ude);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[85].f1[2], &vde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[85].f1[3], &wde);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(xde.f1->size[0] * xde.f1->size[1]);
    xde.f1->size[0] = 1;
    xde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xde.f1, tmp);
    xde.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yde.f1->size[0] * yde.f1->size[1]);
    yde.f1->size[0] = 1;
    yde.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yde.f1, tmp);
    yde.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aee.f1->size[0] * aee.f1->size[1]);
    aee.f1->size[0] = 1;
    aee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aee.f1, tmp);
    aee.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bee.f1->size[0] * bee.f1->size[1]);
    bee.f1->size[0] = 1;
    bee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bee.f1, tmp);
    bee.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[92].f1[0], &xde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[92].f1[1], &yde);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[92].f1[2], &aee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[92].f1[3], &bee);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(cee.f1->size[0] * cee.f1->size[1]);
    cee.f1->size[0] = 1;
    cee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cee.f1, tmp);
    cee.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(dee.f1->size[0] * dee.f1->size[1]);
    dee.f1->size[0] = 1;
    dee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dee.f1, tmp);
    dee.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eee.f1->size[0] * eee.f1->size[1]);
    eee.f1->size[0] = 1;
    eee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eee.f1, tmp);
    eee.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fee.f1->size[0] * fee.f1->size[1]);
    fee.f1->size[0] = 1;
    fee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fee.f1, tmp);
    fee.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[111].f1[0],
        &cee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[111].f1[1],
        &dee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[111].f1[2],
        &eee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[111].f1[3],
        &fee);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(gee.f1->size[0] * gee.f1->size[1]);
    gee.f1->size[0] = 1;
    gee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gee.f1, tmp);
    gee.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hee.f1->size[0] * hee.f1->size[1]);
    hee.f1->size[0] = 1;
    hee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hee.f1, tmp);
    hee.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iee.f1->size[0] * iee.f1->size[1]);
    iee.f1->size[0] = 1;
    iee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iee.f1, tmp);
    iee.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jee.f1->size[0] * jee.f1->size[1]);
    jee.f1->size[0] = 1;
    jee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jee.f1, tmp);
    jee.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[116].f1[0],
        &gee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[116].f1[1],
        &hee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[116].f1[2],
        &iee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[116].f1[3],
        &jee);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(kee.f1->size[0] * kee.f1->size[1]);
    kee.f1->size[0] = 1;
    kee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kee.f1, tmp);
    kee.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lee.f1->size[0] * lee.f1->size[1]);
    lee.f1->size[0] = 1;
    lee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lee.f1, tmp);
    lee.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mee.f1->size[0] * mee.f1->size[1]);
    mee.f1->size[0] = 1;
    mee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mee.f1, tmp);
    mee.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nee.f1->size[0] * nee.f1->size[1]);
    nee.f1->size[0] = 1;
    nee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nee.f1, tmp);
    nee.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[120].f1[0],
        &kee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[120].f1[1],
        &lee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[120].f1[2],
        &mee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[120].f1[3],
        &nee);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(oee.f1->size[0] * oee.f1->size[1]);
    oee.f1->size[0] = 1;
    oee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oee.f1, tmp);
    oee.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pee.f1->size[0] * pee.f1->size[1]);
    pee.f1->size[0] = 1;
    pee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pee.f1, tmp);
    pee.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qee.f1->size[0] * qee.f1->size[1]);
    qee.f1->size[0] = 1;
    qee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qee.f1, tmp);
    qee.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ree.f1->size[0] * ree.f1->size[1]);
    ree.f1->size[0] = 1;
    ree.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ree.f1, tmp);
    ree.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[130].f1[0],
        &oee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[130].f1[1],
        &pee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[130].f1[2],
        &qee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[130].f1[3],
        &ree);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(see.f1->size[0] * see.f1->size[1]);
    see.f1->size[0] = 1;
    see.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(see.f1, tmp);
    see.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tee.f1->size[0] * tee.f1->size[1]);
    tee.f1->size[0] = 1;
    tee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tee.f1, tmp);
    tee.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uee.f1->size[0] * uee.f1->size[1]);
    uee.f1->size[0] = 1;
    uee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uee.f1, tmp);
    uee.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vee.f1->size[0] * vee.f1->size[1]);
    vee.f1->size[0] = 1;
    vee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vee.f1, tmp);
    vee.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[133].f1[0],
        &see);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[133].f1[1],
        &tee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[133].f1[2],
        &uee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[133].f1[3],
        &vee);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(wee.f1->size[0] * wee.f1->size[1]);
    wee.f1->size[0] = 1;
    wee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wee.f1, tmp);
    wee.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xee.f1->size[0] * xee.f1->size[1]);
    xee.f1->size[0] = 1;
    xee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xee.f1, tmp);
    xee.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yee.f1->size[0] * yee.f1->size[1]);
    yee.f1->size[0] = 1;
    yee.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yee.f1, tmp);
    yee.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(afe.f1->size[0] * afe.f1->size[1]);
    afe.f1->size[0] = 1;
    afe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(afe.f1, tmp);
    afe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[135].f1[0],
        &wee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[135].f1[1],
        &xee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[135].f1[2],
        &yee);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[135].f1[3],
        &afe);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(bfe.f1->size[0] * bfe.f1->size[1]);
    bfe.f1->size[0] = 1;
    bfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bfe.f1, tmp);
    bfe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(cfe.f1->size[0] * cfe.f1->size[1]);
    cfe.f1->size[0] = 1;
    cfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cfe.f1, tmp);
    cfe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dfe.f1->size[0] * dfe.f1->size[1]);
    dfe.f1->size[0] = 1;
    dfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dfe.f1, tmp);
    dfe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(efe.f1->size[0] * efe.f1->size[1]);
    efe.f1->size[0] = 1;
    efe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(efe.f1, tmp);
    efe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[140].f1[0],
        &bfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[140].f1[1],
        &cfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[140].f1[2],
        &dfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[140].f1[3],
        &efe);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(ffe.f1->size[0] * ffe.f1->size[1]);
    ffe.f1->size[0] = 1;
    ffe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ffe.f1, tmp);
    ffe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(gfe.f1->size[0] * gfe.f1->size[1]);
    gfe.f1->size[0] = 1;
    gfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gfe.f1, tmp);
    gfe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hfe.f1->size[0] * hfe.f1->size[1]);
    hfe.f1->size[0] = 1;
    hfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hfe.f1, tmp);
    hfe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ife.f1->size[0] * ife.f1->size[1]);
    ife.f1->size[0] = 1;
    ife.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ife.f1, tmp);
    ife.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[142].f1[0],
        &ffe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[142].f1[1],
        &gfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[142].f1[2],
        &hfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[142].f1[3],
        &ife);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(jfe.f1->size[0] * jfe.f1->size[1]);
    jfe.f1->size[0] = 1;
    jfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jfe.f1, tmp);
    jfe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(kfe.f1->size[0] * kfe.f1->size[1]);
    kfe.f1->size[0] = 1;
    kfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kfe.f1, tmp);
    kfe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lfe.f1->size[0] * lfe.f1->size[1]);
    lfe.f1->size[0] = 1;
    lfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lfe.f1, tmp);
    lfe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mfe.f1->size[0] * mfe.f1->size[1]);
    mfe.f1->size[0] = 1;
    mfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mfe.f1, tmp);
    mfe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[181].f1[0],
        &jfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[181].f1[1],
        &kfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[181].f1[2],
        &lfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[181].f1[3],
        &mfe);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(nfe.f1->size[0] * nfe.f1->size[1]);
    nfe.f1->size[0] = 1;
    nfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nfe.f1, tmp);
    nfe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ofe.f1->size[0] * ofe.f1->size[1]);
    ofe.f1->size[0] = 1;
    ofe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ofe.f1, tmp);
    ofe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pfe.f1->size[0] * pfe.f1->size[1]);
    pfe.f1->size[0] = 1;
    pfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pfe.f1, tmp);
    pfe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qfe.f1->size[0] * qfe.f1->size[1]);
    qfe.f1->size[0] = 1;
    qfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qfe.f1, tmp);
    qfe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[220].f1[0],
        &nfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[220].f1[1],
        &ofe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[220].f1[2],
        &pfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[220].f1[3],
        &qfe);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(rfe.f1->size[0] * rfe.f1->size[1]);
    rfe.f1->size[0] = 1;
    rfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rfe.f1, tmp);
    rfe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(sfe.f1->size[0] * sfe.f1->size[1]);
    sfe.f1->size[0] = 1;
    sfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sfe.f1, tmp);
    sfe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tfe.f1->size[0] * tfe.f1->size[1]);
    tfe.f1->size[0] = 1;
    tfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tfe.f1, tmp);
    tfe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ufe.f1->size[0] * ufe.f1->size[1]);
    ufe.f1->size[0] = 1;
    ufe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ufe.f1, tmp);
    ufe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[251].f1[0],
        &rfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[251].f1[1],
        &sfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[251].f1[2],
        &tfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[251].f1[3],
        &ufe);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(vfe.f1->size[0] * vfe.f1->size[1]);
    vfe.f1->size[0] = 1;
    vfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vfe.f1, tmp);
    vfe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(wfe.f1->size[0] * wfe.f1->size[1]);
    wfe.f1->size[0] = 1;
    wfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wfe.f1, tmp);
    wfe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xfe.f1->size[0] * xfe.f1->size[1]);
    xfe.f1->size[0] = 1;
    xfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xfe.f1, tmp);
    xfe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yfe.f1->size[0] * yfe.f1->size[1]);
    yfe.f1->size[0] = 1;
    yfe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yfe.f1, tmp);
    yfe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[260].f1[0],
        &vfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[260].f1[1],
        &wfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[260].f1[2],
        &xfe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[260].f1[3],
        &yfe);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(age.f1->size[0] * age.f1->size[1]);
    age.f1->size[0] = 1;
    age.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(age.f1, tmp);
    age.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(bge.f1->size[0] * bge.f1->size[1]);
    bge.f1->size[0] = 1;
    bge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bge.f1, tmp);
    bge.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cge.f1->size[0] * cge.f1->size[1]);
    cge.f1->size[0] = 1;
    cge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cge.f1, tmp);
    cge.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dge.f1->size[0] * dge.f1->size[1]);
    dge.f1->size[0] = 1;
    dge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dge.f1, tmp);
    dge.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[262].f1[0],
        &age);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[262].f1[1],
        &bge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[262].f1[2],
        &cge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[262].f1[3],
        &dge);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(ege.f1->size[0] * ege.f1->size[1]);
    ege.f1->size[0] = 1;
    ege.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ege.f1, tmp);
    ege.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(fge.f1->size[0] * fge.f1->size[1]);
    fge.f1->size[0] = 1;
    fge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fge.f1, tmp);
    fge.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gge.f1->size[0] * gge.f1->size[1]);
    gge.f1->size[0] = 1;
    gge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gge.f1, tmp);
    gge.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hge.f1->size[0] * hge.f1->size[1]);
    hge.f1->size[0] = 1;
    hge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hge.f1, tmp);
    hge.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[270].f1[0],
        &ege);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[270].f1[1],
        &fge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[270].f1[2],
        &gge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[270].f1[3],
        &hge);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(ige.f1->size[0] * ige.f1->size[1]);
    ige.f1->size[0] = 1;
    ige.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ige.f1, tmp);
    ige.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(jge.f1->size[0] * jge.f1->size[1]);
    jge.f1->size[0] = 1;
    jge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jge.f1, tmp);
    jge.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kge.f1->size[0] * kge.f1->size[1]);
    kge.f1->size[0] = 1;
    kge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kge.f1, tmp);
    kge.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lge.f1->size[0] * lge.f1->size[1]);
    lge.f1->size[0] = 1;
    lge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lge.f1, tmp);
    lge.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[290].f1[0],
        &ige);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[290].f1[1],
        &jge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[290].f1[2],
        &kge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[290].f1[3],
        &lge);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(mge.f1->size[0] * mge.f1->size[1]);
    mge.f1->size[0] = 1;
    mge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mge.f1, tmp);
    mge.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(nge.f1->size[0] * nge.f1->size[1]);
    nge.f1->size[0] = 1;
    nge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nge.f1, tmp);
    nge.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(oge.f1->size[0] * oge.f1->size[1]);
    oge.f1->size[0] = 1;
    oge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oge.f1, tmp);
    oge.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pge.f1->size[0] * pge.f1->size[1]);
    pge.f1->size[0] = 1;
    pge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pge.f1, tmp);
    pge.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[310].f1[0],
        &mge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[310].f1[1],
        &nge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[310].f1[2],
        &oge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[310].f1[3],
        &pge);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(qge.f1->size[0] * qge.f1->size[1]);
    qge.f1->size[0] = 1;
    qge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qge.f1, tmp);
    qge.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(rge.f1->size[0] * rge.f1->size[1]);
    rge.f1->size[0] = 1;
    rge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rge.f1, tmp);
    rge.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sge.f1->size[0] * sge.f1->size[1]);
    sge.f1->size[0] = 1;
    sge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sge.f1, tmp);
    sge.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tge.f1->size[0] * tge.f1->size[1]);
    tge.f1->size[0] = 1;
    tge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tge.f1, tmp);
    tge.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[320].f1[0],
        &qge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[320].f1[1],
        &rge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[320].f1[2],
        &sge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[320].f1[3],
        &tge);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(uge.f1->size[0] * uge.f1->size[1]);
    uge.f1->size[0] = 1;
    uge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uge.f1, tmp);
    uge.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(vge.f1->size[0] * vge.f1->size[1]);
    vge.f1->size[0] = 1;
    vge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vge.f1, tmp);
    vge.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wge.f1->size[0] * wge.f1->size[1]);
    wge.f1->size[0] = 1;
    wge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wge.f1, tmp);
    wge.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xge.f1->size[0] * xge.f1->size[1]);
    xge.f1->size[0] = 1;
    xge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xge.f1, tmp);
    xge.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[321].f1[0],
        &uge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[321].f1[1],
        &vge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[321].f1[2],
        &wge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[321].f1[3],
        &xge);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(yge.f1->size[0] * yge.f1->size[1]);
    yge.f1->size[0] = 1;
    yge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yge.f1, tmp);
    yge.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ahe.f1->size[0] * ahe.f1->size[1]);
    ahe.f1->size[0] = 1;
    ahe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ahe.f1, tmp);
    ahe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bhe.f1->size[0] * bhe.f1->size[1]);
    bhe.f1->size[0] = 1;
    bhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bhe.f1, tmp);
    bhe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(che.f1->size[0] * che.f1->size[1]);
    che.f1->size[0] = 1;
    che.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(che.f1, tmp);
    che.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[340].f1[0],
        &yge);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[340].f1[1],
        &ahe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[340].f1[2],
        &bhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[340].f1[3],
        &che);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(dhe.f1->size[0] * dhe.f1->size[1]);
    dhe.f1->size[0] = 1;
    dhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dhe.f1, tmp);
    dhe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ehe.f1->size[0] * ehe.f1->size[1]);
    ehe.f1->size[0] = 1;
    ehe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ehe.f1, tmp);
    ehe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fhe.f1->size[0] * fhe.f1->size[1]);
    fhe.f1->size[0] = 1;
    fhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fhe.f1, tmp);
    fhe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ghe.f1->size[0] * ghe.f1->size[1]);
    ghe.f1->size[0] = 1;
    ghe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ghe.f1, tmp);
    ghe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[348].f1[0],
        &dhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[348].f1[1],
        &ehe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[348].f1[2],
        &fhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[348].f1[3],
        &ghe);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(hhe.f1->size[0] * hhe.f1->size[1]);
    hhe.f1->size[0] = 1;
    hhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hhe.f1, tmp);
    hhe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(ihe.f1->size[0] * ihe.f1->size[1]);
    ihe.f1->size[0] = 1;
    ihe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ihe.f1, tmp);
    ihe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jhe.f1->size[0] * jhe.f1->size[1]);
    jhe.f1->size[0] = 1;
    jhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jhe.f1, tmp);
    jhe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(khe.f1->size[0] * khe.f1->size[1]);
    khe.f1->size[0] = 1;
    khe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(khe.f1, tmp);
    khe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[350].f1[0],
        &hhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[350].f1[1],
        &ihe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[350].f1[2],
        &jhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[350].f1[3],
        &khe);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(lhe.f1->size[0] * lhe.f1->size[1]);
    lhe.f1->size[0] = 1;
    lhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lhe.f1, tmp);
    lhe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(mhe.f1->size[0] * mhe.f1->size[1]);
    mhe.f1->size[0] = 1;
    mhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mhe.f1, tmp);
    mhe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nhe.f1->size[0] * nhe.f1->size[1]);
    nhe.f1->size[0] = 1;
    nhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nhe.f1, tmp);
    nhe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ohe.f1->size[0] * ohe.f1->size[1]);
    ohe.f1->size[0] = 1;
    ohe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ohe.f1, tmp);
    ohe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[361].f1[0],
        &lhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[361].f1[1],
        &mhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[361].f1[2],
        &nhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[361].f1[3],
        &ohe);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(phe.f1->size[0] * phe.f1->size[1]);
    phe.f1->size[0] = 1;
    phe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(phe.f1, tmp);
    phe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(qhe.f1->size[0] * qhe.f1->size[1]);
    qhe.f1->size[0] = 1;
    qhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qhe.f1, tmp);
    qhe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rhe.f1->size[0] * rhe.f1->size[1]);
    rhe.f1->size[0] = 1;
    rhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rhe.f1, tmp);
    rhe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(she.f1->size[0] * she.f1->size[1]);
    she.f1->size[0] = 1;
    she.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(she.f1, tmp);
    she.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[362].f1[0],
        &phe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[362].f1[1],
        &qhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[362].f1[2],
        &rhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[362].f1[3],
        &she);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(the.f1->size[0] * the.f1->size[1]);
    the.f1->size[0] = 1;
    the.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(the.f1, tmp);
    the.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(uhe.f1->size[0] * uhe.f1->size[1]);
    uhe.f1->size[0] = 1;
    uhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uhe.f1, tmp);
    uhe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vhe.f1->size[0] * vhe.f1->size[1]);
    vhe.f1->size[0] = 1;
    vhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vhe.f1, tmp);
    vhe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(whe.f1->size[0] * whe.f1->size[1]);
    whe.f1->size[0] = 1;
    whe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(whe.f1, tmp);
    whe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[370].f1[0],
        &the);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[370].f1[1],
        &uhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[370].f1[2],
        &vhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[370].f1[3],
        &whe);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(xhe.f1->size[0] * xhe.f1->size[1]);
    xhe.f1->size[0] = 1;
    xhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xhe.f1, tmp);
    xhe.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(yhe.f1->size[0] * yhe.f1->size[1]);
    yhe.f1->size[0] = 1;
    yhe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yhe.f1, tmp);
    yhe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aie.f1->size[0] * aie.f1->size[1]);
    aie.f1->size[0] = 1;
    aie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aie.f1, tmp);
    aie.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bie.f1->size[0] * bie.f1->size[1]);
    bie.f1->size[0] = 1;
    bie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bie.f1, tmp);
    bie.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[372].f1[0],
        &xhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[372].f1[1],
        &yhe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[372].f1[2],
        &aie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[372].f1[3],
        &bie);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(cie.f1->size[0] * cie.f1->size[1]);
    cie.f1->size[0] = 1;
    cie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cie.f1, tmp);
    cie.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(die.f1->size[0] * die.f1->size[1]);
    die.f1->size[0] = 1;
    die.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(die.f1, tmp);
    die.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eie.f1->size[0] * eie.f1->size[1]);
    eie.f1->size[0] = 1;
    eie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eie.f1, tmp);
    eie.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fie.f1->size[0] * fie.f1->size[1]);
    fie.f1->size[0] = 1;
    fie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fie.f1, tmp);
    fie.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[401].f1[0],
        &cie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[401].f1[1],
        &die);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[401].f1[2],
        &eie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[401].f1[3],
        &fie);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(gie.f1->size[0] * gie.f1->size[1]);
    gie.f1->size[0] = 1;
    gie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gie.f1, tmp);
    gie.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(hie.f1->size[0] * hie.f1->size[1]);
    hie.f1->size[0] = 1;
    hie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hie.f1, tmp);
    hie.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iie.f1->size[0] * iie.f1->size[1]);
    iie.f1->size[0] = 1;
    iie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iie.f1, tmp);
    iie.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jie.f1->size[0] * jie.f1->size[1]);
    jie.f1->size[0] = 1;
    jie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jie.f1, tmp);
    jie.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[430].f1[0],
        &gie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[430].f1[1],
        &hie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[430].f1[2],
        &iie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[430].f1[3],
        &jie);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(kie.f1->size[0] * kie.f1->size[1]);
    kie.f1->size[0] = 1;
    kie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kie.f1, tmp);
    kie.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(lie.f1->size[0] * lie.f1->size[1]);
    lie.f1->size[0] = 1;
    lie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lie.f1, tmp);
    lie.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mie.f1->size[0] * mie.f1->size[1]);
    mie.f1->size[0] = 1;
    mie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mie.f1, tmp);
    mie.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nie.f1->size[0] * nie.f1->size[1]);
    nie.f1->size[0] = 1;
    nie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nie.f1, tmp);
    nie.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[440].f1[0],
        &kie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[440].f1[1],
        &lie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[440].f1[2],
        &mie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[440].f1[3],
        &nie);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(oie.f1->size[0] * oie.f1->size[1]);
    oie.f1->size[0] = 1;
    oie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oie.f1, tmp);
    oie.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(pie.f1->size[0] * pie.f1->size[1]);
    pie.f1->size[0] = 1;
    pie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pie.f1, tmp);
    pie.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qie.f1->size[0] * qie.f1->size[1]);
    qie.f1->size[0] = 1;
    qie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qie.f1, tmp);
    qie.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rie.f1->size[0] * rie.f1->size[1]);
    rie.f1->size[0] = 1;
    rie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rie.f1, tmp);
    rie.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[444].f1[0],
        &oie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[444].f1[1],
        &pie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[444].f1[2],
        &qie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[444].f1[3],
        &rie);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(sie.f1->size[0] * sie.f1->size[1]);
    sie.f1->size[0] = 1;
    sie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sie.f1, tmp);
    sie.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(tie.f1->size[0] * tie.f1->size[1]);
    tie.f1->size[0] = 1;
    tie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tie.f1, tmp);
    tie.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uie.f1->size[0] * uie.f1->size[1]);
    uie.f1->size[0] = 1;
    uie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uie.f1, tmp);
    uie.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vie.f1->size[0] * vie.f1->size[1]);
    vie.f1->size[0] = 1;
    vie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vie.f1, tmp);
    vie.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[470].f1[0],
        &sie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[470].f1[1],
        &tie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[470].f1[2],
        &uie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[470].f1[3],
        &vie);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(wie.f1->size[0] * wie.f1->size[1]);
    wie.f1->size[0] = 1;
    wie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wie.f1, tmp);
    wie.f1->data[0] = 'L';
    tmp = static_cast<int32_T>(xie.f1->size[0] * xie.f1->size[1]);
    xie.f1->size[0] = 1;
    xie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xie.f1, tmp);
    xie.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yie.f1->size[0] * yie.f1->size[1]);
    yie.f1->size[0] = 1;
    yie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yie.f1, tmp);
    yie.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aje.f1->size[0] * aje.f1->size[1]);
    aje.f1->size[0] = 1;
    aje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aje.f1, tmp);
    aje.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[480].f1[0],
        &wie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[480].f1[1],
        &xie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[480].f1[2],
        &yie);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[480].f1[3],
        &aje);

    // '<S284>:1:86'
    tmp = static_cast<int32_T>(bje.f1->size[0] * bje.f1->size[1]);
    bje.f1->size[0] = 1;
    bje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bje.f1, tmp);
    bje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cje.f1->size[0] * cje.f1->size[1]);
    cje.f1->size[0] = 1;
    cje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cje.f1, tmp);
    cje.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dje.f1->size[0] * dje.f1->size[1]);
    dje.f1->size[0] = 1;
    dje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dje.f1, tmp);
    dje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eje.f1->size[0] * eje.f1->size[1]);
    eje.f1->size[0] = 1;
    eje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eje.f1, tmp);
    eje.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[0].f1[0], &bje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[0].f1[1], &cje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[0].f1[2], &dje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[0].f1[3], &eje);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fje.f1->size[0] * fje.f1->size[1]);
    fje.f1->size[0] = 1;
    fje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fje.f1, tmp);
    fje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gje.f1->size[0] * gje.f1->size[1]);
    gje.f1->size[0] = 1;
    gje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gje.f1, tmp);
    gje.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hje.f1->size[0] * hje.f1->size[1]);
    hje.f1->size[0] = 1;
    hje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hje.f1, tmp);
    hje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ije.f1->size[0] * ije.f1->size[1]);
    ije.f1->size[0] = 1;
    ije.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ije.f1, tmp);
    ije.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[1].f1[0], &fje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[1].f1[1], &gje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[1].f1[2], &hje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[1].f1[3], &ije);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jje.f1->size[0] * jje.f1->size[1]);
    jje.f1->size[0] = 1;
    jje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jje.f1, tmp);
    jje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kje.f1->size[0] * kje.f1->size[1]);
    kje.f1->size[0] = 1;
    kje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kje.f1, tmp);
    kje.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lje.f1->size[0] * lje.f1->size[1]);
    lje.f1->size[0] = 1;
    lje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lje.f1, tmp);
    lje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mje.f1->size[0] * mje.f1->size[1]);
    mje.f1->size[0] = 1;
    mje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mje.f1, tmp);
    mje.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[2].f1[0], &jje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[2].f1[1], &kje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[2].f1[2], &lje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[2].f1[3], &mje);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(nje.f1->size[0] * nje.f1->size[1]);
    nje.f1->size[0] = 1;
    nje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nje.f1, tmp);
    nje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oje.f1->size[0] * oje.f1->size[1]);
    oje.f1->size[0] = 1;
    oje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oje.f1, tmp);
    oje.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pje.f1->size[0] * pje.f1->size[1]);
    pje.f1->size[0] = 1;
    pje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pje.f1, tmp);
    pje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qje.f1->size[0] * qje.f1->size[1]);
    qje.f1->size[0] = 1;
    qje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qje.f1, tmp);
    qje.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[3].f1[0], &nje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[3].f1[1], &oje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[3].f1[2], &pje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[3].f1[3], &qje);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rje.f1->size[0] * rje.f1->size[1]);
    rje.f1->size[0] = 1;
    rje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rje.f1, tmp);
    rje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sje.f1->size[0] * sje.f1->size[1]);
    sje.f1->size[0] = 1;
    sje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sje.f1, tmp);
    sje.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tje.f1->size[0] * tje.f1->size[1]);
    tje.f1->size[0] = 1;
    tje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tje.f1, tmp);
    tje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uje.f1->size[0] * uje.f1->size[1]);
    uje.f1->size[0] = 1;
    uje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uje.f1, tmp);
    uje.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[4].f1[0], &rje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[4].f1[1], &sje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[4].f1[2], &tje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[4].f1[3], &uje);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vje.f1->size[0] * vje.f1->size[1]);
    vje.f1->size[0] = 1;
    vje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vje.f1, tmp);
    vje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wje.f1->size[0] * wje.f1->size[1]);
    wje.f1->size[0] = 1;
    wje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wje.f1, tmp);
    wje.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xje.f1->size[0] * xje.f1->size[1]);
    xje.f1->size[0] = 1;
    xje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xje.f1, tmp);
    xje.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yje.f1->size[0] * yje.f1->size[1]);
    yje.f1->size[0] = 1;
    yje.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yje.f1, tmp);
    yje.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[5].f1[0], &vje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[5].f1[1], &wje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[5].f1[2], &xje);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[5].f1[3], &yje);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ake.f1->size[0] * ake.f1->size[1]);
    ake.f1->size[0] = 1;
    ake.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ake.f1, tmp);
    ake.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bke.f1->size[0] * bke.f1->size[1]);
    bke.f1->size[0] = 1;
    bke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bke.f1, tmp);
    bke.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cke.f1->size[0] * cke.f1->size[1]);
    cke.f1->size[0] = 1;
    cke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cke.f1, tmp);
    cke.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dke.f1->size[0] * dke.f1->size[1]);
    dke.f1->size[0] = 1;
    dke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dke.f1, tmp);
    dke.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[6].f1[0], &ake);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[6].f1[1], &bke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[6].f1[2], &cke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[6].f1[3], &dke);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(eke.f1->size[0] * eke.f1->size[1]);
    eke.f1->size[0] = 1;
    eke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eke.f1, tmp);
    eke.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fke.f1->size[0] * fke.f1->size[1]);
    fke.f1->size[0] = 1;
    fke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fke.f1, tmp);
    fke.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gke.f1->size[0] * gke.f1->size[1]);
    gke.f1->size[0] = 1;
    gke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gke.f1, tmp);
    gke.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hke.f1->size[0] * hke.f1->size[1]);
    hke.f1->size[0] = 1;
    hke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hke.f1, tmp);
    hke.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[7].f1[0], &eke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[7].f1[1], &fke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[7].f1[2], &gke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[7].f1[3], &hke);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ike.f1->size[0] * ike.f1->size[1]);
    ike.f1->size[0] = 1;
    ike.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ike.f1, tmp);
    ike.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jke.f1->size[0] * jke.f1->size[1]);
    jke.f1->size[0] = 1;
    jke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jke.f1, tmp);
    jke.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kke.f1->size[0] * kke.f1->size[1]);
    kke.f1->size[0] = 1;
    kke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kke.f1, tmp);
    kke.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lke.f1->size[0] * lke.f1->size[1]);
    lke.f1->size[0] = 1;
    lke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lke.f1, tmp);
    lke.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[8].f1[0], &ike);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[8].f1[1], &jke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[8].f1[2], &kke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[8].f1[3], &lke);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(mke.f1->size[0] * mke.f1->size[1]);
    mke.f1->size[0] = 1;
    mke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mke.f1, tmp);
    mke.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nke.f1->size[0] * nke.f1->size[1]);
    nke.f1->size[0] = 1;
    nke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nke.f1, tmp);
    nke.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(oke.f1->size[0] * oke.f1->size[1]);
    oke.f1->size[0] = 1;
    oke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oke.f1, tmp);
    oke.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pke.f1->size[0] * pke.f1->size[1]);
    pke.f1->size[0] = 1;
    pke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pke.f1, tmp);
    pke.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[9].f1[0], &mke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[9].f1[1], &nke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[9].f1[2], &oke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[9].f1[3], &pke);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qke.f1->size[0] * qke.f1->size[1]);
    qke.f1->size[0] = 1;
    qke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qke.f1, tmp);
    qke.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rke.f1->size[0] * rke.f1->size[1]);
    rke.f1->size[0] = 1;
    rke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rke.f1, tmp);
    rke.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ske.f1->size[0] * ske.f1->size[1]);
    ske.f1->size[0] = 1;
    ske.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ske.f1, tmp);
    ske.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tke.f1->size[0] * tke.f1->size[1]);
    tke.f1->size[0] = 1;
    tke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tke.f1, tmp);
    tke.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[20].f1[0], &qke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[20].f1[1], &rke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[20].f1[2], &ske);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[20].f1[3], &tke);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(uke.f1->size[0] * uke.f1->size[1]);
    uke.f1->size[0] = 1;
    uke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uke.f1, tmp);
    uke.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vke.f1->size[0] * vke.f1->size[1]);
    vke.f1->size[0] = 1;
    vke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vke.f1, tmp);
    vke.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wke.f1->size[0] * wke.f1->size[1]);
    wke.f1->size[0] = 1;
    wke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wke.f1, tmp);
    wke.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xke.f1->size[0] * xke.f1->size[1]);
    xke.f1->size[0] = 1;
    xke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xke.f1, tmp);
    xke.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[21].f1[0], &uke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[21].f1[1], &vke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[21].f1[2], &wke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[21].f1[3], &xke);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(yke.f1->size[0] * yke.f1->size[1]);
    yke.f1->size[0] = 1;
    yke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yke.f1, tmp);
    yke.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ale.f1->size[0] * ale.f1->size[1]);
    ale.f1->size[0] = 1;
    ale.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ale.f1, tmp);
    ale.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ble.f1->size[0] * ble.f1->size[1]);
    ble.f1->size[0] = 1;
    ble.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ble.f1, tmp);
    ble.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cle.f1->size[0] * cle.f1->size[1]);
    cle.f1->size[0] = 1;
    cle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cle.f1, tmp);
    cle.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[22].f1[0], &yke);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[22].f1[1], &ale);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[22].f1[2], &ble);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[22].f1[3], &cle);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dle.f1->size[0] * dle.f1->size[1]);
    dle.f1->size[0] = 1;
    dle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dle.f1, tmp);
    dle.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ele.f1->size[0] * ele.f1->size[1]);
    ele.f1->size[0] = 1;
    ele.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ele.f1, tmp);
    ele.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fle.f1->size[0] * fle.f1->size[1]);
    fle.f1->size[0] = 1;
    fle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fle.f1, tmp);
    fle.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gle.f1->size[0] * gle.f1->size[1]);
    gle.f1->size[0] = 1;
    gle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gle.f1, tmp);
    gle.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[23].f1[0], &dle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[23].f1[1], &ele);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[23].f1[2], &fle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[23].f1[3], &gle);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hle.f1->size[0] * hle.f1->size[1]);
    hle.f1->size[0] = 1;
    hle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hle.f1, tmp);
    hle.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ile.f1->size[0] * ile.f1->size[1]);
    ile.f1->size[0] = 1;
    ile.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ile.f1, tmp);
    ile.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jle.f1->size[0] * jle.f1->size[1]);
    jle.f1->size[0] = 1;
    jle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jle.f1, tmp);
    jle.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kle.f1->size[0] * kle.f1->size[1]);
    kle.f1->size[0] = 1;
    kle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kle.f1, tmp);
    kle.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[24].f1[0], &hle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[24].f1[1], &ile);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[24].f1[2], &jle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[24].f1[3], &kle);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lle.f1->size[0] * lle.f1->size[1]);
    lle.f1->size[0] = 1;
    lle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lle.f1, tmp);
    lle.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mle.f1->size[0] * mle.f1->size[1]);
    mle.f1->size[0] = 1;
    mle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mle.f1, tmp);
    mle.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nle.f1->size[0] * nle.f1->size[1]);
    nle.f1->size[0] = 1;
    nle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nle.f1, tmp);
    nle.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ole.f1->size[0] * ole.f1->size[1]);
    ole.f1->size[0] = 1;
    ole.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ole.f1, tmp);
    ole.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[25].f1[0], &lle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[25].f1[1], &mle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[25].f1[2], &nle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[25].f1[3], &ole);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ple.f1->size[0] * ple.f1->size[1]);
    ple.f1->size[0] = 1;
    ple.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ple.f1, tmp);
    ple.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qle.f1->size[0] * qle.f1->size[1]);
    qle.f1->size[0] = 1;
    qle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qle.f1, tmp);
    qle.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rle.f1->size[0] * rle.f1->size[1]);
    rle.f1->size[0] = 1;
    rle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rle.f1, tmp);
    rle.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sle.f1->size[0] * sle.f1->size[1]);
    sle.f1->size[0] = 1;
    sle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sle.f1, tmp);
    sle.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[26].f1[0], &ple);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[26].f1[1], &qle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[26].f1[2], &rle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[26].f1[3], &sle);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(tle.f1->size[0] * tle.f1->size[1]);
    tle.f1->size[0] = 1;
    tle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tle.f1, tmp);
    tle.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ule.f1->size[0] * ule.f1->size[1]);
    ule.f1->size[0] = 1;
    ule.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ule.f1, tmp);
    ule.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vle.f1->size[0] * vle.f1->size[1]);
    vle.f1->size[0] = 1;
    vle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vle.f1, tmp);
    vle.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wle.f1->size[0] * wle.f1->size[1]);
    wle.f1->size[0] = 1;
    wle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wle.f1, tmp);
    wle.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[27].f1[0], &tle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[27].f1[1], &ule);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[27].f1[2], &vle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[27].f1[3], &wle);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xle.f1->size[0] * xle.f1->size[1]);
    xle.f1->size[0] = 1;
    xle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xle.f1, tmp);
    xle.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yle.f1->size[0] * yle.f1->size[1]);
    yle.f1->size[0] = 1;
    yle.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yle.f1, tmp);
    yle.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ame.f1->size[0] * ame.f1->size[1]);
    ame.f1->size[0] = 1;
    ame.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ame.f1, tmp);
    ame.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bme.f1->size[0] * bme.f1->size[1]);
    bme.f1->size[0] = 1;
    bme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bme.f1, tmp);
    bme.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[28].f1[0], &xle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[28].f1[1], &yle);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[28].f1[2], &ame);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[28].f1[3], &bme);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(cme.f1->size[0] * cme.f1->size[1]);
    cme.f1->size[0] = 1;
    cme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cme.f1, tmp);
    cme.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dme.f1->size[0] * dme.f1->size[1]);
    dme.f1->size[0] = 1;
    dme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dme.f1, tmp);
    dme.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eme.f1->size[0] * eme.f1->size[1]);
    eme.f1->size[0] = 1;
    eme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eme.f1, tmp);
    eme.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fme.f1->size[0] * fme.f1->size[1]);
    fme.f1->size[0] = 1;
    fme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fme.f1, tmp);
    fme.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[29].f1[0], &cme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[29].f1[1], &dme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[29].f1[2], &eme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[29].f1[3], &fme);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(gme.f1->size[0] * gme.f1->size[1]);
    gme.f1->size[0] = 1;
    gme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gme.f1, tmp);
    gme.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hme.f1->size[0] * hme.f1->size[1]);
    hme.f1->size[0] = 1;
    hme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hme.f1, tmp);
    hme.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ime.f1->size[0] * ime.f1->size[1]);
    ime.f1->size[0] = 1;
    ime.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ime.f1, tmp);
    ime.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jme.f1->size[0] * jme.f1->size[1]);
    jme.f1->size[0] = 1;
    jme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jme.f1, tmp);
    jme.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[30].f1[0], &gme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[30].f1[1], &hme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[30].f1[2], &ime);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[30].f1[3], &jme);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(kme.f1->size[0] * kme.f1->size[1]);
    kme.f1->size[0] = 1;
    kme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kme.f1, tmp);
    kme.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lme.f1->size[0] * lme.f1->size[1]);
    lme.f1->size[0] = 1;
    lme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lme.f1, tmp);
    lme.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mme.f1->size[0] * mme.f1->size[1]);
    mme.f1->size[0] = 1;
    mme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mme.f1, tmp);
    mme.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nme.f1->size[0] * nme.f1->size[1]);
    nme.f1->size[0] = 1;
    nme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nme.f1, tmp);
    nme.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[31].f1[0], &kme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[31].f1[1], &lme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[31].f1[2], &mme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[31].f1[3], &nme);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ome.f1->size[0] * ome.f1->size[1]);
    ome.f1->size[0] = 1;
    ome.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ome.f1, tmp);
    ome.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pme.f1->size[0] * pme.f1->size[1]);
    pme.f1->size[0] = 1;
    pme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pme.f1, tmp);
    pme.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qme.f1->size[0] * qme.f1->size[1]);
    qme.f1->size[0] = 1;
    qme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qme.f1, tmp);
    qme.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rme.f1->size[0] * rme.f1->size[1]);
    rme.f1->size[0] = 1;
    rme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rme.f1, tmp);
    rme.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[32].f1[0], &ome);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[32].f1[1], &pme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[32].f1[2], &qme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[32].f1[3], &rme);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(sme.f1->size[0] * sme.f1->size[1]);
    sme.f1->size[0] = 1;
    sme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sme.f1, tmp);
    sme.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tme.f1->size[0] * tme.f1->size[1]);
    tme.f1->size[0] = 1;
    tme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tme.f1, tmp);
    tme.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ume.f1->size[0] * ume.f1->size[1]);
    ume.f1->size[0] = 1;
    ume.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ume.f1, tmp);
    ume.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vme.f1->size[0] * vme.f1->size[1]);
    vme.f1->size[0] = 1;
    vme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vme.f1, tmp);
    vme.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[33].f1[0], &sme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[33].f1[1], &tme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[33].f1[2], &ume);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[33].f1[3], &vme);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wme.f1->size[0] * wme.f1->size[1]);
    wme.f1->size[0] = 1;
    wme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wme.f1, tmp);
    wme.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xme.f1->size[0] * xme.f1->size[1]);
    xme.f1->size[0] = 1;
    xme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xme.f1, tmp);
    xme.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yme.f1->size[0] * yme.f1->size[1]);
    yme.f1->size[0] = 1;
    yme.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yme.f1, tmp);
    yme.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ane.f1->size[0] * ane.f1->size[1]);
    ane.f1->size[0] = 1;
    ane.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ane.f1, tmp);
    ane.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[34].f1[0], &wme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[34].f1[1], &xme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[34].f1[2], &yme);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[34].f1[3], &ane);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bne.f1->size[0] * bne.f1->size[1]);
    bne.f1->size[0] = 1;
    bne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bne.f1, tmp);
    bne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cne.f1->size[0] * cne.f1->size[1]);
    cne.f1->size[0] = 1;
    cne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cne.f1, tmp);
    cne.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dne.f1->size[0] * dne.f1->size[1]);
    dne.f1->size[0] = 1;
    dne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dne.f1, tmp);
    dne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ene.f1->size[0] * ene.f1->size[1]);
    ene.f1->size[0] = 1;
    ene.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ene.f1, tmp);
    ene.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[35].f1[0], &bne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[35].f1[1], &cne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[35].f1[2], &dne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[35].f1[3], &ene);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fne.f1->size[0] * fne.f1->size[1]);
    fne.f1->size[0] = 1;
    fne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fne.f1, tmp);
    fne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gne.f1->size[0] * gne.f1->size[1]);
    gne.f1->size[0] = 1;
    gne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gne.f1, tmp);
    gne.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hne.f1->size[0] * hne.f1->size[1]);
    hne.f1->size[0] = 1;
    hne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hne.f1, tmp);
    hne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ine.f1->size[0] * ine.f1->size[1]);
    ine.f1->size[0] = 1;
    ine.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ine.f1, tmp);
    ine.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[36].f1[0], &fne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[36].f1[1], &gne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[36].f1[2], &hne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[36].f1[3], &ine);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jne.f1->size[0] * jne.f1->size[1]);
    jne.f1->size[0] = 1;
    jne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jne.f1, tmp);
    jne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kne.f1->size[0] * kne.f1->size[1]);
    kne.f1->size[0] = 1;
    kne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kne.f1, tmp);
    kne.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lne.f1->size[0] * lne.f1->size[1]);
    lne.f1->size[0] = 1;
    lne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lne.f1, tmp);
    lne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mne.f1->size[0] * mne.f1->size[1]);
    mne.f1->size[0] = 1;
    mne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mne.f1, tmp);
    mne.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[37].f1[0], &jne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[37].f1[1], &kne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[37].f1[2], &lne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[37].f1[3], &mne);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(nne.f1->size[0] * nne.f1->size[1]);
    nne.f1->size[0] = 1;
    nne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nne.f1, tmp);
    nne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(one.f1->size[0] * one.f1->size[1]);
    one.f1->size[0] = 1;
    one.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(one.f1, tmp);
    one.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pne.f1->size[0] * pne.f1->size[1]);
    pne.f1->size[0] = 1;
    pne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pne.f1, tmp);
    pne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qne.f1->size[0] * qne.f1->size[1]);
    qne.f1->size[0] = 1;
    qne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qne.f1, tmp);
    qne.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[38].f1[0], &nne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[38].f1[1], &one);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[38].f1[2], &pne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[38].f1[3], &qne);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rne.f1->size[0] * rne.f1->size[1]);
    rne.f1->size[0] = 1;
    rne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rne.f1, tmp);
    rne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sne.f1->size[0] * sne.f1->size[1]);
    sne.f1->size[0] = 1;
    sne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sne.f1, tmp);
    sne.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tne.f1->size[0] * tne.f1->size[1]);
    tne.f1->size[0] = 1;
    tne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tne.f1, tmp);
    tne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(une.f1->size[0] * une.f1->size[1]);
    une.f1->size[0] = 1;
    une.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(une.f1, tmp);
    une.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[40].f1[0], &rne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[40].f1[1], &sne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[40].f1[2], &tne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[40].f1[3], &une);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vne.f1->size[0] * vne.f1->size[1]);
    vne.f1->size[0] = 1;
    vne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vne.f1, tmp);
    vne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wne.f1->size[0] * wne.f1->size[1]);
    wne.f1->size[0] = 1;
    wne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wne.f1, tmp);
    wne.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xne.f1->size[0] * xne.f1->size[1]);
    xne.f1->size[0] = 1;
    xne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xne.f1, tmp);
    xne.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yne.f1->size[0] * yne.f1->size[1]);
    yne.f1->size[0] = 1;
    yne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yne.f1, tmp);
    yne.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[41].f1[0], &vne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[41].f1[1], &wne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[41].f1[2], &xne);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[41].f1[3], &yne);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(aoe.f1->size[0] * aoe.f1->size[1]);
    aoe.f1->size[0] = 1;
    aoe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aoe.f1, tmp);
    aoe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(boe.f1->size[0] * boe.f1->size[1]);
    boe.f1->size[0] = 1;
    boe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(boe.f1, tmp);
    boe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(coe.f1->size[0] * coe.f1->size[1]);
    coe.f1->size[0] = 1;
    coe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(coe.f1, tmp);
    coe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(doe.f1->size[0] * doe.f1->size[1]);
    doe.f1->size[0] = 1;
    doe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(doe.f1, tmp);
    doe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[44].f1[0], &aoe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[44].f1[1], &boe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[44].f1[2], &coe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[44].f1[3], &doe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(eoe.f1->size[0] * eoe.f1->size[1]);
    eoe.f1->size[0] = 1;
    eoe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eoe.f1, tmp);
    eoe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(foe.f1->size[0] * foe.f1->size[1]);
    foe.f1->size[0] = 1;
    foe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(foe.f1, tmp);
    foe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(goe.f1->size[0] * goe.f1->size[1]);
    goe.f1->size[0] = 1;
    goe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(goe.f1, tmp);
    goe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hoe.f1->size[0] * hoe.f1->size[1]);
    hoe.f1->size[0] = 1;
    hoe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hoe.f1, tmp);
    hoe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[45].f1[0], &eoe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[45].f1[1], &foe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[45].f1[2], &goe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[45].f1[3], &hoe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ioe.f1->size[0] * ioe.f1->size[1]);
    ioe.f1->size[0] = 1;
    ioe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ioe.f1, tmp);
    ioe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(joe.f1->size[0] * joe.f1->size[1]);
    joe.f1->size[0] = 1;
    joe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(joe.f1, tmp);
    joe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(koe.f1->size[0] * koe.f1->size[1]);
    koe.f1->size[0] = 1;
    koe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(koe.f1, tmp);
    koe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(loe.f1->size[0] * loe.f1->size[1]);
    loe.f1->size[0] = 1;
    loe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(loe.f1, tmp);
    loe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[46].f1[0], &ioe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[46].f1[1], &joe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[46].f1[2], &koe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[46].f1[3], &loe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(moe.f1->size[0] * moe.f1->size[1]);
    moe.f1->size[0] = 1;
    moe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(moe.f1, tmp);
    moe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(noe.f1->size[0] * noe.f1->size[1]);
    noe.f1->size[0] = 1;
    noe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(noe.f1, tmp);
    noe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ooe.f1->size[0] * ooe.f1->size[1]);
    ooe.f1->size[0] = 1;
    ooe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ooe.f1, tmp);
    ooe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(poe.f1->size[0] * poe.f1->size[1]);
    poe.f1->size[0] = 1;
    poe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(poe.f1, tmp);
    poe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[47].f1[0], &moe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[47].f1[1], &noe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[47].f1[2], &ooe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[47].f1[3], &poe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qoe.f1->size[0] * qoe.f1->size[1]);
    qoe.f1->size[0] = 1;
    qoe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qoe.f1, tmp);
    qoe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(roe.f1->size[0] * roe.f1->size[1]);
    roe.f1->size[0] = 1;
    roe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(roe.f1, tmp);
    roe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(soe.f1->size[0] * soe.f1->size[1]);
    soe.f1->size[0] = 1;
    soe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(soe.f1, tmp);
    soe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(toe.f1->size[0] * toe.f1->size[1]);
    toe.f1->size[0] = 1;
    toe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(toe.f1, tmp);
    toe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[48].f1[0], &qoe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[48].f1[1], &roe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[48].f1[2], &soe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[48].f1[3], &toe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(uoe.f1->size[0] * uoe.f1->size[1]);
    uoe.f1->size[0] = 1;
    uoe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uoe.f1, tmp);
    uoe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(voe.f1->size[0] * voe.f1->size[1]);
    voe.f1->size[0] = 1;
    voe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(voe.f1, tmp);
    voe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(woe.f1->size[0] * woe.f1->size[1]);
    woe.f1->size[0] = 1;
    woe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(woe.f1, tmp);
    woe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xoe.f1->size[0] * xoe.f1->size[1]);
    xoe.f1->size[0] = 1;
    xoe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xoe.f1, tmp);
    xoe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[49].f1[0], &uoe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[49].f1[1], &voe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[49].f1[2], &woe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[49].f1[3], &xoe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(yoe.f1->size[0] * yoe.f1->size[1]);
    yoe.f1->size[0] = 1;
    yoe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yoe.f1, tmp);
    yoe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ape.f1->size[0] * ape.f1->size[1]);
    ape.f1->size[0] = 1;
    ape.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ape.f1, tmp);
    ape.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bpe.f1->size[0] * bpe.f1->size[1]);
    bpe.f1->size[0] = 1;
    bpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bpe.f1, tmp);
    bpe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cpe.f1->size[0] * cpe.f1->size[1]);
    cpe.f1->size[0] = 1;
    cpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cpe.f1, tmp);
    cpe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[55].f1[0], &yoe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[55].f1[1], &ape);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[55].f1[2], &bpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[55].f1[3], &cpe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dpe.f1->size[0] * dpe.f1->size[1]);
    dpe.f1->size[0] = 1;
    dpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dpe.f1, tmp);
    dpe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(epe.f1->size[0] * epe.f1->size[1]);
    epe.f1->size[0] = 1;
    epe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(epe.f1, tmp);
    epe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fpe.f1->size[0] * fpe.f1->size[1]);
    fpe.f1->size[0] = 1;
    fpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fpe.f1, tmp);
    fpe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gpe.f1->size[0] * gpe.f1->size[1]);
    gpe.f1->size[0] = 1;
    gpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gpe.f1, tmp);
    gpe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[56].f1[0], &dpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[56].f1[1], &epe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[56].f1[2], &fpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[56].f1[3], &gpe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hpe.f1->size[0] * hpe.f1->size[1]);
    hpe.f1->size[0] = 1;
    hpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hpe.f1, tmp);
    hpe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ipe.f1->size[0] * ipe.f1->size[1]);
    ipe.f1->size[0] = 1;
    ipe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ipe.f1, tmp);
    ipe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jpe.f1->size[0] * jpe.f1->size[1]);
    jpe.f1->size[0] = 1;
    jpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jpe.f1, tmp);
    jpe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kpe.f1->size[0] * kpe.f1->size[1]);
    kpe.f1->size[0] = 1;
    kpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kpe.f1, tmp);
    kpe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[57].f1[0], &hpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[57].f1[1], &ipe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[57].f1[2], &jpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[57].f1[3], &kpe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lpe.f1->size[0] * lpe.f1->size[1]);
    lpe.f1->size[0] = 1;
    lpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lpe.f1, tmp);
    lpe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mpe.f1->size[0] * mpe.f1->size[1]);
    mpe.f1->size[0] = 1;
    mpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mpe.f1, tmp);
    mpe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(npe.f1->size[0] * npe.f1->size[1]);
    npe.f1->size[0] = 1;
    npe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(npe.f1, tmp);
    npe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ope.f1->size[0] * ope.f1->size[1]);
    ope.f1->size[0] = 1;
    ope.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ope.f1, tmp);
    ope.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[58].f1[0], &lpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[58].f1[1], &mpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[58].f1[2], &npe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[58].f1[3], &ope);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ppe.f1->size[0] * ppe.f1->size[1]);
    ppe.f1->size[0] = 1;
    ppe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ppe.f1, tmp);
    ppe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qpe.f1->size[0] * qpe.f1->size[1]);
    qpe.f1->size[0] = 1;
    qpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qpe.f1, tmp);
    qpe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rpe.f1->size[0] * rpe.f1->size[1]);
    rpe.f1->size[0] = 1;
    rpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rpe.f1, tmp);
    rpe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(spe.f1->size[0] * spe.f1->size[1]);
    spe.f1->size[0] = 1;
    spe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(spe.f1, tmp);
    spe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[59].f1[0], &ppe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[59].f1[1], &qpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[59].f1[2], &rpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[59].f1[3], &spe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(tpe.f1->size[0] * tpe.f1->size[1]);
    tpe.f1->size[0] = 1;
    tpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tpe.f1, tmp);
    tpe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(upe.f1->size[0] * upe.f1->size[1]);
    upe.f1->size[0] = 1;
    upe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(upe.f1, tmp);
    upe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vpe.f1->size[0] * vpe.f1->size[1]);
    vpe.f1->size[0] = 1;
    vpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vpe.f1, tmp);
    vpe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wpe.f1->size[0] * wpe.f1->size[1]);
    wpe.f1->size[0] = 1;
    wpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wpe.f1, tmp);
    wpe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[60].f1[0], &tpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[60].f1[1], &upe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[60].f1[2], &vpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[60].f1[3], &wpe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xpe.f1->size[0] * xpe.f1->size[1]);
    xpe.f1->size[0] = 1;
    xpe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xpe.f1, tmp);
    xpe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ype.f1->size[0] * ype.f1->size[1]);
    ype.f1->size[0] = 1;
    ype.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ype.f1, tmp);
    ype.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aqe.f1->size[0] * aqe.f1->size[1]);
    aqe.f1->size[0] = 1;
    aqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aqe.f1, tmp);
    aqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bqe.f1->size[0] * bqe.f1->size[1]);
    bqe.f1->size[0] = 1;
    bqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bqe.f1, tmp);
    bqe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[62].f1[0], &xpe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[62].f1[1], &ype);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[62].f1[2], &aqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[62].f1[3], &bqe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(cqe.f1->size[0] * cqe.f1->size[1]);
    cqe.f1->size[0] = 1;
    cqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cqe.f1, tmp);
    cqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dqe.f1->size[0] * dqe.f1->size[1]);
    dqe.f1->size[0] = 1;
    dqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dqe.f1, tmp);
    dqe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eqe.f1->size[0] * eqe.f1->size[1]);
    eqe.f1->size[0] = 1;
    eqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eqe.f1, tmp);
    eqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fqe.f1->size[0] * fqe.f1->size[1]);
    fqe.f1->size[0] = 1;
    fqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fqe.f1, tmp);
    fqe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[64].f1[0], &cqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[64].f1[1], &dqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[64].f1[2], &eqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[64].f1[3], &fqe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(gqe.f1->size[0] * gqe.f1->size[1]);
    gqe.f1->size[0] = 1;
    gqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gqe.f1, tmp);
    gqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hqe.f1->size[0] * hqe.f1->size[1]);
    hqe.f1->size[0] = 1;
    hqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hqe.f1, tmp);
    hqe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iqe.f1->size[0] * iqe.f1->size[1]);
    iqe.f1->size[0] = 1;
    iqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iqe.f1, tmp);
    iqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jqe.f1->size[0] * jqe.f1->size[1]);
    jqe.f1->size[0] = 1;
    jqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jqe.f1, tmp);
    jqe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[65].f1[0], &gqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[65].f1[1], &hqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[65].f1[2], &iqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[65].f1[3], &jqe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(kqe.f1->size[0] * kqe.f1->size[1]);
    kqe.f1->size[0] = 1;
    kqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kqe.f1, tmp);
    kqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lqe.f1->size[0] * lqe.f1->size[1]);
    lqe.f1->size[0] = 1;
    lqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lqe.f1, tmp);
    lqe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mqe.f1->size[0] * mqe.f1->size[1]);
    mqe.f1->size[0] = 1;
    mqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mqe.f1, tmp);
    mqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nqe.f1->size[0] * nqe.f1->size[1]);
    nqe.f1->size[0] = 1;
    nqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nqe.f1, tmp);
    nqe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[66].f1[0], &kqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[66].f1[1], &lqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[66].f1[2], &mqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[66].f1[3], &nqe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(oqe.f1->size[0] * oqe.f1->size[1]);
    oqe.f1->size[0] = 1;
    oqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oqe.f1, tmp);
    oqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pqe.f1->size[0] * pqe.f1->size[1]);
    pqe.f1->size[0] = 1;
    pqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pqe.f1, tmp);
    pqe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qqe.f1->size[0] * qqe.f1->size[1]);
    qqe.f1->size[0] = 1;
    qqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qqe.f1, tmp);
    qqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rqe.f1->size[0] * rqe.f1->size[1]);
    rqe.f1->size[0] = 1;
    rqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rqe.f1, tmp);
    rqe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[67].f1[0], &oqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[67].f1[1], &pqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[67].f1[2], &qqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[67].f1[3], &rqe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(sqe.f1->size[0] * sqe.f1->size[1]);
    sqe.f1->size[0] = 1;
    sqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sqe.f1, tmp);
    sqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tqe.f1->size[0] * tqe.f1->size[1]);
    tqe.f1->size[0] = 1;
    tqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tqe.f1, tmp);
    tqe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uqe.f1->size[0] * uqe.f1->size[1]);
    uqe.f1->size[0] = 1;
    uqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uqe.f1, tmp);
    uqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vqe.f1->size[0] * vqe.f1->size[1]);
    vqe.f1->size[0] = 1;
    vqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vqe.f1, tmp);
    vqe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[68].f1[0], &sqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[68].f1[1], &tqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[68].f1[2], &uqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[68].f1[3], &vqe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wqe.f1->size[0] * wqe.f1->size[1]);
    wqe.f1->size[0] = 1;
    wqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wqe.f1, tmp);
    wqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xqe.f1->size[0] * xqe.f1->size[1]);
    xqe.f1->size[0] = 1;
    xqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xqe.f1, tmp);
    xqe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yqe.f1->size[0] * yqe.f1->size[1]);
    yqe.f1->size[0] = 1;
    yqe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yqe.f1, tmp);
    yqe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(are.f1->size[0] * are.f1->size[1]);
    are.f1->size[0] = 1;
    are.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(are.f1, tmp);
    are.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[69].f1[0], &wqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[69].f1[1], &xqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[69].f1[2], &yqe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[69].f1[3], &are);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bre.f1->size[0] * bre.f1->size[1]);
    bre.f1->size[0] = 1;
    bre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bre.f1, tmp);
    bre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cre.f1->size[0] * cre.f1->size[1]);
    cre.f1->size[0] = 1;
    cre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cre.f1, tmp);
    cre.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dre.f1->size[0] * dre.f1->size[1]);
    dre.f1->size[0] = 1;
    dre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dre.f1, tmp);
    dre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ere.f1->size[0] * ere.f1->size[1]);
    ere.f1->size[0] = 1;
    ere.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ere.f1, tmp);
    ere.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[70].f1[0], &bre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[70].f1[1], &cre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[70].f1[2], &dre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[70].f1[3], &ere);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fre.f1->size[0] * fre.f1->size[1]);
    fre.f1->size[0] = 1;
    fre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fre.f1, tmp);
    fre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gre.f1->size[0] * gre.f1->size[1]);
    gre.f1->size[0] = 1;
    gre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gre.f1, tmp);
    gre.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hre.f1->size[0] * hre.f1->size[1]);
    hre.f1->size[0] = 1;
    hre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hre.f1, tmp);
    hre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ire.f1->size[0] * ire.f1->size[1]);
    ire.f1->size[0] = 1;
    ire.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ire.f1, tmp);
    ire.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[71].f1[0], &fre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[71].f1[1], &gre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[71].f1[2], &hre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[71].f1[3], &ire);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jre.f1->size[0] * jre.f1->size[1]);
    jre.f1->size[0] = 1;
    jre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jre.f1, tmp);
    jre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kre.f1->size[0] * kre.f1->size[1]);
    kre.f1->size[0] = 1;
    kre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kre.f1, tmp);
    kre.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lre.f1->size[0] * lre.f1->size[1]);
    lre.f1->size[0] = 1;
    lre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lre.f1, tmp);
    lre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mre.f1->size[0] * mre.f1->size[1]);
    mre.f1->size[0] = 1;
    mre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mre.f1, tmp);
    mre.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[73].f1[0], &jre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[73].f1[1], &kre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[73].f1[2], &lre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[73].f1[3], &mre);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(nre.f1->size[0] * nre.f1->size[1]);
    nre.f1->size[0] = 1;
    nre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nre.f1, tmp);
    nre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ore.f1->size[0] * ore.f1->size[1]);
    ore.f1->size[0] = 1;
    ore.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ore.f1, tmp);
    ore.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pre.f1->size[0] * pre.f1->size[1]);
    pre.f1->size[0] = 1;
    pre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pre.f1, tmp);
    pre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qre.f1->size[0] * qre.f1->size[1]);
    qre.f1->size[0] = 1;
    qre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qre.f1, tmp);
    qre.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[74].f1[0], &nre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[74].f1[1], &ore);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[74].f1[2], &pre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[74].f1[3], &qre);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rre.f1->size[0] * rre.f1->size[1]);
    rre.f1->size[0] = 1;
    rre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rre.f1, tmp);
    rre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sre.f1->size[0] * sre.f1->size[1]);
    sre.f1->size[0] = 1;
    sre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sre.f1, tmp);
    sre.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tre.f1->size[0] * tre.f1->size[1]);
    tre.f1->size[0] = 1;
    tre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tre.f1, tmp);
    tre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ure.f1->size[0] * ure.f1->size[1]);
    ure.f1->size[0] = 1;
    ure.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ure.f1, tmp);
    ure.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[75].f1[0], &rre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[75].f1[1], &sre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[75].f1[2], &tre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[75].f1[3], &ure);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vre.f1->size[0] * vre.f1->size[1]);
    vre.f1->size[0] = 1;
    vre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vre.f1, tmp);
    vre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wre.f1->size[0] * wre.f1->size[1]);
    wre.f1->size[0] = 1;
    wre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wre.f1, tmp);
    wre.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xre.f1->size[0] * xre.f1->size[1]);
    xre.f1->size[0] = 1;
    xre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xre.f1, tmp);
    xre.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yre.f1->size[0] * yre.f1->size[1]);
    yre.f1->size[0] = 1;
    yre.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yre.f1, tmp);
    yre.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[76].f1[0], &vre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[76].f1[1], &wre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[76].f1[2], &xre);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[76].f1[3], &yre);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ase.f1->size[0] * ase.f1->size[1]);
    ase.f1->size[0] = 1;
    ase.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ase.f1, tmp);
    ase.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bse.f1->size[0] * bse.f1->size[1]);
    bse.f1->size[0] = 1;
    bse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bse.f1, tmp);
    bse.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cse.f1->size[0] * cse.f1->size[1]);
    cse.f1->size[0] = 1;
    cse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cse.f1, tmp);
    cse.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dse.f1->size[0] * dse.f1->size[1]);
    dse.f1->size[0] = 1;
    dse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dse.f1, tmp);
    dse.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[77].f1[0], &ase);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[77].f1[1], &bse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[77].f1[2], &cse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[77].f1[3], &dse);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ese.f1->size[0] * ese.f1->size[1]);
    ese.f1->size[0] = 1;
    ese.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ese.f1, tmp);
    ese.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fse.f1->size[0] * fse.f1->size[1]);
    fse.f1->size[0] = 1;
    fse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fse.f1, tmp);
    fse.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gse.f1->size[0] * gse.f1->size[1]);
    gse.f1->size[0] = 1;
    gse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gse.f1, tmp);
    gse.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hse.f1->size[0] * hse.f1->size[1]);
    hse.f1->size[0] = 1;
    hse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hse.f1, tmp);
    hse.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[80].f1[0], &ese);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[80].f1[1], &fse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[80].f1[2], &gse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[80].f1[3], &hse);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ise.f1->size[0] * ise.f1->size[1]);
    ise.f1->size[0] = 1;
    ise.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ise.f1, tmp);
    ise.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jse.f1->size[0] * jse.f1->size[1]);
    jse.f1->size[0] = 1;
    jse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jse.f1, tmp);
    jse.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kse.f1->size[0] * kse.f1->size[1]);
    kse.f1->size[0] = 1;
    kse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kse.f1, tmp);
    kse.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lse.f1->size[0] * lse.f1->size[1]);
    lse.f1->size[0] = 1;
    lse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lse.f1, tmp);
    lse.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[82].f1[0], &ise);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[82].f1[1], &jse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[82].f1[2], &kse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[82].f1[3], &lse);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(mse.f1->size[0] * mse.f1->size[1]);
    mse.f1->size[0] = 1;
    mse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mse.f1, tmp);
    mse.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nse.f1->size[0] * nse.f1->size[1]);
    nse.f1->size[0] = 1;
    nse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nse.f1, tmp);
    nse.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ose.f1->size[0] * ose.f1->size[1]);
    ose.f1->size[0] = 1;
    ose.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ose.f1, tmp);
    ose.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pse.f1->size[0] * pse.f1->size[1]);
    pse.f1->size[0] = 1;
    pse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pse.f1, tmp);
    pse.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[84].f1[0], &mse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[84].f1[1], &nse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[84].f1[2], &ose);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[84].f1[3], &pse);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qse.f1->size[0] * qse.f1->size[1]);
    qse.f1->size[0] = 1;
    qse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qse.f1, tmp);
    qse.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rse.f1->size[0] * rse.f1->size[1]);
    rse.f1->size[0] = 1;
    rse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rse.f1, tmp);
    rse.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sse.f1->size[0] * sse.f1->size[1]);
    sse.f1->size[0] = 1;
    sse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sse.f1, tmp);
    sse.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tse.f1->size[0] * tse.f1->size[1]);
    tse.f1->size[0] = 1;
    tse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tse.f1, tmp);
    tse.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[86].f1[0], &qse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[86].f1[1], &rse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[86].f1[2], &sse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[86].f1[3], &tse);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(use.f1->size[0] * use.f1->size[1]);
    use.f1->size[0] = 1;
    use.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(use.f1, tmp);
    use.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vse.f1->size[0] * vse.f1->size[1]);
    vse.f1->size[0] = 1;
    vse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vse.f1, tmp);
    vse.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wse.f1->size[0] * wse.f1->size[1]);
    wse.f1->size[0] = 1;
    wse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wse.f1, tmp);
    wse.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xse.f1->size[0] * xse.f1->size[1]);
    xse.f1->size[0] = 1;
    xse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xse.f1, tmp);
    xse.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[87].f1[0], &use);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[87].f1[1], &vse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[87].f1[2], &wse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[87].f1[3], &xse);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(yse.f1->size[0] * yse.f1->size[1]);
    yse.f1->size[0] = 1;
    yse.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yse.f1, tmp);
    yse.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ate.f1->size[0] * ate.f1->size[1]);
    ate.f1->size[0] = 1;
    ate.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ate.f1, tmp);
    ate.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bte.f1->size[0] * bte.f1->size[1]);
    bte.f1->size[0] = 1;
    bte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bte.f1, tmp);
    bte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cte.f1->size[0] * cte.f1->size[1]);
    cte.f1->size[0] = 1;
    cte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cte.f1, tmp);
    cte.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[88].f1[0], &yse);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[88].f1[1], &ate);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[88].f1[2], &bte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[88].f1[3], &cte);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dte.f1->size[0] * dte.f1->size[1]);
    dte.f1->size[0] = 1;
    dte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dte.f1, tmp);
    dte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ete.f1->size[0] * ete.f1->size[1]);
    ete.f1->size[0] = 1;
    ete.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ete.f1, tmp);
    ete.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fte.f1->size[0] * fte.f1->size[1]);
    fte.f1->size[0] = 1;
    fte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fte.f1, tmp);
    fte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gte.f1->size[0] * gte.f1->size[1]);
    gte.f1->size[0] = 1;
    gte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gte.f1, tmp);
    gte.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[89].f1[0], &dte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[89].f1[1], &ete);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[89].f1[2], &fte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[89].f1[3], &gte);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hte.f1->size[0] * hte.f1->size[1]);
    hte.f1->size[0] = 1;
    hte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hte.f1, tmp);
    hte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ite.f1->size[0] * ite.f1->size[1]);
    ite.f1->size[0] = 1;
    ite.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ite.f1, tmp);
    ite.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jte.f1->size[0] * jte.f1->size[1]);
    jte.f1->size[0] = 1;
    jte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jte.f1, tmp);
    jte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kte.f1->size[0] * kte.f1->size[1]);
    kte.f1->size[0] = 1;
    kte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kte.f1, tmp);
    kte.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[90].f1[0], &hte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[90].f1[1], &ite);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[90].f1[2], &jte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[90].f1[3], &kte);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lte.f1->size[0] * lte.f1->size[1]);
    lte.f1->size[0] = 1;
    lte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lte.f1, tmp);
    lte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mte.f1->size[0] * mte.f1->size[1]);
    mte.f1->size[0] = 1;
    mte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mte.f1, tmp);
    mte.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nte.f1->size[0] * nte.f1->size[1]);
    nte.f1->size[0] = 1;
    nte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nte.f1, tmp);
    nte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ote.f1->size[0] * ote.f1->size[1]);
    ote.f1->size[0] = 1;
    ote.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ote.f1, tmp);
    ote.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[93].f1[0], &lte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[93].f1[1], &mte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[93].f1[2], &nte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[93].f1[3], &ote);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(pte.f1->size[0] * pte.f1->size[1]);
    pte.f1->size[0] = 1;
    pte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pte.f1, tmp);
    pte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qte.f1->size[0] * qte.f1->size[1]);
    qte.f1->size[0] = 1;
    qte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qte.f1, tmp);
    qte.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rte.f1->size[0] * rte.f1->size[1]);
    rte.f1->size[0] = 1;
    rte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rte.f1, tmp);
    rte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ste.f1->size[0] * ste.f1->size[1]);
    ste.f1->size[0] = 1;
    ste.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ste.f1, tmp);
    ste.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[99].f1[0], &pte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[99].f1[1], &qte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[99].f1[2], &rte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[99].f1[3], &ste);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(tte.f1->size[0] * tte.f1->size[1]);
    tte.f1->size[0] = 1;
    tte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tte.f1, tmp);
    tte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ute.f1->size[0] * ute.f1->size[1]);
    ute.f1->size[0] = 1;
    ute.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ute.f1, tmp);
    ute.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vte.f1->size[0] * vte.f1->size[1]);
    vte.f1->size[0] = 1;
    vte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vte.f1, tmp);
    vte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wte.f1->size[0] * wte.f1->size[1]);
    wte.f1->size[0] = 1;
    wte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wte.f1, tmp);
    wte.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[100].f1[0],
        &tte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[100].f1[1],
        &ute);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[100].f1[2],
        &vte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[100].f1[3],
        &wte);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xte.f1->size[0] * xte.f1->size[1]);
    xte.f1->size[0] = 1;
    xte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xte.f1, tmp);
    xte.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yte.f1->size[0] * yte.f1->size[1]);
    yte.f1->size[0] = 1;
    yte.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yte.f1, tmp);
    yte.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aue.f1->size[0] * aue.f1->size[1]);
    aue.f1->size[0] = 1;
    aue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aue.f1, tmp);
    aue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bue.f1->size[0] * bue.f1->size[1]);
    bue.f1->size[0] = 1;
    bue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bue.f1, tmp);
    bue.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[101].f1[0],
        &xte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[101].f1[1],
        &yte);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[101].f1[2],
        &aue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[101].f1[3],
        &bue);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(cue.f1->size[0] * cue.f1->size[1]);
    cue.f1->size[0] = 1;
    cue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cue.f1, tmp);
    cue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(due.f1->size[0] * due.f1->size[1]);
    due.f1->size[0] = 1;
    due.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(due.f1, tmp);
    due.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eue.f1->size[0] * eue.f1->size[1]);
    eue.f1->size[0] = 1;
    eue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eue.f1, tmp);
    eue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fue.f1->size[0] * fue.f1->size[1]);
    fue.f1->size[0] = 1;
    fue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fue.f1, tmp);
    fue.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[107].f1[0],
        &cue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[107].f1[1],
        &due);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[107].f1[2],
        &eue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[107].f1[3],
        &fue);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(gue.f1->size[0] * gue.f1->size[1]);
    gue.f1->size[0] = 1;
    gue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gue.f1, tmp);
    gue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hue.f1->size[0] * hue.f1->size[1]);
    hue.f1->size[0] = 1;
    hue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hue.f1, tmp);
    hue.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iue.f1->size[0] * iue.f1->size[1]);
    iue.f1->size[0] = 1;
    iue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iue.f1, tmp);
    iue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jue.f1->size[0] * jue.f1->size[1]);
    jue.f1->size[0] = 1;
    jue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jue.f1, tmp);
    jue.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[109].f1[0],
        &gue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[109].f1[1],
        &hue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[109].f1[2],
        &iue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[109].f1[3],
        &jue);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(kue.f1->size[0] * kue.f1->size[1]);
    kue.f1->size[0] = 1;
    kue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kue.f1, tmp);
    kue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lue.f1->size[0] * lue.f1->size[1]);
    lue.f1->size[0] = 1;
    lue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lue.f1, tmp);
    lue.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mue.f1->size[0] * mue.f1->size[1]);
    mue.f1->size[0] = 1;
    mue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mue.f1, tmp);
    mue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nue.f1->size[0] * nue.f1->size[1]);
    nue.f1->size[0] = 1;
    nue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nue.f1, tmp);
    nue.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[110].f1[0],
        &kue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[110].f1[1],
        &lue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[110].f1[2],
        &mue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[110].f1[3],
        &nue);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(oue.f1->size[0] * oue.f1->size[1]);
    oue.f1->size[0] = 1;
    oue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oue.f1, tmp);
    oue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pue.f1->size[0] * pue.f1->size[1]);
    pue.f1->size[0] = 1;
    pue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pue.f1, tmp);
    pue.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(que.f1->size[0] * que.f1->size[1]);
    que.f1->size[0] = 1;
    que.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(que.f1, tmp);
    que.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rue.f1->size[0] * rue.f1->size[1]);
    rue.f1->size[0] = 1;
    rue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rue.f1, tmp);
    rue.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[112].f1[0],
        &oue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[112].f1[1],
        &pue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[112].f1[2],
        &que);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[112].f1[3],
        &rue);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(sue.f1->size[0] * sue.f1->size[1]);
    sue.f1->size[0] = 1;
    sue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sue.f1, tmp);
    sue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tue.f1->size[0] * tue.f1->size[1]);
    tue.f1->size[0] = 1;
    tue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tue.f1, tmp);
    tue.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uue.f1->size[0] * uue.f1->size[1]);
    uue.f1->size[0] = 1;
    uue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uue.f1, tmp);
    uue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vue.f1->size[0] * vue.f1->size[1]);
    vue.f1->size[0] = 1;
    vue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vue.f1, tmp);
    vue.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[117].f1[0],
        &sue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[117].f1[1],
        &tue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[117].f1[2],
        &uue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[117].f1[3],
        &vue);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wue.f1->size[0] * wue.f1->size[1]);
    wue.f1->size[0] = 1;
    wue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wue.f1, tmp);
    wue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xue.f1->size[0] * xue.f1->size[1]);
    xue.f1->size[0] = 1;
    xue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xue.f1, tmp);
    xue.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yue.f1->size[0] * yue.f1->size[1]);
    yue.f1->size[0] = 1;
    yue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yue.f1, tmp);
    yue.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ave.f1->size[0] * ave.f1->size[1]);
    ave.f1->size[0] = 1;
    ave.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ave.f1, tmp);
    ave.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[119].f1[0],
        &wue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[119].f1[1],
        &xue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[119].f1[2],
        &yue);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[119].f1[3],
        &ave);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bve.f1->size[0] * bve.f1->size[1]);
    bve.f1->size[0] = 1;
    bve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bve.f1, tmp);
    bve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cve.f1->size[0] * cve.f1->size[1]);
    cve.f1->size[0] = 1;
    cve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cve.f1, tmp);
    cve.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dve.f1->size[0] * dve.f1->size[1]);
    dve.f1->size[0] = 1;
    dve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dve.f1, tmp);
    dve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eve.f1->size[0] * eve.f1->size[1]);
    eve.f1->size[0] = 1;
    eve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eve.f1, tmp);
    eve.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[124].f1[0],
        &bve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[124].f1[1],
        &cve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[124].f1[2],
        &dve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[124].f1[3],
        &eve);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fve.f1->size[0] * fve.f1->size[1]);
    fve.f1->size[0] = 1;
    fve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fve.f1, tmp);
    fve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gve.f1->size[0] * gve.f1->size[1]);
    gve.f1->size[0] = 1;
    gve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gve.f1, tmp);
    gve.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hve.f1->size[0] * hve.f1->size[1]);
    hve.f1->size[0] = 1;
    hve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hve.f1, tmp);
    hve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ive.f1->size[0] * ive.f1->size[1]);
    ive.f1->size[0] = 1;
    ive.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ive.f1, tmp);
    ive.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[126].f1[0],
        &fve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[126].f1[1],
        &gve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[126].f1[2],
        &hve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[126].f1[3],
        &ive);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jve.f1->size[0] * jve.f1->size[1]);
    jve.f1->size[0] = 1;
    jve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jve.f1, tmp);
    jve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kve.f1->size[0] * kve.f1->size[1]);
    kve.f1->size[0] = 1;
    kve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kve.f1, tmp);
    kve.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lve.f1->size[0] * lve.f1->size[1]);
    lve.f1->size[0] = 1;
    lve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lve.f1, tmp);
    lve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mve.f1->size[0] * mve.f1->size[1]);
    mve.f1->size[0] = 1;
    mve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mve.f1, tmp);
    mve.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[127].f1[0],
        &jve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[127].f1[1],
        &kve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[127].f1[2],
        &lve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[127].f1[3],
        &mve);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(nve.f1->size[0] * nve.f1->size[1]);
    nve.f1->size[0] = 1;
    nve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nve.f1, tmp);
    nve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ove.f1->size[0] * ove.f1->size[1]);
    ove.f1->size[0] = 1;
    ove.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ove.f1, tmp);
    ove.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pve.f1->size[0] * pve.f1->size[1]);
    pve.f1->size[0] = 1;
    pve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pve.f1, tmp);
    pve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qve.f1->size[0] * qve.f1->size[1]);
    qve.f1->size[0] = 1;
    qve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qve.f1, tmp);
    qve.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[128].f1[0],
        &nve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[128].f1[1],
        &ove);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[128].f1[2],
        &pve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[128].f1[3],
        &qve);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rve.f1->size[0] * rve.f1->size[1]);
    rve.f1->size[0] = 1;
    rve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rve.f1, tmp);
    rve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sve.f1->size[0] * sve.f1->size[1]);
    sve.f1->size[0] = 1;
    sve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sve.f1, tmp);
    sve.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tve.f1->size[0] * tve.f1->size[1]);
    tve.f1->size[0] = 1;
    tve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tve.f1, tmp);
    tve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uve.f1->size[0] * uve.f1->size[1]);
    uve.f1->size[0] = 1;
    uve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uve.f1, tmp);
    uve.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[129].f1[0],
        &rve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[129].f1[1],
        &sve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[129].f1[2],
        &tve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[129].f1[3],
        &uve);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vve.f1->size[0] * vve.f1->size[1]);
    vve.f1->size[0] = 1;
    vve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vve.f1, tmp);
    vve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wve.f1->size[0] * wve.f1->size[1]);
    wve.f1->size[0] = 1;
    wve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wve.f1, tmp);
    wve.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xve.f1->size[0] * xve.f1->size[1]);
    xve.f1->size[0] = 1;
    xve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xve.f1, tmp);
    xve.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yve.f1->size[0] * yve.f1->size[1]);
    yve.f1->size[0] = 1;
    yve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yve.f1, tmp);
    yve.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[131].f1[0],
        &vve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[131].f1[1],
        &wve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[131].f1[2],
        &xve);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[131].f1[3],
        &yve);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(awe.f1->size[0] * awe.f1->size[1]);
    awe.f1->size[0] = 1;
    awe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(awe.f1, tmp);
    awe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bwe.f1->size[0] * bwe.f1->size[1]);
    bwe.f1->size[0] = 1;
    bwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bwe.f1, tmp);
    bwe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cwe.f1->size[0] * cwe.f1->size[1]);
    cwe.f1->size[0] = 1;
    cwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cwe.f1, tmp);
    cwe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dwe.f1->size[0] * dwe.f1->size[1]);
    dwe.f1->size[0] = 1;
    dwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dwe.f1, tmp);
    dwe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[136].f1[0],
        &awe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[136].f1[1],
        &bwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[136].f1[2],
        &cwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[136].f1[3],
        &dwe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ewe.f1->size[0] * ewe.f1->size[1]);
    ewe.f1->size[0] = 1;
    ewe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ewe.f1, tmp);
    ewe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fwe.f1->size[0] * fwe.f1->size[1]);
    fwe.f1->size[0] = 1;
    fwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fwe.f1, tmp);
    fwe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gwe.f1->size[0] * gwe.f1->size[1]);
    gwe.f1->size[0] = 1;
    gwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gwe.f1, tmp);
    gwe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hwe.f1->size[0] * hwe.f1->size[1]);
    hwe.f1->size[0] = 1;
    hwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hwe.f1, tmp);
    hwe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[137].f1[0],
        &ewe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[137].f1[1],
        &fwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[137].f1[2],
        &gwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[137].f1[3],
        &hwe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(iwe.f1->size[0] * iwe.f1->size[1]);
    iwe.f1->size[0] = 1;
    iwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iwe.f1, tmp);
    iwe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jwe.f1->size[0] * jwe.f1->size[1]);
    jwe.f1->size[0] = 1;
    jwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jwe.f1, tmp);
    jwe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kwe.f1->size[0] * kwe.f1->size[1]);
    kwe.f1->size[0] = 1;
    kwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kwe.f1, tmp);
    kwe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lwe.f1->size[0] * lwe.f1->size[1]);
    lwe.f1->size[0] = 1;
    lwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lwe.f1, tmp);
    lwe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[138].f1[0],
        &iwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[138].f1[1],
        &jwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[138].f1[2],
        &kwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[138].f1[3],
        &lwe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(mwe.f1->size[0] * mwe.f1->size[1]);
    mwe.f1->size[0] = 1;
    mwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mwe.f1, tmp);
    mwe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nwe.f1->size[0] * nwe.f1->size[1]);
    nwe.f1->size[0] = 1;
    nwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nwe.f1, tmp);
    nwe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(owe.f1->size[0] * owe.f1->size[1]);
    owe.f1->size[0] = 1;
    owe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(owe.f1, tmp);
    owe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pwe.f1->size[0] * pwe.f1->size[1]);
    pwe.f1->size[0] = 1;
    pwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pwe.f1, tmp);
    pwe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[139].f1[0],
        &mwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[139].f1[1],
        &nwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[139].f1[2],
        &owe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[139].f1[3],
        &pwe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qwe.f1->size[0] * qwe.f1->size[1]);
    qwe.f1->size[0] = 1;
    qwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qwe.f1, tmp);
    qwe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rwe.f1->size[0] * rwe.f1->size[1]);
    rwe.f1->size[0] = 1;
    rwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rwe.f1, tmp);
    rwe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(swe.f1->size[0] * swe.f1->size[1]);
    swe.f1->size[0] = 1;
    swe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(swe.f1, tmp);
    swe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(twe.f1->size[0] * twe.f1->size[1]);
    twe.f1->size[0] = 1;
    twe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(twe.f1, tmp);
    twe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[143].f1[0],
        &qwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[143].f1[1],
        &rwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[143].f1[2],
        &swe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[143].f1[3],
        &twe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(uwe.f1->size[0] * uwe.f1->size[1]);
    uwe.f1->size[0] = 1;
    uwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uwe.f1, tmp);
    uwe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vwe.f1->size[0] * vwe.f1->size[1]);
    vwe.f1->size[0] = 1;
    vwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vwe.f1, tmp);
    vwe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wwe.f1->size[0] * wwe.f1->size[1]);
    wwe.f1->size[0] = 1;
    wwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wwe.f1, tmp);
    wwe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xwe.f1->size[0] * xwe.f1->size[1]);
    xwe.f1->size[0] = 1;
    xwe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xwe.f1, tmp);
    xwe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[145].f1[0],
        &uwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[145].f1[1],
        &vwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[145].f1[2],
        &wwe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[145].f1[3],
        &xwe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ywe.f1->size[0] * ywe.f1->size[1]);
    ywe.f1->size[0] = 1;
    ywe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ywe.f1, tmp);
    ywe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(axe.f1->size[0] * axe.f1->size[1]);
    axe.f1->size[0] = 1;
    axe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(axe.f1, tmp);
    axe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bxe.f1->size[0] * bxe.f1->size[1]);
    bxe.f1->size[0] = 1;
    bxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bxe.f1, tmp);
    bxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cxe.f1->size[0] * cxe.f1->size[1]);
    cxe.f1->size[0] = 1;
    cxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cxe.f1, tmp);
    cxe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[146].f1[0],
        &ywe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[146].f1[1],
        &axe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[146].f1[2],
        &bxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[146].f1[3],
        &cxe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dxe.f1->size[0] * dxe.f1->size[1]);
    dxe.f1->size[0] = 1;
    dxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dxe.f1, tmp);
    dxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(exe.f1->size[0] * exe.f1->size[1]);
    exe.f1->size[0] = 1;
    exe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(exe.f1, tmp);
    exe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fxe.f1->size[0] * fxe.f1->size[1]);
    fxe.f1->size[0] = 1;
    fxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fxe.f1, tmp);
    fxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gxe.f1->size[0] * gxe.f1->size[1]);
    gxe.f1->size[0] = 1;
    gxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gxe.f1, tmp);
    gxe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[147].f1[0],
        &dxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[147].f1[1],
        &exe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[147].f1[2],
        &fxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[147].f1[3],
        &gxe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hxe.f1->size[0] * hxe.f1->size[1]);
    hxe.f1->size[0] = 1;
    hxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hxe.f1, tmp);
    hxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ixe.f1->size[0] * ixe.f1->size[1]);
    ixe.f1->size[0] = 1;
    ixe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ixe.f1, tmp);
    ixe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jxe.f1->size[0] * jxe.f1->size[1]);
    jxe.f1->size[0] = 1;
    jxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jxe.f1, tmp);
    jxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kxe.f1->size[0] * kxe.f1->size[1]);
    kxe.f1->size[0] = 1;
    kxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kxe.f1, tmp);
    kxe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[148].f1[0],
        &hxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[148].f1[1],
        &ixe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[148].f1[2],
        &jxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[148].f1[3],
        &kxe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lxe.f1->size[0] * lxe.f1->size[1]);
    lxe.f1->size[0] = 1;
    lxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lxe.f1, tmp);
    lxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mxe.f1->size[0] * mxe.f1->size[1]);
    mxe.f1->size[0] = 1;
    mxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mxe.f1, tmp);
    mxe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nxe.f1->size[0] * nxe.f1->size[1]);
    nxe.f1->size[0] = 1;
    nxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nxe.f1, tmp);
    nxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oxe.f1->size[0] * oxe.f1->size[1]);
    oxe.f1->size[0] = 1;
    oxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oxe.f1, tmp);
    oxe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[149].f1[0],
        &lxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[149].f1[1],
        &mxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[149].f1[2],
        &nxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[149].f1[3],
        &oxe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(pxe.f1->size[0] * pxe.f1->size[1]);
    pxe.f1->size[0] = 1;
    pxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pxe.f1, tmp);
    pxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qxe.f1->size[0] * qxe.f1->size[1]);
    qxe.f1->size[0] = 1;
    qxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qxe.f1, tmp);
    qxe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rxe.f1->size[0] * rxe.f1->size[1]);
    rxe.f1->size[0] = 1;
    rxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rxe.f1, tmp);
    rxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sxe.f1->size[0] * sxe.f1->size[1]);
    sxe.f1->size[0] = 1;
    sxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sxe.f1, tmp);
    sxe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[150].f1[0],
        &pxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[150].f1[1],
        &qxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[150].f1[2],
        &rxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[150].f1[3],
        &sxe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(txe.f1->size[0] * txe.f1->size[1]);
    txe.f1->size[0] = 1;
    txe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(txe.f1, tmp);
    txe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uxe.f1->size[0] * uxe.f1->size[1]);
    uxe.f1->size[0] = 1;
    uxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uxe.f1, tmp);
    uxe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vxe.f1->size[0] * vxe.f1->size[1]);
    vxe.f1->size[0] = 1;
    vxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vxe.f1, tmp);
    vxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wxe.f1->size[0] * wxe.f1->size[1]);
    wxe.f1->size[0] = 1;
    wxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wxe.f1, tmp);
    wxe.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[151].f1[0],
        &txe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[151].f1[1],
        &uxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[151].f1[2],
        &vxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[151].f1[3],
        &wxe);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xxe.f1->size[0] * xxe.f1->size[1]);
    xxe.f1->size[0] = 1;
    xxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xxe.f1, tmp);
    xxe.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yxe.f1->size[0] * yxe.f1->size[1]);
    yxe.f1->size[0] = 1;
    yxe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yxe.f1, tmp);
    yxe.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(aye.f1->size[0] * aye.f1->size[1]);
    aye.f1->size[0] = 1;
    aye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aye.f1, tmp);
    aye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bye.f1->size[0] * bye.f1->size[1]);
    bye.f1->size[0] = 1;
    bye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bye.f1, tmp);
    bye.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[156].f1[0],
        &xxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[156].f1[1],
        &yxe);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[156].f1[2],
        &aye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[156].f1[3],
        &bye);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(cye.f1->size[0] * cye.f1->size[1]);
    cye.f1->size[0] = 1;
    cye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cye.f1, tmp);
    cye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dye.f1->size[0] * dye.f1->size[1]);
    dye.f1->size[0] = 1;
    dye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dye.f1, tmp);
    dye.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(eye.f1->size[0] * eye.f1->size[1]);
    eye.f1->size[0] = 1;
    eye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eye.f1, tmp);
    eye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fye.f1->size[0] * fye.f1->size[1]);
    fye.f1->size[0] = 1;
    fye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fye.f1, tmp);
    fye.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[157].f1[0],
        &cye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[157].f1[1],
        &dye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[157].f1[2],
        &eye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[157].f1[3],
        &fye);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(gye.f1->size[0] * gye.f1->size[1]);
    gye.f1->size[0] = 1;
    gye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gye.f1, tmp);
    gye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hye.f1->size[0] * hye.f1->size[1]);
    hye.f1->size[0] = 1;
    hye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hye.f1, tmp);
    hye.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iye.f1->size[0] * iye.f1->size[1]);
    iye.f1->size[0] = 1;
    iye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iye.f1, tmp);
    iye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jye.f1->size[0] * jye.f1->size[1]);
    jye.f1->size[0] = 1;
    jye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jye.f1, tmp);
    jye.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[158].f1[0],
        &gye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[158].f1[1],
        &hye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[158].f1[2],
        &iye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[158].f1[3],
        &jye);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(kye.f1->size[0] * kye.f1->size[1]);
    kye.f1->size[0] = 1;
    kye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kye.f1, tmp);
    kye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lye.f1->size[0] * lye.f1->size[1]);
    lye.f1->size[0] = 1;
    lye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lye.f1, tmp);
    lye.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mye.f1->size[0] * mye.f1->size[1]);
    mye.f1->size[0] = 1;
    mye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mye.f1, tmp);
    mye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nye.f1->size[0] * nye.f1->size[1]);
    nye.f1->size[0] = 1;
    nye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nye.f1, tmp);
    nye.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[159].f1[0],
        &kye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[159].f1[1],
        &lye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[159].f1[2],
        &mye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[159].f1[3],
        &nye);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(oye.f1->size[0] * oye.f1->size[1]);
    oye.f1->size[0] = 1;
    oye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oye.f1, tmp);
    oye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pye.f1->size[0] * pye.f1->size[1]);
    pye.f1->size[0] = 1;
    pye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pye.f1, tmp);
    pye.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qye.f1->size[0] * qye.f1->size[1]);
    qye.f1->size[0] = 1;
    qye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qye.f1, tmp);
    qye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rye.f1->size[0] * rye.f1->size[1]);
    rye.f1->size[0] = 1;
    rye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rye.f1, tmp);
    rye.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[160].f1[0],
        &oye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[160].f1[1],
        &pye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[160].f1[2],
        &qye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[160].f1[3],
        &rye);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(sye.f1->size[0] * sye.f1->size[1]);
    sye.f1->size[0] = 1;
    sye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sye.f1, tmp);
    sye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tye.f1->size[0] * tye.f1->size[1]);
    tye.f1->size[0] = 1;
    tye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tye.f1, tmp);
    tye.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uye.f1->size[0] * uye.f1->size[1]);
    uye.f1->size[0] = 1;
    uye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uye.f1, tmp);
    uye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vye.f1->size[0] * vye.f1->size[1]);
    vye.f1->size[0] = 1;
    vye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vye.f1, tmp);
    vye.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[162].f1[0],
        &sye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[162].f1[1],
        &tye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[162].f1[2],
        &uye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[162].f1[3],
        &vye);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wye.f1->size[0] * wye.f1->size[1]);
    wye.f1->size[0] = 1;
    wye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wye.f1, tmp);
    wye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xye.f1->size[0] * xye.f1->size[1]);
    xye.f1->size[0] = 1;
    xye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xye.f1, tmp);
    xye.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yye.f1->size[0] * yye.f1->size[1]);
    yye.f1->size[0] = 1;
    yye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yye.f1, tmp);
    yye.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aaf.f1->size[0] * aaf.f1->size[1]);
    aaf.f1->size[0] = 1;
    aaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aaf.f1, tmp);
    aaf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[165].f1[0],
        &wye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[165].f1[1],
        &xye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[165].f1[2],
        &yye);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[165].f1[3],
        &aaf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(baf.f1->size[0] * baf.f1->size[1]);
    baf.f1->size[0] = 1;
    baf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(baf.f1, tmp);
    baf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(caf.f1->size[0] * caf.f1->size[1]);
    caf.f1->size[0] = 1;
    caf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(caf.f1, tmp);
    caf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(daf.f1->size[0] * daf.f1->size[1]);
    daf.f1->size[0] = 1;
    daf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(daf.f1, tmp);
    daf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eaf.f1->size[0] * eaf.f1->size[1]);
    eaf.f1->size[0] = 1;
    eaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eaf.f1, tmp);
    eaf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[166].f1[0],
        &baf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[166].f1[1],
        &caf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[166].f1[2],
        &daf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[166].f1[3],
        &eaf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(faf.f1->size[0] * faf.f1->size[1]);
    faf.f1->size[0] = 1;
    faf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(faf.f1, tmp);
    faf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gaf.f1->size[0] * gaf.f1->size[1]);
    gaf.f1->size[0] = 1;
    gaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gaf.f1, tmp);
    gaf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(haf.f1->size[0] * haf.f1->size[1]);
    haf.f1->size[0] = 1;
    haf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(haf.f1, tmp);
    haf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iaf.f1->size[0] * iaf.f1->size[1]);
    iaf.f1->size[0] = 1;
    iaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iaf.f1, tmp);
    iaf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[167].f1[0],
        &faf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[167].f1[1],
        &gaf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[167].f1[2],
        &haf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[167].f1[3],
        &iaf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jaf.f1->size[0] * jaf.f1->size[1]);
    jaf.f1->size[0] = 1;
    jaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jaf.f1, tmp);
    jaf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kaf.f1->size[0] * kaf.f1->size[1]);
    kaf.f1->size[0] = 1;
    kaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kaf.f1, tmp);
    kaf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(laf.f1->size[0] * laf.f1->size[1]);
    laf.f1->size[0] = 1;
    laf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(laf.f1, tmp);
    laf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(maf.f1->size[0] * maf.f1->size[1]);
    maf.f1->size[0] = 1;
    maf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(maf.f1, tmp);
    maf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[168].f1[0],
        &jaf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[168].f1[1],
        &kaf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[168].f1[2],
        &laf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[168].f1[3],
        &maf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(naf.f1->size[0] * naf.f1->size[1]);
    naf.f1->size[0] = 1;
    naf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(naf.f1, tmp);
    naf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oaf.f1->size[0] * oaf.f1->size[1]);
    oaf.f1->size[0] = 1;
    oaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oaf.f1, tmp);
    oaf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(paf.f1->size[0] * paf.f1->size[1]);
    paf.f1->size[0] = 1;
    paf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(paf.f1, tmp);
    paf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qaf.f1->size[0] * qaf.f1->size[1]);
    qaf.f1->size[0] = 1;
    qaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qaf.f1, tmp);
    qaf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[169].f1[0],
        &naf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[169].f1[1],
        &oaf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[169].f1[2],
        &paf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[169].f1[3],
        &qaf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(raf.f1->size[0] * raf.f1->size[1]);
    raf.f1->size[0] = 1;
    raf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(raf.f1, tmp);
    raf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(saf.f1->size[0] * saf.f1->size[1]);
    saf.f1->size[0] = 1;
    saf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(saf.f1, tmp);
    saf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(taf.f1->size[0] * taf.f1->size[1]);
    taf.f1->size[0] = 1;
    taf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(taf.f1, tmp);
    taf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uaf.f1->size[0] * uaf.f1->size[1]);
    uaf.f1->size[0] = 1;
    uaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uaf.f1, tmp);
    uaf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[170].f1[0],
        &raf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[170].f1[1],
        &saf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[170].f1[2],
        &taf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[170].f1[3],
        &uaf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vaf.f1->size[0] * vaf.f1->size[1]);
    vaf.f1->size[0] = 1;
    vaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vaf.f1, tmp);
    vaf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(waf.f1->size[0] * waf.f1->size[1]);
    waf.f1->size[0] = 1;
    waf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(waf.f1, tmp);
    waf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xaf.f1->size[0] * xaf.f1->size[1]);
    xaf.f1->size[0] = 1;
    xaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xaf.f1, tmp);
    xaf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yaf.f1->size[0] * yaf.f1->size[1]);
    yaf.f1->size[0] = 1;
    yaf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yaf.f1, tmp);
    yaf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[171].f1[0],
        &vaf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[171].f1[1],
        &waf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[171].f1[2],
        &xaf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[171].f1[3],
        &yaf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(abf.f1->size[0] * abf.f1->size[1]);
    abf.f1->size[0] = 1;
    abf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(abf.f1, tmp);
    abf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bbf.f1->size[0] * bbf.f1->size[1]);
    bbf.f1->size[0] = 1;
    bbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bbf.f1, tmp);
    bbf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cbf.f1->size[0] * cbf.f1->size[1]);
    cbf.f1->size[0] = 1;
    cbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cbf.f1, tmp);
    cbf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dbf.f1->size[0] * dbf.f1->size[1]);
    dbf.f1->size[0] = 1;
    dbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dbf.f1, tmp);
    dbf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[174].f1[0],
        &abf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[174].f1[1],
        &bbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[174].f1[2],
        &cbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[174].f1[3],
        &dbf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ebf.f1->size[0] * ebf.f1->size[1]);
    ebf.f1->size[0] = 1;
    ebf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ebf.f1, tmp);
    ebf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fbf.f1->size[0] * fbf.f1->size[1]);
    fbf.f1->size[0] = 1;
    fbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fbf.f1, tmp);
    fbf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gbf.f1->size[0] * gbf.f1->size[1]);
    gbf.f1->size[0] = 1;
    gbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gbf.f1, tmp);
    gbf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hbf.f1->size[0] * hbf.f1->size[1]);
    hbf.f1->size[0] = 1;
    hbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hbf.f1, tmp);
    hbf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[175].f1[0],
        &ebf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[175].f1[1],
        &fbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[175].f1[2],
        &gbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[175].f1[3],
        &hbf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ibf.f1->size[0] * ibf.f1->size[1]);
    ibf.f1->size[0] = 1;
    ibf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ibf.f1, tmp);
    ibf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jbf.f1->size[0] * jbf.f1->size[1]);
    jbf.f1->size[0] = 1;
    jbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jbf.f1, tmp);
    jbf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kbf.f1->size[0] * kbf.f1->size[1]);
    kbf.f1->size[0] = 1;
    kbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kbf.f1, tmp);
    kbf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lbf.f1->size[0] * lbf.f1->size[1]);
    lbf.f1->size[0] = 1;
    lbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lbf.f1, tmp);
    lbf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[176].f1[0],
        &ibf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[176].f1[1],
        &jbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[176].f1[2],
        &kbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[176].f1[3],
        &lbf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(mbf.f1->size[0] * mbf.f1->size[1]);
    mbf.f1->size[0] = 1;
    mbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mbf.f1, tmp);
    mbf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nbf.f1->size[0] * nbf.f1->size[1]);
    nbf.f1->size[0] = 1;
    nbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nbf.f1, tmp);
    nbf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(obf.f1->size[0] * obf.f1->size[1]);
    obf.f1->size[0] = 1;
    obf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(obf.f1, tmp);
    obf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pbf.f1->size[0] * pbf.f1->size[1]);
    pbf.f1->size[0] = 1;
    pbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pbf.f1, tmp);
    pbf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[177].f1[0],
        &mbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[177].f1[1],
        &nbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[177].f1[2],
        &obf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[177].f1[3],
        &pbf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qbf.f1->size[0] * qbf.f1->size[1]);
    qbf.f1->size[0] = 1;
    qbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qbf.f1, tmp);
    qbf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rbf.f1->size[0] * rbf.f1->size[1]);
    rbf.f1->size[0] = 1;
    rbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rbf.f1, tmp);
    rbf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sbf.f1->size[0] * sbf.f1->size[1]);
    sbf.f1->size[0] = 1;
    sbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sbf.f1, tmp);
    sbf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tbf.f1->size[0] * tbf.f1->size[1]);
    tbf.f1->size[0] = 1;
    tbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tbf.f1, tmp);
    tbf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[178].f1[0],
        &qbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[178].f1[1],
        &rbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[178].f1[2],
        &sbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[178].f1[3],
        &tbf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ubf.f1->size[0] * ubf.f1->size[1]);
    ubf.f1->size[0] = 1;
    ubf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ubf.f1, tmp);
    ubf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vbf.f1->size[0] * vbf.f1->size[1]);
    vbf.f1->size[0] = 1;
    vbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vbf.f1, tmp);
    vbf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wbf.f1->size[0] * wbf.f1->size[1]);
    wbf.f1->size[0] = 1;
    wbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wbf.f1, tmp);
    wbf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xbf.f1->size[0] * xbf.f1->size[1]);
    xbf.f1->size[0] = 1;
    xbf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xbf.f1, tmp);
    xbf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[179].f1[0],
        &ubf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[179].f1[1],
        &vbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[179].f1[2],
        &wbf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[179].f1[3],
        &xbf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ybf.f1->size[0] * ybf.f1->size[1]);
    ybf.f1->size[0] = 1;
    ybf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ybf.f1, tmp);
    ybf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(acf.f1->size[0] * acf.f1->size[1]);
    acf.f1->size[0] = 1;
    acf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(acf.f1, tmp);
    acf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bcf.f1->size[0] * bcf.f1->size[1]);
    bcf.f1->size[0] = 1;
    bcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bcf.f1, tmp);
    bcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ccf.f1->size[0] * ccf.f1->size[1]);
    ccf.f1->size[0] = 1;
    ccf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ccf.f1, tmp);
    ccf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[180].f1[0],
        &ybf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[180].f1[1],
        &acf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[180].f1[2],
        &bcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[180].f1[3],
        &ccf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dcf.f1->size[0] * dcf.f1->size[1]);
    dcf.f1->size[0] = 1;
    dcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dcf.f1, tmp);
    dcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ecf.f1->size[0] * ecf.f1->size[1]);
    ecf.f1->size[0] = 1;
    ecf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ecf.f1, tmp);
    ecf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fcf.f1->size[0] * fcf.f1->size[1]);
    fcf.f1->size[0] = 1;
    fcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fcf.f1, tmp);
    fcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gcf.f1->size[0] * gcf.f1->size[1]);
    gcf.f1->size[0] = 1;
    gcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gcf.f1, tmp);
    gcf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[185].f1[0],
        &dcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[185].f1[1],
        &ecf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[185].f1[2],
        &fcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[185].f1[3],
        &gcf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hcf.f1->size[0] * hcf.f1->size[1]);
    hcf.f1->size[0] = 1;
    hcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hcf.f1, tmp);
    hcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(icf.f1->size[0] * icf.f1->size[1]);
    icf.f1->size[0] = 1;
    icf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(icf.f1, tmp);
    icf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jcf.f1->size[0] * jcf.f1->size[1]);
    jcf.f1->size[0] = 1;
    jcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jcf.f1, tmp);
    jcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kcf.f1->size[0] * kcf.f1->size[1]);
    kcf.f1->size[0] = 1;
    kcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kcf.f1, tmp);
    kcf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[186].f1[0],
        &hcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[186].f1[1],
        &icf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[186].f1[2],
        &jcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[186].f1[3],
        &kcf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lcf.f1->size[0] * lcf.f1->size[1]);
    lcf.f1->size[0] = 1;
    lcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lcf.f1, tmp);
    lcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mcf.f1->size[0] * mcf.f1->size[1]);
    mcf.f1->size[0] = 1;
    mcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mcf.f1, tmp);
    mcf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ncf.f1->size[0] * ncf.f1->size[1]);
    ncf.f1->size[0] = 1;
    ncf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ncf.f1, tmp);
    ncf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ocf.f1->size[0] * ocf.f1->size[1]);
    ocf.f1->size[0] = 1;
    ocf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ocf.f1, tmp);
    ocf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[187].f1[0],
        &lcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[187].f1[1],
        &mcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[187].f1[2],
        &ncf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[187].f1[3],
        &ocf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(pcf.f1->size[0] * pcf.f1->size[1]);
    pcf.f1->size[0] = 1;
    pcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pcf.f1, tmp);
    pcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qcf.f1->size[0] * qcf.f1->size[1]);
    qcf.f1->size[0] = 1;
    qcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qcf.f1, tmp);
    qcf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rcf.f1->size[0] * rcf.f1->size[1]);
    rcf.f1->size[0] = 1;
    rcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rcf.f1, tmp);
    rcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(scf.f1->size[0] * scf.f1->size[1]);
    scf.f1->size[0] = 1;
    scf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(scf.f1, tmp);
    scf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[188].f1[0],
        &pcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[188].f1[1],
        &qcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[188].f1[2],
        &rcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[188].f1[3],
        &scf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(tcf.f1->size[0] * tcf.f1->size[1]);
    tcf.f1->size[0] = 1;
    tcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tcf.f1, tmp);
    tcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ucf.f1->size[0] * ucf.f1->size[1]);
    ucf.f1->size[0] = 1;
    ucf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ucf.f1, tmp);
    ucf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vcf.f1->size[0] * vcf.f1->size[1]);
    vcf.f1->size[0] = 1;
    vcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vcf.f1, tmp);
    vcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wcf.f1->size[0] * wcf.f1->size[1]);
    wcf.f1->size[0] = 1;
    wcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wcf.f1, tmp);
    wcf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[189].f1[0],
        &tcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[189].f1[1],
        &ucf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[189].f1[2],
        &vcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[189].f1[3],
        &wcf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xcf.f1->size[0] * xcf.f1->size[1]);
    xcf.f1->size[0] = 1;
    xcf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xcf.f1, tmp);
    xcf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ycf.f1->size[0] * ycf.f1->size[1]);
    ycf.f1->size[0] = 1;
    ycf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ycf.f1, tmp);
    ycf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(adf.f1->size[0] * adf.f1->size[1]);
    adf.f1->size[0] = 1;
    adf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(adf.f1, tmp);
    adf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bdf.f1->size[0] * bdf.f1->size[1]);
    bdf.f1->size[0] = 1;
    bdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bdf.f1, tmp);
    bdf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[190].f1[0],
        &xcf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[190].f1[1],
        &ycf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[190].f1[2],
        &adf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[190].f1[3],
        &bdf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(cdf.f1->size[0] * cdf.f1->size[1]);
    cdf.f1->size[0] = 1;
    cdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cdf.f1, tmp);
    cdf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ddf.f1->size[0] * ddf.f1->size[1]);
    ddf.f1->size[0] = 1;
    ddf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ddf.f1, tmp);
    ddf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(edf.f1->size[0] * edf.f1->size[1]);
    edf.f1->size[0] = 1;
    edf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(edf.f1, tmp);
    edf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fdf.f1->size[0] * fdf.f1->size[1]);
    fdf.f1->size[0] = 1;
    fdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fdf.f1, tmp);
    fdf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[194].f1[0],
        &cdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[194].f1[1],
        &ddf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[194].f1[2],
        &edf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[194].f1[3],
        &fdf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(gdf.f1->size[0] * gdf.f1->size[1]);
    gdf.f1->size[0] = 1;
    gdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gdf.f1, tmp);
    gdf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hdf.f1->size[0] * hdf.f1->size[1]);
    hdf.f1->size[0] = 1;
    hdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hdf.f1, tmp);
    hdf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(idf.f1->size[0] * idf.f1->size[1]);
    idf.f1->size[0] = 1;
    idf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(idf.f1, tmp);
    idf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jdf.f1->size[0] * jdf.f1->size[1]);
    jdf.f1->size[0] = 1;
    jdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jdf.f1, tmp);
    jdf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[195].f1[0],
        &gdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[195].f1[1],
        &hdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[195].f1[2],
        &idf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[195].f1[3],
        &jdf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(kdf.f1->size[0] * kdf.f1->size[1]);
    kdf.f1->size[0] = 1;
    kdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kdf.f1, tmp);
    kdf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ldf.f1->size[0] * ldf.f1->size[1]);
    ldf.f1->size[0] = 1;
    ldf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ldf.f1, tmp);
    ldf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mdf.f1->size[0] * mdf.f1->size[1]);
    mdf.f1->size[0] = 1;
    mdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mdf.f1, tmp);
    mdf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ndf.f1->size[0] * ndf.f1->size[1]);
    ndf.f1->size[0] = 1;
    ndf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ndf.f1, tmp);
    ndf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[196].f1[0],
        &kdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[196].f1[1],
        &ldf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[196].f1[2],
        &mdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[196].f1[3],
        &ndf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(odf.f1->size[0] * odf.f1->size[1]);
    odf.f1->size[0] = 1;
    odf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(odf.f1, tmp);
    odf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pdf.f1->size[0] * pdf.f1->size[1]);
    pdf.f1->size[0] = 1;
    pdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pdf.f1, tmp);
    pdf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qdf.f1->size[0] * qdf.f1->size[1]);
    qdf.f1->size[0] = 1;
    qdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qdf.f1, tmp);
    qdf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rdf.f1->size[0] * rdf.f1->size[1]);
    rdf.f1->size[0] = 1;
    rdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rdf.f1, tmp);
    rdf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[197].f1[0],
        &odf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[197].f1[1],
        &pdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[197].f1[2],
        &qdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[197].f1[3],
        &rdf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(sdf.f1->size[0] * sdf.f1->size[1]);
    sdf.f1->size[0] = 1;
    sdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sdf.f1, tmp);
    sdf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tdf.f1->size[0] * tdf.f1->size[1]);
    tdf.f1->size[0] = 1;
    tdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tdf.f1, tmp);
    tdf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(udf.f1->size[0] * udf.f1->size[1]);
    udf.f1->size[0] = 1;
    udf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(udf.f1, tmp);
    udf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vdf.f1->size[0] * vdf.f1->size[1]);
    vdf.f1->size[0] = 1;
    vdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vdf.f1, tmp);
    vdf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[198].f1[0],
        &sdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[198].f1[1],
        &tdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[198].f1[2],
        &udf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[198].f1[3],
        &vdf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wdf.f1->size[0] * wdf.f1->size[1]);
    wdf.f1->size[0] = 1;
    wdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wdf.f1, tmp);
    wdf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xdf.f1->size[0] * xdf.f1->size[1]);
    xdf.f1->size[0] = 1;
    xdf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xdf.f1, tmp);
    xdf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ydf.f1->size[0] * ydf.f1->size[1]);
    ydf.f1->size[0] = 1;
    ydf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ydf.f1, tmp);
    ydf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aef.f1->size[0] * aef.f1->size[1]);
    aef.f1->size[0] = 1;
    aef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aef.f1, tmp);
    aef.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[199].f1[0],
        &wdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[199].f1[1],
        &xdf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[199].f1[2],
        &ydf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[199].f1[3],
        &aef);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bef.f1->size[0] * bef.f1->size[1]);
    bef.f1->size[0] = 1;
    bef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bef.f1, tmp);
    bef.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cef.f1->size[0] * cef.f1->size[1]);
    cef.f1->size[0] = 1;
    cef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cef.f1, tmp);
    cef.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(def.f1->size[0] * def.f1->size[1]);
    def.f1->size[0] = 1;
    def.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(def.f1, tmp);
    def.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eef.f1->size[0] * eef.f1->size[1]);
    eef.f1->size[0] = 1;
    eef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eef.f1, tmp);
    eef.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[204].f1[0],
        &bef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[204].f1[1],
        &cef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[204].f1[2],
        &def);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[204].f1[3],
        &eef);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fef.f1->size[0] * fef.f1->size[1]);
    fef.f1->size[0] = 1;
    fef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fef.f1, tmp);
    fef.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gef.f1->size[0] * gef.f1->size[1]);
    gef.f1->size[0] = 1;
    gef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gef.f1, tmp);
    gef.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hef.f1->size[0] * hef.f1->size[1]);
    hef.f1->size[0] = 1;
    hef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hef.f1, tmp);
    hef.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ief.f1->size[0] * ief.f1->size[1]);
    ief.f1->size[0] = 1;
    ief.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ief.f1, tmp);
    ief.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[205].f1[0],
        &fef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[205].f1[1],
        &gef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[205].f1[2],
        &hef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[205].f1[3],
        &ief);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jef.f1->size[0] * jef.f1->size[1]);
    jef.f1->size[0] = 1;
    jef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jef.f1, tmp);
    jef.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kef.f1->size[0] * kef.f1->size[1]);
    kef.f1->size[0] = 1;
    kef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kef.f1, tmp);
    kef.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lef.f1->size[0] * lef.f1->size[1]);
    lef.f1->size[0] = 1;
    lef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lef.f1, tmp);
    lef.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mef.f1->size[0] * mef.f1->size[1]);
    mef.f1->size[0] = 1;
    mef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mef.f1, tmp);
    mef.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[206].f1[0],
        &jef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[206].f1[1],
        &kef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[206].f1[2],
        &lef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[206].f1[3],
        &mef);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(nef.f1->size[0] * nef.f1->size[1]);
    nef.f1->size[0] = 1;
    nef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nef.f1, tmp);
    nef.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oef.f1->size[0] * oef.f1->size[1]);
    oef.f1->size[0] = 1;
    oef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oef.f1, tmp);
    oef.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pef.f1->size[0] * pef.f1->size[1]);
    pef.f1->size[0] = 1;
    pef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pef.f1, tmp);
    pef.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qef.f1->size[0] * qef.f1->size[1]);
    qef.f1->size[0] = 1;
    qef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qef.f1, tmp);
    qef.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[207].f1[0],
        &nef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[207].f1[1],
        &oef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[207].f1[2],
        &pef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[207].f1[3],
        &qef);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ref.f1->size[0] * ref.f1->size[1]);
    ref.f1->size[0] = 1;
    ref.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ref.f1, tmp);
    ref.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sef.f1->size[0] * sef.f1->size[1]);
    sef.f1->size[0] = 1;
    sef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sef.f1, tmp);
    sef.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tef.f1->size[0] * tef.f1->size[1]);
    tef.f1->size[0] = 1;
    tef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tef.f1, tmp);
    tef.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uef.f1->size[0] * uef.f1->size[1]);
    uef.f1->size[0] = 1;
    uef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uef.f1, tmp);
    uef.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[208].f1[0],
        &ref);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[208].f1[1],
        &sef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[208].f1[2],
        &tef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[208].f1[3],
        &uef);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vef.f1->size[0] * vef.f1->size[1]);
    vef.f1->size[0] = 1;
    vef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vef.f1, tmp);
    vef.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wef.f1->size[0] * wef.f1->size[1]);
    wef.f1->size[0] = 1;
    wef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wef.f1, tmp);
    wef.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xef.f1->size[0] * xef.f1->size[1]);
    xef.f1->size[0] = 1;
    xef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xef.f1, tmp);
    xef.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yef.f1->size[0] * yef.f1->size[1]);
    yef.f1->size[0] = 1;
    yef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yef.f1, tmp);
    yef.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[209].f1[0],
        &vef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[209].f1[1],
        &wef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[209].f1[2],
        &xef);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[209].f1[3],
        &yef);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(aff.f1->size[0] * aff.f1->size[1]);
    aff.f1->size[0] = 1;
    aff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aff.f1, tmp);
    aff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bff.f1->size[0] * bff.f1->size[1]);
    bff.f1->size[0] = 1;
    bff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bff.f1, tmp);
    bff.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cff.f1->size[0] * cff.f1->size[1]);
    cff.f1->size[0] = 1;
    cff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cff.f1, tmp);
    cff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dff.f1->size[0] * dff.f1->size[1]);
    dff.f1->size[0] = 1;
    dff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dff.f1, tmp);
    dff.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[210].f1[0],
        &aff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[210].f1[1],
        &bff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[210].f1[2],
        &cff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[210].f1[3],
        &dff);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(eff.f1->size[0] * eff.f1->size[1]);
    eff.f1->size[0] = 1;
    eff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eff.f1, tmp);
    eff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fff.f1->size[0] * fff.f1->size[1]);
    fff.f1->size[0] = 1;
    fff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fff.f1, tmp);
    fff.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gff.f1->size[0] * gff.f1->size[1]);
    gff.f1->size[0] = 1;
    gff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gff.f1, tmp);
    gff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hff.f1->size[0] * hff.f1->size[1]);
    hff.f1->size[0] = 1;
    hff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hff.f1, tmp);
    hff.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[211].f1[0],
        &eff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[211].f1[1],
        &fff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[211].f1[2],
        &gff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[211].f1[3],
        &hff);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(iff.f1->size[0] * iff.f1->size[1]);
    iff.f1->size[0] = 1;
    iff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iff.f1, tmp);
    iff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jff.f1->size[0] * jff.f1->size[1]);
    jff.f1->size[0] = 1;
    jff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jff.f1, tmp);
    jff.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kff.f1->size[0] * kff.f1->size[1]);
    kff.f1->size[0] = 1;
    kff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kff.f1, tmp);
    kff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lff.f1->size[0] * lff.f1->size[1]);
    lff.f1->size[0] = 1;
    lff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lff.f1, tmp);
    lff.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[214].f1[0],
        &iff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[214].f1[1],
        &jff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[214].f1[2],
        &kff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[214].f1[3],
        &lff);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(mff.f1->size[0] * mff.f1->size[1]);
    mff.f1->size[0] = 1;
    mff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mff.f1, tmp);
    mff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nff.f1->size[0] * nff.f1->size[1]);
    nff.f1->size[0] = 1;
    nff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nff.f1, tmp);
    nff.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(off.f1->size[0] * off.f1->size[1]);
    off.f1->size[0] = 1;
    off.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(off.f1, tmp);
    off.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pff.f1->size[0] * pff.f1->size[1]);
    pff.f1->size[0] = 1;
    pff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pff.f1, tmp);
    pff.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[215].f1[0],
        &mff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[215].f1[1],
        &nff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[215].f1[2],
        &off);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[215].f1[3],
        &pff);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qff.f1->size[0] * qff.f1->size[1]);
    qff.f1->size[0] = 1;
    qff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qff.f1, tmp);
    qff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rff.f1->size[0] * rff.f1->size[1]);
    rff.f1->size[0] = 1;
    rff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rff.f1, tmp);
    rff.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sff.f1->size[0] * sff.f1->size[1]);
    sff.f1->size[0] = 1;
    sff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sff.f1, tmp);
    sff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tff.f1->size[0] * tff.f1->size[1]);
    tff.f1->size[0] = 1;
    tff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tff.f1, tmp);
    tff.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[216].f1[0],
        &qff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[216].f1[1],
        &rff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[216].f1[2],
        &sff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[216].f1[3],
        &tff);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(uff.f1->size[0] * uff.f1->size[1]);
    uff.f1->size[0] = 1;
    uff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uff.f1, tmp);
    uff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vff.f1->size[0] * vff.f1->size[1]);
    vff.f1->size[0] = 1;
    vff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vff.f1, tmp);
    vff.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wff.f1->size[0] * wff.f1->size[1]);
    wff.f1->size[0] = 1;
    wff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wff.f1, tmp);
    wff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xff.f1->size[0] * xff.f1->size[1]);
    xff.f1->size[0] = 1;
    xff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xff.f1, tmp);
    xff.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[217].f1[0],
        &uff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[217].f1[1],
        &vff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[217].f1[2],
        &wff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[217].f1[3],
        &xff);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(yff.f1->size[0] * yff.f1->size[1]);
    yff.f1->size[0] = 1;
    yff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yff.f1, tmp);
    yff.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(agf.f1->size[0] * agf.f1->size[1]);
    agf.f1->size[0] = 1;
    agf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(agf.f1, tmp);
    agf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bgf.f1->size[0] * bgf.f1->size[1]);
    bgf.f1->size[0] = 1;
    bgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bgf.f1, tmp);
    bgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cgf.f1->size[0] * cgf.f1->size[1]);
    cgf.f1->size[0] = 1;
    cgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cgf.f1, tmp);
    cgf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[219].f1[0],
        &yff);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[219].f1[1],
        &agf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[219].f1[2],
        &bgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[219].f1[3],
        &cgf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dgf.f1->size[0] * dgf.f1->size[1]);
    dgf.f1->size[0] = 1;
    dgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dgf.f1, tmp);
    dgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(egf.f1->size[0] * egf.f1->size[1]);
    egf.f1->size[0] = 1;
    egf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(egf.f1, tmp);
    egf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fgf.f1->size[0] * fgf.f1->size[1]);
    fgf.f1->size[0] = 1;
    fgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fgf.f1, tmp);
    fgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ggf.f1->size[0] * ggf.f1->size[1]);
    ggf.f1->size[0] = 1;
    ggf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ggf.f1, tmp);
    ggf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[223].f1[0],
        &dgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[223].f1[1],
        &egf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[223].f1[2],
        &fgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[223].f1[3],
        &ggf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hgf.f1->size[0] * hgf.f1->size[1]);
    hgf.f1->size[0] = 1;
    hgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hgf.f1, tmp);
    hgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(igf.f1->size[0] * igf.f1->size[1]);
    igf.f1->size[0] = 1;
    igf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(igf.f1, tmp);
    igf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jgf.f1->size[0] * jgf.f1->size[1]);
    jgf.f1->size[0] = 1;
    jgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jgf.f1, tmp);
    jgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kgf.f1->size[0] * kgf.f1->size[1]);
    kgf.f1->size[0] = 1;
    kgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kgf.f1, tmp);
    kgf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[225].f1[0],
        &hgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[225].f1[1],
        &igf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[225].f1[2],
        &jgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[225].f1[3],
        &kgf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lgf.f1->size[0] * lgf.f1->size[1]);
    lgf.f1->size[0] = 1;
    lgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lgf.f1, tmp);
    lgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mgf.f1->size[0] * mgf.f1->size[1]);
    mgf.f1->size[0] = 1;
    mgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mgf.f1, tmp);
    mgf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ngf.f1->size[0] * ngf.f1->size[1]);
    ngf.f1->size[0] = 1;
    ngf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ngf.f1, tmp);
    ngf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ogf.f1->size[0] * ogf.f1->size[1]);
    ogf.f1->size[0] = 1;
    ogf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ogf.f1, tmp);
    ogf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[228].f1[0],
        &lgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[228].f1[1],
        &mgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[228].f1[2],
        &ngf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[228].f1[3],
        &ogf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(pgf.f1->size[0] * pgf.f1->size[1]);
    pgf.f1->size[0] = 1;
    pgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pgf.f1, tmp);
    pgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qgf.f1->size[0] * qgf.f1->size[1]);
    qgf.f1->size[0] = 1;
    qgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qgf.f1, tmp);
    qgf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rgf.f1->size[0] * rgf.f1->size[1]);
    rgf.f1->size[0] = 1;
    rgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rgf.f1, tmp);
    rgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sgf.f1->size[0] * sgf.f1->size[1]);
    sgf.f1->size[0] = 1;
    sgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sgf.f1, tmp);
    sgf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[229].f1[0],
        &pgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[229].f1[1],
        &qgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[229].f1[2],
        &rgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[229].f1[3],
        &sgf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(tgf.f1->size[0] * tgf.f1->size[1]);
    tgf.f1->size[0] = 1;
    tgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tgf.f1, tmp);
    tgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ugf.f1->size[0] * ugf.f1->size[1]);
    ugf.f1->size[0] = 1;
    ugf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ugf.f1, tmp);
    ugf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vgf.f1->size[0] * vgf.f1->size[1]);
    vgf.f1->size[0] = 1;
    vgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vgf.f1, tmp);
    vgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wgf.f1->size[0] * wgf.f1->size[1]);
    wgf.f1->size[0] = 1;
    wgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wgf.f1, tmp);
    wgf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[234].f1[0],
        &tgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[234].f1[1],
        &ugf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[234].f1[2],
        &vgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[234].f1[3],
        &wgf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xgf.f1->size[0] * xgf.f1->size[1]);
    xgf.f1->size[0] = 1;
    xgf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xgf.f1, tmp);
    xgf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ygf.f1->size[0] * ygf.f1->size[1]);
    ygf.f1->size[0] = 1;
    ygf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ygf.f1, tmp);
    ygf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ahf.f1->size[0] * ahf.f1->size[1]);
    ahf.f1->size[0] = 1;
    ahf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ahf.f1, tmp);
    ahf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bhf.f1->size[0] * bhf.f1->size[1]);
    bhf.f1->size[0] = 1;
    bhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bhf.f1, tmp);
    bhf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[235].f1[0],
        &xgf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[235].f1[1],
        &ygf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[235].f1[2],
        &ahf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[235].f1[3],
        &bhf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(chf.f1->size[0] * chf.f1->size[1]);
    chf.f1->size[0] = 1;
    chf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(chf.f1, tmp);
    chf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dhf.f1->size[0] * dhf.f1->size[1]);
    dhf.f1->size[0] = 1;
    dhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dhf.f1, tmp);
    dhf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ehf.f1->size[0] * ehf.f1->size[1]);
    ehf.f1->size[0] = 1;
    ehf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ehf.f1, tmp);
    ehf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fhf.f1->size[0] * fhf.f1->size[1]);
    fhf.f1->size[0] = 1;
    fhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fhf.f1, tmp);
    fhf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[236].f1[0],
        &chf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[236].f1[1],
        &dhf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[236].f1[2],
        &ehf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[236].f1[3],
        &fhf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ghf.f1->size[0] * ghf.f1->size[1]);
    ghf.f1->size[0] = 1;
    ghf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ghf.f1, tmp);
    ghf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hhf.f1->size[0] * hhf.f1->size[1]);
    hhf.f1->size[0] = 1;
    hhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hhf.f1, tmp);
    hhf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ihf.f1->size[0] * ihf.f1->size[1]);
    ihf.f1->size[0] = 1;
    ihf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ihf.f1, tmp);
    ihf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jhf.f1->size[0] * jhf.f1->size[1]);
    jhf.f1->size[0] = 1;
    jhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jhf.f1, tmp);
    jhf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[237].f1[0],
        &ghf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[237].f1[1],
        &hhf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[237].f1[2],
        &ihf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[237].f1[3],
        &jhf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(khf.f1->size[0] * khf.f1->size[1]);
    khf.f1->size[0] = 1;
    khf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(khf.f1, tmp);
    khf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lhf.f1->size[0] * lhf.f1->size[1]);
    lhf.f1->size[0] = 1;
    lhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lhf.f1, tmp);
    lhf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mhf.f1->size[0] * mhf.f1->size[1]);
    mhf.f1->size[0] = 1;
    mhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mhf.f1, tmp);
    mhf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nhf.f1->size[0] * nhf.f1->size[1]);
    nhf.f1->size[0] = 1;
    nhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nhf.f1, tmp);
    nhf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[239].f1[0],
        &khf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[239].f1[1],
        &lhf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[239].f1[2],
        &mhf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[239].f1[3],
        &nhf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ohf.f1->size[0] * ohf.f1->size[1]);
    ohf.f1->size[0] = 1;
    ohf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ohf.f1, tmp);
    ohf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(phf.f1->size[0] * phf.f1->size[1]);
    phf.f1->size[0] = 1;
    phf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(phf.f1, tmp);
    phf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qhf.f1->size[0] * qhf.f1->size[1]);
    qhf.f1->size[0] = 1;
    qhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qhf.f1, tmp);
    qhf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rhf.f1->size[0] * rhf.f1->size[1]);
    rhf.f1->size[0] = 1;
    rhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rhf.f1, tmp);
    rhf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[245].f1[0],
        &ohf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[245].f1[1],
        &phf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[245].f1[2],
        &qhf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[245].f1[3],
        &rhf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(shf.f1->size[0] * shf.f1->size[1]);
    shf.f1->size[0] = 1;
    shf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(shf.f1, tmp);
    shf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(thf.f1->size[0] * thf.f1->size[1]);
    thf.f1->size[0] = 1;
    thf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(thf.f1, tmp);
    thf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uhf.f1->size[0] * uhf.f1->size[1]);
    uhf.f1->size[0] = 1;
    uhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uhf.f1, tmp);
    uhf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vhf.f1->size[0] * vhf.f1->size[1]);
    vhf.f1->size[0] = 1;
    vhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vhf.f1, tmp);
    vhf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[246].f1[0],
        &shf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[246].f1[1],
        &thf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[246].f1[2],
        &uhf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[246].f1[3],
        &vhf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(whf.f1->size[0] * whf.f1->size[1]);
    whf.f1->size[0] = 1;
    whf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(whf.f1, tmp);
    whf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xhf.f1->size[0] * xhf.f1->size[1]);
    xhf.f1->size[0] = 1;
    xhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xhf.f1, tmp);
    xhf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yhf.f1->size[0] * yhf.f1->size[1]);
    yhf.f1->size[0] = 1;
    yhf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yhf.f1, tmp);
    yhf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aif.f1->size[0] * aif.f1->size[1]);
    aif.f1->size[0] = 1;
    aif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aif.f1, tmp);
    aif.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[247].f1[0],
        &whf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[247].f1[1],
        &xhf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[247].f1[2],
        &yhf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[247].f1[3],
        &aif);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bif.f1->size[0] * bif.f1->size[1]);
    bif.f1->size[0] = 1;
    bif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bif.f1, tmp);
    bif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cif.f1->size[0] * cif.f1->size[1]);
    cif.f1->size[0] = 1;
    cif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cif.f1, tmp);
    cif.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dif.f1->size[0] * dif.f1->size[1]);
    dif.f1->size[0] = 1;
    dif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dif.f1, tmp);
    dif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eif.f1->size[0] * eif.f1->size[1]);
    eif.f1->size[0] = 1;
    eif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eif.f1, tmp);
    eif.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[248].f1[0],
        &bif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[248].f1[1],
        &cif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[248].f1[2],
        &dif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[248].f1[3],
        &eif);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fif.f1->size[0] * fif.f1->size[1]);
    fif.f1->size[0] = 1;
    fif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fif.f1, tmp);
    fif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gif.f1->size[0] * gif.f1->size[1]);
    gif.f1->size[0] = 1;
    gif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gif.f1, tmp);
    gif.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hif.f1->size[0] * hif.f1->size[1]);
    hif.f1->size[0] = 1;
    hif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hif.f1, tmp);
    hif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iif.f1->size[0] * iif.f1->size[1]);
    iif.f1->size[0] = 1;
    iif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iif.f1, tmp);
    iif.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[249].f1[0],
        &fif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[249].f1[1],
        &gif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[249].f1[2],
        &hif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[249].f1[3],
        &iif);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jif.f1->size[0] * jif.f1->size[1]);
    jif.f1->size[0] = 1;
    jif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jif.f1, tmp);
    jif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kif.f1->size[0] * kif.f1->size[1]);
    kif.f1->size[0] = 1;
    kif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kif.f1, tmp);
    kif.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lif.f1->size[0] * lif.f1->size[1]);
    lif.f1->size[0] = 1;
    lif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lif.f1, tmp);
    lif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mif.f1->size[0] * mif.f1->size[1]);
    mif.f1->size[0] = 1;
    mif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mif.f1, tmp);
    mif.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[255].f1[0],
        &jif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[255].f1[1],
        &kif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[255].f1[2],
        &lif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[255].f1[3],
        &mif);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(nif.f1->size[0] * nif.f1->size[1]);
    nif.f1->size[0] = 1;
    nif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nif.f1, tmp);
    nif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oif.f1->size[0] * oif.f1->size[1]);
    oif.f1->size[0] = 1;
    oif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oif.f1, tmp);
    oif.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pif.f1->size[0] * pif.f1->size[1]);
    pif.f1->size[0] = 1;
    pif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pif.f1, tmp);
    pif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qif.f1->size[0] * qif.f1->size[1]);
    qif.f1->size[0] = 1;
    qif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qif.f1, tmp);
    qif.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[256].f1[0],
        &nif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[256].f1[1],
        &oif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[256].f1[2],
        &pif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[256].f1[3],
        &qif);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rif.f1->size[0] * rif.f1->size[1]);
    rif.f1->size[0] = 1;
    rif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rif.f1, tmp);
    rif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sif.f1->size[0] * sif.f1->size[1]);
    sif.f1->size[0] = 1;
    sif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sif.f1, tmp);
    sif.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tif.f1->size[0] * tif.f1->size[1]);
    tif.f1->size[0] = 1;
    tif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tif.f1, tmp);
    tif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uif.f1->size[0] * uif.f1->size[1]);
    uif.f1->size[0] = 1;
    uif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uif.f1, tmp);
    uif.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[259].f1[0],
        &rif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[259].f1[1],
        &sif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[259].f1[2],
        &tif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[259].f1[3],
        &uif);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vif.f1->size[0] * vif.f1->size[1]);
    vif.f1->size[0] = 1;
    vif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vif.f1, tmp);
    vif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wif.f1->size[0] * wif.f1->size[1]);
    wif.f1->size[0] = 1;
    wif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wif.f1, tmp);
    wif.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xif.f1->size[0] * xif.f1->size[1]);
    xif.f1->size[0] = 1;
    xif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xif.f1, tmp);
    xif.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yif.f1->size[0] * yif.f1->size[1]);
    yif.f1->size[0] = 1;
    yif.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yif.f1, tmp);
    yif.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[263].f1[0],
        &vif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[263].f1[1],
        &wif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[263].f1[2],
        &xif);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[263].f1[3],
        &yif);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ajf.f1->size[0] * ajf.f1->size[1]);
    ajf.f1->size[0] = 1;
    ajf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ajf.f1, tmp);
    ajf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bjf.f1->size[0] * bjf.f1->size[1]);
    bjf.f1->size[0] = 1;
    bjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bjf.f1, tmp);
    bjf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cjf.f1->size[0] * cjf.f1->size[1]);
    cjf.f1->size[0] = 1;
    cjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cjf.f1, tmp);
    cjf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(djf.f1->size[0] * djf.f1->size[1]);
    djf.f1->size[0] = 1;
    djf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(djf.f1, tmp);
    djf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[264].f1[0],
        &ajf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[264].f1[1],
        &bjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[264].f1[2],
        &cjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[264].f1[3],
        &djf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ejf.f1->size[0] * ejf.f1->size[1]);
    ejf.f1->size[0] = 1;
    ejf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ejf.f1, tmp);
    ejf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fjf.f1->size[0] * fjf.f1->size[1]);
    fjf.f1->size[0] = 1;
    fjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fjf.f1, tmp);
    fjf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gjf.f1->size[0] * gjf.f1->size[1]);
    gjf.f1->size[0] = 1;
    gjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gjf.f1, tmp);
    gjf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hjf.f1->size[0] * hjf.f1->size[1]);
    hjf.f1->size[0] = 1;
    hjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hjf.f1, tmp);
    hjf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[265].f1[0],
        &ejf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[265].f1[1],
        &fjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[265].f1[2],
        &gjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[265].f1[3],
        &hjf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ijf.f1->size[0] * ijf.f1->size[1]);
    ijf.f1->size[0] = 1;
    ijf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ijf.f1, tmp);
    ijf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jjf.f1->size[0] * jjf.f1->size[1]);
    jjf.f1->size[0] = 1;
    jjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jjf.f1, tmp);
    jjf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kjf.f1->size[0] * kjf.f1->size[1]);
    kjf.f1->size[0] = 1;
    kjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kjf.f1, tmp);
    kjf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ljf.f1->size[0] * ljf.f1->size[1]);
    ljf.f1->size[0] = 1;
    ljf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ljf.f1, tmp);
    ljf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[266].f1[0],
        &ijf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[266].f1[1],
        &jjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[266].f1[2],
        &kjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[266].f1[3],
        &ljf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(mjf.f1->size[0] * mjf.f1->size[1]);
    mjf.f1->size[0] = 1;
    mjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mjf.f1, tmp);
    mjf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(njf.f1->size[0] * njf.f1->size[1]);
    njf.f1->size[0] = 1;
    njf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(njf.f1, tmp);
    njf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ojf.f1->size[0] * ojf.f1->size[1]);
    ojf.f1->size[0] = 1;
    ojf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ojf.f1, tmp);
    ojf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pjf.f1->size[0] * pjf.f1->size[1]);
    pjf.f1->size[0] = 1;
    pjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pjf.f1, tmp);
    pjf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[267].f1[0],
        &mjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[267].f1[1],
        &njf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[267].f1[2],
        &ojf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[267].f1[3],
        &pjf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qjf.f1->size[0] * qjf.f1->size[1]);
    qjf.f1->size[0] = 1;
    qjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qjf.f1, tmp);
    qjf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rjf.f1->size[0] * rjf.f1->size[1]);
    rjf.f1->size[0] = 1;
    rjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rjf.f1, tmp);
    rjf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sjf.f1->size[0] * sjf.f1->size[1]);
    sjf.f1->size[0] = 1;
    sjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sjf.f1, tmp);
    sjf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tjf.f1->size[0] * tjf.f1->size[1]);
    tjf.f1->size[0] = 1;
    tjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tjf.f1, tmp);
    tjf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[268].f1[0],
        &qjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[268].f1[1],
        &rjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[268].f1[2],
        &sjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[268].f1[3],
        &tjf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ujf.f1->size[0] * ujf.f1->size[1]);
    ujf.f1->size[0] = 1;
    ujf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ujf.f1, tmp);
    ujf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vjf.f1->size[0] * vjf.f1->size[1]);
    vjf.f1->size[0] = 1;
    vjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vjf.f1, tmp);
    vjf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wjf.f1->size[0] * wjf.f1->size[1]);
    wjf.f1->size[0] = 1;
    wjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wjf.f1, tmp);
    wjf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xjf.f1->size[0] * xjf.f1->size[1]);
    xjf.f1->size[0] = 1;
    xjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xjf.f1, tmp);
    xjf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[269].f1[0],
        &ujf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[269].f1[1],
        &vjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[269].f1[2],
        &wjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[269].f1[3],
        &xjf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(yjf.f1->size[0] * yjf.f1->size[1]);
    yjf.f1->size[0] = 1;
    yjf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yjf.f1, tmp);
    yjf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(akf.f1->size[0] * akf.f1->size[1]);
    akf.f1->size[0] = 1;
    akf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(akf.f1, tmp);
    akf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bkf.f1->size[0] * bkf.f1->size[1]);
    bkf.f1->size[0] = 1;
    bkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bkf.f1, tmp);
    bkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ckf.f1->size[0] * ckf.f1->size[1]);
    ckf.f1->size[0] = 1;
    ckf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ckf.f1, tmp);
    ckf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[271].f1[0],
        &yjf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[271].f1[1],
        &akf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[271].f1[2],
        &bkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[271].f1[3],
        &ckf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dkf.f1->size[0] * dkf.f1->size[1]);
    dkf.f1->size[0] = 1;
    dkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dkf.f1, tmp);
    dkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ekf.f1->size[0] * ekf.f1->size[1]);
    ekf.f1->size[0] = 1;
    ekf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ekf.f1, tmp);
    ekf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fkf.f1->size[0] * fkf.f1->size[1]);
    fkf.f1->size[0] = 1;
    fkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fkf.f1, tmp);
    fkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gkf.f1->size[0] * gkf.f1->size[1]);
    gkf.f1->size[0] = 1;
    gkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gkf.f1, tmp);
    gkf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[273].f1[0],
        &dkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[273].f1[1],
        &ekf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[273].f1[2],
        &fkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[273].f1[3],
        &gkf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hkf.f1->size[0] * hkf.f1->size[1]);
    hkf.f1->size[0] = 1;
    hkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hkf.f1, tmp);
    hkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ikf.f1->size[0] * ikf.f1->size[1]);
    ikf.f1->size[0] = 1;
    ikf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ikf.f1, tmp);
    ikf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jkf.f1->size[0] * jkf.f1->size[1]);
    jkf.f1->size[0] = 1;
    jkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jkf.f1, tmp);
    jkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kkf.f1->size[0] * kkf.f1->size[1]);
    kkf.f1->size[0] = 1;
    kkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kkf.f1, tmp);
    kkf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[274].f1[0],
        &hkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[274].f1[1],
        &ikf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[274].f1[2],
        &jkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[274].f1[3],
        &kkf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lkf.f1->size[0] * lkf.f1->size[1]);
    lkf.f1->size[0] = 1;
    lkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lkf.f1, tmp);
    lkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mkf.f1->size[0] * mkf.f1->size[1]);
    mkf.f1->size[0] = 1;
    mkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mkf.f1, tmp);
    mkf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nkf.f1->size[0] * nkf.f1->size[1]);
    nkf.f1->size[0] = 1;
    nkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nkf.f1, tmp);
    nkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(okf.f1->size[0] * okf.f1->size[1]);
    okf.f1->size[0] = 1;
    okf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(okf.f1, tmp);
    okf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[275].f1[0],
        &lkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[275].f1[1],
        &mkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[275].f1[2],
        &nkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[275].f1[3],
        &okf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(pkf.f1->size[0] * pkf.f1->size[1]);
    pkf.f1->size[0] = 1;
    pkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pkf.f1, tmp);
    pkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qkf.f1->size[0] * qkf.f1->size[1]);
    qkf.f1->size[0] = 1;
    qkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qkf.f1, tmp);
    qkf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rkf.f1->size[0] * rkf.f1->size[1]);
    rkf.f1->size[0] = 1;
    rkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rkf.f1, tmp);
    rkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(skf.f1->size[0] * skf.f1->size[1]);
    skf.f1->size[0] = 1;
    skf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(skf.f1, tmp);
    skf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[276].f1[0],
        &pkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[276].f1[1],
        &qkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[276].f1[2],
        &rkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[276].f1[3],
        &skf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(tkf.f1->size[0] * tkf.f1->size[1]);
    tkf.f1->size[0] = 1;
    tkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tkf.f1, tmp);
    tkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ukf.f1->size[0] * ukf.f1->size[1]);
    ukf.f1->size[0] = 1;
    ukf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ukf.f1, tmp);
    ukf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vkf.f1->size[0] * vkf.f1->size[1]);
    vkf.f1->size[0] = 1;
    vkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vkf.f1, tmp);
    vkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wkf.f1->size[0] * wkf.f1->size[1]);
    wkf.f1->size[0] = 1;
    wkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wkf.f1, tmp);
    wkf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[277].f1[0],
        &tkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[277].f1[1],
        &ukf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[277].f1[2],
        &vkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[277].f1[3],
        &wkf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xkf.f1->size[0] * xkf.f1->size[1]);
    xkf.f1->size[0] = 1;
    xkf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xkf.f1, tmp);
    xkf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ykf.f1->size[0] * ykf.f1->size[1]);
    ykf.f1->size[0] = 1;
    ykf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ykf.f1, tmp);
    ykf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(alf.f1->size[0] * alf.f1->size[1]);
    alf.f1->size[0] = 1;
    alf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(alf.f1, tmp);
    alf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(blf.f1->size[0] * blf.f1->size[1]);
    blf.f1->size[0] = 1;
    blf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(blf.f1, tmp);
    blf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[279].f1[0],
        &xkf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[279].f1[1],
        &ykf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[279].f1[2],
        &alf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[279].f1[3],
        &blf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(clf.f1->size[0] * clf.f1->size[1]);
    clf.f1->size[0] = 1;
    clf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(clf.f1, tmp);
    clf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dlf.f1->size[0] * dlf.f1->size[1]);
    dlf.f1->size[0] = 1;
    dlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dlf.f1, tmp);
    dlf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(elf.f1->size[0] * elf.f1->size[1]);
    elf.f1->size[0] = 1;
    elf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(elf.f1, tmp);
    elf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(flf.f1->size[0] * flf.f1->size[1]);
    flf.f1->size[0] = 1;
    flf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(flf.f1, tmp);
    flf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[284].f1[0],
        &clf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[284].f1[1],
        &dlf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[284].f1[2],
        &elf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[284].f1[3],
        &flf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(glf.f1->size[0] * glf.f1->size[1]);
    glf.f1->size[0] = 1;
    glf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(glf.f1, tmp);
    glf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hlf.f1->size[0] * hlf.f1->size[1]);
    hlf.f1->size[0] = 1;
    hlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hlf.f1, tmp);
    hlf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ilf.f1->size[0] * ilf.f1->size[1]);
    ilf.f1->size[0] = 1;
    ilf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ilf.f1, tmp);
    ilf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jlf.f1->size[0] * jlf.f1->size[1]);
    jlf.f1->size[0] = 1;
    jlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jlf.f1, tmp);
    jlf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[285].f1[0],
        &glf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[285].f1[1],
        &hlf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[285].f1[2],
        &ilf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[285].f1[3],
        &jlf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(klf.f1->size[0] * klf.f1->size[1]);
    klf.f1->size[0] = 1;
    klf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(klf.f1, tmp);
    klf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(llf.f1->size[0] * llf.f1->size[1]);
    llf.f1->size[0] = 1;
    llf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(llf.f1, tmp);
    llf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mlf.f1->size[0] * mlf.f1->size[1]);
    mlf.f1->size[0] = 1;
    mlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mlf.f1, tmp);
    mlf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nlf.f1->size[0] * nlf.f1->size[1]);
    nlf.f1->size[0] = 1;
    nlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nlf.f1, tmp);
    nlf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[286].f1[0],
        &klf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[286].f1[1],
        &llf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[286].f1[2],
        &mlf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[286].f1[3],
        &nlf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(olf.f1->size[0] * olf.f1->size[1]);
    olf.f1->size[0] = 1;
    olf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(olf.f1, tmp);
    olf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(plf.f1->size[0] * plf.f1->size[1]);
    plf.f1->size[0] = 1;
    plf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(plf.f1, tmp);
    plf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qlf.f1->size[0] * qlf.f1->size[1]);
    qlf.f1->size[0] = 1;
    qlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qlf.f1, tmp);
    qlf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rlf.f1->size[0] * rlf.f1->size[1]);
    rlf.f1->size[0] = 1;
    rlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rlf.f1, tmp);
    rlf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[288].f1[0],
        &olf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[288].f1[1],
        &plf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[288].f1[2],
        &qlf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[288].f1[3],
        &rlf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(slf.f1->size[0] * slf.f1->size[1]);
    slf.f1->size[0] = 1;
    slf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(slf.f1, tmp);
    slf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tlf.f1->size[0] * tlf.f1->size[1]);
    tlf.f1->size[0] = 1;
    tlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tlf.f1, tmp);
    tlf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ulf.f1->size[0] * ulf.f1->size[1]);
    ulf.f1->size[0] = 1;
    ulf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ulf.f1, tmp);
    ulf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vlf.f1->size[0] * vlf.f1->size[1]);
    vlf.f1->size[0] = 1;
    vlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vlf.f1, tmp);
    vlf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[289].f1[0],
        &slf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[289].f1[1],
        &tlf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[289].f1[2],
        &ulf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[289].f1[3],
        &vlf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wlf.f1->size[0] * wlf.f1->size[1]);
    wlf.f1->size[0] = 1;
    wlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wlf.f1, tmp);
    wlf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xlf.f1->size[0] * xlf.f1->size[1]);
    xlf.f1->size[0] = 1;
    xlf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xlf.f1, tmp);
    xlf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ylf.f1->size[0] * ylf.f1->size[1]);
    ylf.f1->size[0] = 1;
    ylf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ylf.f1, tmp);
    ylf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(amf.f1->size[0] * amf.f1->size[1]);
    amf.f1->size[0] = 1;
    amf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(amf.f1, tmp);
    amf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[292].f1[0],
        &wlf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[292].f1[1],
        &xlf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[292].f1[2],
        &ylf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[292].f1[3],
        &amf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bmf.f1->size[0] * bmf.f1->size[1]);
    bmf.f1->size[0] = 1;
    bmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bmf.f1, tmp);
    bmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cmf.f1->size[0] * cmf.f1->size[1]);
    cmf.f1->size[0] = 1;
    cmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cmf.f1, tmp);
    cmf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dmf.f1->size[0] * dmf.f1->size[1]);
    dmf.f1->size[0] = 1;
    dmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dmf.f1, tmp);
    dmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(emf.f1->size[0] * emf.f1->size[1]);
    emf.f1->size[0] = 1;
    emf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(emf.f1, tmp);
    emf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[293].f1[0],
        &bmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[293].f1[1],
        &cmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[293].f1[2],
        &dmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[293].f1[3],
        &emf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fmf.f1->size[0] * fmf.f1->size[1]);
    fmf.f1->size[0] = 1;
    fmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fmf.f1, tmp);
    fmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gmf.f1->size[0] * gmf.f1->size[1]);
    gmf.f1->size[0] = 1;
    gmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gmf.f1, tmp);
    gmf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hmf.f1->size[0] * hmf.f1->size[1]);
    hmf.f1->size[0] = 1;
    hmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hmf.f1, tmp);
    hmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(imf.f1->size[0] * imf.f1->size[1]);
    imf.f1->size[0] = 1;
    imf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(imf.f1, tmp);
    imf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[294].f1[0],
        &fmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[294].f1[1],
        &gmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[294].f1[2],
        &hmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[294].f1[3],
        &imf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jmf.f1->size[0] * jmf.f1->size[1]);
    jmf.f1->size[0] = 1;
    jmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jmf.f1, tmp);
    jmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kmf.f1->size[0] * kmf.f1->size[1]);
    kmf.f1->size[0] = 1;
    kmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kmf.f1, tmp);
    kmf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lmf.f1->size[0] * lmf.f1->size[1]);
    lmf.f1->size[0] = 1;
    lmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lmf.f1, tmp);
    lmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mmf.f1->size[0] * mmf.f1->size[1]);
    mmf.f1->size[0] = 1;
    mmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mmf.f1, tmp);
    mmf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[295].f1[0],
        &jmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[295].f1[1],
        &kmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[295].f1[2],
        &lmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[295].f1[3],
        &mmf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(nmf.f1->size[0] * nmf.f1->size[1]);
    nmf.f1->size[0] = 1;
    nmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nmf.f1, tmp);
    nmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(omf.f1->size[0] * omf.f1->size[1]);
    omf.f1->size[0] = 1;
    omf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(omf.f1, tmp);
    omf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pmf.f1->size[0] * pmf.f1->size[1]);
    pmf.f1->size[0] = 1;
    pmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pmf.f1, tmp);
    pmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qmf.f1->size[0] * qmf.f1->size[1]);
    qmf.f1->size[0] = 1;
    qmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qmf.f1, tmp);
    qmf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[297].f1[0],
        &nmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[297].f1[1],
        &omf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[297].f1[2],
        &pmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[297].f1[3],
        &qmf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rmf.f1->size[0] * rmf.f1->size[1]);
    rmf.f1->size[0] = 1;
    rmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rmf.f1, tmp);
    rmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(smf.f1->size[0] * smf.f1->size[1]);
    smf.f1->size[0] = 1;
    smf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(smf.f1, tmp);
    smf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tmf.f1->size[0] * tmf.f1->size[1]);
    tmf.f1->size[0] = 1;
    tmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tmf.f1, tmp);
    tmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(umf.f1->size[0] * umf.f1->size[1]);
    umf.f1->size[0] = 1;
    umf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(umf.f1, tmp);
    umf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[299].f1[0],
        &rmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[299].f1[1],
        &smf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[299].f1[2],
        &tmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[299].f1[3],
        &umf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vmf.f1->size[0] * vmf.f1->size[1]);
    vmf.f1->size[0] = 1;
    vmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vmf.f1, tmp);
    vmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wmf.f1->size[0] * wmf.f1->size[1]);
    wmf.f1->size[0] = 1;
    wmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wmf.f1, tmp);
    wmf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xmf.f1->size[0] * xmf.f1->size[1]);
    xmf.f1->size[0] = 1;
    xmf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xmf.f1, tmp);
    xmf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ymf.f1->size[0] * ymf.f1->size[1]);
    ymf.f1->size[0] = 1;
    ymf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ymf.f1, tmp);
    ymf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[300].f1[0],
        &vmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[300].f1[1],
        &wmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[300].f1[2],
        &xmf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[300].f1[3],
        &ymf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(anf.f1->size[0] * anf.f1->size[1]);
    anf.f1->size[0] = 1;
    anf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(anf.f1, tmp);
    anf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bnf.f1->size[0] * bnf.f1->size[1]);
    bnf.f1->size[0] = 1;
    bnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bnf.f1, tmp);
    bnf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cnf.f1->size[0] * cnf.f1->size[1]);
    cnf.f1->size[0] = 1;
    cnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cnf.f1, tmp);
    cnf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dnf.f1->size[0] * dnf.f1->size[1]);
    dnf.f1->size[0] = 1;
    dnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dnf.f1, tmp);
    dnf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[302].f1[0],
        &anf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[302].f1[1],
        &bnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[302].f1[2],
        &cnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[302].f1[3],
        &dnf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(enf.f1->size[0] * enf.f1->size[1]);
    enf.f1->size[0] = 1;
    enf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(enf.f1, tmp);
    enf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fnf.f1->size[0] * fnf.f1->size[1]);
    fnf.f1->size[0] = 1;
    fnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fnf.f1, tmp);
    fnf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gnf.f1->size[0] * gnf.f1->size[1]);
    gnf.f1->size[0] = 1;
    gnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gnf.f1, tmp);
    gnf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hnf.f1->size[0] * hnf.f1->size[1]);
    hnf.f1->size[0] = 1;
    hnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hnf.f1, tmp);
    hnf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[303].f1[0],
        &enf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[303].f1[1],
        &fnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[303].f1[2],
        &gnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[303].f1[3],
        &hnf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(inf.f1->size[0] * inf.f1->size[1]);
    inf.f1->size[0] = 1;
    inf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(inf.f1, tmp);
    inf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(knf.f1->size[0] * knf.f1->size[1]);
    knf.f1->size[0] = 1;
    knf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(knf.f1, tmp);
    knf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lnf.f1->size[0] * lnf.f1->size[1]);
    lnf.f1->size[0] = 1;
    lnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lnf.f1, tmp);
    lnf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mnf.f1->size[0] * mnf.f1->size[1]);
    mnf.f1->size[0] = 1;
    mnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mnf.f1, tmp);
    mnf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[304].f1[0],
        &inf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[304].f1[1],
        &knf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[304].f1[2],
        &lnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[304].f1[3],
        &mnf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(nnf.f1->size[0] * nnf.f1->size[1]);
    nnf.f1->size[0] = 1;
    nnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nnf.f1, tmp);
    nnf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(onf.f1->size[0] * onf.f1->size[1]);
    onf.f1->size[0] = 1;
    onf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(onf.f1, tmp);
    onf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pnf.f1->size[0] * pnf.f1->size[1]);
    pnf.f1->size[0] = 1;
    pnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pnf.f1, tmp);
    pnf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qnf.f1->size[0] * qnf.f1->size[1]);
    qnf.f1->size[0] = 1;
    qnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qnf.f1, tmp);
    qnf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[305].f1[0],
        &nnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[305].f1[1],
        &onf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[305].f1[2],
        &pnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[305].f1[3],
        &qnf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rnf.f1->size[0] * rnf.f1->size[1]);
    rnf.f1->size[0] = 1;
    rnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rnf.f1, tmp);
    rnf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(snf.f1->size[0] * snf.f1->size[1]);
    snf.f1->size[0] = 1;
    snf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(snf.f1, tmp);
    snf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tnf.f1->size[0] * tnf.f1->size[1]);
    tnf.f1->size[0] = 1;
    tnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tnf.f1, tmp);
    tnf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(unf.f1->size[0] * unf.f1->size[1]);
    unf.f1->size[0] = 1;
    unf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(unf.f1, tmp);
    unf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[308].f1[0],
        &rnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[308].f1[1],
        &snf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[308].f1[2],
        &tnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[308].f1[3],
        &unf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vnf.f1->size[0] * vnf.f1->size[1]);
    vnf.f1->size[0] = 1;
    vnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vnf.f1, tmp);
    vnf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wnf.f1->size[0] * wnf.f1->size[1]);
    wnf.f1->size[0] = 1;
    wnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wnf.f1, tmp);
    wnf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xnf.f1->size[0] * xnf.f1->size[1]);
    xnf.f1->size[0] = 1;
    xnf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xnf.f1, tmp);
    xnf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aof.f1->size[0] * aof.f1->size[1]);
    aof.f1->size[0] = 1;
    aof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aof.f1, tmp);
    aof.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[309].f1[0],
        &vnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[309].f1[1],
        &wnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[309].f1[2],
        &xnf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[309].f1[3],
        &aof);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bof.f1->size[0] * bof.f1->size[1]);
    bof.f1->size[0] = 1;
    bof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bof.f1, tmp);
    bof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cof.f1->size[0] * cof.f1->size[1]);
    cof.f1->size[0] = 1;
    cof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cof.f1, tmp);
    cof.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dof.f1->size[0] * dof.f1->size[1]);
    dof.f1->size[0] = 1;
    dof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dof.f1, tmp);
    dof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eof.f1->size[0] * eof.f1->size[1]);
    eof.f1->size[0] = 1;
    eof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eof.f1, tmp);
    eof.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[313].f1[0],
        &bof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[313].f1[1],
        &cof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[313].f1[2],
        &dof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[313].f1[3],
        &eof);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fof.f1->size[0] * fof.f1->size[1]);
    fof.f1->size[0] = 1;
    fof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fof.f1, tmp);
    fof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gof.f1->size[0] * gof.f1->size[1]);
    gof.f1->size[0] = 1;
    gof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gof.f1, tmp);
    gof.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hof.f1->size[0] * hof.f1->size[1]);
    hof.f1->size[0] = 1;
    hof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hof.f1, tmp);
    hof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iof.f1->size[0] * iof.f1->size[1]);
    iof.f1->size[0] = 1;
    iof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iof.f1, tmp);
    iof.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[315].f1[0],
        &fof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[315].f1[1],
        &gof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[315].f1[2],
        &hof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[315].f1[3],
        &iof);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jof.f1->size[0] * jof.f1->size[1]);
    jof.f1->size[0] = 1;
    jof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jof.f1, tmp);
    jof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kof.f1->size[0] * kof.f1->size[1]);
    kof.f1->size[0] = 1;
    kof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kof.f1, tmp);
    kof.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lof.f1->size[0] * lof.f1->size[1]);
    lof.f1->size[0] = 1;
    lof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lof.f1, tmp);
    lof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mof.f1->size[0] * mof.f1->size[1]);
    mof.f1->size[0] = 1;
    mof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mof.f1, tmp);
    mof.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[316].f1[0],
        &jof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[316].f1[1],
        &kof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[316].f1[2],
        &lof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[316].f1[3],
        &mof);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(nof.f1->size[0] * nof.f1->size[1]);
    nof.f1->size[0] = 1;
    nof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nof.f1, tmp);
    nof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oof.f1->size[0] * oof.f1->size[1]);
    oof.f1->size[0] = 1;
    oof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oof.f1, tmp);
    oof.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pof.f1->size[0] * pof.f1->size[1]);
    pof.f1->size[0] = 1;
    pof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pof.f1, tmp);
    pof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qof.f1->size[0] * qof.f1->size[1]);
    qof.f1->size[0] = 1;
    qof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qof.f1, tmp);
    qof.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[317].f1[0],
        &nof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[317].f1[1],
        &oof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[317].f1[2],
        &pof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[317].f1[3],
        &qof);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rof.f1->size[0] * rof.f1->size[1]);
    rof.f1->size[0] = 1;
    rof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rof.f1, tmp);
    rof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sof.f1->size[0] * sof.f1->size[1]);
    sof.f1->size[0] = 1;
    sof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sof.f1, tmp);
    sof.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tof.f1->size[0] * tof.f1->size[1]);
    tof.f1->size[0] = 1;
    tof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tof.f1, tmp);
    tof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uof.f1->size[0] * uof.f1->size[1]);
    uof.f1->size[0] = 1;
    uof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uof.f1, tmp);
    uof.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[318].f1[0],
        &rof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[318].f1[1],
        &sof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[318].f1[2],
        &tof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[318].f1[3],
        &uof);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vof.f1->size[0] * vof.f1->size[1]);
    vof.f1->size[0] = 1;
    vof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vof.f1, tmp);
    vof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wof.f1->size[0] * wof.f1->size[1]);
    wof.f1->size[0] = 1;
    wof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wof.f1, tmp);
    wof.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xof.f1->size[0] * xof.f1->size[1]);
    xof.f1->size[0] = 1;
    xof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xof.f1, tmp);
    xof.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yof.f1->size[0] * yof.f1->size[1]);
    yof.f1->size[0] = 1;
    yof.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yof.f1, tmp);
    yof.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[319].f1[0],
        &vof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[319].f1[1],
        &wof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[319].f1[2],
        &xof);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[319].f1[3],
        &yof);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(apf.f1->size[0] * apf.f1->size[1]);
    apf.f1->size[0] = 1;
    apf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(apf.f1, tmp);
    apf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bpf.f1->size[0] * bpf.f1->size[1]);
    bpf.f1->size[0] = 1;
    bpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bpf.f1, tmp);
    bpf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cpf.f1->size[0] * cpf.f1->size[1]);
    cpf.f1->size[0] = 1;
    cpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cpf.f1, tmp);
    cpf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dpf.f1->size[0] * dpf.f1->size[1]);
    dpf.f1->size[0] = 1;
    dpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dpf.f1, tmp);
    dpf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[322].f1[0],
        &apf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[322].f1[1],
        &bpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[322].f1[2],
        &cpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[322].f1[3],
        &dpf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(epf.f1->size[0] * epf.f1->size[1]);
    epf.f1->size[0] = 1;
    epf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(epf.f1, tmp);
    epf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fpf.f1->size[0] * fpf.f1->size[1]);
    fpf.f1->size[0] = 1;
    fpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fpf.f1, tmp);
    fpf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gpf.f1->size[0] * gpf.f1->size[1]);
    gpf.f1->size[0] = 1;
    gpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gpf.f1, tmp);
    gpf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hpf.f1->size[0] * hpf.f1->size[1]);
    hpf.f1->size[0] = 1;
    hpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hpf.f1, tmp);
    hpf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[323].f1[0],
        &epf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[323].f1[1],
        &fpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[323].f1[2],
        &gpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[323].f1[3],
        &hpf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ipf.f1->size[0] * ipf.f1->size[1]);
    ipf.f1->size[0] = 1;
    ipf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ipf.f1, tmp);
    ipf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jpf.f1->size[0] * jpf.f1->size[1]);
    jpf.f1->size[0] = 1;
    jpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jpf.f1, tmp);
    jpf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kpf.f1->size[0] * kpf.f1->size[1]);
    kpf.f1->size[0] = 1;
    kpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kpf.f1, tmp);
    kpf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lpf.f1->size[0] * lpf.f1->size[1]);
    lpf.f1->size[0] = 1;
    lpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lpf.f1, tmp);
    lpf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[325].f1[0],
        &ipf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[325].f1[1],
        &jpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[325].f1[2],
        &kpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[325].f1[3],
        &lpf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(mpf.f1->size[0] * mpf.f1->size[1]);
    mpf.f1->size[0] = 1;
    mpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mpf.f1, tmp);
    mpf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(npf.f1->size[0] * npf.f1->size[1]);
    npf.f1->size[0] = 1;
    npf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(npf.f1, tmp);
    npf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(opf.f1->size[0] * opf.f1->size[1]);
    opf.f1->size[0] = 1;
    opf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(opf.f1, tmp);
    opf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ppf.f1->size[0] * ppf.f1->size[1]);
    ppf.f1->size[0] = 1;
    ppf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ppf.f1, tmp);
    ppf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[326].f1[0],
        &mpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[326].f1[1],
        &npf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[326].f1[2],
        &opf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[326].f1[3],
        &ppf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qpf.f1->size[0] * qpf.f1->size[1]);
    qpf.f1->size[0] = 1;
    qpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qpf.f1, tmp);
    qpf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rpf.f1->size[0] * rpf.f1->size[1]);
    rpf.f1->size[0] = 1;
    rpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rpf.f1, tmp);
    rpf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(spf.f1->size[0] * spf.f1->size[1]);
    spf.f1->size[0] = 1;
    spf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(spf.f1, tmp);
    spf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tpf.f1->size[0] * tpf.f1->size[1]);
    tpf.f1->size[0] = 1;
    tpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tpf.f1, tmp);
    tpf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[329].f1[0],
        &qpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[329].f1[1],
        &rpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[329].f1[2],
        &spf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[329].f1[3],
        &tpf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(upf.f1->size[0] * upf.f1->size[1]);
    upf.f1->size[0] = 1;
    upf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(upf.f1, tmp);
    upf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vpf.f1->size[0] * vpf.f1->size[1]);
    vpf.f1->size[0] = 1;
    vpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vpf.f1, tmp);
    vpf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wpf.f1->size[0] * wpf.f1->size[1]);
    wpf.f1->size[0] = 1;
    wpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wpf.f1, tmp);
    wpf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xpf.f1->size[0] * xpf.f1->size[1]);
    xpf.f1->size[0] = 1;
    xpf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xpf.f1, tmp);
    xpf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[332].f1[0],
        &upf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[332].f1[1],
        &vpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[332].f1[2],
        &wpf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[332].f1[3],
        &xpf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ypf.f1->size[0] * ypf.f1->size[1]);
    ypf.f1->size[0] = 1;
    ypf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ypf.f1, tmp);
    ypf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aqf.f1->size[0] * aqf.f1->size[1]);
    aqf.f1->size[0] = 1;
    aqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aqf.f1, tmp);
    aqf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bqf.f1->size[0] * bqf.f1->size[1]);
    bqf.f1->size[0] = 1;
    bqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bqf.f1, tmp);
    bqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cqf.f1->size[0] * cqf.f1->size[1]);
    cqf.f1->size[0] = 1;
    cqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cqf.f1, tmp);
    cqf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[333].f1[0],
        &ypf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[333].f1[1],
        &aqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[333].f1[2],
        &bqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[333].f1[3],
        &cqf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dqf.f1->size[0] * dqf.f1->size[1]);
    dqf.f1->size[0] = 1;
    dqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dqf.f1, tmp);
    dqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eqf.f1->size[0] * eqf.f1->size[1]);
    eqf.f1->size[0] = 1;
    eqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eqf.f1, tmp);
    eqf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fqf.f1->size[0] * fqf.f1->size[1]);
    fqf.f1->size[0] = 1;
    fqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fqf.f1, tmp);
    fqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gqf.f1->size[0] * gqf.f1->size[1]);
    gqf.f1->size[0] = 1;
    gqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gqf.f1, tmp);
    gqf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[334].f1[0],
        &dqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[334].f1[1],
        &eqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[334].f1[2],
        &fqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[334].f1[3],
        &gqf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hqf.f1->size[0] * hqf.f1->size[1]);
    hqf.f1->size[0] = 1;
    hqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hqf.f1, tmp);
    hqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iqf.f1->size[0] * iqf.f1->size[1]);
    iqf.f1->size[0] = 1;
    iqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iqf.f1, tmp);
    iqf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jqf.f1->size[0] * jqf.f1->size[1]);
    jqf.f1->size[0] = 1;
    jqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jqf.f1, tmp);
    jqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kqf.f1->size[0] * kqf.f1->size[1]);
    kqf.f1->size[0] = 1;
    kqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kqf.f1, tmp);
    kqf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[335].f1[0],
        &hqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[335].f1[1],
        &iqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[335].f1[2],
        &jqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[335].f1[3],
        &kqf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lqf.f1->size[0] * lqf.f1->size[1]);
    lqf.f1->size[0] = 1;
    lqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lqf.f1, tmp);
    lqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mqf.f1->size[0] * mqf.f1->size[1]);
    mqf.f1->size[0] = 1;
    mqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mqf.f1, tmp);
    mqf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nqf.f1->size[0] * nqf.f1->size[1]);
    nqf.f1->size[0] = 1;
    nqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nqf.f1, tmp);
    nqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oqf.f1->size[0] * oqf.f1->size[1]);
    oqf.f1->size[0] = 1;
    oqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oqf.f1, tmp);
    oqf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[336].f1[0],
        &lqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[336].f1[1],
        &mqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[336].f1[2],
        &nqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[336].f1[3],
        &oqf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(pqf.f1->size[0] * pqf.f1->size[1]);
    pqf.f1->size[0] = 1;
    pqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pqf.f1, tmp);
    pqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qqf.f1->size[0] * qqf.f1->size[1]);
    qqf.f1->size[0] = 1;
    qqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qqf.f1, tmp);
    qqf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rqf.f1->size[0] * rqf.f1->size[1]);
    rqf.f1->size[0] = 1;
    rqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rqf.f1, tmp);
    rqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sqf.f1->size[0] * sqf.f1->size[1]);
    sqf.f1->size[0] = 1;
    sqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sqf.f1, tmp);
    sqf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[337].f1[0],
        &pqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[337].f1[1],
        &qqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[337].f1[2],
        &rqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[337].f1[3],
        &sqf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(tqf.f1->size[0] * tqf.f1->size[1]);
    tqf.f1->size[0] = 1;
    tqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tqf.f1, tmp);
    tqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uqf.f1->size[0] * uqf.f1->size[1]);
    uqf.f1->size[0] = 1;
    uqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uqf.f1, tmp);
    uqf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vqf.f1->size[0] * vqf.f1->size[1]);
    vqf.f1->size[0] = 1;
    vqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vqf.f1, tmp);
    vqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wqf.f1->size[0] * wqf.f1->size[1]);
    wqf.f1->size[0] = 1;
    wqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wqf.f1, tmp);
    wqf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[338].f1[0],
        &tqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[338].f1[1],
        &uqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[338].f1[2],
        &vqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[338].f1[3],
        &wqf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xqf.f1->size[0] * xqf.f1->size[1]);
    xqf.f1->size[0] = 1;
    xqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xqf.f1, tmp);
    xqf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yqf.f1->size[0] * yqf.f1->size[1]);
    yqf.f1->size[0] = 1;
    yqf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yqf.f1, tmp);
    yqf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(arf.f1->size[0] * arf.f1->size[1]);
    arf.f1->size[0] = 1;
    arf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(arf.f1, tmp);
    arf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(brf.f1->size[0] * brf.f1->size[1]);
    brf.f1->size[0] = 1;
    brf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(brf.f1, tmp);
    brf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[339].f1[0],
        &xqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[339].f1[1],
        &yqf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[339].f1[2],
        &arf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[339].f1[3],
        &brf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(crf.f1->size[0] * crf.f1->size[1]);
    crf.f1->size[0] = 1;
    crf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(crf.f1, tmp);
    crf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(drf.f1->size[0] * drf.f1->size[1]);
    drf.f1->size[0] = 1;
    drf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(drf.f1, tmp);
    drf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(frf.f1->size[0] * frf.f1->size[1]);
    frf.f1->size[0] = 1;
    frf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(frf.f1, tmp);
    frf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(grf.f1->size[0] * grf.f1->size[1]);
    grf.f1->size[0] = 1;
    grf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(grf.f1, tmp);
    grf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[342].f1[0],
        &crf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[342].f1[1],
        &drf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[342].f1[2],
        &frf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[342].f1[3],
        &grf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hrf.f1->size[0] * hrf.f1->size[1]);
    hrf.f1->size[0] = 1;
    hrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hrf.f1, tmp);
    hrf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(irf.f1->size[0] * irf.f1->size[1]);
    irf.f1->size[0] = 1;
    irf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(irf.f1, tmp);
    irf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jrf.f1->size[0] * jrf.f1->size[1]);
    jrf.f1->size[0] = 1;
    jrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jrf.f1, tmp);
    jrf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(krf.f1->size[0] * krf.f1->size[1]);
    krf.f1->size[0] = 1;
    krf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(krf.f1, tmp);
    krf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[344].f1[0],
        &hrf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[344].f1[1],
        &irf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[344].f1[2],
        &jrf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[344].f1[3],
        &krf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lrf.f1->size[0] * lrf.f1->size[1]);
    lrf.f1->size[0] = 1;
    lrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lrf.f1, tmp);
    lrf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mrf.f1->size[0] * mrf.f1->size[1]);
    mrf.f1->size[0] = 1;
    mrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mrf.f1, tmp);
    mrf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nrf.f1->size[0] * nrf.f1->size[1]);
    nrf.f1->size[0] = 1;
    nrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nrf.f1, tmp);
    nrf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(orf.f1->size[0] * orf.f1->size[1]);
    orf.f1->size[0] = 1;
    orf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(orf.f1, tmp);
    orf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[345].f1[0],
        &lrf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[345].f1[1],
        &mrf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[345].f1[2],
        &nrf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[345].f1[3],
        &orf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(prf.f1->size[0] * prf.f1->size[1]);
    prf.f1->size[0] = 1;
    prf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(prf.f1, tmp);
    prf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qrf.f1->size[0] * qrf.f1->size[1]);
    qrf.f1->size[0] = 1;
    qrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qrf.f1, tmp);
    qrf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rrf.f1->size[0] * rrf.f1->size[1]);
    rrf.f1->size[0] = 1;
    rrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rrf.f1, tmp);
    rrf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(srf.f1->size[0] * srf.f1->size[1]);
    srf.f1->size[0] = 1;
    srf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(srf.f1, tmp);
    srf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[349].f1[0],
        &prf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[349].f1[1],
        &qrf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[349].f1[2],
        &rrf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[349].f1[3],
        &srf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(trf.f1->size[0] * trf.f1->size[1]);
    trf.f1->size[0] = 1;
    trf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(trf.f1, tmp);
    trf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(urf.f1->size[0] * urf.f1->size[1]);
    urf.f1->size[0] = 1;
    urf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(urf.f1, tmp);
    urf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vrf.f1->size[0] * vrf.f1->size[1]);
    vrf.f1->size[0] = 1;
    vrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vrf.f1, tmp);
    vrf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wrf.f1->size[0] * wrf.f1->size[1]);
    wrf.f1->size[0] = 1;
    wrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wrf.f1, tmp);
    wrf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[352].f1[0],
        &trf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[352].f1[1],
        &urf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[352].f1[2],
        &vrf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[352].f1[3],
        &wrf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xrf.f1->size[0] * xrf.f1->size[1]);
    xrf.f1->size[0] = 1;
    xrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xrf.f1, tmp);
    xrf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yrf.f1->size[0] * yrf.f1->size[1]);
    yrf.f1->size[0] = 1;
    yrf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yrf.f1, tmp);
    yrf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(asf.f1->size[0] * asf.f1->size[1]);
    asf.f1->size[0] = 1;
    asf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(asf.f1, tmp);
    asf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bsf.f1->size[0] * bsf.f1->size[1]);
    bsf.f1->size[0] = 1;
    bsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bsf.f1, tmp);
    bsf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[353].f1[0],
        &xrf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[353].f1[1],
        &yrf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[353].f1[2],
        &asf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[353].f1[3],
        &bsf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(csf.f1->size[0] * csf.f1->size[1]);
    csf.f1->size[0] = 1;
    csf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(csf.f1, tmp);
    csf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dsf.f1->size[0] * dsf.f1->size[1]);
    dsf.f1->size[0] = 1;
    dsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dsf.f1, tmp);
    dsf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(esf.f1->size[0] * esf.f1->size[1]);
    esf.f1->size[0] = 1;
    esf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(esf.f1, tmp);
    esf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fsf.f1->size[0] * fsf.f1->size[1]);
    fsf.f1->size[0] = 1;
    fsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fsf.f1, tmp);
    fsf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[354].f1[0],
        &csf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[354].f1[1],
        &dsf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[354].f1[2],
        &esf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[354].f1[3],
        &fsf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(gsf.f1->size[0] * gsf.f1->size[1]);
    gsf.f1->size[0] = 1;
    gsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gsf.f1, tmp);
    gsf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hsf.f1->size[0] * hsf.f1->size[1]);
    hsf.f1->size[0] = 1;
    hsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hsf.f1, tmp);
    hsf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(isf.f1->size[0] * isf.f1->size[1]);
    isf.f1->size[0] = 1;
    isf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(isf.f1, tmp);
    isf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jsf.f1->size[0] * jsf.f1->size[1]);
    jsf.f1->size[0] = 1;
    jsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jsf.f1, tmp);
    jsf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[355].f1[0],
        &gsf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[355].f1[1],
        &hsf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[355].f1[2],
        &isf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[355].f1[3],
        &jsf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ksf.f1->size[0] * ksf.f1->size[1]);
    ksf.f1->size[0] = 1;
    ksf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ksf.f1, tmp);
    ksf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lsf.f1->size[0] * lsf.f1->size[1]);
    lsf.f1->size[0] = 1;
    lsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lsf.f1, tmp);
    lsf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(msf.f1->size[0] * msf.f1->size[1]);
    msf.f1->size[0] = 1;
    msf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(msf.f1, tmp);
    msf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nsf.f1->size[0] * nsf.f1->size[1]);
    nsf.f1->size[0] = 1;
    nsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nsf.f1, tmp);
    nsf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[356].f1[0],
        &ksf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[356].f1[1],
        &lsf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[356].f1[2],
        &msf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[356].f1[3],
        &nsf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(osf.f1->size[0] * osf.f1->size[1]);
    osf.f1->size[0] = 1;
    osf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(osf.f1, tmp);
    osf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(psf.f1->size[0] * psf.f1->size[1]);
    psf.f1->size[0] = 1;
    psf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(psf.f1, tmp);
    psf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qsf.f1->size[0] * qsf.f1->size[1]);
    qsf.f1->size[0] = 1;
    qsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qsf.f1, tmp);
    qsf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rsf.f1->size[0] * rsf.f1->size[1]);
    rsf.f1->size[0] = 1;
    rsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rsf.f1, tmp);
    rsf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[357].f1[0],
        &osf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[357].f1[1],
        &psf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[357].f1[2],
        &qsf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[357].f1[3],
        &rsf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ssf.f1->size[0] * ssf.f1->size[1]);
    ssf.f1->size[0] = 1;
    ssf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ssf.f1, tmp);
    ssf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tsf.f1->size[0] * tsf.f1->size[1]);
    tsf.f1->size[0] = 1;
    tsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tsf.f1, tmp);
    tsf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(usf.f1->size[0] * usf.f1->size[1]);
    usf.f1->size[0] = 1;
    usf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(usf.f1, tmp);
    usf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vsf.f1->size[0] * vsf.f1->size[1]);
    vsf.f1->size[0] = 1;
    vsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vsf.f1, tmp);
    vsf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[358].f1[0],
        &ssf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[358].f1[1],
        &tsf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[358].f1[2],
        &usf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[358].f1[3],
        &vsf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wsf.f1->size[0] * wsf.f1->size[1]);
    wsf.f1->size[0] = 1;
    wsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wsf.f1, tmp);
    wsf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xsf.f1->size[0] * xsf.f1->size[1]);
    xsf.f1->size[0] = 1;
    xsf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xsf.f1, tmp);
    xsf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ysf.f1->size[0] * ysf.f1->size[1]);
    ysf.f1->size[0] = 1;
    ysf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ysf.f1, tmp);
    ysf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(atf.f1->size[0] * atf.f1->size[1]);
    atf.f1->size[0] = 1;
    atf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(atf.f1, tmp);
    atf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[359].f1[0],
        &wsf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[359].f1[1],
        &xsf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[359].f1[2],
        &ysf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[359].f1[3],
        &atf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(btf.f1->size[0] * btf.f1->size[1]);
    btf.f1->size[0] = 1;
    btf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(btf.f1, tmp);
    btf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ctf.f1->size[0] * ctf.f1->size[1]);
    ctf.f1->size[0] = 1;
    ctf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ctf.f1, tmp);
    ctf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dtf.f1->size[0] * dtf.f1->size[1]);
    dtf.f1->size[0] = 1;
    dtf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dtf.f1, tmp);
    dtf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(etf.f1->size[0] * etf.f1->size[1]);
    etf.f1->size[0] = 1;
    etf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(etf.f1, tmp);
    etf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[360].f1[0],
        &btf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[360].f1[1],
        &ctf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[360].f1[2],
        &dtf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[360].f1[3],
        &etf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ftf.f1->size[0] * ftf.f1->size[1]);
    ftf.f1->size[0] = 1;
    ftf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ftf.f1, tmp);
    ftf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gtf.f1->size[0] * gtf.f1->size[1]);
    gtf.f1->size[0] = 1;
    gtf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gtf.f1, tmp);
    gtf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(htf.f1->size[0] * htf.f1->size[1]);
    htf.f1->size[0] = 1;
    htf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(htf.f1, tmp);
    htf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(itf.f1->size[0] * itf.f1->size[1]);
    itf.f1->size[0] = 1;
    itf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(itf.f1, tmp);
    itf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[363].f1[0],
        &ftf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[363].f1[1],
        &gtf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[363].f1[2],
        &htf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[363].f1[3],
        &itf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jtf.f1->size[0] * jtf.f1->size[1]);
    jtf.f1->size[0] = 1;
    jtf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jtf.f1, tmp);
    jtf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ktf.f1->size[0] * ktf.f1->size[1]);
    ktf.f1->size[0] = 1;
    ktf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ktf.f1, tmp);
    ktf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ltf.f1->size[0] * ltf.f1->size[1]);
    ltf.f1->size[0] = 1;
    ltf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ltf.f1, tmp);
    ltf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mtf.f1->size[0] * mtf.f1->size[1]);
    mtf.f1->size[0] = 1;
    mtf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mtf.f1, tmp);
    mtf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[364].f1[0],
        &jtf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[364].f1[1],
        &ktf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[364].f1[2],
        &ltf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[364].f1[3],
        &mtf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ntf.f1->size[0] * ntf.f1->size[1]);
    ntf.f1->size[0] = 1;
    ntf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ntf.f1, tmp);
    ntf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(otf.f1->size[0] * otf.f1->size[1]);
    otf.f1->size[0] = 1;
    otf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(otf.f1, tmp);
    otf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ptf.f1->size[0] * ptf.f1->size[1]);
    ptf.f1->size[0] = 1;
    ptf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ptf.f1, tmp);
    ptf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qtf.f1->size[0] * qtf.f1->size[1]);
    qtf.f1->size[0] = 1;
    qtf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qtf.f1, tmp);
    qtf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[365].f1[0],
        &ntf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[365].f1[1],
        &otf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[365].f1[2],
        &ptf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[365].f1[3],
        &qtf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rtf.f1->size[0] * rtf.f1->size[1]);
    rtf.f1->size[0] = 1;
    rtf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rtf.f1, tmp);
    rtf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(stf.f1->size[0] * stf.f1->size[1]);
    stf.f1->size[0] = 1;
    stf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(stf.f1, tmp);
    stf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ttf.f1->size[0] * ttf.f1->size[1]);
    ttf.f1->size[0] = 1;
    ttf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ttf.f1, tmp);
    ttf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(utf.f1->size[0] * utf.f1->size[1]);
    utf.f1->size[0] = 1;
    utf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(utf.f1, tmp);
    utf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[367].f1[0],
        &rtf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[367].f1[1],
        &stf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[367].f1[2],
        &ttf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[367].f1[3],
        &utf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vtf.f1->size[0] * vtf.f1->size[1]);
    vtf.f1->size[0] = 1;
    vtf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vtf.f1, tmp);
    vtf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wtf.f1->size[0] * wtf.f1->size[1]);
    wtf.f1->size[0] = 1;
    wtf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wtf.f1, tmp);
    wtf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xtf.f1->size[0] * xtf.f1->size[1]);
    xtf.f1->size[0] = 1;
    xtf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xtf.f1, tmp);
    xtf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ytf.f1->size[0] * ytf.f1->size[1]);
    ytf.f1->size[0] = 1;
    ytf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ytf.f1, tmp);
    ytf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[368].f1[0],
        &vtf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[368].f1[1],
        &wtf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[368].f1[2],
        &xtf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[368].f1[3],
        &ytf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(auf.f1->size[0] * auf.f1->size[1]);
    auf.f1->size[0] = 1;
    auf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(auf.f1, tmp);
    auf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(buf.f1->size[0] * buf.f1->size[1]);
    buf.f1->size[0] = 1;
    buf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(buf.f1, tmp);
    buf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cuf.f1->size[0] * cuf.f1->size[1]);
    cuf.f1->size[0] = 1;
    cuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cuf.f1, tmp);
    cuf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(duf.f1->size[0] * duf.f1->size[1]);
    duf.f1->size[0] = 1;
    duf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(duf.f1, tmp);
    duf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[369].f1[0],
        &auf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[369].f1[1],
        &buf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[369].f1[2],
        &cuf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[369].f1[3],
        &duf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(euf.f1->size[0] * euf.f1->size[1]);
    euf.f1->size[0] = 1;
    euf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(euf.f1, tmp);
    euf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fuf.f1->size[0] * fuf.f1->size[1]);
    fuf.f1->size[0] = 1;
    fuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fuf.f1, tmp);
    fuf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(guf.f1->size[0] * guf.f1->size[1]);
    guf.f1->size[0] = 1;
    guf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(guf.f1, tmp);
    guf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(huf.f1->size[0] * huf.f1->size[1]);
    huf.f1->size[0] = 1;
    huf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(huf.f1, tmp);
    huf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[373].f1[0],
        &euf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[373].f1[1],
        &fuf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[373].f1[2],
        &guf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[373].f1[3],
        &huf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(iuf.f1->size[0] * iuf.f1->size[1]);
    iuf.f1->size[0] = 1;
    iuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iuf.f1, tmp);
    iuf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(juf.f1->size[0] * juf.f1->size[1]);
    juf.f1->size[0] = 1;
    juf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(juf.f1, tmp);
    juf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kuf.f1->size[0] * kuf.f1->size[1]);
    kuf.f1->size[0] = 1;
    kuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kuf.f1, tmp);
    kuf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(luf.f1->size[0] * luf.f1->size[1]);
    luf.f1->size[0] = 1;
    luf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(luf.f1, tmp);
    luf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[374].f1[0],
        &iuf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[374].f1[1],
        &juf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[374].f1[2],
        &kuf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[374].f1[3],
        &luf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(muf.f1->size[0] * muf.f1->size[1]);
    muf.f1->size[0] = 1;
    muf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(muf.f1, tmp);
    muf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nuf.f1->size[0] * nuf.f1->size[1]);
    nuf.f1->size[0] = 1;
    nuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nuf.f1, tmp);
    nuf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ouf.f1->size[0] * ouf.f1->size[1]);
    ouf.f1->size[0] = 1;
    ouf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ouf.f1, tmp);
    ouf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(puf.f1->size[0] * puf.f1->size[1]);
    puf.f1->size[0] = 1;
    puf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(puf.f1, tmp);
    puf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[375].f1[0],
        &muf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[375].f1[1],
        &nuf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[375].f1[2],
        &ouf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[375].f1[3],
        &puf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(quf.f1->size[0] * quf.f1->size[1]);
    quf.f1->size[0] = 1;
    quf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(quf.f1, tmp);
    quf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ruf.f1->size[0] * ruf.f1->size[1]);
    ruf.f1->size[0] = 1;
    ruf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ruf.f1, tmp);
    ruf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(suf.f1->size[0] * suf.f1->size[1]);
    suf.f1->size[0] = 1;
    suf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(suf.f1, tmp);
    suf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tuf.f1->size[0] * tuf.f1->size[1]);
    tuf.f1->size[0] = 1;
    tuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tuf.f1, tmp);
    tuf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[376].f1[0],
        &quf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[376].f1[1],
        &ruf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[376].f1[2],
        &suf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[376].f1[3],
        &tuf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(uuf.f1->size[0] * uuf.f1->size[1]);
    uuf.f1->size[0] = 1;
    uuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uuf.f1, tmp);
    uuf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vuf.f1->size[0] * vuf.f1->size[1]);
    vuf.f1->size[0] = 1;
    vuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vuf.f1, tmp);
    vuf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wuf.f1->size[0] * wuf.f1->size[1]);
    wuf.f1->size[0] = 1;
    wuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wuf.f1, tmp);
    wuf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xuf.f1->size[0] * xuf.f1->size[1]);
    xuf.f1->size[0] = 1;
    xuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xuf.f1, tmp);
    xuf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[379].f1[0],
        &uuf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[379].f1[1],
        &vuf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[379].f1[2],
        &wuf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[379].f1[3],
        &xuf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(yuf.f1->size[0] * yuf.f1->size[1]);
    yuf.f1->size[0] = 1;
    yuf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yuf.f1, tmp);
    yuf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(avf.f1->size[0] * avf.f1->size[1]);
    avf.f1->size[0] = 1;
    avf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(avf.f1, tmp);
    avf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bvf.f1->size[0] * bvf.f1->size[1]);
    bvf.f1->size[0] = 1;
    bvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bvf.f1, tmp);
    bvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cvf.f1->size[0] * cvf.f1->size[1]);
    cvf.f1->size[0] = 1;
    cvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cvf.f1, tmp);
    cvf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[380].f1[0],
        &yuf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[380].f1[1],
        &avf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[380].f1[2],
        &bvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[380].f1[3],
        &cvf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dvf.f1->size[0] * dvf.f1->size[1]);
    dvf.f1->size[0] = 1;
    dvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dvf.f1, tmp);
    dvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(evf.f1->size[0] * evf.f1->size[1]);
    evf.f1->size[0] = 1;
    evf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(evf.f1, tmp);
    evf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fvf.f1->size[0] * fvf.f1->size[1]);
    fvf.f1->size[0] = 1;
    fvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fvf.f1, tmp);
    fvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gvf.f1->size[0] * gvf.f1->size[1]);
    gvf.f1->size[0] = 1;
    gvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gvf.f1, tmp);
    gvf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[383].f1[0],
        &dvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[383].f1[1],
        &evf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[383].f1[2],
        &fvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[383].f1[3],
        &gvf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hvf.f1->size[0] * hvf.f1->size[1]);
    hvf.f1->size[0] = 1;
    hvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hvf.f1, tmp);
    hvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ivf.f1->size[0] * ivf.f1->size[1]);
    ivf.f1->size[0] = 1;
    ivf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ivf.f1, tmp);
    ivf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jvf.f1->size[0] * jvf.f1->size[1]);
    jvf.f1->size[0] = 1;
    jvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jvf.f1, tmp);
    jvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kvf.f1->size[0] * kvf.f1->size[1]);
    kvf.f1->size[0] = 1;
    kvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kvf.f1, tmp);
    kvf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[384].f1[0],
        &hvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[384].f1[1],
        &ivf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[384].f1[2],
        &jvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[384].f1[3],
        &kvf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lvf.f1->size[0] * lvf.f1->size[1]);
    lvf.f1->size[0] = 1;
    lvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lvf.f1, tmp);
    lvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mvf.f1->size[0] * mvf.f1->size[1]);
    mvf.f1->size[0] = 1;
    mvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mvf.f1, tmp);
    mvf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nvf.f1->size[0] * nvf.f1->size[1]);
    nvf.f1->size[0] = 1;
    nvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nvf.f1, tmp);
    nvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ovf.f1->size[0] * ovf.f1->size[1]);
    ovf.f1->size[0] = 1;
    ovf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ovf.f1, tmp);
    ovf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[385].f1[0],
        &lvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[385].f1[1],
        &mvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[385].f1[2],
        &nvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[385].f1[3],
        &ovf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(pvf.f1->size[0] * pvf.f1->size[1]);
    pvf.f1->size[0] = 1;
    pvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pvf.f1, tmp);
    pvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qvf.f1->size[0] * qvf.f1->size[1]);
    qvf.f1->size[0] = 1;
    qvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qvf.f1, tmp);
    qvf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rvf.f1->size[0] * rvf.f1->size[1]);
    rvf.f1->size[0] = 1;
    rvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rvf.f1, tmp);
    rvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(svf.f1->size[0] * svf.f1->size[1]);
    svf.f1->size[0] = 1;
    svf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(svf.f1, tmp);
    svf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[387].f1[0],
        &pvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[387].f1[1],
        &qvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[387].f1[2],
        &rvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[387].f1[3],
        &svf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(tvf.f1->size[0] * tvf.f1->size[1]);
    tvf.f1->size[0] = 1;
    tvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tvf.f1, tmp);
    tvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uvf.f1->size[0] * uvf.f1->size[1]);
    uvf.f1->size[0] = 1;
    uvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uvf.f1, tmp);
    uvf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vvf.f1->size[0] * vvf.f1->size[1]);
    vvf.f1->size[0] = 1;
    vvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vvf.f1, tmp);
    vvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wvf.f1->size[0] * wvf.f1->size[1]);
    wvf.f1->size[0] = 1;
    wvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wvf.f1, tmp);
    wvf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[389].f1[0],
        &tvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[389].f1[1],
        &uvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[389].f1[2],
        &vvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[389].f1[3],
        &wvf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xvf.f1->size[0] * xvf.f1->size[1]);
    xvf.f1->size[0] = 1;
    xvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xvf.f1, tmp);
    xvf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yvf.f1->size[0] * yvf.f1->size[1]);
    yvf.f1->size[0] = 1;
    yvf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yvf.f1, tmp);
    yvf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(awf.f1->size[0] * awf.f1->size[1]);
    awf.f1->size[0] = 1;
    awf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(awf.f1, tmp);
    awf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bwf.f1->size[0] * bwf.f1->size[1]);
    bwf.f1->size[0] = 1;
    bwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bwf.f1, tmp);
    bwf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[392].f1[0],
        &xvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[392].f1[1],
        &yvf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[392].f1[2],
        &awf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[392].f1[3],
        &bwf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(cwf.f1->size[0] * cwf.f1->size[1]);
    cwf.f1->size[0] = 1;
    cwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cwf.f1, tmp);
    cwf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dwf.f1->size[0] * dwf.f1->size[1]);
    dwf.f1->size[0] = 1;
    dwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dwf.f1, tmp);
    dwf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ewf.f1->size[0] * ewf.f1->size[1]);
    ewf.f1->size[0] = 1;
    ewf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ewf.f1, tmp);
    ewf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fwf.f1->size[0] * fwf.f1->size[1]);
    fwf.f1->size[0] = 1;
    fwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fwf.f1, tmp);
    fwf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[393].f1[0],
        &cwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[393].f1[1],
        &dwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[393].f1[2],
        &ewf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[393].f1[3],
        &fwf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(gwf.f1->size[0] * gwf.f1->size[1]);
    gwf.f1->size[0] = 1;
    gwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gwf.f1, tmp);
    gwf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hwf.f1->size[0] * hwf.f1->size[1]);
    hwf.f1->size[0] = 1;
    hwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hwf.f1, tmp);
    hwf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(iwf.f1->size[0] * iwf.f1->size[1]);
    iwf.f1->size[0] = 1;
    iwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iwf.f1, tmp);
    iwf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jwf.f1->size[0] * jwf.f1->size[1]);
    jwf.f1->size[0] = 1;
    jwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jwf.f1, tmp);
    jwf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[394].f1[0],
        &gwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[394].f1[1],
        &hwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[394].f1[2],
        &iwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[394].f1[3],
        &jwf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(kwf.f1->size[0] * kwf.f1->size[1]);
    kwf.f1->size[0] = 1;
    kwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kwf.f1, tmp);
    kwf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lwf.f1->size[0] * lwf.f1->size[1]);
    lwf.f1->size[0] = 1;
    lwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lwf.f1, tmp);
    lwf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mwf.f1->size[0] * mwf.f1->size[1]);
    mwf.f1->size[0] = 1;
    mwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mwf.f1, tmp);
    mwf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nwf.f1->size[0] * nwf.f1->size[1]);
    nwf.f1->size[0] = 1;
    nwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nwf.f1, tmp);
    nwf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[395].f1[0],
        &kwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[395].f1[1],
        &lwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[395].f1[2],
        &mwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[395].f1[3],
        &nwf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(owf.f1->size[0] * owf.f1->size[1]);
    owf.f1->size[0] = 1;
    owf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(owf.f1, tmp);
    owf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pwf.f1->size[0] * pwf.f1->size[1]);
    pwf.f1->size[0] = 1;
    pwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pwf.f1, tmp);
    pwf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qwf.f1->size[0] * qwf.f1->size[1]);
    qwf.f1->size[0] = 1;
    qwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qwf.f1, tmp);
    qwf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rwf.f1->size[0] * rwf.f1->size[1]);
    rwf.f1->size[0] = 1;
    rwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rwf.f1, tmp);
    rwf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[396].f1[0],
        &owf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[396].f1[1],
        &pwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[396].f1[2],
        &qwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[396].f1[3],
        &rwf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(swf.f1->size[0] * swf.f1->size[1]);
    swf.f1->size[0] = 1;
    swf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(swf.f1, tmp);
    swf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(twf.f1->size[0] * twf.f1->size[1]);
    twf.f1->size[0] = 1;
    twf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(twf.f1, tmp);
    twf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(uwf.f1->size[0] * uwf.f1->size[1]);
    uwf.f1->size[0] = 1;
    uwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uwf.f1, tmp);
    uwf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vwf.f1->size[0] * vwf.f1->size[1]);
    vwf.f1->size[0] = 1;
    vwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vwf.f1, tmp);
    vwf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[398].f1[0],
        &swf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[398].f1[1],
        &twf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[398].f1[2],
        &uwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[398].f1[3],
        &vwf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wwf.f1->size[0] * wwf.f1->size[1]);
    wwf.f1->size[0] = 1;
    wwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wwf.f1, tmp);
    wwf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xwf.f1->size[0] * xwf.f1->size[1]);
    xwf.f1->size[0] = 1;
    xwf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xwf.f1, tmp);
    xwf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ywf.f1->size[0] * ywf.f1->size[1]);
    ywf.f1->size[0] = 1;
    ywf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ywf.f1, tmp);
    ywf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(axf.f1->size[0] * axf.f1->size[1]);
    axf.f1->size[0] = 1;
    axf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(axf.f1, tmp);
    axf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[399].f1[0],
        &wwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[399].f1[1],
        &xwf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[399].f1[2],
        &ywf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[399].f1[3],
        &axf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bxf.f1->size[0] * bxf.f1->size[1]);
    bxf.f1->size[0] = 1;
    bxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bxf.f1, tmp);
    bxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cxf.f1->size[0] * cxf.f1->size[1]);
    cxf.f1->size[0] = 1;
    cxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cxf.f1, tmp);
    cxf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dxf.f1->size[0] * dxf.f1->size[1]);
    dxf.f1->size[0] = 1;
    dxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dxf.f1, tmp);
    dxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(exf.f1->size[0] * exf.f1->size[1]);
    exf.f1->size[0] = 1;
    exf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(exf.f1, tmp);
    exf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[400].f1[0],
        &bxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[400].f1[1],
        &cxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[400].f1[2],
        &dxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[400].f1[3],
        &exf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fxf.f1->size[0] * fxf.f1->size[1]);
    fxf.f1->size[0] = 1;
    fxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fxf.f1, tmp);
    fxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gxf.f1->size[0] * gxf.f1->size[1]);
    gxf.f1->size[0] = 1;
    gxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gxf.f1, tmp);
    gxf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hxf.f1->size[0] * hxf.f1->size[1]);
    hxf.f1->size[0] = 1;
    hxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hxf.f1, tmp);
    hxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ixf.f1->size[0] * ixf.f1->size[1]);
    ixf.f1->size[0] = 1;
    ixf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ixf.f1, tmp);
    ixf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[403].f1[0],
        &fxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[403].f1[1],
        &gxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[403].f1[2],
        &hxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[403].f1[3],
        &ixf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jxf.f1->size[0] * jxf.f1->size[1]);
    jxf.f1->size[0] = 1;
    jxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jxf.f1, tmp);
    jxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kxf.f1->size[0] * kxf.f1->size[1]);
    kxf.f1->size[0] = 1;
    kxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kxf.f1, tmp);
    kxf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lxf.f1->size[0] * lxf.f1->size[1]);
    lxf.f1->size[0] = 1;
    lxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lxf.f1, tmp);
    lxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mxf.f1->size[0] * mxf.f1->size[1]);
    mxf.f1->size[0] = 1;
    mxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mxf.f1, tmp);
    mxf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[404].f1[0],
        &jxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[404].f1[1],
        &kxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[404].f1[2],
        &lxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[404].f1[3],
        &mxf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(nxf.f1->size[0] * nxf.f1->size[1]);
    nxf.f1->size[0] = 1;
    nxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nxf.f1, tmp);
    nxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oxf.f1->size[0] * oxf.f1->size[1]);
    oxf.f1->size[0] = 1;
    oxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oxf.f1, tmp);
    oxf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pxf.f1->size[0] * pxf.f1->size[1]);
    pxf.f1->size[0] = 1;
    pxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pxf.f1, tmp);
    pxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qxf.f1->size[0] * qxf.f1->size[1]);
    qxf.f1->size[0] = 1;
    qxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qxf.f1, tmp);
    qxf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[405].f1[0],
        &nxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[405].f1[1],
        &oxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[405].f1[2],
        &pxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[405].f1[3],
        &qxf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rxf.f1->size[0] * rxf.f1->size[1]);
    rxf.f1->size[0] = 1;
    rxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rxf.f1, tmp);
    rxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sxf.f1->size[0] * sxf.f1->size[1]);
    sxf.f1->size[0] = 1;
    sxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sxf.f1, tmp);
    sxf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(txf.f1->size[0] * txf.f1->size[1]);
    txf.f1->size[0] = 1;
    txf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(txf.f1, tmp);
    txf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uxf.f1->size[0] * uxf.f1->size[1]);
    uxf.f1->size[0] = 1;
    uxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uxf.f1, tmp);
    uxf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[406].f1[0],
        &rxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[406].f1[1],
        &sxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[406].f1[2],
        &txf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[406].f1[3],
        &uxf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vxf.f1->size[0] * vxf.f1->size[1]);
    vxf.f1->size[0] = 1;
    vxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vxf.f1, tmp);
    vxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wxf.f1->size[0] * wxf.f1->size[1]);
    wxf.f1->size[0] = 1;
    wxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wxf.f1, tmp);
    wxf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xxf.f1->size[0] * xxf.f1->size[1]);
    xxf.f1->size[0] = 1;
    xxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xxf.f1, tmp);
    xxf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yxf.f1->size[0] * yxf.f1->size[1]);
    yxf.f1->size[0] = 1;
    yxf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yxf.f1, tmp);
    yxf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[407].f1[0],
        &vxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[407].f1[1],
        &wxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[407].f1[2],
        &xxf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[407].f1[3],
        &yxf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ayf.f1->size[0] * ayf.f1->size[1]);
    ayf.f1->size[0] = 1;
    ayf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ayf.f1, tmp);
    ayf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(byf.f1->size[0] * byf.f1->size[1]);
    byf.f1->size[0] = 1;
    byf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(byf.f1, tmp);
    byf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cyf.f1->size[0] * cyf.f1->size[1]);
    cyf.f1->size[0] = 1;
    cyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cyf.f1, tmp);
    cyf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dyf.f1->size[0] * dyf.f1->size[1]);
    dyf.f1->size[0] = 1;
    dyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dyf.f1, tmp);
    dyf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[408].f1[0],
        &ayf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[408].f1[1],
        &byf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[408].f1[2],
        &cyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[408].f1[3],
        &dyf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(eyf.f1->size[0] * eyf.f1->size[1]);
    eyf.f1->size[0] = 1;
    eyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eyf.f1, tmp);
    eyf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fyf.f1->size[0] * fyf.f1->size[1]);
    fyf.f1->size[0] = 1;
    fyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fyf.f1, tmp);
    fyf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gyf.f1->size[0] * gyf.f1->size[1]);
    gyf.f1->size[0] = 1;
    gyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gyf.f1, tmp);
    gyf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hyf.f1->size[0] * hyf.f1->size[1]);
    hyf.f1->size[0] = 1;
    hyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hyf.f1, tmp);
    hyf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[409].f1[0],
        &eyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[409].f1[1],
        &fyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[409].f1[2],
        &gyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[409].f1[3],
        &hyf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(iyf.f1->size[0] * iyf.f1->size[1]);
    iyf.f1->size[0] = 1;
    iyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iyf.f1, tmp);
    iyf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jyf.f1->size[0] * jyf.f1->size[1]);
    jyf.f1->size[0] = 1;
    jyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jyf.f1, tmp);
    jyf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kyf.f1->size[0] * kyf.f1->size[1]);
    kyf.f1->size[0] = 1;
    kyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kyf.f1, tmp);
    kyf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lyf.f1->size[0] * lyf.f1->size[1]);
    lyf.f1->size[0] = 1;
    lyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lyf.f1, tmp);
    lyf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[413].f1[0],
        &iyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[413].f1[1],
        &jyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[413].f1[2],
        &kyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[413].f1[3],
        &lyf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(myf.f1->size[0] * myf.f1->size[1]);
    myf.f1->size[0] = 1;
    myf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(myf.f1, tmp);
    myf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nyf.f1->size[0] * nyf.f1->size[1]);
    nyf.f1->size[0] = 1;
    nyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nyf.f1, tmp);
    nyf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(oyf.f1->size[0] * oyf.f1->size[1]);
    oyf.f1->size[0] = 1;
    oyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oyf.f1, tmp);
    oyf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pyf.f1->size[0] * pyf.f1->size[1]);
    pyf.f1->size[0] = 1;
    pyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pyf.f1, tmp);
    pyf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[414].f1[0],
        &myf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[414].f1[1],
        &nyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[414].f1[2],
        &oyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[414].f1[3],
        &pyf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qyf.f1->size[0] * qyf.f1->size[1]);
    qyf.f1->size[0] = 1;
    qyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qyf.f1, tmp);
    qyf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ryf.f1->size[0] * ryf.f1->size[1]);
    ryf.f1->size[0] = 1;
    ryf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ryf.f1, tmp);
    ryf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(syf.f1->size[0] * syf.f1->size[1]);
    syf.f1->size[0] = 1;
    syf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(syf.f1, tmp);
    syf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tyf.f1->size[0] * tyf.f1->size[1]);
    tyf.f1->size[0] = 1;
    tyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tyf.f1, tmp);
    tyf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[415].f1[0],
        &qyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[415].f1[1],
        &ryf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[415].f1[2],
        &syf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[415].f1[3],
        &tyf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(uyf.f1->size[0] * uyf.f1->size[1]);
    uyf.f1->size[0] = 1;
    uyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uyf.f1, tmp);
    uyf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vyf.f1->size[0] * vyf.f1->size[1]);
    vyf.f1->size[0] = 1;
    vyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vyf.f1, tmp);
    vyf.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wyf.f1->size[0] * wyf.f1->size[1]);
    wyf.f1->size[0] = 1;
    wyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wyf.f1, tmp);
    wyf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xyf.f1->size[0] * xyf.f1->size[1]);
    xyf.f1->size[0] = 1;
    xyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xyf.f1, tmp);
    xyf.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[416].f1[0],
        &uyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[416].f1[1],
        &vyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[416].f1[2],
        &wyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[416].f1[3],
        &xyf);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(yyf.f1->size[0] * yyf.f1->size[1]);
    yyf.f1->size[0] = 1;
    yyf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yyf.f1, tmp);
    yyf.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aag.f1->size[0] * aag.f1->size[1]);
    aag.f1->size[0] = 1;
    aag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aag.f1, tmp);
    aag.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(bag.f1->size[0] * bag.f1->size[1]);
    bag.f1->size[0] = 1;
    bag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bag.f1, tmp);
    bag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cag.f1->size[0] * cag.f1->size[1]);
    cag.f1->size[0] = 1;
    cag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cag.f1, tmp);
    cag.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[417].f1[0],
        &yyf);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[417].f1[1],
        &aag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[417].f1[2],
        &bag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[417].f1[3],
        &cag);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dag.f1->size[0] * dag.f1->size[1]);
    dag.f1->size[0] = 1;
    dag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dag.f1, tmp);
    dag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eag.f1->size[0] * eag.f1->size[1]);
    eag.f1->size[0] = 1;
    eag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eag.f1, tmp);
    eag.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fag.f1->size[0] * fag.f1->size[1]);
    fag.f1->size[0] = 1;
    fag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fag.f1, tmp);
    fag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gag.f1->size[0] * gag.f1->size[1]);
    gag.f1->size[0] = 1;
    gag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gag.f1, tmp);
    gag.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[418].f1[0],
        &dag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[418].f1[1],
        &eag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[418].f1[2],
        &fag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[418].f1[3],
        &gag);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hag.f1->size[0] * hag.f1->size[1]);
    hag.f1->size[0] = 1;
    hag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hag.f1, tmp);
    hag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iag.f1->size[0] * iag.f1->size[1]);
    iag.f1->size[0] = 1;
    iag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iag.f1, tmp);
    iag.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jag.f1->size[0] * jag.f1->size[1]);
    jag.f1->size[0] = 1;
    jag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jag.f1, tmp);
    jag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kag.f1->size[0] * kag.f1->size[1]);
    kag.f1->size[0] = 1;
    kag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kag.f1, tmp);
    kag.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[419].f1[0],
        &hag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[419].f1[1],
        &iag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[419].f1[2],
        &jag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[419].f1[3],
        &kag);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lag.f1->size[0] * lag.f1->size[1]);
    lag.f1->size[0] = 1;
    lag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lag.f1, tmp);
    lag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mag.f1->size[0] * mag.f1->size[1]);
    mag.f1->size[0] = 1;
    mag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mag.f1, tmp);
    mag.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nag.f1->size[0] * nag.f1->size[1]);
    nag.f1->size[0] = 1;
    nag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nag.f1, tmp);
    nag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oag.f1->size[0] * oag.f1->size[1]);
    oag.f1->size[0] = 1;
    oag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oag.f1, tmp);
    oag.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[421].f1[0],
        &lag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[421].f1[1],
        &mag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[421].f1[2],
        &nag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[421].f1[3],
        &oag);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(pag.f1->size[0] * pag.f1->size[1]);
    pag.f1->size[0] = 1;
    pag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pag.f1, tmp);
    pag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qag.f1->size[0] * qag.f1->size[1]);
    qag.f1->size[0] = 1;
    qag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qag.f1, tmp);
    qag.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rag.f1->size[0] * rag.f1->size[1]);
    rag.f1->size[0] = 1;
    rag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rag.f1, tmp);
    rag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sag.f1->size[0] * sag.f1->size[1]);
    sag.f1->size[0] = 1;
    sag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sag.f1, tmp);
    sag.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[422].f1[0],
        &pag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[422].f1[1],
        &qag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[422].f1[2],
        &rag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[422].f1[3],
        &sag);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(tag.f1->size[0] * tag.f1->size[1]);
    tag.f1->size[0] = 1;
    tag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tag.f1, tmp);
    tag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uag.f1->size[0] * uag.f1->size[1]);
    uag.f1->size[0] = 1;
    uag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uag.f1, tmp);
    uag.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vag.f1->size[0] * vag.f1->size[1]);
    vag.f1->size[0] = 1;
    vag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vag.f1, tmp);
    vag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wag.f1->size[0] * wag.f1->size[1]);
    wag.f1->size[0] = 1;
    wag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wag.f1, tmp);
    wag.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[423].f1[0],
        &tag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[423].f1[1],
        &uag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[423].f1[2],
        &vag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[423].f1[3],
        &wag);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xag.f1->size[0] * xag.f1->size[1]);
    xag.f1->size[0] = 1;
    xag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xag.f1, tmp);
    xag.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yag.f1->size[0] * yag.f1->size[1]);
    yag.f1->size[0] = 1;
    yag.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yag.f1, tmp);
    yag.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(abg.f1->size[0] * abg.f1->size[1]);
    abg.f1->size[0] = 1;
    abg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(abg.f1, tmp);
    abg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bbg.f1->size[0] * bbg.f1->size[1]);
    bbg.f1->size[0] = 1;
    bbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bbg.f1, tmp);
    bbg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[424].f1[0],
        &xag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[424].f1[1],
        &yag);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[424].f1[2],
        &abg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[424].f1[3],
        &bbg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(cbg.f1->size[0] * cbg.f1->size[1]);
    cbg.f1->size[0] = 1;
    cbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cbg.f1, tmp);
    cbg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dbg.f1->size[0] * dbg.f1->size[1]);
    dbg.f1->size[0] = 1;
    dbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dbg.f1, tmp);
    dbg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ebg.f1->size[0] * ebg.f1->size[1]);
    ebg.f1->size[0] = 1;
    ebg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ebg.f1, tmp);
    ebg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fbg.f1->size[0] * fbg.f1->size[1]);
    fbg.f1->size[0] = 1;
    fbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fbg.f1, tmp);
    fbg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[425].f1[0],
        &cbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[425].f1[1],
        &dbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[425].f1[2],
        &ebg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[425].f1[3],
        &fbg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(gbg.f1->size[0] * gbg.f1->size[1]);
    gbg.f1->size[0] = 1;
    gbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gbg.f1, tmp);
    gbg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hbg.f1->size[0] * hbg.f1->size[1]);
    hbg.f1->size[0] = 1;
    hbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hbg.f1, tmp);
    hbg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ibg.f1->size[0] * ibg.f1->size[1]);
    ibg.f1->size[0] = 1;
    ibg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ibg.f1, tmp);
    ibg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jbg.f1->size[0] * jbg.f1->size[1]);
    jbg.f1->size[0] = 1;
    jbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jbg.f1, tmp);
    jbg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[426].f1[0],
        &gbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[426].f1[1],
        &hbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[426].f1[2],
        &ibg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[426].f1[3],
        &jbg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(kbg.f1->size[0] * kbg.f1->size[1]);
    kbg.f1->size[0] = 1;
    kbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kbg.f1, tmp);
    kbg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lbg.f1->size[0] * lbg.f1->size[1]);
    lbg.f1->size[0] = 1;
    lbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lbg.f1, tmp);
    lbg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mbg.f1->size[0] * mbg.f1->size[1]);
    mbg.f1->size[0] = 1;
    mbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mbg.f1, tmp);
    mbg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nbg.f1->size[0] * nbg.f1->size[1]);
    nbg.f1->size[0] = 1;
    nbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nbg.f1, tmp);
    nbg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[427].f1[0],
        &kbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[427].f1[1],
        &lbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[427].f1[2],
        &mbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[427].f1[3],
        &nbg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(obg.f1->size[0] * obg.f1->size[1]);
    obg.f1->size[0] = 1;
    obg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(obg.f1, tmp);
    obg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pbg.f1->size[0] * pbg.f1->size[1]);
    pbg.f1->size[0] = 1;
    pbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pbg.f1, tmp);
    pbg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qbg.f1->size[0] * qbg.f1->size[1]);
    qbg.f1->size[0] = 1;
    qbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qbg.f1, tmp);
    qbg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rbg.f1->size[0] * rbg.f1->size[1]);
    rbg.f1->size[0] = 1;
    rbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rbg.f1, tmp);
    rbg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[428].f1[0],
        &obg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[428].f1[1],
        &pbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[428].f1[2],
        &qbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[428].f1[3],
        &rbg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(sbg.f1->size[0] * sbg.f1->size[1]);
    sbg.f1->size[0] = 1;
    sbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sbg.f1, tmp);
    sbg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tbg.f1->size[0] * tbg.f1->size[1]);
    tbg.f1->size[0] = 1;
    tbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tbg.f1, tmp);
    tbg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ubg.f1->size[0] * ubg.f1->size[1]);
    ubg.f1->size[0] = 1;
    ubg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ubg.f1, tmp);
    ubg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vbg.f1->size[0] * vbg.f1->size[1]);
    vbg.f1->size[0] = 1;
    vbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vbg.f1, tmp);
    vbg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[429].f1[0],
        &sbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[429].f1[1],
        &tbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[429].f1[2],
        &ubg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[429].f1[3],
        &vbg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wbg.f1->size[0] * wbg.f1->size[1]);
    wbg.f1->size[0] = 1;
    wbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wbg.f1, tmp);
    wbg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xbg.f1->size[0] * xbg.f1->size[1]);
    xbg.f1->size[0] = 1;
    xbg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xbg.f1, tmp);
    xbg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ybg.f1->size[0] * ybg.f1->size[1]);
    ybg.f1->size[0] = 1;
    ybg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ybg.f1, tmp);
    ybg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(acg.f1->size[0] * acg.f1->size[1]);
    acg.f1->size[0] = 1;
    acg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(acg.f1, tmp);
    acg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[433].f1[0],
        &wbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[433].f1[1],
        &xbg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[433].f1[2],
        &ybg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[433].f1[3],
        &acg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bcg.f1->size[0] * bcg.f1->size[1]);
    bcg.f1->size[0] = 1;
    bcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bcg.f1, tmp);
    bcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ccg.f1->size[0] * ccg.f1->size[1]);
    ccg.f1->size[0] = 1;
    ccg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ccg.f1, tmp);
    ccg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dcg.f1->size[0] * dcg.f1->size[1]);
    dcg.f1->size[0] = 1;
    dcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dcg.f1, tmp);
    dcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ecg.f1->size[0] * ecg.f1->size[1]);
    ecg.f1->size[0] = 1;
    ecg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ecg.f1, tmp);
    ecg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[435].f1[0],
        &bcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[435].f1[1],
        &ccg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[435].f1[2],
        &dcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[435].f1[3],
        &ecg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fcg.f1->size[0] * fcg.f1->size[1]);
    fcg.f1->size[0] = 1;
    fcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fcg.f1, tmp);
    fcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gcg.f1->size[0] * gcg.f1->size[1]);
    gcg.f1->size[0] = 1;
    gcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gcg.f1, tmp);
    gcg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hcg.f1->size[0] * hcg.f1->size[1]);
    hcg.f1->size[0] = 1;
    hcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hcg.f1, tmp);
    hcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(icg.f1->size[0] * icg.f1->size[1]);
    icg.f1->size[0] = 1;
    icg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(icg.f1, tmp);
    icg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[437].f1[0],
        &fcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[437].f1[1],
        &gcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[437].f1[2],
        &hcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[437].f1[3],
        &icg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jcg.f1->size[0] * jcg.f1->size[1]);
    jcg.f1->size[0] = 1;
    jcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jcg.f1, tmp);
    jcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kcg.f1->size[0] * kcg.f1->size[1]);
    kcg.f1->size[0] = 1;
    kcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kcg.f1, tmp);
    kcg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lcg.f1->size[0] * lcg.f1->size[1]);
    lcg.f1->size[0] = 1;
    lcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lcg.f1, tmp);
    lcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mcg.f1->size[0] * mcg.f1->size[1]);
    mcg.f1->size[0] = 1;
    mcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mcg.f1, tmp);
    mcg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[438].f1[0],
        &jcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[438].f1[1],
        &kcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[438].f1[2],
        &lcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[438].f1[3],
        &mcg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ncg.f1->size[0] * ncg.f1->size[1]);
    ncg.f1->size[0] = 1;
    ncg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ncg.f1, tmp);
    ncg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ocg.f1->size[0] * ocg.f1->size[1]);
    ocg.f1->size[0] = 1;
    ocg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ocg.f1, tmp);
    ocg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pcg.f1->size[0] * pcg.f1->size[1]);
    pcg.f1->size[0] = 1;
    pcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pcg.f1, tmp);
    pcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qcg.f1->size[0] * qcg.f1->size[1]);
    qcg.f1->size[0] = 1;
    qcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qcg.f1, tmp);
    qcg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[439].f1[0],
        &ncg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[439].f1[1],
        &ocg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[439].f1[2],
        &pcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[439].f1[3],
        &qcg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rcg.f1->size[0] * rcg.f1->size[1]);
    rcg.f1->size[0] = 1;
    rcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rcg.f1, tmp);
    rcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(scg.f1->size[0] * scg.f1->size[1]);
    scg.f1->size[0] = 1;
    scg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(scg.f1, tmp);
    scg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tcg.f1->size[0] * tcg.f1->size[1]);
    tcg.f1->size[0] = 1;
    tcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tcg.f1, tmp);
    tcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ucg.f1->size[0] * ucg.f1->size[1]);
    ucg.f1->size[0] = 1;
    ucg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ucg.f1, tmp);
    ucg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[441].f1[0],
        &rcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[441].f1[1],
        &scg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[441].f1[2],
        &tcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[441].f1[3],
        &ucg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vcg.f1->size[0] * vcg.f1->size[1]);
    vcg.f1->size[0] = 1;
    vcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vcg.f1, tmp);
    vcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wcg.f1->size[0] * wcg.f1->size[1]);
    wcg.f1->size[0] = 1;
    wcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wcg.f1, tmp);
    wcg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xcg.f1->size[0] * xcg.f1->size[1]);
    xcg.f1->size[0] = 1;
    xcg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xcg.f1, tmp);
    xcg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ycg.f1->size[0] * ycg.f1->size[1]);
    ycg.f1->size[0] = 1;
    ycg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ycg.f1, tmp);
    ycg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[442].f1[0],
        &vcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[442].f1[1],
        &wcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[442].f1[2],
        &xcg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[442].f1[3],
        &ycg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(adg.f1->size[0] * adg.f1->size[1]);
    adg.f1->size[0] = 1;
    adg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(adg.f1, tmp);
    adg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bdg.f1->size[0] * bdg.f1->size[1]);
    bdg.f1->size[0] = 1;
    bdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bdg.f1, tmp);
    bdg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(cdg.f1->size[0] * cdg.f1->size[1]);
    cdg.f1->size[0] = 1;
    cdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cdg.f1, tmp);
    cdg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ddg.f1->size[0] * ddg.f1->size[1]);
    ddg.f1->size[0] = 1;
    ddg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ddg.f1, tmp);
    ddg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[443].f1[0],
        &adg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[443].f1[1],
        &bdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[443].f1[2],
        &cdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[443].f1[3],
        &ddg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(edg.f1->size[0] * edg.f1->size[1]);
    edg.f1->size[0] = 1;
    edg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(edg.f1, tmp);
    edg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fdg.f1->size[0] * fdg.f1->size[1]);
    fdg.f1->size[0] = 1;
    fdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fdg.f1, tmp);
    fdg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(gdg.f1->size[0] * gdg.f1->size[1]);
    gdg.f1->size[0] = 1;
    gdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gdg.f1, tmp);
    gdg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hdg.f1->size[0] * hdg.f1->size[1]);
    hdg.f1->size[0] = 1;
    hdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hdg.f1, tmp);
    hdg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[445].f1[0],
        &edg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[445].f1[1],
        &fdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[445].f1[2],
        &gdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[445].f1[3],
        &hdg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(idg.f1->size[0] * idg.f1->size[1]);
    idg.f1->size[0] = 1;
    idg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(idg.f1, tmp);
    idg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jdg.f1->size[0] * jdg.f1->size[1]);
    jdg.f1->size[0] = 1;
    jdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jdg.f1, tmp);
    jdg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(kdg.f1->size[0] * kdg.f1->size[1]);
    kdg.f1->size[0] = 1;
    kdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kdg.f1, tmp);
    kdg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ldg.f1->size[0] * ldg.f1->size[1]);
    ldg.f1->size[0] = 1;
    ldg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ldg.f1, tmp);
    ldg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[446].f1[0],
        &idg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[446].f1[1],
        &jdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[446].f1[2],
        &kdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[446].f1[3],
        &ldg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(mdg.f1->size[0] * mdg.f1->size[1]);
    mdg.f1->size[0] = 1;
    mdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mdg.f1, tmp);
    mdg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ndg.f1->size[0] * ndg.f1->size[1]);
    ndg.f1->size[0] = 1;
    ndg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ndg.f1, tmp);
    ndg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(odg.f1->size[0] * odg.f1->size[1]);
    odg.f1->size[0] = 1;
    odg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(odg.f1, tmp);
    odg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pdg.f1->size[0] * pdg.f1->size[1]);
    pdg.f1->size[0] = 1;
    pdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pdg.f1, tmp);
    pdg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[447].f1[0],
        &mdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[447].f1[1],
        &ndg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[447].f1[2],
        &odg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[447].f1[3],
        &pdg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qdg.f1->size[0] * qdg.f1->size[1]);
    qdg.f1->size[0] = 1;
    qdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qdg.f1, tmp);
    qdg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rdg.f1->size[0] * rdg.f1->size[1]);
    rdg.f1->size[0] = 1;
    rdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rdg.f1, tmp);
    rdg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(sdg.f1->size[0] * sdg.f1->size[1]);
    sdg.f1->size[0] = 1;
    sdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sdg.f1, tmp);
    sdg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tdg.f1->size[0] * tdg.f1->size[1]);
    tdg.f1->size[0] = 1;
    tdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tdg.f1, tmp);
    tdg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[448].f1[0],
        &qdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[448].f1[1],
        &rdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[448].f1[2],
        &sdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[448].f1[3],
        &tdg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(udg.f1->size[0] * udg.f1->size[1]);
    udg.f1->size[0] = 1;
    udg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(udg.f1, tmp);
    udg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vdg.f1->size[0] * vdg.f1->size[1]);
    vdg.f1->size[0] = 1;
    vdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vdg.f1, tmp);
    vdg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(wdg.f1->size[0] * wdg.f1->size[1]);
    wdg.f1->size[0] = 1;
    wdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wdg.f1, tmp);
    wdg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xdg.f1->size[0] * xdg.f1->size[1]);
    xdg.f1->size[0] = 1;
    xdg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xdg.f1, tmp);
    xdg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[449].f1[0],
        &udg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[449].f1[1],
        &vdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[449].f1[2],
        &wdg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[449].f1[3],
        &xdg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ydg.f1->size[0] * ydg.f1->size[1]);
    ydg.f1->size[0] = 1;
    ydg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ydg.f1, tmp);
    ydg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aeg.f1->size[0] * aeg.f1->size[1]);
    aeg.f1->size[0] = 1;
    aeg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aeg.f1, tmp);
    aeg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(beg.f1->size[0] * beg.f1->size[1]);
    beg.f1->size[0] = 1;
    beg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(beg.f1, tmp);
    beg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ceg.f1->size[0] * ceg.f1->size[1]);
    ceg.f1->size[0] = 1;
    ceg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ceg.f1, tmp);
    ceg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[450].f1[0],
        &ydg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[450].f1[1],
        &aeg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[450].f1[2],
        &beg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[450].f1[3],
        &ceg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(deg.f1->size[0] * deg.f1->size[1]);
    deg.f1->size[0] = 1;
    deg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(deg.f1, tmp);
    deg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eeg.f1->size[0] * eeg.f1->size[1]);
    eeg.f1->size[0] = 1;
    eeg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eeg.f1, tmp);
    eeg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(feg.f1->size[0] * feg.f1->size[1]);
    feg.f1->size[0] = 1;
    feg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(feg.f1, tmp);
    feg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(geg.f1->size[0] * geg.f1->size[1]);
    geg.f1->size[0] = 1;
    geg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(geg.f1, tmp);
    geg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[451].f1[0],
        &deg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[451].f1[1],
        &eeg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[451].f1[2],
        &feg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[451].f1[3],
        &geg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(heg.f1->size[0] * heg.f1->size[1]);
    heg.f1->size[0] = 1;
    heg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(heg.f1, tmp);
    heg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ieg.f1->size[0] * ieg.f1->size[1]);
    ieg.f1->size[0] = 1;
    ieg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ieg.f1, tmp);
    ieg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jeg.f1->size[0] * jeg.f1->size[1]);
    jeg.f1->size[0] = 1;
    jeg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jeg.f1, tmp);
    jeg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(keg.f1->size[0] * keg.f1->size[1]);
    keg.f1->size[0] = 1;
    keg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(keg.f1, tmp);
    keg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[452].f1[0],
        &heg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[452].f1[1],
        &ieg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[452].f1[2],
        &jeg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[452].f1[3],
        &keg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(leg.f1->size[0] * leg.f1->size[1]);
    leg.f1->size[0] = 1;
    leg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(leg.f1, tmp);
    leg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(meg.f1->size[0] * meg.f1->size[1]);
    meg.f1->size[0] = 1;
    meg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(meg.f1, tmp);
    meg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(neg.f1->size[0] * neg.f1->size[1]);
    neg.f1->size[0] = 1;
    neg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(neg.f1, tmp);
    neg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oeg.f1->size[0] * oeg.f1->size[1]);
    oeg.f1->size[0] = 1;
    oeg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oeg.f1, tmp);
    oeg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[453].f1[0],
        &leg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[453].f1[1],
        &meg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[453].f1[2],
        &neg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[453].f1[3],
        &oeg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(peg.f1->size[0] * peg.f1->size[1]);
    peg.f1->size[0] = 1;
    peg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(peg.f1, tmp);
    peg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qeg.f1->size[0] * qeg.f1->size[1]);
    qeg.f1->size[0] = 1;
    qeg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qeg.f1, tmp);
    qeg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(reg.f1->size[0] * reg.f1->size[1]);
    reg.f1->size[0] = 1;
    reg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(reg.f1, tmp);
    reg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(seg.f1->size[0] * seg.f1->size[1]);
    seg.f1->size[0] = 1;
    seg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(seg.f1, tmp);
    seg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[454].f1[0],
        &peg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[454].f1[1],
        &qeg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[454].f1[2],
        &reg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[454].f1[3],
        &seg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(teg.f1->size[0] * teg.f1->size[1]);
    teg.f1->size[0] = 1;
    teg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(teg.f1, tmp);
    teg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ueg.f1->size[0] * ueg.f1->size[1]);
    ueg.f1->size[0] = 1;
    ueg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ueg.f1, tmp);
    ueg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(veg.f1->size[0] * veg.f1->size[1]);
    veg.f1->size[0] = 1;
    veg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(veg.f1, tmp);
    veg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(weg.f1->size[0] * weg.f1->size[1]);
    weg.f1->size[0] = 1;
    weg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(weg.f1, tmp);
    weg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[455].f1[0],
        &teg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[455].f1[1],
        &ueg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[455].f1[2],
        &veg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[455].f1[3],
        &weg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xeg.f1->size[0] * xeg.f1->size[1]);
    xeg.f1->size[0] = 1;
    xeg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xeg.f1, tmp);
    xeg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yeg.f1->size[0] * yeg.f1->size[1]);
    yeg.f1->size[0] = 1;
    yeg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yeg.f1, tmp);
    yeg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(afg.f1->size[0] * afg.f1->size[1]);
    afg.f1->size[0] = 1;
    afg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(afg.f1, tmp);
    afg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bfg.f1->size[0] * bfg.f1->size[1]);
    bfg.f1->size[0] = 1;
    bfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bfg.f1, tmp);
    bfg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[457].f1[0],
        &xeg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[457].f1[1],
        &yeg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[457].f1[2],
        &afg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[457].f1[3],
        &bfg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(cfg.f1->size[0] * cfg.f1->size[1]);
    cfg.f1->size[0] = 1;
    cfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cfg.f1, tmp);
    cfg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dfg.f1->size[0] * dfg.f1->size[1]);
    dfg.f1->size[0] = 1;
    dfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dfg.f1, tmp);
    dfg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(efg.f1->size[0] * efg.f1->size[1]);
    efg.f1->size[0] = 1;
    efg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(efg.f1, tmp);
    efg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ffg.f1->size[0] * ffg.f1->size[1]);
    ffg.f1->size[0] = 1;
    ffg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ffg.f1, tmp);
    ffg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[458].f1[0],
        &cfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[458].f1[1],
        &dfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[458].f1[2],
        &efg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[458].f1[3],
        &ffg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(gfg.f1->size[0] * gfg.f1->size[1]);
    gfg.f1->size[0] = 1;
    gfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gfg.f1, tmp);
    gfg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hfg.f1->size[0] * hfg.f1->size[1]);
    hfg.f1->size[0] = 1;
    hfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hfg.f1, tmp);
    hfg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ifg.f1->size[0] * ifg.f1->size[1]);
    ifg.f1->size[0] = 1;
    ifg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ifg.f1, tmp);
    ifg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jfg.f1->size[0] * jfg.f1->size[1]);
    jfg.f1->size[0] = 1;
    jfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jfg.f1, tmp);
    jfg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[459].f1[0],
        &gfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[459].f1[1],
        &hfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[459].f1[2],
        &ifg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[459].f1[3],
        &jfg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(kfg.f1->size[0] * kfg.f1->size[1]);
    kfg.f1->size[0] = 1;
    kfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kfg.f1, tmp);
    kfg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lfg.f1->size[0] * lfg.f1->size[1]);
    lfg.f1->size[0] = 1;
    lfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lfg.f1, tmp);
    lfg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mfg.f1->size[0] * mfg.f1->size[1]);
    mfg.f1->size[0] = 1;
    mfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mfg.f1, tmp);
    mfg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nfg.f1->size[0] * nfg.f1->size[1]);
    nfg.f1->size[0] = 1;
    nfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nfg.f1, tmp);
    nfg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[461].f1[0],
        &kfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[461].f1[1],
        &lfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[461].f1[2],
        &mfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[461].f1[3],
        &nfg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ofg.f1->size[0] * ofg.f1->size[1]);
    ofg.f1->size[0] = 1;
    ofg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ofg.f1, tmp);
    ofg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pfg.f1->size[0] * pfg.f1->size[1]);
    pfg.f1->size[0] = 1;
    pfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pfg.f1, tmp);
    pfg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qfg.f1->size[0] * qfg.f1->size[1]);
    qfg.f1->size[0] = 1;
    qfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qfg.f1, tmp);
    qfg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rfg.f1->size[0] * rfg.f1->size[1]);
    rfg.f1->size[0] = 1;
    rfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rfg.f1, tmp);
    rfg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[463].f1[0],
        &ofg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[463].f1[1],
        &pfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[463].f1[2],
        &qfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[463].f1[3],
        &rfg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(sfg.f1->size[0] * sfg.f1->size[1]);
    sfg.f1->size[0] = 1;
    sfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sfg.f1, tmp);
    sfg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tfg.f1->size[0] * tfg.f1->size[1]);
    tfg.f1->size[0] = 1;
    tfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tfg.f1, tmp);
    tfg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ufg.f1->size[0] * ufg.f1->size[1]);
    ufg.f1->size[0] = 1;
    ufg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ufg.f1, tmp);
    ufg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vfg.f1->size[0] * vfg.f1->size[1]);
    vfg.f1->size[0] = 1;
    vfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vfg.f1, tmp);
    vfg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[464].f1[0],
        &sfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[464].f1[1],
        &tfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[464].f1[2],
        &ufg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[464].f1[3],
        &vfg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wfg.f1->size[0] * wfg.f1->size[1]);
    wfg.f1->size[0] = 1;
    wfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wfg.f1, tmp);
    wfg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xfg.f1->size[0] * xfg.f1->size[1]);
    xfg.f1->size[0] = 1;
    xfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xfg.f1, tmp);
    xfg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yfg.f1->size[0] * yfg.f1->size[1]);
    yfg.f1->size[0] = 1;
    yfg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yfg.f1, tmp);
    yfg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(agg.f1->size[0] * agg.f1->size[1]);
    agg.f1->size[0] = 1;
    agg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(agg.f1, tmp);
    agg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[465].f1[0],
        &wfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[465].f1[1],
        &xfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[465].f1[2],
        &yfg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[465].f1[3],
        &agg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bgg.f1->size[0] * bgg.f1->size[1]);
    bgg.f1->size[0] = 1;
    bgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bgg.f1, tmp);
    bgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cgg.f1->size[0] * cgg.f1->size[1]);
    cgg.f1->size[0] = 1;
    cgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cgg.f1, tmp);
    cgg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dgg.f1->size[0] * dgg.f1->size[1]);
    dgg.f1->size[0] = 1;
    dgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dgg.f1, tmp);
    dgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(egg.f1->size[0] * egg.f1->size[1]);
    egg.f1->size[0] = 1;
    egg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(egg.f1, tmp);
    egg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[466].f1[0],
        &bgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[466].f1[1],
        &cgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[466].f1[2],
        &dgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[466].f1[3],
        &egg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fgg.f1->size[0] * fgg.f1->size[1]);
    fgg.f1->size[0] = 1;
    fgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fgg.f1, tmp);
    fgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ggg.f1->size[0] * ggg.f1->size[1]);
    ggg.f1->size[0] = 1;
    ggg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ggg.f1, tmp);
    ggg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hgg.f1->size[0] * hgg.f1->size[1]);
    hgg.f1->size[0] = 1;
    hgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hgg.f1, tmp);
    hgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(igg.f1->size[0] * igg.f1->size[1]);
    igg.f1->size[0] = 1;
    igg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(igg.f1, tmp);
    igg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[467].f1[0],
        &fgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[467].f1[1],
        &ggg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[467].f1[2],
        &hgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[467].f1[3],
        &igg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jgg.f1->size[0] * jgg.f1->size[1]);
    jgg.f1->size[0] = 1;
    jgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jgg.f1, tmp);
    jgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kgg.f1->size[0] * kgg.f1->size[1]);
    kgg.f1->size[0] = 1;
    kgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kgg.f1, tmp);
    kgg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lgg.f1->size[0] * lgg.f1->size[1]);
    lgg.f1->size[0] = 1;
    lgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lgg.f1, tmp);
    lgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mgg.f1->size[0] * mgg.f1->size[1]);
    mgg.f1->size[0] = 1;
    mgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mgg.f1, tmp);
    mgg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[468].f1[0],
        &jgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[468].f1[1],
        &kgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[468].f1[2],
        &lgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[468].f1[3],
        &mgg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ngg.f1->size[0] * ngg.f1->size[1]);
    ngg.f1->size[0] = 1;
    ngg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ngg.f1, tmp);
    ngg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ogg.f1->size[0] * ogg.f1->size[1]);
    ogg.f1->size[0] = 1;
    ogg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ogg.f1, tmp);
    ogg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(pgg.f1->size[0] * pgg.f1->size[1]);
    pgg.f1->size[0] = 1;
    pgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pgg.f1, tmp);
    pgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qgg.f1->size[0] * qgg.f1->size[1]);
    qgg.f1->size[0] = 1;
    qgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qgg.f1, tmp);
    qgg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[469].f1[0],
        &ngg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[469].f1[1],
        &ogg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[469].f1[2],
        &pgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[469].f1[3],
        &qgg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(rgg.f1->size[0] * rgg.f1->size[1]);
    rgg.f1->size[0] = 1;
    rgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rgg.f1, tmp);
    rgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sgg.f1->size[0] * sgg.f1->size[1]);
    sgg.f1->size[0] = 1;
    sgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sgg.f1, tmp);
    sgg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(tgg.f1->size[0] * tgg.f1->size[1]);
    tgg.f1->size[0] = 1;
    tgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tgg.f1, tmp);
    tgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ugg.f1->size[0] * ugg.f1->size[1]);
    ugg.f1->size[0] = 1;
    ugg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ugg.f1, tmp);
    ugg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[473].f1[0],
        &rgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[473].f1[1],
        &sgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[473].f1[2],
        &tgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[473].f1[3],
        &ugg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(vgg.f1->size[0] * vgg.f1->size[1]);
    vgg.f1->size[0] = 1;
    vgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vgg.f1, tmp);
    vgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wgg.f1->size[0] * wgg.f1->size[1]);
    wgg.f1->size[0] = 1;
    wgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wgg.f1, tmp);
    wgg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(xgg.f1->size[0] * xgg.f1->size[1]);
    xgg.f1->size[0] = 1;
    xgg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xgg.f1, tmp);
    xgg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ygg.f1->size[0] * ygg.f1->size[1]);
    ygg.f1->size[0] = 1;
    ygg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ygg.f1, tmp);
    ygg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[474].f1[0],
        &vgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[474].f1[1],
        &wgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[474].f1[2],
        &xgg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[474].f1[3],
        &ygg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ahg.f1->size[0] * ahg.f1->size[1]);
    ahg.f1->size[0] = 1;
    ahg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ahg.f1, tmp);
    ahg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bhg.f1->size[0] * bhg.f1->size[1]);
    bhg.f1->size[0] = 1;
    bhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bhg.f1, tmp);
    bhg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(chg.f1->size[0] * chg.f1->size[1]);
    chg.f1->size[0] = 1;
    chg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(chg.f1, tmp);
    chg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(dhg.f1->size[0] * dhg.f1->size[1]);
    dhg.f1->size[0] = 1;
    dhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dhg.f1, tmp);
    dhg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[475].f1[0],
        &ahg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[475].f1[1],
        &bhg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[475].f1[2],
        &chg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[475].f1[3],
        &dhg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ehg.f1->size[0] * ehg.f1->size[1]);
    ehg.f1->size[0] = 1;
    ehg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ehg.f1, tmp);
    ehg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fhg.f1->size[0] * fhg.f1->size[1]);
    fhg.f1->size[0] = 1;
    fhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fhg.f1, tmp);
    fhg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ghg.f1->size[0] * ghg.f1->size[1]);
    ghg.f1->size[0] = 1;
    ghg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ghg.f1, tmp);
    ghg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hhg.f1->size[0] * hhg.f1->size[1]);
    hhg.f1->size[0] = 1;
    hhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hhg.f1, tmp);
    hhg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[476].f1[0],
        &ehg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[476].f1[1],
        &fhg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[476].f1[2],
        &ghg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[476].f1[3],
        &hhg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ihg.f1->size[0] * ihg.f1->size[1]);
    ihg.f1->size[0] = 1;
    ihg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ihg.f1, tmp);
    ihg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jhg.f1->size[0] * jhg.f1->size[1]);
    jhg.f1->size[0] = 1;
    jhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jhg.f1, tmp);
    jhg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(khg.f1->size[0] * khg.f1->size[1]);
    khg.f1->size[0] = 1;
    khg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(khg.f1, tmp);
    khg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(lhg.f1->size[0] * lhg.f1->size[1]);
    lhg.f1->size[0] = 1;
    lhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lhg.f1, tmp);
    lhg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[477].f1[0],
        &ihg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[477].f1[1],
        &jhg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[477].f1[2],
        &khg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[477].f1[3],
        &lhg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(mhg.f1->size[0] * mhg.f1->size[1]);
    mhg.f1->size[0] = 1;
    mhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mhg.f1, tmp);
    mhg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(nhg.f1->size[0] * nhg.f1->size[1]);
    nhg.f1->size[0] = 1;
    nhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nhg.f1, tmp);
    nhg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ohg.f1->size[0] * ohg.f1->size[1]);
    ohg.f1->size[0] = 1;
    ohg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ohg.f1, tmp);
    ohg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(phg.f1->size[0] * phg.f1->size[1]);
    phg.f1->size[0] = 1;
    phg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(phg.f1, tmp);
    phg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[478].f1[0],
        &mhg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[478].f1[1],
        &nhg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[478].f1[2],
        &ohg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[478].f1[3],
        &phg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(qhg.f1->size[0] * qhg.f1->size[1]);
    qhg.f1->size[0] = 1;
    qhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qhg.f1, tmp);
    qhg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rhg.f1->size[0] * rhg.f1->size[1]);
    rhg.f1->size[0] = 1;
    rhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rhg.f1, tmp);
    rhg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(shg.f1->size[0] * shg.f1->size[1]);
    shg.f1->size[0] = 1;
    shg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(shg.f1, tmp);
    shg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(thg.f1->size[0] * thg.f1->size[1]);
    thg.f1->size[0] = 1;
    thg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(thg.f1, tmp);
    thg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[479].f1[0],
        &qhg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[479].f1[1],
        &rhg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[479].f1[2],
        &shg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[479].f1[3],
        &thg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(uhg.f1->size[0] * uhg.f1->size[1]);
    uhg.f1->size[0] = 1;
    uhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uhg.f1, tmp);
    uhg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vhg.f1->size[0] * vhg.f1->size[1]);
    vhg.f1->size[0] = 1;
    vhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vhg.f1, tmp);
    vhg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(whg.f1->size[0] * whg.f1->size[1]);
    whg.f1->size[0] = 1;
    whg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(whg.f1, tmp);
    whg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xhg.f1->size[0] * xhg.f1->size[1]);
    xhg.f1->size[0] = 1;
    xhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xhg.f1, tmp);
    xhg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[481].f1[0],
        &uhg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[481].f1[1],
        &vhg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[481].f1[2],
        &whg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[481].f1[3],
        &xhg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(yhg.f1->size[0] * yhg.f1->size[1]);
    yhg.f1->size[0] = 1;
    yhg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yhg.f1, tmp);
    yhg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(aig.f1->size[0] * aig.f1->size[1]);
    aig.f1->size[0] = 1;
    aig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(aig.f1, tmp);
    aig.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(big.f1->size[0] * big.f1->size[1]);
    big.f1->size[0] = 1;
    big.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(big.f1, tmp);
    big.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(cig.f1->size[0] * cig.f1->size[1]);
    cig.f1->size[0] = 1;
    cig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cig.f1, tmp);
    cig.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[482].f1[0],
        &yhg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[482].f1[1],
        &aig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[482].f1[2],
        &big);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[482].f1[3],
        &cig);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(dig.f1->size[0] * dig.f1->size[1]);
    dig.f1->size[0] = 1;
    dig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dig.f1, tmp);
    dig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(eig.f1->size[0] * eig.f1->size[1]);
    eig.f1->size[0] = 1;
    eig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(eig.f1, tmp);
    eig.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(fig.f1->size[0] * fig.f1->size[1]);
    fig.f1->size[0] = 1;
    fig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fig.f1, tmp);
    fig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gig.f1->size[0] * gig.f1->size[1]);
    gig.f1->size[0] = 1;
    gig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gig.f1, tmp);
    gig.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[484].f1[0],
        &dig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[484].f1[1],
        &eig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[484].f1[2],
        &fig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[484].f1[3],
        &gig);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(hig.f1->size[0] * hig.f1->size[1]);
    hig.f1->size[0] = 1;
    hig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hig.f1, tmp);
    hig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(iig.f1->size[0] * iig.f1->size[1]);
    iig.f1->size[0] = 1;
    iig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(iig.f1, tmp);
    iig.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(jig.f1->size[0] * jig.f1->size[1]);
    jig.f1->size[0] = 1;
    jig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jig.f1, tmp);
    jig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kig.f1->size[0] * kig.f1->size[1]);
    kig.f1->size[0] = 1;
    kig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kig.f1, tmp);
    kig.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[485].f1[0],
        &hig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[485].f1[1],
        &iig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[485].f1[2],
        &jig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[485].f1[3],
        &kig);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(lig.f1->size[0] * lig.f1->size[1]);
    lig.f1->size[0] = 1;
    lig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lig.f1, tmp);
    lig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mig.f1->size[0] * mig.f1->size[1]);
    mig.f1->size[0] = 1;
    mig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mig.f1, tmp);
    mig.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(nig.f1->size[0] * nig.f1->size[1]);
    nig.f1->size[0] = 1;
    nig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nig.f1, tmp);
    nig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(oig.f1->size[0] * oig.f1->size[1]);
    oig.f1->size[0] = 1;
    oig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oig.f1, tmp);
    oig.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[486].f1[0],
        &lig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[486].f1[1],
        &mig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[486].f1[2],
        &nig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[486].f1[3],
        &oig);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(pig.f1->size[0] * pig.f1->size[1]);
    pig.f1->size[0] = 1;
    pig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pig.f1, tmp);
    pig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(qig.f1->size[0] * qig.f1->size[1]);
    qig.f1->size[0] = 1;
    qig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qig.f1, tmp);
    qig.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(rig.f1->size[0] * rig.f1->size[1]);
    rig.f1->size[0] = 1;
    rig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rig.f1, tmp);
    rig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(sig.f1->size[0] * sig.f1->size[1]);
    sig.f1->size[0] = 1;
    sig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sig.f1, tmp);
    sig.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[487].f1[0],
        &pig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[487].f1[1],
        &qig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[487].f1[2],
        &rig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[487].f1[3],
        &sig);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(tig.f1->size[0] * tig.f1->size[1]);
    tig.f1->size[0] = 1;
    tig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tig.f1, tmp);
    tig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(uig.f1->size[0] * uig.f1->size[1]);
    uig.f1->size[0] = 1;
    uig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uig.f1, tmp);
    uig.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(vig.f1->size[0] * vig.f1->size[1]);
    vig.f1->size[0] = 1;
    vig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vig.f1, tmp);
    vig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(wig.f1->size[0] * wig.f1->size[1]);
    wig.f1->size[0] = 1;
    wig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wig.f1, tmp);
    wig.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[488].f1[0],
        &tig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[488].f1[1],
        &uig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[488].f1[2],
        &vig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[488].f1[3],
        &wig);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(xig.f1->size[0] * xig.f1->size[1]);
    xig.f1->size[0] = 1;
    xig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xig.f1, tmp);
    xig.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(yig.f1->size[0] * yig.f1->size[1]);
    yig.f1->size[0] = 1;
    yig.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yig.f1, tmp);
    yig.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ajg.f1->size[0] * ajg.f1->size[1]);
    ajg.f1->size[0] = 1;
    ajg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ajg.f1, tmp);
    ajg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(bjg.f1->size[0] * bjg.f1->size[1]);
    bjg.f1->size[0] = 1;
    bjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bjg.f1, tmp);
    bjg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[489].f1[0],
        &xig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[489].f1[1],
        &yig);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[489].f1[2],
        &ajg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[489].f1[3],
        &bjg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(cjg.f1->size[0] * cjg.f1->size[1]);
    cjg.f1->size[0] = 1;
    cjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cjg.f1, tmp);
    cjg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(djg.f1->size[0] * djg.f1->size[1]);
    djg.f1->size[0] = 1;
    djg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(djg.f1, tmp);
    djg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ejg.f1->size[0] * ejg.f1->size[1]);
    ejg.f1->size[0] = 1;
    ejg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ejg.f1, tmp);
    ejg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(fjg.f1->size[0] * fjg.f1->size[1]);
    fjg.f1->size[0] = 1;
    fjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fjg.f1, tmp);
    fjg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[490].f1[0],
        &cjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[490].f1[1],
        &djg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[490].f1[2],
        &ejg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[490].f1[3],
        &fjg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(gjg.f1->size[0] * gjg.f1->size[1]);
    gjg.f1->size[0] = 1;
    gjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gjg.f1, tmp);
    gjg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(hjg.f1->size[0] * hjg.f1->size[1]);
    hjg.f1->size[0] = 1;
    hjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hjg.f1, tmp);
    hjg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ijg.f1->size[0] * ijg.f1->size[1]);
    ijg.f1->size[0] = 1;
    ijg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ijg.f1, tmp);
    ijg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(jjg.f1->size[0] * jjg.f1->size[1]);
    jjg.f1->size[0] = 1;
    jjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jjg.f1, tmp);
    jjg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[491].f1[0],
        &gjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[491].f1[1],
        &hjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[491].f1[2],
        &ijg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[491].f1[3],
        &jjg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(kjg.f1->size[0] * kjg.f1->size[1]);
    kjg.f1->size[0] = 1;
    kjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kjg.f1, tmp);
    kjg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ljg.f1->size[0] * ljg.f1->size[1]);
    ljg.f1->size[0] = 1;
    ljg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ljg.f1, tmp);
    ljg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(mjg.f1->size[0] * mjg.f1->size[1]);
    mjg.f1->size[0] = 1;
    mjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mjg.f1, tmp);
    mjg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(njg.f1->size[0] * njg.f1->size[1]);
    njg.f1->size[0] = 1;
    njg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(njg.f1, tmp);
    njg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[492].f1[0],
        &kjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[492].f1[1],
        &ljg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[492].f1[2],
        &mjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[492].f1[3],
        &njg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(ojg.f1->size[0] * ojg.f1->size[1]);
    ojg.f1->size[0] = 1;
    ojg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ojg.f1, tmp);
    ojg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(pjg.f1->size[0] * pjg.f1->size[1]);
    pjg.f1->size[0] = 1;
    pjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pjg.f1, tmp);
    pjg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(qjg.f1->size[0] * qjg.f1->size[1]);
    qjg.f1->size[0] = 1;
    qjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qjg.f1, tmp);
    qjg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(rjg.f1->size[0] * rjg.f1->size[1]);
    rjg.f1->size[0] = 1;
    rjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rjg.f1, tmp);
    rjg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[493].f1[0],
        &ojg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[493].f1[1],
        &pjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[493].f1[2],
        &qjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[493].f1[3],
        &rjg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(sjg.f1->size[0] * sjg.f1->size[1]);
    sjg.f1->size[0] = 1;
    sjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sjg.f1, tmp);
    sjg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(tjg.f1->size[0] * tjg.f1->size[1]);
    tjg.f1->size[0] = 1;
    tjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tjg.f1, tmp);
    tjg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(ujg.f1->size[0] * ujg.f1->size[1]);
    ujg.f1->size[0] = 1;
    ujg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ujg.f1, tmp);
    ujg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(vjg.f1->size[0] * vjg.f1->size[1]);
    vjg.f1->size[0] = 1;
    vjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vjg.f1, tmp);
    vjg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[494].f1[0],
        &sjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[494].f1[1],
        &tjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[494].f1[2],
        &ujg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[494].f1[3],
        &vjg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(wjg.f1->size[0] * wjg.f1->size[1]);
    wjg.f1->size[0] = 1;
    wjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wjg.f1, tmp);
    wjg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(xjg.f1->size[0] * xjg.f1->size[1]);
    xjg.f1->size[0] = 1;
    xjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xjg.f1, tmp);
    xjg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(yjg.f1->size[0] * yjg.f1->size[1]);
    yjg.f1->size[0] = 1;
    yjg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yjg.f1, tmp);
    yjg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(akg.f1->size[0] * akg.f1->size[1]);
    akg.f1->size[0] = 1;
    akg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(akg.f1, tmp);
    akg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[495].f1[0],
        &wjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[495].f1[1],
        &xjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[495].f1[2],
        &yjg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[495].f1[3],
        &akg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(bkg.f1->size[0] * bkg.f1->size[1]);
    bkg.f1->size[0] = 1;
    bkg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bkg.f1, tmp);
    bkg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ckg.f1->size[0] * ckg.f1->size[1]);
    ckg.f1->size[0] = 1;
    ckg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ckg.f1, tmp);
    ckg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(dkg.f1->size[0] * dkg.f1->size[1]);
    dkg.f1->size[0] = 1;
    dkg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dkg.f1, tmp);
    dkg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ekg.f1->size[0] * ekg.f1->size[1]);
    ekg.f1->size[0] = 1;
    ekg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ekg.f1, tmp);
    ekg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[497].f1[0],
        &bkg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[497].f1[1],
        &ckg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[497].f1[2],
        &dkg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[497].f1[3],
        &ekg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(fkg.f1->size[0] * fkg.f1->size[1]);
    fkg.f1->size[0] = 1;
    fkg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fkg.f1, tmp);
    fkg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(gkg.f1->size[0] * gkg.f1->size[1]);
    gkg.f1->size[0] = 1;
    gkg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gkg.f1, tmp);
    gkg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(hkg.f1->size[0] * hkg.f1->size[1]);
    hkg.f1->size[0] = 1;
    hkg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hkg.f1, tmp);
    hkg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(ikg.f1->size[0] * ikg.f1->size[1]);
    ikg.f1->size[0] = 1;
    ikg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ikg.f1, tmp);
    ikg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[498].f1[0],
        &fkg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[498].f1[1],
        &gkg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[498].f1[2],
        &hkg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[498].f1[3],
        &ikg);

    // '<S284>:1:91'
    tmp = static_cast<int32_T>(jkg.f1->size[0] * jkg.f1->size[1]);
    jkg.f1->size[0] = 1;
    jkg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jkg.f1, tmp);
    jkg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(kkg.f1->size[0] * kkg.f1->size[1]);
    kkg.f1->size[0] = 1;
    kkg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kkg.f1, tmp);
    kkg.f1->data[0] = 'S';
    tmp = static_cast<int32_T>(lkg.f1->size[0] * lkg.f1->size[1]);
    lkg.f1->size[0] = 1;
    lkg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lkg.f1, tmp);
    lkg.f1->data[0] = 'R';
    tmp = static_cast<int32_T>(mkg.f1->size[0] * mkg.f1->size[1]);
    mkg.f1->size[0] = 1;
    mkg.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mkg.f1, tmp);
    mkg.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[499].f1[0],
        &jkg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[499].f1[1],
        &kkg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[499].f1[2],
        &lkg);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionType2List[499].f1[3],
        &mkg);

    // '<S284>:1:91'
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mkg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lkg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kkg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jkg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ikg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hkg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gkg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fkg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ekg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dkg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ckg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bkg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&akg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ujg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ojg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&njg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ljg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ijg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ejg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&djg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bjg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ajg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&big);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&whg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&thg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&shg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&phg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ohg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&khg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ihg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ghg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ehg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&chg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bhg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ahg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ygg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ugg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ogg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ngg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&igg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ggg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&egg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bgg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&agg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ufg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ofg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ifg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ffg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&efg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bfg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&afg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yeg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xeg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&weg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&veg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ueg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&teg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&seg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&reg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qeg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&peg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oeg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&neg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&meg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&leg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&keg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jeg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ieg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&heg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&geg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&feg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eeg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&deg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ceg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&beg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aeg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ydg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&udg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&odg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ndg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ldg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&idg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&edg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ddg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bdg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&adg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ycg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ucg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&scg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ocg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ncg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&icg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ecg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ccg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bcg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&acg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ybg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ubg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&obg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ibg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ebg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bbg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&abg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&syf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ryf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&myf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cyf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&byf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ayf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&txf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ixf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&exf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bxf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&axf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ywf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&twf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&swf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&owf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ewf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bwf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&awf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&svf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ovf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ivf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&evf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bvf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&avf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&suf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ruf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&quf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&puf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ouf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&muf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&luf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&juf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&huf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&guf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&euf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&duf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cuf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&buf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&auf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ytf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xtf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wtf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vtf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&utf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ttf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&stf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rtf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qtf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ptf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&otf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ntf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mtf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ltf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ktf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jtf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&itf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&htf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gtf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ftf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&etf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dtf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ctf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&btf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&atf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ysf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&usf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ssf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&psf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&osf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&msf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ksf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&isf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&esf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&csf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bsf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&asf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&urf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&trf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&srf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&prf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&orf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&krf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&irf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hrf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&grf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&frf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&drf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&crf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&brf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&arf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aqf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ypf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&upf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&spf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ppf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&opf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&npf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ipf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&epf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bpf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&apf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aof);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&unf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&snf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&onf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&knf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&inf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&enf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bnf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&anf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ymf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&umf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&smf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&omf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&imf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&emf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bmf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&amf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ylf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ulf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&slf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&plf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&olf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&llf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&klf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ilf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&glf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&flf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&elf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dlf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&clf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&blf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&alf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ykf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ukf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&skf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&okf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ikf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ekf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ckf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bkf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&akf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ujf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ojf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&njf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ljf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ijf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ejf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&djf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bjf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ajf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aif);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&whf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&thf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&shf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&phf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ohf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&khf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ihf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ghf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ehf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&chf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bhf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ahf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ygf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ugf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ogf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ngf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&igf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ggf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&egf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bgf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&agf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&off);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ref);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ief);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&def);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ydf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&udf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&odf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ndf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ldf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&idf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&edf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ddf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bdf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&adf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ycf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ucf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&scf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ocf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ncf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&icf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ecf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ccf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bcf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&acf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ybf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ubf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&obf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ibf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ebf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bbf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&abf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&waf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&taf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&saf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&raf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&paf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&naf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&maf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&laf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&haf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&faf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&daf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&caf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&baf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aaf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&txe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ixe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&exe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bxe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&axe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ywe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&twe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&swe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&owe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ewe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bwe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&awe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ove);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ive);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ave);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&que);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&due);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ute);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ste);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ote);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ite);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ete);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bte);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ate);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&use);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ose);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ise);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ese);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bse);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ase);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ure);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ore);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ire);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ere);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bre);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&are);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aqe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ype);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&upe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&spe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ppe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ope);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&npe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ipe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&epe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bpe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ape);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yoe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xoe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&woe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&voe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uoe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&toe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&soe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&roe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qoe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&poe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ooe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&noe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&moe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&loe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&koe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&joe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ioe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hoe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&goe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&foe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eoe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&doe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&coe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&boe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aoe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&une);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&one);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ine);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ene);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ane);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ume);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ome);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ime);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bme);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ame);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ule);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ple);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ole);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ile);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ele);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cle);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ble);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ale);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ske);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ike);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ake);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ije);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aje);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&die);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&whe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&the);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&she);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&phe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ohe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&khe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ihe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ghe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ehe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&che);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bhe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ahe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ige);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ege);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&age);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ufe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ofe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ife);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ffe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&efe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bfe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&afe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&see);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ree);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ude);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ode);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ide);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ede);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bde);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ade);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ice);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ece);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ace);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ybe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ube);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&obe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ibe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ebe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bbe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&abe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&syd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ryd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&myd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cyd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&byd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ayd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&txd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ixd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&exd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bxd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&axd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ywd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&twd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&swd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&owd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ewd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bwd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&awd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&svd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ovd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ivd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&evd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bvd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&avd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ytd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xtd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wtd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vtd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&utd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ttd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rtd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qtd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ptd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&otd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ntd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mtd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ltd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ktd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jtd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&itd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&htd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gtd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ftd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&etd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dtd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ctd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&btd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&atd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ysd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&usd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ssd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&psd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&osd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&msd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ksd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&isd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&esd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&csd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bsd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&asd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&urd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&trd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&srd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&prd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ord);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&krd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ird);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hrd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&grd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&frd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&erd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&drd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&crd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&brd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ard);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aqd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ypd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&upd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&spd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ppd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&opd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&npd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ipd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&epd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bpd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&apd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ood);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&god);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aod);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ynd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&und);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&snd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ond);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&knd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ind);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&end);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bnd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ymd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&umd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&smd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&omd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&imd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&emd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bmd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&amd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&old);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ild);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ald);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ykd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ukd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&skd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&okd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ikd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ekd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ckd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bkd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&akd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ujd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ojd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&njd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ljd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ijd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ejd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&djd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bjd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ajd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tid_0);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&did);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aid);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&whd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&thd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&shd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&phd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ohd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&khd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ihd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ghd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ehd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&chd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bhd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ahd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ygd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ugd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ogd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ngd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&igd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ggd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&egd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bgd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&agd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ufd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ofd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ifd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ffd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&efd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bfd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&afd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ved);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ued);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ted);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&red);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ped);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ned);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&med);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&led);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ked);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ied);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ged);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ded);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ced);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ydd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&udd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&odd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ndd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ldd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&idd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&edd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ddd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bdd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&add);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ycd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ucd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&scd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ocd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ncd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&icd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ecd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ccd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bcd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&acd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ybd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ubd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&obd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ibd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ebd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bbd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&abd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&had);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ead);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&syc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ryc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&myc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cyc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&byc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ayc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&txc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ixc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&exc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bxc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&axc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ywc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&twc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&swc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&owc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ewc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bwc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&awc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&svc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ovc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ivc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&evc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bvc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&avc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&suc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ruc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&quc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&puc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ouc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&muc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&luc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&juc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&huc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&guc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&euc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&duc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cuc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&buc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&auc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ytc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xtc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wtc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vtc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&utc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ttc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&stc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rtc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qtc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ptc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&otc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ntc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mtc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ltc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ktc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jtc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&itc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&htc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gtc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ftc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&etc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dtc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ctc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&btc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&atc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ysc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&usc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ssc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&psc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&osc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&msc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ksc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&isc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&esc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&csc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bsc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&asc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&urc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&trc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&src);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&prc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&orc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&krc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&irc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hrc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&grc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&frc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&erc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&drc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&crc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&brc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&arc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aqc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ypc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&upc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&spc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ppc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&opc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&npc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ipc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&epc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bpc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&apc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yoc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xoc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&woc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&voc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uoc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&toc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&soc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&roc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qoc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&poc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ooc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&noc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&moc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&loc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&koc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&joc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ioc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hoc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&goc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&foc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eoc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&doc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&coc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&boc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aoc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ync);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&unc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&snc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&onc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&knc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&inc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&enc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bnc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&anc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ymc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&umc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&smc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&omc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&imc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&emc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bmc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&amc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ylc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ulc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&slc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&plc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&olc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&llc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&klc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ilc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&glc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&flc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&elc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dlc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&clc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&blc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&alc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ykc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ukc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&skc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&okc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ikc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ekc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ckc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bkc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&akc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ujc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ojc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&njc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ljc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ijc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ejc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&djc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bjc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ajc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ric);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&whc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&thc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&shc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&phc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ohc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&khc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ihc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ghc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ehc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&chc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bhc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ahc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ygc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ugc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ogc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ngc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&igc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ggc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&egc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bgc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&agc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ufc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ofc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ifc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ffc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&efc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bfc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&afc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ydc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&udc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&odc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ndc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ldc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&idc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&edc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ddc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bdc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&adc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ycc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ucc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&scc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&occ);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ncc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&icc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ecc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ccc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bcc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&acc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ybc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ubc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&obc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ibc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ebc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bbc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&abc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&syb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ryb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&myb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cyb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&byb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ayb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&txb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ixb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&exb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bxb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&axb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ywb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&twb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&swb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&owb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ewb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bwb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&awb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&svb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ovb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ivb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&evb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bvb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&avb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ytb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xtb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wtb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vtb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&utb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ttb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&stb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rtb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qtb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ptb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&otb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ntb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mtb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ltb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ktb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jtb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&itb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&htb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gtb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ftb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&etb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dtb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ctb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&btb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&atb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ysb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&usb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ssb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&psb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&osb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&msb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ksb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&isb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&esb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&csb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bsb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&asb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&urb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&trb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&srb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&prb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&orb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&krb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&irb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hrb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&grb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&frb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&erb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&drb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&crb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&brb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&arb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aqb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ypb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&upb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&spb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ppb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&opb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&npb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ipb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&epb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bpb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&apb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&job);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ynb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&unb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&snb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&onb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&knb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&inb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&enb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bnb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&anb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ymb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&umb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&smb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&omb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&imb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&emb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bmb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&amb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ylb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ulb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&slb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&plb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&olb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&llb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&klb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ilb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&glb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&flb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&elb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dlb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&clb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&blb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&alb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ykb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ukb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&skb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&okb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ikb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ekb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ckb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bkb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&akb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ujb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ojb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&njb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ljb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ijb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ejb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&djb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bjb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ajb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&whb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&thb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&shb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&phb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ohb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&khb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ihb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ghb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ehb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&chb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bhb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ahb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ygb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ugb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ogb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ngb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&igb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ggb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&egb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bgb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&agb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ufb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ofb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ifb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ffb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&efb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bfb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&afb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yeb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xeb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&web);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&veb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ueb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&teb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&seb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&reb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qeb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&peb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oeb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&neb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&meb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&leb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&keb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jeb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ieb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&heb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&geb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&feb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eeb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&deb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ceb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&beb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aeb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ydb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&udb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&odb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ndb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ldb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&idb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&edb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ddb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bdb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&adb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ycb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ucb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&scb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ocb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ncb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&icb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ecb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ccb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bcb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&acb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ybb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ubb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&obb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ibb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ebb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bbb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&abb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ty);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ry);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&py);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ny);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&my);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ly);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ky);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ey);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cy);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&by);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ay);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ux);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&px);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ox);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ix);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ex);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bx);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ax);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ww);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ow);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ew);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aw);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ov);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ev);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bv);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&av);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&su);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ru);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ou);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ku);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ju);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&du);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bu);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&au);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ut);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&st);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ot);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&it);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ht);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ft);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&et);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ct);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bt);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&at);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ys);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xs);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ws);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vs);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&us);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ts);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ss);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rs);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qs);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ps);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&os);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ns);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ms);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ls);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ks);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&js);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&is);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hs);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gs);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fs);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&es);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ds);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cs);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bs);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&as);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ur);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ir);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&er);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cr);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&br);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ar);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&iq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aq);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&up);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&op);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&np);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ip);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ep);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bp);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ap);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&to);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&so);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ro);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&po);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&no);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ko);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&io);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ho);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&go);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&co);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bo);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ao);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&un);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&on);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ln);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&in);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&en);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bn);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&an);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ym);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&um);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&om);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&km);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&im);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&em);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bm);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&am);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ul);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ql);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ol);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ml);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ll);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&il);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&el);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bl);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&al);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ok);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ik);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ek);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ck);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bk);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ak);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ij);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ej);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&aj);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ui);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ti);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&si);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ri);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ni);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&li);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ki);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ji);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ii);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ei);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&di);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ci);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bi);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ai);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&th);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ph);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ih);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ch);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bh);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ah);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ug);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&og);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ng);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ig);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bg);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ag);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&of);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ef);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&df);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&af);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&we);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ve);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&te);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&se);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&re);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ne);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&me);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&le);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&je);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&he);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&de);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&be);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&td);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&od);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&md);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&id);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&eb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&db);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ab);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&y);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&x);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&w);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&v);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&u);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&t);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&s);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&r);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&q);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&p);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&o);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&n);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&m);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&l);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&k);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&j);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&i);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&h);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&g);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&f);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&e);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&d);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&c);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&b);
}

static void FlightMissionMode_emxEnsureCapacity_real_T_c
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(real_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (real_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (real_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxReserve_real_T
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T numelToReserve)
{
    void *newData;
    if (numelToReserve > emxArray->allocatedSize) {
        int32_T numel;
        numel = 1;
        for (int32_T i{0}; i <= static_cast<int32_T>(emxArray->numDimensions - 1);
             i++) {
            numel = static_cast<int32_T>(numel * emxArray->size[i]);
        }

        newData = std::calloc(static_cast<uint32_T>(numelToReserve), sizeof
                              (real_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (real_T) * static_cast<uint32_T>(numel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (real_T *)newData;
        emxArray->allocatedSize = numelToReserve;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_binary_expand_op_p(real_T clockAngleVertex_data[],
    const real_T numberGroup_data[], const real_T clockAngleInitial_data[],
    const int32_T clockAngleInitial_size[2], real_T b_b)
{
    int32_T aux_1_1;
    int32_T loop_ub;
    int32_T stride_0_1;
    int32_T stride_1_1;
    stride_0_1 = (clockAngleInitial_size[1] != 1);
    stride_1_1 = (static_cast<int32_T>(static_cast<int32_T>(std::floor
                    (numberGroup_data[0] - 1.0)) + 1) != 1);
    aux_1_1 = 0;
    loop_ub = static_cast<int32_T>(static_cast<int32_T>(std::floor
        (numberGroup_data[0] - 1.0)) + 1) == 1 ? clockAngleInitial_size[1] :
        static_cast<int32_T>(static_cast<int32_T>(std::floor(numberGroup_data[0]
        - 1.0)) + 1);
    for (int32_T i{0}; i <= static_cast<int32_T>(loop_ub - 1); i++) {
        clockAngleVertex_data[static_cast<int32_T>(i << 1)] =
            ((static_cast<real_T>(aux_1_1) + 1.0) - 1.0) * b_b +
            clockAngleInitial_data[static_cast<int32_T>(i * stride_0_1)];
        aux_1_1 = static_cast<int32_T>(aux_1_1 + stride_1_1);
    }
}

static void FlightMissionMode_emxInit_real_T1_o
    (emxArray_real_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_real_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_real_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_real_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (real_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_real_T1_g
    (emxArray_real_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(real_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (real_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (real_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_binary_expand_op(real_T varargin_1_data[], int32_T
    varargin_1_size[2], const real_T positionENUTarget[3], const real_T b_data[],
    const int32_T b_size[2], const emxArray_real_T_FlightMissionMode_T *x, const
    emxArray_real_T_FlightMissionMode_T *b_x, const real_T numberGroup_data[])
{
    real_T x_data[300];
    int32_T i;
    int32_T i_0;
    int32_T loop_ub;
    int32_T stride_1_0;
    int32_T x_0;
    int32_T x_size_idx_0;
    i_0 = static_cast<int32_T>(2.0 * numberGroup_data[0]);
    x_size_idx_0 = x->size[0];
    loop_ub = x->size[0];
    for (i = 0; i <= static_cast<int32_T>(loop_ub - 1); i++) {
        x_data[i] = x->data[i];
    }

    loop_ub = b_x->size[0];
    for (i = 0; i <= static_cast<int32_T>(loop_ub - 1); i++) {
        x_data[static_cast<int32_T>(i + x->size[0])] = b_x->data[i];
    }

    for (i = 0; i <= static_cast<int32_T>(i_0 - 1); i++) {
        x_data[static_cast<int32_T>(static_cast<int32_T>(i + x->size[0]) +
            b_x->size[0])] = 500.0;
    }

    varargin_1_size[0] = x_size_idx_0 == 1 ? b_size[0] : x_size_idx_0;
    varargin_1_size[1] = 3;
    x_0 = (b_size[0] != 1);
    stride_1_0 = (x_size_idx_0 != 1);
    loop_ub = x_size_idx_0 == 1 ? b_size[0] : x_size_idx_0;
    for (i = 0; i < 3; i++) {
        for (i_0 = 0; i_0 <= static_cast<int32_T>(loop_ub - 1); i_0++) {
            varargin_1_data[static_cast<int32_T>(i_0 + static_cast<int32_T>
                (varargin_1_size[0] * i))] = b_data[static_cast<int32_T>(
                static_cast<int32_T>(i_0 * x_0) + static_cast<int32_T>(b_size[0]
                * i))] * x_data[static_cast<int32_T>(static_cast<int32_T>(i_0 *
                stride_1_0) + static_cast<int32_T>(x_size_idx_0 * i))] +
                positionENUTarget[i];
        }
    }
}

static void FlightMissionMode_emxInit_uavDubinsPathSegment_10
    (emxArray_uavDubinsPathSegment_1_FlightMissionMode_T *pEmxArray)
{
    for (int32_T i{0}; i < 1; i++) {
        pEmxArray->size = 0;
    }
}

static void FlightMissionMode_emxFreeMatrix_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[4])
{
    for (int32_T i{0}; i < 4; i++) {
        FlightMissionMode_emxFreeStruct_cell_wrap_1(&pMatrix[i]);
    }
}

static void FlightMissionMode_emxFreeStruct_uavDubinsPathSegm
    (uavDubinsPathSegment_FlightMissionMode_g_T *pStruct)
{
    FlightMissionMode_emxFreeMatrix_cell_wrap_1(pStruct->MotionTypes);
}

static void FlightMissionMode_emxTrim_uavDubinsPathSegment_10
    (uavDubinsPathSegment_FlightMissionMode_g_T data[100], int32_T fromIndex,
     int32_T toIndex)
{
    for (int32_T i{fromIndex}; i <= static_cast<int32_T>(toIndex - 1); i++) {
        FlightMissionMode_emxFreeStruct_uavDubinsPathSegm(&data[i]);
    }
}

static void FlightMissionMode_emxInitStruct_uavDubinsPathSegm
    (uavDubinsPathSegment_FlightMissionMode_g_T *pStruct)
{
    pStruct->StartPose.size[0] = 0;
    pStruct->StartPose.size[1] = 0;
    pStruct->GoalPose.size[0] = 0;
    pStruct->GoalPose.size[1] = 0;
    FlightMissionMode_emxInitMatrix_cell_wrap_1(pStruct->MotionTypes);
}

static void FlightMissionMode_emxExpand_uavDubinsPathSegment_
    (uavDubinsPathSegment_FlightMissionMode_g_T data[100], int32_T fromIndex,
     int32_T toIndex)
{
    for (int32_T i{fromIndex}; i <= static_cast<int32_T>(toIndex - 1); i++) {
        FlightMissionMode_emxInitStruct_uavDubinsPathSegm(&data[i]);
    }
}

static void FlightMissionMode_emxEnsureCapacity_uavDubinsPath
    (uavDubinsPathSegment_FlightMissionMode_g_T data[100], const int32_T *size,
     int32_T oldNumel)
{
    int32_T newNumel;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = *size;
    if (oldNumel > newNumel) {
        FlightMissionMode_emxTrim_uavDubinsPathSegment_10(data, newNumel,
            oldNumel);
    } else if (oldNumel < newNumel) {
        FlightMissionMode_emxExpand_uavDubinsPathSegment_(data, oldNumel,
            newNumel);
    }
}

static void FlightMissionMode_emxInit_cell_wrap_1
    (emxArray_cell_wrap_1_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_cell_wrap_1_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_cell_wrap_1_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_cell_wrap_1_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (cell_wrap_1_FlightMissionMode_i_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxInitStruct_uavDubinsConnecti
    (uavDubinsConnection_1_FlightMissionMode_T *pStruct)
{
    FlightMissionMode_emxInit_cell_wrap_1(&pStruct->DisabledPathTypes, 2);
}

static void FlightMissionMode_emxInitMatrix_uavDubinsConnecti
    (uavDubinsConnection_1_FlightMissionMode_T pMatrix[2])
{
    for (int32_T i{0}; i < 2; i++) {
        FlightMissionMode_emxInitStruct_uavDubinsConnecti(&pMatrix[i]);
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_set_StartPose
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this, const real_T
     startPose_data[], const int32_T startPose_size[2])
{
    real_T thetaWrap;
    real_T thetaWrap_tmp_0;
    int32_T loop_ub;
    b_this->StartPose.size[0] = 1;
    b_this->StartPose.size[1] = startPose_size[1];
    loop_ub = static_cast<int32_T>(startPose_size[1] - 1);
    for (int32_T thetaWrap_tmp{0}; thetaWrap_tmp <= loop_ub; thetaWrap_tmp++) {
        b_this->StartPose.data[thetaWrap_tmp] = startPose_data[thetaWrap_tmp];
    }

    thetaWrap_tmp_0 = startPose_data[3];
    thetaWrap = mod_ZflSpsmf(thetaWrap_tmp_0);
    b_this->StartPose.data[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (thetaWrap_tmp_0 > 0.0)))) {
        b_this->StartPose.data[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->StartPose.data[3]);
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_set_GoalPose
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this, const real_T
     goalPose_data[], const int32_T goalPose_size[2])
{
    real_T thetaWrap;
    real_T thetaWrap_tmp_0;
    int32_T loop_ub;
    b_this->GoalPose.size[0] = 1;
    b_this->GoalPose.size[1] = goalPose_size[1];
    loop_ub = static_cast<int32_T>(goalPose_size[1] - 1);
    for (int32_T thetaWrap_tmp{0}; thetaWrap_tmp <= loop_ub; thetaWrap_tmp++) {
        b_this->GoalPose.data[thetaWrap_tmp] = goalPose_data[thetaWrap_tmp];
    }

    thetaWrap_tmp_0 = goalPose_data[3];
    thetaWrap = mod_ZflSpsmf(thetaWrap_tmp_0);
    b_this->GoalPose.data[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (thetaWrap_tmp_0 > 0.0)))) {
        b_this->GoalPose.data[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->GoalPose.data[3]);
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static uavDubinsConnection_1_FlightMissionMode_T
    *FlightMissionMode_uavDubinsConnection_uavDubinsConnection
    (uavDubinsConnection_1_FlightMissionMode_T *b_this, real_T varargin_2,
     real_T varargin_4, const real_T varargin_6[2])
{
    uavDubinsConnection_1_FlightMissionMode_T *c_this;
    real_T b_x;
    c_this = b_this;
    b_this->AirSpeed = 10.0;
    b_this->DisabledPathTypes->size[0] = 0;
    b_this->DisabledPathTypes->size[1] = 0;
    b_this->FlightPathAngleLimit[0] = varargin_6[0];
    b_this->FlightPathAngleLimit[1] = varargin_6[1];
    b_this->MaxRollAngle = varargin_4;
    b_x = b_this->MaxRollAngle;
    b_this->MinTurningRadius = b_this->AirSpeed * b_this->AirSpeed / (9.8 * std::
        tan(b_x));
    b_this->AirSpeed = varargin_2;
    b_x = b_this->MaxRollAngle;
    b_this->MinTurningRadius = b_this->AirSpeed * b_this->AirSpeed / (9.8 * std::
        tan(b_x));
    b_x = b_this->MaxRollAngle;
    b_this->MinTurningRadius = b_this->AirSpeed * b_this->AirSpeed / (9.8 * std::
        tan(b_x));
    return c_this;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_set_MotionTypes
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this, const
     cell_wrap_1_FlightMissionMode_i_T motionTypes[4])
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
        'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',
        'Z', '[', '\\', ']', '^', '_', '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
        'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', '\x7f' };

    cell_wrap_1_FlightMissionMode_i_T motionTypes_0;
    int32_T tmp;
    FlightMissionMode_emxInitStruct_cell_wrap_1(&motionTypes_0);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes_0, &motionTypes[0]);
    tmp = static_cast<int32_T>(motionTypes_0.f1->size[0] *
        motionTypes_0.f1->size[1]);
    motionTypes_0.f1->size[0] = 1;
    motionTypes_0.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(motionTypes_0.f1, tmp);
    motionTypes_0.f1->data[0] = b[static_cast<int32_T>(static_cast<int32_T>(
        static_cast<uint8_T>(motionTypes[0].f1->data[0])) & 127)];
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[0],
        &motionTypes_0);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes_0, &motionTypes[1]);
    tmp = static_cast<int32_T>(motionTypes_0.f1->size[0] *
        motionTypes_0.f1->size[1]);
    motionTypes_0.f1->size[0] = 1;
    motionTypes_0.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(motionTypes_0.f1, tmp);
    motionTypes_0.f1->data[0] = b[static_cast<int32_T>(static_cast<int32_T>(
        static_cast<uint8_T>(motionTypes[1].f1->data[0])) & 127)];
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[1],
        &motionTypes_0);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes_0, &motionTypes[2]);
    tmp = static_cast<int32_T>(motionTypes_0.f1->size[0] *
        motionTypes_0.f1->size[1]);
    motionTypes_0.f1->size[0] = 1;
    motionTypes_0.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(motionTypes_0.f1, tmp);
    motionTypes_0.f1->data[0] = b[static_cast<int32_T>(static_cast<int32_T>(
        static_cast<uint8_T>(motionTypes[2].f1->data[0])) & 127)];
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[2],
        &motionTypes_0);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes_0, &motionTypes[3]);
    tmp = static_cast<int32_T>(motionTypes_0.f1->size[0] *
        motionTypes_0.f1->size[1]);
    motionTypes_0.f1->size[0] = 1;
    motionTypes_0.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(motionTypes_0.f1, tmp);
    motionTypes_0.f1->data[0] = b[static_cast<int32_T>(static_cast<int32_T>(
        static_cast<uint8_T>(motionTypes[3].f1->data[0])) & 127)];
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[3],
        &motionTypes_0);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&motionTypes_0);
}

static void FlightMissionMode_emxInitMatrix_cell_wrap_11
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[27])
{
    for (int32_T i{0}; i < 27; i++) {
        FlightMissionMode_emxInitStruct_cell_wrap_1(&pMatrix[i]);
    }
}

static void FlightMissionMode_emxInitMatrix_cell_wrap_12
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[28])
{
    for (int32_T i{0}; i < 28; i++) {
        FlightMissionMode_emxInitStruct_cell_wrap_1(&pMatrix[i]);
    }
}

static void FlightMissionMode_emxFreeMatrix_cell_wrap_12
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[28])
{
    for (int32_T i{0}; i < 28; i++) {
        FlightMissionMode_emxFreeStruct_cell_wrap_1(&pMatrix[i]);
    }
}

static void FlightMissionMode_emxFreeMatrix_cell_wrap_11
    (cell_wrap_1_FlightMissionMode_i_T pMatrix[27])
{
    for (int32_T i{0}; i < 27; i++) {
        FlightMissionMode_emxFreeStruct_cell_wrap_1(&pMatrix[i]);
    }
}

static void FlightMissionMode_emxInitStruct_uavDubinsPathSegm_f
    (uavDubinsPathSegment_1_FlightMissionMode_T *pStruct)
{
    FlightMissionMode_emxInitMatrix_cell_wrap_1(pStruct->MotionTypes);
}

static void FlightMissionMode_emxInitMatrix_uavDubinsPathSegm
    (uavDubinsPathSegment_1_FlightMissionMode_T *pMatrix)
{
    for (int32_T i{0}; i < 1; i++) {
        FlightMissionMode_emxInitStruct_uavDubinsPathSegm_f(pMatrix);
    }
}

static void FlightMissionMode_emxInit_uint64_T
    (emxArray_uint64_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_uint64_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_uint64_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_uint64_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (uint64_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxFree_uint64_T
    (emxArray_uint64_T_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_uint64_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (uint64_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_uint64_T_FlightMissionMode_T *)nullptr;
    }
}

static void FlightMissionMode_emxInit_int32_T_k
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_int32_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_int32_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_int32_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (int32_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_int32_T_j
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(int32_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (int32_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (int32_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxInit_int32_T1_lv
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_int32_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_int32_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_int32_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (int32_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_int32_T1_k
    (emxArray_int32_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(int32_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (int32_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (int32_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxFree_int32_T_a
    (emxArray_int32_T_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_int32_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (int32_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_int32_T_FlightMissionMode_T *)nullptr;
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_merge_b(int32_T idx_data[], int32_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], int32_T
    xwork_data[])
{
    if (nq != 0) {
        int32_T iout;
        int32_T n;
        int32_T n_tmp;
        int32_T q;
        n_tmp = static_cast<int32_T>(np + nq);
        for (q = 0; q <= static_cast<int32_T>(n_tmp - 1); q =
                static_cast<int32_T>(q + 1)) {
            iout = static_cast<int32_T>(offset + q);
            iwork_data[q] = idx_data[iout];
            xwork_data[q] = x_data[iout];
        }

        n = 0;
        q = np;
        iout = static_cast<int32_T>(offset - 1);
        int32_T exitg1;
        do {
            exitg1 = 0;
            iout = static_cast<int32_T>(iout + 1);
            if (xwork_data[n] <= xwork_data[q]) {
                idx_data[iout] = iwork_data[n];
                x_data[iout] = xwork_data[n];
                if (static_cast<int32_T>(n + 1) < np) {
                    n = static_cast<int32_T>(n + 1);
                } else {
                    exitg1 = 1;
                }
            } else {
                idx_data[iout] = iwork_data[q];
                x_data[iout] = xwork_data[q];
                if (static_cast<int32_T>(q + 1) < n_tmp) {
                    q = static_cast<int32_T>(q + 1);
                } else {
                    q = static_cast<int32_T>(iout - n);
                    while (static_cast<int32_T>(n + 1) <= np) {
                        iout = static_cast<int32_T>(static_cast<int32_T>(q + n)
                            + 1);
                        idx_data[iout] = iwork_data[n];
                        x_data[iout] = xwork_data[n];
                        n = static_cast<int32_T>(n + 1);
                    }

                    exitg1 = 1;
                }
            }
        } while (exitg1 == 0);
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_sort_m(int32_T x_data[], const int32_T *x_size,
    int32_T idx_data[], int32_T *idx_size)
{
    int32_T b_idx_data[28];
    int32_T b_x_data[28];
    int32_T vwork_data[28];
    int32_T xwork_data[28];
    int32_T x4[4];
    int32_T b;
    int32_T c_k;
    int32_T dim;
    int32_T vstride;
    int32_T vwork_size_idx_0;
    int8_T idx4[4];
    int8_T perm[4];
    dim = 2;
    if (*x_size != 1) {
        dim = 1;
        b = static_cast<int32_T>(*x_size - 1);
    } else {
        b = 0;
    }

    vwork_size_idx_0 = static_cast<int32_T>(b + 1);
    *idx_size = *x_size;
    vstride = 1;
    c_k = 0;
    while (c_k <= static_cast<int32_T>(dim - 2)) {
        vstride = static_cast<int32_T>(vstride * *x_size);
        c_k = 1;
    }

    for (dim = 0; dim <= static_cast<int32_T>(vstride - 1); dim =
            static_cast<int32_T>(dim + 1)) {
        int32_T nQuartets;
        for (nQuartets = 0; nQuartets <= b; nQuartets = static_cast<int32_T>
                (nQuartets + 1)) {
            vwork_data[nQuartets] = x_data[static_cast<int32_T>
                (static_cast<int32_T>(nQuartets * vstride) + dim)];
        }

        for (c_k = 0; c_k <= static_cast<int32_T>(vwork_size_idx_0 - 1); c_k++)
        {
            b_x_data[c_k] = vwork_data[c_k];
        }

        nQuartets = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
        for (c_k = 0; c_k <= static_cast<int32_T>(nQuartets - 1); c_k++) {
            b_idx_data[c_k] = 0;
        }

        if (vwork_size_idx_0 != 0) {
            int32_T nLeft;
            int32_T nQuartets_tmp;
            int32_T nTail;
            int32_T tailOffset;
            nQuartets = static_cast<int32_T>(static_cast<int8_T>
                (vwork_size_idx_0));
            for (c_k = 0; c_k <= static_cast<int32_T>(nQuartets - 1); c_k++) {
                b_idx_data[c_k] = 0;
            }

            x4[0] = 0;
            idx4[0] = 0;
            x4[1] = 0;
            idx4[1] = 0;
            x4[2] = 0;
            idx4[2] = 0;
            x4[3] = 0;
            idx4[3] = 0;
            nQuartets_tmp = static_cast<int32_T>(vwork_size_idx_0 >> 2);
            for (nLeft = 0; nLeft <= static_cast<int32_T>(nQuartets_tmp - 1);
                    nLeft = static_cast<int32_T>(nLeft + 1)) {
                int32_T i3;
                int32_T i4;
                int32_T tmp;
                tailOffset = static_cast<int32_T>(nLeft << 2);
                idx4[0] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    1));
                idx4[1] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    2));
                idx4[2] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    3));
                idx4[3] = static_cast<int8_T>(static_cast<int32_T>(tailOffset +
                    4));
                x4[0] = b_x_data[tailOffset];
                x4[1] = b_x_data[static_cast<int32_T>(tailOffset + 1)];
                x4[2] = b_x_data[static_cast<int32_T>(tailOffset + 2)];
                x4[3] = b_x_data[static_cast<int32_T>(tailOffset + 3)];
                if (b_x_data[tailOffset] <= b_x_data[static_cast<int32_T>
                        (tailOffset + 1)]) {
                    nTail = 1;
                    nQuartets = 2;
                } else {
                    nTail = 2;
                    nQuartets = 1;
                }

                if (b_x_data[static_cast<int32_T>(tailOffset + 2)] <= b_x_data[
                        static_cast<int32_T>(tailOffset + 3)]) {
                    i3 = 3;
                    i4 = 4;
                } else {
                    i3 = 4;
                    i4 = 3;
                }

                c_k = x4[static_cast<int32_T>(nTail - 1)];
                tmp = x4[static_cast<int32_T>(i3 - 1)];
                if (c_k <= tmp) {
                    c_k = x4[static_cast<int32_T>(nQuartets - 1)];
                    if (c_k <= tmp) {
                        perm[0] = static_cast<int8_T>(nTail);
                        perm[1] = static_cast<int8_T>(nQuartets);
                        perm[2] = static_cast<int8_T>(i3);
                        perm[3] = static_cast<int8_T>(i4);
                    } else if (c_k <= x4[static_cast<int32_T>(i4 - 1)]) {
                        perm[0] = static_cast<int8_T>(nTail);
                        perm[1] = static_cast<int8_T>(i3);
                        perm[2] = static_cast<int8_T>(nQuartets);
                        perm[3] = static_cast<int8_T>(i4);
                    } else {
                        perm[0] = static_cast<int8_T>(nTail);
                        perm[1] = static_cast<int8_T>(i3);
                        perm[2] = static_cast<int8_T>(i4);
                        perm[3] = static_cast<int8_T>(nQuartets);
                    }
                } else {
                    tmp = x4[static_cast<int32_T>(i4 - 1)];
                    if (c_k <= tmp) {
                        if (x4[static_cast<int32_T>(nQuartets - 1)] <= tmp) {
                            perm[0] = static_cast<int8_T>(i3);
                            perm[1] = static_cast<int8_T>(nTail);
                            perm[2] = static_cast<int8_T>(nQuartets);
                            perm[3] = static_cast<int8_T>(i4);
                        } else {
                            perm[0] = static_cast<int8_T>(i3);
                            perm[1] = static_cast<int8_T>(nTail);
                            perm[2] = static_cast<int8_T>(i4);
                            perm[3] = static_cast<int8_T>(nQuartets);
                        }
                    } else {
                        perm[0] = static_cast<int8_T>(i3);
                        perm[1] = static_cast<int8_T>(i4);
                        perm[2] = static_cast<int8_T>(nTail);
                        perm[3] = static_cast<int8_T>(nQuartets);
                    }
                }

                b_idx_data[tailOffset] = static_cast<int32_T>(idx4
                    [static_cast<int32_T>(static_cast<int32_T>(perm[0]) - 1)]);
                b_idx_data[static_cast<int32_T>(tailOffset + 1)] =
                    static_cast<int32_T>(idx4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[1]) - 1)]);
                b_idx_data[static_cast<int32_T>(tailOffset + 2)] =
                    static_cast<int32_T>(idx4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[2]) - 1)]);
                b_idx_data[static_cast<int32_T>(tailOffset + 3)] =
                    static_cast<int32_T>(idx4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[3]) - 1)]);
                b_x_data[tailOffset] = x4[static_cast<int32_T>
                    (static_cast<int32_T>(perm[0]) - 1)];
                b_x_data[static_cast<int32_T>(tailOffset + 1)] = x4[static_cast<
                    int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                b_x_data[static_cast<int32_T>(tailOffset + 2)] = x4[static_cast<
                    int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                b_x_data[static_cast<int32_T>(tailOffset + 3)] = x4[static_cast<
                    int32_T>(static_cast<int32_T>(perm[3]) - 1)];
            }

            nQuartets = static_cast<int32_T>(nQuartets_tmp << 2);
            nLeft = static_cast<int32_T>(vwork_size_idx_0 - nQuartets);
            if (nLeft > 0) {
                for (tailOffset = 0; tailOffset <= static_cast<int32_T>(nLeft -
                        1); tailOffset = static_cast<int32_T>(tailOffset + 1)) {
                    c_k = static_cast<int32_T>(nQuartets + tailOffset);
                    idx4[tailOffset] = static_cast<int8_T>(static_cast<int32_T>
                        (c_k + 1));
                    x4[tailOffset] = b_x_data[c_k];
                }

                perm[1] = 0;
                perm[2] = 0;
                perm[3] = 0;
                switch (nLeft) {
                  case 1:
                    perm[0] = 1;
                    break;

                  case 2:
                    if (x4[0] <= x4[1]) {
                        perm[0] = 1;
                        perm[1] = 2;
                    } else {
                        perm[0] = 2;
                        perm[1] = 1;
                    }
                    break;

                  default:
                    if (x4[0] <= x4[1]) {
                        if (x4[1] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 2;
                            perm[2] = 3;
                        } else if (x4[0] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 3;
                            perm[2] = 2;
                        } else {
                            perm[0] = 3;
                            perm[1] = 1;
                            perm[2] = 2;
                        }
                    } else if (x4[0] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 1;
                        perm[2] = 3;
                    } else if (x4[1] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 3;
                        perm[2] = 1;
                    } else {
                        perm[0] = 3;
                        perm[1] = 2;
                        perm[2] = 1;
                    }
                    break;
                }

                for (tailOffset = 0; tailOffset <= static_cast<int32_T>(nLeft -
                        1); tailOffset = static_cast<int32_T>(tailOffset + 1)) {
                    c_k = static_cast<int32_T>(static_cast<int32_T>
                        (perm[tailOffset]) - 1);
                    nTail = static_cast<int32_T>(nQuartets + tailOffset);
                    b_idx_data[nTail] = static_cast<int32_T>(idx4[c_k]);
                    b_x_data[nTail] = x4[c_k];
                }
            }

            if (vwork_size_idx_0 > 1) {
                nQuartets = static_cast<int32_T>(static_cast<int8_T>
                    (vwork_size_idx_0));
                for (c_k = 0; c_k <= static_cast<int32_T>(nQuartets - 1); c_k++)
                {
                    vwork_data[c_k] = 0;
                }

                for (c_k = 0; c_k <= static_cast<int32_T>(vwork_size_idx_0 - 1);
                     c_k++) {
                    xwork_data[c_k] = 0;
                }

                nLeft = nQuartets_tmp;
                nQuartets = 4;
                while (nLeft > 1) {
                    if (static_cast<uint32_T>(static_cast<uint32_T>(nLeft) & 1U)
                        != 0U) {
                        nLeft = static_cast<int32_T>(nLeft - 1);
                        tailOffset = static_cast<int32_T>(nQuartets * nLeft);
                        nTail = static_cast<int32_T>(vwork_size_idx_0 -
                            tailOffset);
                        if (nTail > nQuartets) {
                            FlightMissionMode_merge_b(b_idx_data, b_x_data,
                                tailOffset, nQuartets, static_cast<int32_T>
                                (nTail - nQuartets), vwork_data, xwork_data);
                        }
                    }

                    tailOffset = static_cast<int32_T>(nQuartets << 1);
                    nLeft = static_cast<int32_T>(nLeft >> 1);
                    for (nTail = 0; nTail <= static_cast<int32_T>(nLeft - 1);
                            nTail = static_cast<int32_T>(nTail + 1)) {
                        FlightMissionMode_merge_b(b_idx_data, b_x_data,
                            static_cast<int32_T>(nTail * tailOffset), nQuartets,
                            nQuartets, vwork_data, xwork_data);
                    }

                    nQuartets = tailOffset;
                }

                if (vwork_size_idx_0 > nQuartets) {
                    FlightMissionMode_merge_b(b_idx_data, b_x_data, 0, nQuartets,
                        static_cast<int32_T>(vwork_size_idx_0 - nQuartets),
                        vwork_data, xwork_data);
                }
            }
        }

        for (c_k = 0; c_k <= static_cast<int32_T>(vwork_size_idx_0 - 1); c_k++)
        {
            vwork_data[c_k] = b_x_data[c_k];
        }

        for (nQuartets = 0; nQuartets <= b; nQuartets = static_cast<int32_T>
                (nQuartets + 1)) {
            c_k = static_cast<int32_T>(static_cast<int32_T>(nQuartets * vstride)
                + dim);
            x_data[c_k] = b_x_data[nQuartets];
            idx_data[c_k] = b_idx_data[nQuartets];
        }
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_do_vectors_b(const
    emxArray_real_T_FlightMissionMode_T *b, real_T c_data[], int32_T c_size[2],
    int32_T ia_data[], int32_T *ia_size, int32_T *ib_size)
{
    static const real_T b_a[28]{ 6.384265086E+9, 6.384265284E+9, 6.384480708E+9,
        6.384480906E+9, 6.384473283E+9, 6.384263997E+9, 2.1067690282E+11,
        2.10676902826E+11, 2.10677124976E+11, 2.10677124982E+11,
        2.10677124751E+11, 2.10676902787E+11, 2.10680747748E+11,
        2.10680754288E+11, 2.10687863274E+11, 2.10687869814E+11,
        2.10687618255E+11, 2.10680711811E+11, 6.384264226E+9, 6.384264232E+9,
        6.384264001E+9, 6.38447332E+9, 6.384473281E+9, 6.384473314E+9,
        6.384265282E+9, 6.384480904E+9, 6.38426509E+9, 6.384480712E+9 };

    static const int32_T f[28]{ 6, 21, 19, 20, 1, 27, 25, 2, 23, 5, 24, 22, 3,
        28, 26, 4, 12, 7, 8, 11, 9, 10, 18, 13, 14, 17, 15, 16 };

    static const int8_T g[28]{ 6, 21, 19, 20, 1, 27, 25, 2, 23, 5, 24, 22, 3, 28,
        26, 4, 12, 7, 8, 11, 9, 10, 18, 13, 14, 17, 15, 16 };

    emxArray_int32_T_28_FlightMissionMode_T ia_data_0;
    emxArray_int32_T_FlightMissionMode_T *bperm;
    emxArray_int32_T_FlightMissionMode_T *iwork;
    real_T tmp;
    int32_T b_k;
    int32_T c_k;
    int32_T i;
    int32_T i2;
    int32_T i_0;
    int32_T j;
    int32_T k;
    int32_T kEnd;
    int32_T n;
    int32_T qEnd;
    FlightMissionMode_emxInit_int32_T_k(&bperm, 2);
    c_size[0] = 1;
    *ib_size = 0;
    n = static_cast<int32_T>(b->size[1] + 1);
    i_0 = static_cast<int32_T>(bperm->size[0] * bperm->size[1]);
    bperm->size[0] = 1;
    bperm->size[1] = b->size[1];
    FlightMissionMode_emxEnsureCapacity_int32_T_j(bperm, i_0);
    i2 = static_cast<int32_T>(b->size[1] - 1);
    for (i_0 = 0; i_0 <= i2; i_0++) {
        bperm->data[i_0] = 0;
    }

    if (b->size[1] != 0) {
        FlightMissionMode_emxInit_int32_T1_lv(&iwork, 1);
        i_0 = iwork->size[0];
        iwork->size[0] = b->size[1];
        FlightMissionMode_emxEnsureCapacity_int32_T1_k(iwork, i_0);
        for (i = 1; i <= static_cast<int32_T>(n - 2); i = static_cast<int32_T>(i
              + 2)) {
            if (static_cast<boolean_T>(static_cast<int32_T>((b->data[
                    static_cast<int32_T>(i - 1)] <= b->data[i]) |
                    static_cast<int32_T>(std::isnan(b->data[i]))))) {
                bperm->data[static_cast<int32_T>(i - 1)] = i;
                bperm->data[i] = static_cast<int32_T>(i + 1);
            } else {
                bperm->data[static_cast<int32_T>(i - 1)] = static_cast<int32_T>
                    (i + 1);
                bperm->data[i] = i;
            }
        }

        if (static_cast<uint32_T>(static_cast<uint32_T>(b->size[1]) & 1U) != 0U)
        {
            bperm->data[static_cast<int32_T>(b->size[1] - 1)] = b->size[1];
        }

        i = 2;
        while (i < static_cast<int32_T>(n - 1)) {
            int32_T pEnd;
            i2 = static_cast<int32_T>(i << 1);
            j = 1;
            pEnd = static_cast<int32_T>(i + 1);
            while (pEnd < n) {
                int32_T d_p;
                int32_T q;
                d_p = j;
                q = static_cast<int32_T>(pEnd - 1);
                qEnd = static_cast<int32_T>(j + i2);
                if (qEnd > n) {
                    qEnd = n;
                }

                c_k = 0;
                kEnd = static_cast<int32_T>(qEnd - j);
                while (static_cast<int32_T>(c_k + 1) <= kEnd) {
                    tmp = b->data[static_cast<int32_T>(bperm->data[q] - 1)];
                    i_0 = bperm->data[static_cast<int32_T>(d_p - 1)];
                    if (static_cast<boolean_T>(static_cast<int32_T>((b->data[
                            static_cast<int32_T>(i_0 - 1)] <= tmp) |
                            static_cast<int32_T>(std::isnan(tmp))))) {
                        iwork->data[c_k] = i_0;
                        d_p = static_cast<int32_T>(d_p + 1);
                        if (d_p == pEnd) {
                            while (static_cast<int32_T>(q + 1) < qEnd) {
                                c_k = static_cast<int32_T>(c_k + 1);
                                iwork->data[c_k] = bperm->data[q];
                                q = static_cast<int32_T>(q + 1);
                            }
                        }
                    } else {
                        iwork->data[c_k] = bperm->data[q];
                        q = static_cast<int32_T>(q + 1);
                        if (static_cast<int32_T>(q + 1) == qEnd) {
                            while (d_p < pEnd) {
                                c_k = static_cast<int32_T>(c_k + 1);
                                iwork->data[c_k] = bperm->data
                                    [static_cast<int32_T>(d_p - 1)];
                                d_p = static_cast<int32_T>(d_p + 1);
                            }
                        }
                    }

                    c_k = static_cast<int32_T>(c_k + 1);
                }

                for (pEnd = -1; static_cast<int32_T>(pEnd + 1) <= static_cast<
                        int32_T>(kEnd - 1); pEnd = static_cast<int32_T>(pEnd + 1))
                {
                    bperm->data[static_cast<int32_T>(j + pEnd)] = iwork->data[
                        static_cast<int32_T>(pEnd + 1)];
                }

                j = qEnd;
                pEnd = static_cast<int32_T>(qEnd + i);
            }

            i = i2;
        }

        FlightMissionMode_emxFree_int32_T_a(&iwork);
    }

    n = 0;
    i = -1;
    i2 = 0;
    j = 1;
    qEnd = 1;
    while ((j <= 28) && (qEnd <= b->size[1])) {
        real_T ak;
        real_T b_absx;
        real_T bk;
        boolean_T c_p;
        boolean_T exitg1;
        c_k = j;
        ak = skip_to_last_equal_value_rETCs5xJ(&c_k, b_a, f);
        j = c_k;
        kEnd = qEnd;
        bk = b->data[static_cast<int32_T>(bperm->data[static_cast<int32_T>(qEnd
            - 1)] - 1)];
        exitg1 = false;
        while ((!exitg1) && (kEnd < b->size[1])) {
            b_absx = std::abs(bk / 2.0);
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (static_cast<boolean_T>(static_cast<int32_T>
                    (static_cast<int32_T>(std::isinf(b_absx)) ^ 1))) &
                    static_cast<int32_T>(static_cast<boolean_T>
                    (static_cast<int32_T>(static_cast<int32_T>(std::isnan(b_absx))
                     ^ 1)))))) {
                if (b_absx <= 2.2250738585072014E-308) {
                    b_absx = 4.94065645841247E-324;
                } else {
                    frexp(b_absx, &b_k);
                    b_absx = std::ldexp(1.0, static_cast<int32_T>(b_k - 53));
                }
            } else {
                b_absx = (rtNaN);
            }

            tmp = b->data[static_cast<int32_T>(bperm->data[kEnd] - 1)];
            if (std::abs(bk - tmp) < b_absx) {
                c_p = true;
            } else if (std::isinf(tmp)) {
                if (std::isinf(bk)) {
                    c_p = ((tmp > 0.0) == (bk > 0.0));
                } else {
                    c_p = false;
                }
            } else {
                c_p = false;
            }

            if (c_p) {
                kEnd = static_cast<int32_T>(kEnd + 1);
            } else {
                exitg1 = true;
            }
        }

        qEnd = kEnd;
        b_absx = std::abs(bk / 2.0);
        if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(
                static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                 (std::isinf(b_absx)) ^ 1))) & static_cast<int32_T>(static_cast<
                boolean_T>(static_cast<int32_T>(static_cast<int32_T>(std::isnan
                  (b_absx)) ^ 1)))))) {
            if (b_absx <= 2.2250738585072014E-308) {
                b_absx = 4.94065645841247E-324;
            } else {
                frexp(b_absx, &k);
                b_absx = std::ldexp(1.0, static_cast<int32_T>(k - 53));
            }
        } else {
            b_absx = (rtNaN);
        }

        if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(
                static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                 (static_cast<boolean_T>(static_cast<int32_T>(((ak > 0.0) == (bk
                      > 0.0)) & static_cast<int32_T>(std::isinf(bk))))) &
                 static_cast<int32_T>(std::isinf(ak))))) | (std::abs(bk - ak) <
                b_absx)))) {
            j = static_cast<int32_T>(c_k + 1);
            i2 = c_k;
            qEnd = static_cast<int32_T>(kEnd + 1);
        } else {
            if (std::isnan(bk)) {
                c_p = static_cast<boolean_T>(static_cast<int32_T>
                    (static_cast<int32_T>(std::isnan(ak)) ^ 1));
            } else {
                c_p = static_cast<boolean_T>(static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<boolean_T>
                    (static_cast<int32_T>(static_cast<int32_T>(std::isnan(ak)) ^
                    1))) & (ak < bk)));
            }

            if (c_p) {
                n = static_cast<int32_T>(n + 1);
                i = static_cast<int32_T>(i + 1);
                ia_data[i] = static_cast<int32_T>(g[i2]);
                j = static_cast<int32_T>(c_k + 1);
                i2 = c_k;
            } else {
                qEnd = static_cast<int32_T>(kEnd + 1);
            }
        }
    }

    FlightMissionMode_emxFree_int32_T_a(&bperm);
    while (j <= 28) {
        b_k = j;
        skip_to_last_equal_value_rETCs5xJ(&b_k, b_a, f);
        n = static_cast<int32_T>(n + 1);
        i = static_cast<int32_T>(i + 1);
        ia_data[i] = static_cast<int32_T>(g[i2]);
        j = static_cast<int32_T>(b_k + 1);
        i2 = b_k;
    }

    if (1 > static_cast<int32_T>(i + 1)) {
        i2 = -1;
    } else {
        i2 = i;
    }

    *ia_size = static_cast<int32_T>(i2 + 1);
    FlightMissionMode_sort_m(ia_data, ia_size, ia_data_0.data, &ia_data_0.size);
    for (b_k = 0; b_k <= i; b_k = static_cast<int32_T>(b_k + 1)) {
        c_data[b_k] = b_a[static_cast<int32_T>(ia_data[b_k] - 1)];
    }

    if (1 > n) {
        c_size[1] = 0;
    } else {
        c_size[1] = n;
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_do_vectors_bz(const real_T b_data[], const int32_T
    *b_size, real_T c_data[], int32_T c_size[2], int32_T ia_data[], int32_T
    *ia_size, int32_T *ib_size)
{
    emxArray_int32_T_28_FlightMissionMode_T ia_data_0;
    real_T tmp[28];
    real_T tmp_0;
    int32_T bperm_data[28];
    int32_T iwork_data[28];
    int32_T b_k;
    int32_T i;
    int32_T i2;
    int32_T i_0;
    int32_T j;
    int32_T k;
    int32_T kEnd;
    int32_T n;
    int32_T pEnd;
    int32_T qEnd;
    c_size[0] = 1;
    *ib_size = 0;
    i = static_cast<int32_T>(static_cast<int8_T>(*b_size));
    for (i_0 = 0; i_0 <= static_cast<int32_T>(i - 1); i_0++) {
        bperm_data[i_0] = 0;
    }

    if (*b_size != 0) {
        for (i = 1; i <= static_cast<int32_T>(static_cast<int32_T>(*b_size + 1)
                - 2); i = static_cast<int32_T>(i + 2)) {
            if (static_cast<boolean_T>(static_cast<int32_T>((b_data[static_cast<
                    int32_T>(i - 1)] <= b_data[i]) | static_cast<int32_T>(std::
                    isnan(b_data[i]))))) {
                bperm_data[static_cast<int32_T>(i - 1)] = i;
                bperm_data[i] = static_cast<int32_T>(i + 1);
            } else {
                bperm_data[static_cast<int32_T>(i - 1)] = static_cast<int32_T>(i
                    + 1);
                bperm_data[i] = i;
            }
        }

        if (static_cast<uint32_T>(static_cast<uint32_T>(*b_size) & 1U) != 0U) {
            bperm_data[static_cast<int32_T>(*b_size - 1)] = *b_size;
        }

        i = 2;
        while (i < static_cast<int32_T>(static_cast<int32_T>(*b_size + 1) - 1))
        {
            i2 = static_cast<int32_T>(i << 1);
            j = 1;
            pEnd = static_cast<int32_T>(i + 1);
            while (pEnd < static_cast<int32_T>(*b_size + 1)) {
                int32_T c_k;
                int32_T q;
                n = j;
                q = static_cast<int32_T>(pEnd - 1);
                qEnd = static_cast<int32_T>(j + i2);
                if (qEnd > static_cast<int32_T>(*b_size + 1)) {
                    qEnd = static_cast<int32_T>(*b_size + 1);
                }

                c_k = 0;
                kEnd = static_cast<int32_T>(qEnd - j);
                while (static_cast<int32_T>(c_k + 1) <= kEnd) {
                    tmp_0 = b_data[static_cast<int32_T>(bperm_data[q] - 1)];
                    i_0 = bperm_data[static_cast<int32_T>(n - 1)];
                    if (static_cast<boolean_T>(static_cast<int32_T>((b_data[
                            static_cast<int32_T>(i_0 - 1)] <= tmp_0) |
                            static_cast<int32_T>(std::isnan(tmp_0))))) {
                        iwork_data[c_k] = i_0;
                        n = static_cast<int32_T>(n + 1);
                        if (n == pEnd) {
                            while (static_cast<int32_T>(q + 1) < qEnd) {
                                c_k = static_cast<int32_T>(c_k + 1);
                                iwork_data[c_k] = bperm_data[q];
                                q = static_cast<int32_T>(q + 1);
                            }
                        }
                    } else {
                        iwork_data[c_k] = bperm_data[q];
                        q = static_cast<int32_T>(q + 1);
                        if (static_cast<int32_T>(q + 1) == qEnd) {
                            while (n < pEnd) {
                                c_k = static_cast<int32_T>(c_k + 1);
                                iwork_data[c_k] = bperm_data[static_cast<int32_T>
                                    (n - 1)];
                                n = static_cast<int32_T>(n + 1);
                            }
                        }
                    }

                    c_k = static_cast<int32_T>(c_k + 1);
                }

                for (pEnd = 0; pEnd <= static_cast<int32_T>(kEnd - 1); pEnd =
                        static_cast<int32_T>(pEnd + 1)) {
                    bperm_data[static_cast<int32_T>(static_cast<int32_T>(j +
                        pEnd) - 1)] = iwork_data[pEnd];
                }

                j = qEnd;
                pEnd = static_cast<int32_T>(qEnd + i);
            }

            i = i2;
        }
    }

    n = 0;
    i = -1;
    i2 = 0;
    j = 1;
    qEnd = 1;
    while ((j <= 28) && (qEnd <= *b_size)) {
        real_T ak;
        real_T b_absx;
        real_T bk;
        boolean_T c_p;
        boolean_T exitg1;
        kEnd = j;
        for (i_0 = 0; i_0 < 28; i_0++) {
            tmp[i_0] = static_cast<real_T>(i_0) + 1.0;
            iwork_data[i_0] = static_cast<int32_T>(i_0 + 1);
        }

        ak = skip_to_last_equal_value_rETCs5xJ(&kEnd, tmp, iwork_data);
        j = kEnd;
        pEnd = qEnd;
        bk = b_data[static_cast<int32_T>(bperm_data[static_cast<int32_T>(qEnd -
            1)] - 1)];
        exitg1 = false;
        while ((!exitg1) && (pEnd < *b_size)) {
            b_absx = std::abs(bk / 2.0);
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (static_cast<boolean_T>(static_cast<int32_T>
                    (static_cast<int32_T>(std::isinf(b_absx)) ^ 1))) &
                    static_cast<int32_T>(static_cast<boolean_T>
                    (static_cast<int32_T>(static_cast<int32_T>(std::isnan(b_absx))
                     ^ 1)))))) {
                if (b_absx <= 2.2250738585072014E-308) {
                    b_absx = 4.94065645841247E-324;
                } else {
                    frexp(b_absx, &b_k);
                    b_absx = std::ldexp(1.0, static_cast<int32_T>(b_k - 53));
                }
            } else {
                b_absx = (rtNaN);
            }

            tmp_0 = b_data[static_cast<int32_T>(bperm_data[pEnd] - 1)];
            if (std::abs(bk - tmp_0) < b_absx) {
                c_p = true;
            } else if (std::isinf(tmp_0)) {
                if (std::isinf(bk)) {
                    c_p = ((tmp_0 > 0.0) == (bk > 0.0));
                } else {
                    c_p = false;
                }
            } else {
                c_p = false;
            }

            if (c_p) {
                pEnd = static_cast<int32_T>(pEnd + 1);
            } else {
                exitg1 = true;
            }
        }

        qEnd = pEnd;
        b_absx = std::abs(bk / 2.0);
        if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(
                static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                 (std::isinf(b_absx)) ^ 1))) & static_cast<int32_T>(static_cast<
                boolean_T>(static_cast<int32_T>(static_cast<int32_T>(std::isnan
                  (b_absx)) ^ 1)))))) {
            if (b_absx <= 2.2250738585072014E-308) {
                b_absx = 4.94065645841247E-324;
            } else {
                frexp(b_absx, &k);
                b_absx = std::ldexp(1.0, static_cast<int32_T>(k - 53));
            }
        } else {
            b_absx = (rtNaN);
        }

        if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(
                static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                 (static_cast<boolean_T>(static_cast<int32_T>(((ak > 0.0) == (bk
                      > 0.0)) & static_cast<int32_T>(std::isinf(bk))))) &
                 static_cast<int32_T>(std::isinf(ak))))) | (std::abs(bk - ak) <
                b_absx)))) {
            j = static_cast<int32_T>(kEnd + 1);
            i2 = kEnd;
            qEnd = static_cast<int32_T>(pEnd + 1);
        } else {
            if (std::isnan(bk)) {
                c_p = static_cast<boolean_T>(static_cast<int32_T>
                    (static_cast<int32_T>(std::isnan(ak)) ^ 1));
            } else {
                c_p = static_cast<boolean_T>(static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<boolean_T>
                    (static_cast<int32_T>(static_cast<int32_T>(std::isnan(ak)) ^
                    1))) & (ak < bk)));
            }

            if (c_p) {
                n = static_cast<int32_T>(n + 1);
                i = static_cast<int32_T>(i + 1);
                ia_data[i] = static_cast<int32_T>(i2 + 1);
                j = static_cast<int32_T>(kEnd + 1);
                i2 = kEnd;
            } else {
                qEnd = static_cast<int32_T>(pEnd + 1);
            }
        }
    }

    while (j <= 28) {
        b_k = j;
        for (i_0 = 0; i_0 < 28; i_0++) {
            tmp[i_0] = static_cast<real_T>(i_0) + 1.0;
            iwork_data[i_0] = static_cast<int32_T>(i_0 + 1);
        }

        skip_to_last_equal_value_rETCs5xJ(&b_k, tmp, iwork_data);
        n = static_cast<int32_T>(n + 1);
        i = static_cast<int32_T>(i + 1);
        ia_data[i] = static_cast<int32_T>(i2 + 1);
        j = static_cast<int32_T>(b_k + 1);
        i2 = b_k;
    }

    if (1 > static_cast<int32_T>(i + 1)) {
        i2 = -1;
    } else {
        i2 = i;
    }

    *ia_size = static_cast<int32_T>(i2 + 1);
    FlightMissionMode_sort_m(ia_data, ia_size, ia_data_0.data, &ia_data_0.size);
    for (b_k = 0; b_k <= i; b_k = static_cast<int32_T>(b_k + 1)) {
        c_data[b_k] = static_cast<real_T>(static_cast<int32_T>(ia_data[b_k] - 1))
            + 1.0;
    }

    if (1 > n) {
        c_size[1] = 0;
    } else {
        c_size[1] = n;
    }
}

static void FlightMissionMode_emxEnsureCapacity_uint64_T
    (emxArray_uint64_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(uint64_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (uint64_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (uint64_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_merge_br(int32_T idx_data[], real_T x_data[],
    int32_T offset, int32_T np, int32_T nq, int32_T iwork_data[], real_T
    xwork_data[])
{
    if (nq != 0) {
        int32_T iout;
        int32_T n;
        int32_T n_tmp;
        int32_T q;
        n_tmp = static_cast<int32_T>(np + nq);
        for (q = 0; q <= static_cast<int32_T>(n_tmp - 1); q =
                static_cast<int32_T>(q + 1)) {
            iout = static_cast<int32_T>(offset + q);
            iwork_data[q] = idx_data[iout];
            xwork_data[q] = x_data[iout];
        }

        n = 0;
        q = np;
        iout = static_cast<int32_T>(offset - 1);
        int32_T exitg1;
        do {
            exitg1 = 0;
            iout = static_cast<int32_T>(iout + 1);
            if (xwork_data[n] <= xwork_data[q]) {
                idx_data[iout] = iwork_data[n];
                x_data[iout] = xwork_data[n];
                if (static_cast<int32_T>(n + 1) < np) {
                    n = static_cast<int32_T>(n + 1);
                } else {
                    exitg1 = 1;
                }
            } else {
                idx_data[iout] = iwork_data[q];
                x_data[iout] = xwork_data[q];
                if (static_cast<int32_T>(q + 1) < n_tmp) {
                    q = static_cast<int32_T>(q + 1);
                } else {
                    q = static_cast<int32_T>(iout - n);
                    while (static_cast<int32_T>(n + 1) <= np) {
                        iout = static_cast<int32_T>(static_cast<int32_T>(q + n)
                            + 1);
                        idx_data[iout] = iwork_data[n];
                        x_data[iout] = xwork_data[n];
                        n = static_cast<int32_T>(n + 1);
                    }

                    exitg1 = 1;
                }
            }
        } while (exitg1 == 0);
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_sort_m04(real_T x_data[], const int32_T *x_size)
{
    real_T b_x_data[28];
    real_T vwork_data[28];
    real_T x4[4];
    int32_T idx_data[28];
    int32_T iwork_data[28];
    int32_T b;
    int32_T dim;
    int32_T n;
    int32_T vstride;
    int32_T vwork_size_idx_0;
    int8_T idx4[4];
    int8_T perm[4];
    dim = 2;
    if (*x_size != 1) {
        dim = 1;
        b = static_cast<int32_T>(*x_size - 1);
    } else {
        b = 0;
    }

    vwork_size_idx_0 = static_cast<int32_T>(b + 1);
    vstride = 1;
    n = 0;
    while (n <= static_cast<int32_T>(dim - 2)) {
        vstride = static_cast<int32_T>(vstride * *x_size);
        n = 1;
    }

    for (dim = 0; dim <= static_cast<int32_T>(vstride - 1); dim =
            static_cast<int32_T>(dim + 1)) {
        int32_T bLen;
        for (n = 0; n <= b; n = static_cast<int32_T>(n + 1)) {
            vwork_data[n] = x_data[static_cast<int32_T>(static_cast<int32_T>(n *
                vstride) + dim)];
        }

        for (bLen = 0; bLen <= static_cast<int32_T>(vwork_size_idx_0 - 1); bLen
                ++) {
            b_x_data[bLen] = vwork_data[bLen];
        }

        if (vwork_size_idx_0 != 0) {
            int32_T i3;
            int32_T i4;
            int32_T itmp;
            int32_T nTail;
            int32_T wOffset;
            int32_T wOffset_tmp;
            n = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
            for (bLen = 0; bLen <= static_cast<int32_T>(n - 1); bLen++) {
                idx_data[bLen] = 0;
            }

            x4[0] = 0.0;
            idx4[0] = 0;
            x4[1] = 0.0;
            idx4[1] = 0;
            x4[2] = 0.0;
            idx4[2] = 0;
            x4[3] = 0.0;
            idx4[3] = 0;
            for (bLen = 0; bLen <= static_cast<int32_T>(vwork_size_idx_0 - 1);
                    bLen++) {
                vwork_data[bLen] = 0.0;
            }

            bLen = 1;
            n = 0;
            for (wOffset = 0; wOffset <= static_cast<int32_T>(vwork_size_idx_0 -
                  1); wOffset = static_cast<int32_T>(wOffset + 1)) {
                if (std::isnan(b_x_data[wOffset])) {
                    i3 = static_cast<int32_T>(vwork_size_idx_0 - bLen);
                    idx_data[i3] = static_cast<int32_T>(wOffset + 1);
                    vwork_data[i3] = b_x_data[wOffset];
                    bLen = static_cast<int32_T>(bLen + 1);
                } else {
                    n = static_cast<int32_T>(n + 1);
                    idx4[static_cast<int32_T>(n - 1)] = static_cast<int8_T>(
                        static_cast<int32_T>(wOffset + 1));
                    x4[static_cast<int32_T>(n - 1)] = b_x_data[wOffset];
                    if (n == 4) {
                        real_T tmp;
                        real_T tmp_0;
                        n = static_cast<int32_T>(wOffset - bLen);
                        if (x4[0] <= x4[1]) {
                            nTail = 1;
                            itmp = 2;
                        } else {
                            nTail = 2;
                            itmp = 1;
                        }

                        if (x4[2] <= x4[3]) {
                            i3 = 3;
                            i4 = 4;
                        } else {
                            i3 = 4;
                            i4 = 3;
                        }

                        tmp = x4[static_cast<int32_T>(nTail - 1)];
                        tmp_0 = x4[static_cast<int32_T>(i3 - 1)];
                        if (tmp <= tmp_0) {
                            tmp = x4[static_cast<int32_T>(itmp - 1)];
                            if (tmp <= tmp_0) {
                                perm[0] = static_cast<int8_T>(nTail);
                                perm[1] = static_cast<int8_T>(itmp);
                                perm[2] = static_cast<int8_T>(i3);
                                perm[3] = static_cast<int8_T>(i4);
                            } else if (tmp <= x4[static_cast<int32_T>(i4 - 1)])
                            {
                                perm[0] = static_cast<int8_T>(nTail);
                                perm[1] = static_cast<int8_T>(i3);
                                perm[2] = static_cast<int8_T>(itmp);
                                perm[3] = static_cast<int8_T>(i4);
                            } else {
                                perm[0] = static_cast<int8_T>(nTail);
                                perm[1] = static_cast<int8_T>(i3);
                                perm[2] = static_cast<int8_T>(i4);
                                perm[3] = static_cast<int8_T>(itmp);
                            }
                        } else {
                            tmp_0 = x4[static_cast<int32_T>(i4 - 1)];
                            if (tmp <= tmp_0) {
                                if (x4[static_cast<int32_T>(itmp - 1)] <= tmp_0)
                                {
                                    perm[0] = static_cast<int8_T>(i3);
                                    perm[1] = static_cast<int8_T>(nTail);
                                    perm[2] = static_cast<int8_T>(itmp);
                                    perm[3] = static_cast<int8_T>(i4);
                                } else {
                                    perm[0] = static_cast<int8_T>(i3);
                                    perm[1] = static_cast<int8_T>(nTail);
                                    perm[2] = static_cast<int8_T>(i4);
                                    perm[3] = static_cast<int8_T>(itmp);
                                }
                            } else {
                                perm[0] = static_cast<int8_T>(i3);
                                perm[1] = static_cast<int8_T>(i4);
                                perm[2] = static_cast<int8_T>(nTail);
                                perm[3] = static_cast<int8_T>(itmp);
                            }
                        }

                        idx_data[static_cast<int32_T>(n - 2)] =
                            static_cast<int32_T>(idx4[static_cast<int32_T>(
                            static_cast<int32_T>(perm[0]) - 1)]);
                        idx_data[static_cast<int32_T>(n - 1)] = static_cast<
                            int32_T>(idx4[static_cast<int32_T>
                                     (static_cast<int32_T>(perm[1]) - 1)]);
                        idx_data[n] = static_cast<int32_T>(idx4[static_cast<
                            int32_T>(static_cast<int32_T>(perm[2]) - 1)]);
                        idx_data[static_cast<int32_T>(n + 1)] = static_cast<
                            int32_T>(idx4[static_cast<int32_T>
                                     (static_cast<int32_T>(perm[3]) - 1)]);
                        b_x_data[static_cast<int32_T>(n - 2)] = x4
                            [static_cast<int32_T>(static_cast<int32_T>(perm[0])
                            - 1)];
                        b_x_data[static_cast<int32_T>(n - 1)] = x4
                            [static_cast<int32_T>(static_cast<int32_T>(perm[1])
                            - 1)];
                        b_x_data[n] = x4[static_cast<int32_T>
                            (static_cast<int32_T>(perm[2]) - 1)];
                        b_x_data[static_cast<int32_T>(n + 1)] = x4
                            [static_cast<int32_T>(static_cast<int32_T>(perm[3])
                            - 1)];
                        n = 0;
                    }
                }
            }

            wOffset_tmp = static_cast<int32_T>(vwork_size_idx_0 - bLen);
            if (n > 0) {
                perm[1] = 0;
                perm[2] = 0;
                perm[3] = 0;
                switch (n) {
                  case 1:
                    perm[0] = 1;
                    break;

                  case 2:
                    if (x4[0] <= x4[1]) {
                        perm[0] = 1;
                        perm[1] = 2;
                    } else {
                        perm[0] = 2;
                        perm[1] = 1;
                    }
                    break;

                  default:
                    if (x4[0] <= x4[1]) {
                        if (x4[1] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 2;
                            perm[2] = 3;
                        } else if (x4[0] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 3;
                            perm[2] = 2;
                        } else {
                            perm[0] = 3;
                            perm[1] = 1;
                            perm[2] = 2;
                        }
                    } else if (x4[0] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 1;
                        perm[2] = 3;
                    } else if (x4[1] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 3;
                        perm[2] = 1;
                    } else {
                        perm[0] = 3;
                        perm[1] = 2;
                        perm[2] = 1;
                    }
                    break;
                }

                for (nTail = 0; nTail <= static_cast<int32_T>(n - 1); nTail =
                        static_cast<int32_T>(nTail + 1)) {
                    i3 = static_cast<int32_T>(static_cast<int32_T>(perm[nTail])
                        - 1);
                    itmp = static_cast<int32_T>(static_cast<int32_T>(
                        static_cast<int32_T>(wOffset_tmp - n) + nTail) + 1);
                    idx_data[itmp] = static_cast<int32_T>(idx4[i3]);
                    b_x_data[itmp] = x4[i3];
                }
            }

            n = static_cast<int32_T>(static_cast<int32_T>(static_cast<int32_T>
                (bLen - 1) >> 1) + 1);
            for (nTail = 1; static_cast<int32_T>(nTail - 1) <=
                    static_cast<int32_T>(n - 2); nTail = static_cast<int32_T>
                    (nTail + 1)) {
                i4 = static_cast<int32_T>(wOffset_tmp + nTail);
                itmp = idx_data[i4];
                wOffset = static_cast<int32_T>(vwork_size_idx_0 - nTail);
                idx_data[i4] = idx_data[wOffset];
                idx_data[wOffset] = itmp;
                b_x_data[i4] = vwork_data[wOffset];
                b_x_data[wOffset] = vwork_data[i4];
            }

            if (static_cast<uint32_T>(static_cast<uint32_T>(static_cast<int32_T>
                    (bLen - 1)) & 1U) != 0U) {
                n = static_cast<int32_T>(wOffset_tmp + n);
                b_x_data[n] = vwork_data[n];
            }

            if (static_cast<int32_T>(wOffset_tmp + 1) > 1) {
                n = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
                for (bLen = 0; bLen <= static_cast<int32_T>(n - 1); bLen++) {
                    iwork_data[bLen] = 0;
                }

                wOffset = static_cast<int32_T>(static_cast<int32_T>(wOffset_tmp
                    + 1) >> 2);
                bLen = 4;
                while (wOffset > 1) {
                    if (static_cast<uint32_T>(static_cast<uint32_T>(wOffset) &
                                              1U) != 0U) {
                        wOffset = static_cast<int32_T>(wOffset - 1);
                        n = static_cast<int32_T>(bLen * wOffset);
                        nTail = static_cast<int32_T>(static_cast<int32_T>
                            (wOffset_tmp - n) + 1);
                        if (nTail > bLen) {
                            FlightMissionMode_merge_br(idx_data, b_x_data, n,
                                bLen, static_cast<int32_T>(nTail - bLen),
                                iwork_data, vwork_data);
                        }
                    }

                    n = static_cast<int32_T>(bLen << 1);
                    wOffset = static_cast<int32_T>(wOffset >> 1);
                    for (nTail = 0; nTail <= static_cast<int32_T>(wOffset - 1);
                            nTail = static_cast<int32_T>(nTail + 1)) {
                        FlightMissionMode_merge_br(idx_data, b_x_data,
                            static_cast<int32_T>(nTail * n), bLen, bLen,
                            iwork_data, vwork_data);
                    }

                    bLen = n;
                }

                if (static_cast<int32_T>(wOffset_tmp + 1) > bLen) {
                    FlightMissionMode_merge_br(idx_data, b_x_data, 0, bLen,
                        static_cast<int32_T>(static_cast<int32_T>(wOffset_tmp -
                        bLen) + 1), iwork_data, vwork_data);
                }
            }
        }

        for (bLen = 0; bLen <= static_cast<int32_T>(vwork_size_idx_0 - 1); bLen
                ++) {
            vwork_data[bLen] = b_x_data[bLen];
        }

        for (n = 0; n <= b; n = static_cast<int32_T>(n + 1)) {
            x_data[static_cast<int32_T>(dim + static_cast<int32_T>(n * vstride))]
                = b_x_data[n];
        }
    }
}

static void FlightMissionMode_emxInitMatrix_cell_wrap_21
    (cell_wrap_2_FlightMissionMode_T pMatrix[28])
{
    for (int32_T i{0}; i < 28; i++) {
        FlightMissionMode_emxInitStruct_cell_wrap_2(&pMatrix[i]);
    }
}

static void FlightMissionMode_emxCopyMatrix_cell_wrap_1
    (cell_wrap_1_FlightMissionMode_i_T dst[4], const
     cell_wrap_1_FlightMissionMode_i_T src[4])
{
    for (int32_T i{0}; i < 4; i++) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&dst[i], &src[i]);
    }
}

static void FlightMissionMode_emxCopyStruct_cell_wrap_2
    (cell_wrap_2_FlightMissionMode_T *dst, const cell_wrap_2_FlightMissionMode_T
     *src)
{
    FlightMissionMode_emxCopyMatrix_cell_wrap_1(dst->f1, src->f1);
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void* FlightMissionMode_uavDubinsBuildable_uavDubinsBuildable_n(real_T
    airSpeed, real_T maxRollAngle, const real_T flightPathAngle[2], const real_T
    disabledPathTypes_data[], const int32_T *disabledPathTypes_size)
{
    real_T b_disabledPathTypes_data[28];
    real_T b_flightPathAngle[2];
    int32_T loop_ub;
    b_flightPathAngle[0] = flightPathAngle[0];
    b_flightPathAngle[1] = flightPathAngle[1];
    loop_ub = *disabledPathTypes_size;
    for (int32_T i{0}; i <= static_cast<int32_T>(loop_ub - 1); i++) {
        b_disabledPathTypes_data[i] = disabledPathTypes_data[i];
    }

    return uavDubinsConnectionObj(airSpeed, maxRollAngle, &b_flightPathAngle[0],
        &b_disabledPathTypes_data[0], static_cast<uint32_T>
        (*disabledPathTypes_size));
}

static void FlightMissionMode_emxFreeStruct_cell_wrap_2
    (cell_wrap_2_FlightMissionMode_T *pStruct)
{
    FlightMissionMode_emxFreeMatrix_cell_wrap_1(pStruct->f1);
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_o(const char_T a_data[], const int32_T
    a_size[2])
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[2]{ 'H', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a_data[kstr]))
                                           & 127)] != b[static_cast<int32_T>
                        (c[kstr])]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_op(const char_T a_data[], const
    int32_T a_size[2])
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[2]{ 'H', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a_data[kstr]))
                                           & 127)] != b[static_cast<int32_T>
                        (c[kstr])]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_hr(const
    real_T varargin_1[4], const real_T varargin_2[4], real_T varargin_3, real_T
    varargin_4, real_T varargin_5, real_T varargin_6, const
    cell_wrap_1_FlightMissionMode_i_T varargin_7[4], const real_T varargin_8[4],
    uavDubinsPathSegment_1_FlightMissionMode_T *b_this)
{
    static const char_T d[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
        'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',
        'Z', '[', '\\', ']', '^', '_', '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
        'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', '\x7f' };

    real_T thetaWrap;
    int32_T k;
    b_this->MinTurningRadius = varargin_5;
    b_this->StartPose[0] = varargin_1[0];
    b_this->StartPose[1] = varargin_1[1];
    b_this->StartPose[2] = varargin_1[2];
    thetaWrap = mod_ZflSpsmf(varargin_1[3]);
    b_this->StartPose[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (varargin_1[3] > 0.0)))) {
        b_this->StartPose[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->StartPose[3]);
    b_this->GoalPose[0] = varargin_2[0];
    b_this->GoalPose[1] = varargin_2[1];
    b_this->GoalPose[2] = varargin_2[2];
    thetaWrap = mod_ZflSpsmf(varargin_2[3]);
    b_this->GoalPose[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (varargin_2[3] > 0.0)))) {
        b_this->GoalPose[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->GoalPose[3]);
    b_this->AirSpeed = varargin_4;
    b_this->HelixRadius = varargin_6;
    b_this->FlightPathAngle = varargin_3;
    b_this->MotionLengths[0] = varargin_8[0];
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[0],
        &varargin_7[0]);
    b_this->MotionLengths[1] = varargin_8[1];
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[1],
        &varargin_7[1]);
    b_this->MotionLengths[2] = varargin_8[2];
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[2],
        &varargin_7[2]);
    b_this->MotionLengths[3] = varargin_8[3];
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[3],
        &varargin_7[3]);
    k = static_cast<int32_T>(b_this->MotionTypes[0].f1->size[0] *
        b_this->MotionTypes[0].f1->size[1]);
    b_this->MotionTypes[0].f1->size[0] = 1;
    b_this->MotionTypes[0].f1->size[1] = varargin_7[0].f1->size[1];
    FlightMissionMode_emxEnsureCapacity_char_T(b_this->MotionTypes[0].f1, k);
    for (k = 0; k <= static_cast<int32_T>(varargin_7[0].f1->size[1] - 1); k =
            static_cast<int32_T>(k + 1)) {
        b_this->MotionTypes[0].f1->data[k] = d[static_cast<int32_T>(static_cast<
            int32_T>(static_cast<uint8_T>(varargin_7[0].f1->data[k])) & 127)];
    }

    k = static_cast<int32_T>(b_this->MotionTypes[1].f1->size[0] *
        b_this->MotionTypes[1].f1->size[1]);
    b_this->MotionTypes[1].f1->size[0] = 1;
    b_this->MotionTypes[1].f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(b_this->MotionTypes[1].f1, k);
    b_this->MotionTypes[1].f1->data[0] = d[static_cast<int32_T>
        (static_cast<int32_T>(static_cast<uint8_T>(varargin_7[1].f1->data[0])) &
         127)];
    k = static_cast<int32_T>(b_this->MotionTypes[2].f1->size[0] *
        b_this->MotionTypes[2].f1->size[1]);
    b_this->MotionTypes[2].f1->size[0] = 1;
    b_this->MotionTypes[2].f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(b_this->MotionTypes[2].f1, k);
    b_this->MotionTypes[2].f1->data[0] = d[static_cast<int32_T>
        (static_cast<int32_T>(static_cast<uint8_T>(varargin_7[2].f1->data[0])) &
         127)];
    k = static_cast<int32_T>(b_this->MotionTypes[3].f1->size[0] *
        b_this->MotionTypes[3].f1->size[1]);
    b_this->MotionTypes[3].f1->size[0] = 1;
    b_this->MotionTypes[3].f1->size[1] = varargin_7[3].f1->size[1];
    FlightMissionMode_emxEnsureCapacity_char_T(b_this->MotionTypes[3].f1, k);
    for (k = 0; k <= static_cast<int32_T>(varargin_7[3].f1->size[1] - 1); k =
            static_cast<int32_T>(k + 1)) {
        b_this->MotionTypes[3].f1->data[k] = d[static_cast<int32_T>
            (static_cast<int32_T>(static_cast<uint8_T>(varargin_7[3].f1->data[k]))
             & 127)];
    }

    if (FlightMissionMode_strcmp_o(b_this->MotionTypes[0].f1->data,
            b_this->MotionTypes[0].f1->size)) {
        k = static_cast<int32_T>(b_this->MotionTypes[0].f1->size[0] *
            b_this->MotionTypes[0].f1->size[1]);
        b_this->MotionTypes[0].f1->size[0] = 1;
        b_this->MotionTypes[0].f1->size[1] = 2;
        FlightMissionMode_emxEnsureCapacity_char_T(b_this->MotionTypes[0].f1, k);
        b_this->MotionTypes[0].f1->data[0] = 'H';
        b_this->MotionTypes[0].f1->data[1] = 'l';
    } else if (FlightMissionMode_strcmp_op(b_this->MotionTypes[0].f1->data,
                b_this->MotionTypes[0].f1->size)) {
        k = static_cast<int32_T>(b_this->MotionTypes[0].f1->size[0] *
            b_this->MotionTypes[0].f1->size[1]);
        b_this->MotionTypes[0].f1->size[0] = 1;
        b_this->MotionTypes[0].f1->size[1] = 2;
        FlightMissionMode_emxEnsureCapacity_char_T(b_this->MotionTypes[0].f1, k);
        b_this->MotionTypes[0].f1->data[0] = 'H';
        b_this->MotionTypes[0].f1->data[1] = 'r';
    } else if (FlightMissionMode_strcmp_op(b_this->MotionTypes[3].f1->data,
                b_this->MotionTypes[3].f1->size)) {
        k = static_cast<int32_T>(b_this->MotionTypes[3].f1->size[0] *
            b_this->MotionTypes[3].f1->size[1]);
        b_this->MotionTypes[3].f1->size[0] = 1;
        b_this->MotionTypes[3].f1->size[1] = 2;
        FlightMissionMode_emxEnsureCapacity_char_T(b_this->MotionTypes[3].f1, k);
        b_this->MotionTypes[3].f1->data[0] = 'H';
        b_this->MotionTypes[3].f1->data[1] = 'r';
    } else if (FlightMissionMode_strcmp_o(b_this->MotionTypes[3].f1->data,
                b_this->MotionTypes[3].f1->size)) {
        k = static_cast<int32_T>(b_this->MotionTypes[3].f1->size[0] *
            b_this->MotionTypes[3].f1->size[1]);
        b_this->MotionTypes[3].f1->size[0] = 1;
        b_this->MotionTypes[3].f1->size[1] = 2;
        FlightMissionMode_emxEnsureCapacity_char_T(b_this->MotionTypes[3].f1, k);
        b_this->MotionTypes[3].f1->data[0] = 'H';
        b_this->MotionTypes[3].f1->data[1] = 'l';
    }

    b_this->Length = ((varargin_8[0] + varargin_8[1]) + varargin_8[2]) +
        varargin_8[3];
}

static void FlightMissionMode_emxFreeMatrix_cell_wrap_21
    (cell_wrap_2_FlightMissionMode_T pMatrix[28])
{
    for (int32_T i{0}; i < 28; i++) {
        FlightMissionMode_emxFreeStruct_cell_wrap_2(&pMatrix[i]);
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsBuiltins_connect_op(const
    uavDubinsConnection_1_FlightMissionMode_T *obj, const real_T startPose[4],
    const real_T goalPose[4], real_T turningRadius, const real_T dpt_data[],
    const int32_T *dpt_size, uavDubinsPathSegment_1_FlightMissionMode_T
    *pathSegObjs, real_T *pathCosts)
{
    void* b_obj_UAVDubinsBuildableObj;
    cell_wrap_1_FlightMissionMode_i_T ac;
    cell_wrap_1_FlightMissionMode_i_T ad;
    cell_wrap_1_FlightMissionMode_i_T ae;
    cell_wrap_1_FlightMissionMode_i_T af;
    cell_wrap_1_FlightMissionMode_i_T bc;
    cell_wrap_1_FlightMissionMode_i_T bd;
    cell_wrap_1_FlightMissionMode_i_T be;
    cell_wrap_1_FlightMissionMode_i_T bf;
    cell_wrap_1_FlightMissionMode_i_T cc;
    cell_wrap_1_FlightMissionMode_i_T cd;
    cell_wrap_1_FlightMissionMode_i_T ce;
    cell_wrap_1_FlightMissionMode_i_T cf;
    cell_wrap_1_FlightMissionMode_i_T dc;
    cell_wrap_1_FlightMissionMode_i_T dd;
    cell_wrap_1_FlightMissionMode_i_T de;
    cell_wrap_1_FlightMissionMode_i_T df;
    cell_wrap_1_FlightMissionMode_i_T ec;
    cell_wrap_1_FlightMissionMode_i_T ed;
    cell_wrap_1_FlightMissionMode_i_T ee;
    cell_wrap_1_FlightMissionMode_i_T ef;
    cell_wrap_1_FlightMissionMode_i_T fc;
    cell_wrap_1_FlightMissionMode_i_T fd;
    cell_wrap_1_FlightMissionMode_i_T fe;
    cell_wrap_1_FlightMissionMode_i_T ff;
    cell_wrap_1_FlightMissionMode_i_T gc;
    cell_wrap_1_FlightMissionMode_i_T gd;
    cell_wrap_1_FlightMissionMode_i_T ge;
    cell_wrap_1_FlightMissionMode_i_T gf;
    cell_wrap_1_FlightMissionMode_i_T hc;
    cell_wrap_1_FlightMissionMode_i_T hd;
    cell_wrap_1_FlightMissionMode_i_T he;
    cell_wrap_1_FlightMissionMode_i_T hf;
    cell_wrap_1_FlightMissionMode_i_T ib;
    cell_wrap_1_FlightMissionMode_i_T ic;
    cell_wrap_1_FlightMissionMode_i_T id;
    cell_wrap_1_FlightMissionMode_i_T ie;
    cell_wrap_1_FlightMissionMode_i_T jb;
    cell_wrap_1_FlightMissionMode_i_T jc;
    cell_wrap_1_FlightMissionMode_i_T jd;
    cell_wrap_1_FlightMissionMode_i_T je;
    cell_wrap_1_FlightMissionMode_i_T jf;
    cell_wrap_1_FlightMissionMode_i_T kb;
    cell_wrap_1_FlightMissionMode_i_T kc;
    cell_wrap_1_FlightMissionMode_i_T kd;
    cell_wrap_1_FlightMissionMode_i_T ke;
    cell_wrap_1_FlightMissionMode_i_T kf;
    cell_wrap_1_FlightMissionMode_i_T lb;
    cell_wrap_1_FlightMissionMode_i_T lc;
    cell_wrap_1_FlightMissionMode_i_T ld;
    cell_wrap_1_FlightMissionMode_i_T le;
    cell_wrap_1_FlightMissionMode_i_T lf;
    cell_wrap_1_FlightMissionMode_i_T mb;
    cell_wrap_1_FlightMissionMode_i_T mc;
    cell_wrap_1_FlightMissionMode_i_T md;
    cell_wrap_1_FlightMissionMode_i_T me;
    cell_wrap_1_FlightMissionMode_i_T mf;
    cell_wrap_1_FlightMissionMode_i_T nb;
    cell_wrap_1_FlightMissionMode_i_T nc;
    cell_wrap_1_FlightMissionMode_i_T nd;
    cell_wrap_1_FlightMissionMode_i_T ne;
    cell_wrap_1_FlightMissionMode_i_T nf;
    cell_wrap_1_FlightMissionMode_i_T ob;
    cell_wrap_1_FlightMissionMode_i_T oc;
    cell_wrap_1_FlightMissionMode_i_T od;
    cell_wrap_1_FlightMissionMode_i_T oe;
    cell_wrap_1_FlightMissionMode_i_T of;
    cell_wrap_1_FlightMissionMode_i_T pb;
    cell_wrap_1_FlightMissionMode_i_T pc;
    cell_wrap_1_FlightMissionMode_i_T pd;
    cell_wrap_1_FlightMissionMode_i_T pe;
    cell_wrap_1_FlightMissionMode_i_T pf;
    cell_wrap_1_FlightMissionMode_i_T qb;
    cell_wrap_1_FlightMissionMode_i_T qc;
    cell_wrap_1_FlightMissionMode_i_T qd;
    cell_wrap_1_FlightMissionMode_i_T qe;
    cell_wrap_1_FlightMissionMode_i_T qf;
    cell_wrap_1_FlightMissionMode_i_T rb;
    cell_wrap_1_FlightMissionMode_i_T rc;
    cell_wrap_1_FlightMissionMode_i_T rd;
    cell_wrap_1_FlightMissionMode_i_T re;
    cell_wrap_1_FlightMissionMode_i_T rf;
    cell_wrap_1_FlightMissionMode_i_T sb;
    cell_wrap_1_FlightMissionMode_i_T sc;
    cell_wrap_1_FlightMissionMode_i_T sd;
    cell_wrap_1_FlightMissionMode_i_T se;
    cell_wrap_1_FlightMissionMode_i_T sf;
    cell_wrap_1_FlightMissionMode_i_T tb;
    cell_wrap_1_FlightMissionMode_i_T tc;
    cell_wrap_1_FlightMissionMode_i_T td;
    cell_wrap_1_FlightMissionMode_i_T te;
    cell_wrap_1_FlightMissionMode_i_T tf;
    cell_wrap_1_FlightMissionMode_i_T ub;
    cell_wrap_1_FlightMissionMode_i_T uc;
    cell_wrap_1_FlightMissionMode_i_T ud;
    cell_wrap_1_FlightMissionMode_i_T ue;
    cell_wrap_1_FlightMissionMode_i_T uf;
    cell_wrap_1_FlightMissionMode_i_T vb;
    cell_wrap_1_FlightMissionMode_i_T vc;
    cell_wrap_1_FlightMissionMode_i_T vd;
    cell_wrap_1_FlightMissionMode_i_T ve;
    cell_wrap_1_FlightMissionMode_i_T wb;
    cell_wrap_1_FlightMissionMode_i_T wc;
    cell_wrap_1_FlightMissionMode_i_T wd;
    cell_wrap_1_FlightMissionMode_i_T we;
    cell_wrap_1_FlightMissionMode_i_T xb;
    cell_wrap_1_FlightMissionMode_i_T xc;
    cell_wrap_1_FlightMissionMode_i_T xd;
    cell_wrap_1_FlightMissionMode_i_T xe;
    cell_wrap_1_FlightMissionMode_i_T yb;
    cell_wrap_1_FlightMissionMode_i_T yc;
    cell_wrap_1_FlightMissionMode_i_T yd;
    cell_wrap_1_FlightMissionMode_i_T ye;
    cell_wrap_2_FlightMissionMode_T motionTypes[28];
    cell_wrap_2_FlightMissionMode_T b;
    real_T g[16];
    real_T ml[16];
    real_T ml1[16];
    real_T s[16];
    real_T b_goalPose[4];
    real_T b_startPose[4];
    real_T ml1_0[4];
    real_T b_a;
    real_T b_fpa;
    real_T h;
    real_T mt;
    real_T mtr;
    int32_T i;
    int32_T ml1_tmp;
    FlightMissionMode_emxInitMatrix_cell_wrap_21(motionTypes);
    FlightMissionMode_emxInitStruct_cell_wrap_2(&b);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ic);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ad);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ed);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&id);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ld);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&md);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&od);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&td);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ud);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yd);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ae);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&be);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ce);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&de);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ee);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ge);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&he);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ie);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&je);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ke);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&le);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&me);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ne);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&oe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&re);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&se);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&te);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ue);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ve);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&we);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xe);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ye);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&af);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&df);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ef);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ff);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&of);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tf);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&uf);
    i = static_cast<int32_T>(ib.f1->size[0] * ib.f1->size[1]);
    ib.f1->size[0] = 1;
    ib.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ib.f1, i);
    ib.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(jb.f1->size[0] * jb.f1->size[1]);
    jb.f1->size[0] = 1;
    jb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jb.f1, ml1_tmp);
    jb.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(kb.f1->size[0] * kb.f1->size[1]);
    kb.f1->size[0] = 1;
    kb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kb.f1, ml1_tmp);
    kb.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(lb.f1->size[0] * lb.f1->size[1]);
    lb.f1->size[0] = 1;
    lb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lb.f1, ml1_tmp);
    lb.f1->data[0] = 'N';
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b.f1[0], &ib);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b.f1[1], &jb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b.f1[2], &kb);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b.f1[3], &lb);
    ml1_tmp = static_cast<int32_T>(mb.f1->size[0] * mb.f1->size[1]);
    mb.f1->size[0] = 1;
    mb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mb.f1, ml1_tmp);
    mb.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(nb.f1->size[0] * nb.f1->size[1]);
    nb.f1->size[0] = 1;
    nb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nb.f1, ml1_tmp);
    nb.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(ob.f1->size[0] * ob.f1->size[1]);
    ob.f1->size[0] = 1;
    ob.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ob.f1, ml1_tmp);
    ob.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(pb.f1->size[0] * pb.f1->size[1]);
    pb.f1->size[0] = 1;
    pb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pb.f1, ml1_tmp);
    pb.f1->data[0] = 'N';
    ml1_tmp = static_cast<int32_T>(qb.f1->size[0] * qb.f1->size[1]);
    qb.f1->size[0] = 1;
    qb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qb.f1, ml1_tmp);
    qb.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(rb.f1->size[0] * rb.f1->size[1]);
    rb.f1->size[0] = 1;
    rb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rb.f1, ml1_tmp);
    rb.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(sb.f1->size[0] * sb.f1->size[1]);
    sb.f1->size[0] = 1;
    sb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sb.f1, ml1_tmp);
    sb.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(tb.f1->size[0] * tb.f1->size[1]);
    tb.f1->size[0] = 1;
    tb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tb.f1, ml1_tmp);
    tb.f1->data[0] = 'N';
    ml1_tmp = static_cast<int32_T>(ub.f1->size[0] * ub.f1->size[1]);
    ub.f1->size[0] = 1;
    ub.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ub.f1, ml1_tmp);
    ub.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(vb.f1->size[0] * vb.f1->size[1]);
    vb.f1->size[0] = 1;
    vb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vb.f1, ml1_tmp);
    vb.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(wb.f1->size[0] * wb.f1->size[1]);
    wb.f1->size[0] = 1;
    wb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wb.f1, ml1_tmp);
    wb.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(xb.f1->size[0] * xb.f1->size[1]);
    xb.f1->size[0] = 1;
    xb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xb.f1, ml1_tmp);
    xb.f1->data[0] = 'N';
    ml1_tmp = static_cast<int32_T>(yb.f1->size[0] * yb.f1->size[1]);
    yb.f1->size[0] = 1;
    yb.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yb.f1, ml1_tmp);
    yb.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(ac.f1->size[0] * ac.f1->size[1]);
    ac.f1->size[0] = 1;
    ac.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ac.f1, ml1_tmp);
    ac.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(bc.f1->size[0] * bc.f1->size[1]);
    bc.f1->size[0] = 1;
    bc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bc.f1, ml1_tmp);
    bc.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(cc.f1->size[0] * cc.f1->size[1]);
    cc.f1->size[0] = 1;
    cc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cc.f1, ml1_tmp);
    cc.f1->data[0] = 'N';
    ml1_tmp = static_cast<int32_T>(dc.f1->size[0] * dc.f1->size[1]);
    dc.f1->size[0] = 1;
    dc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dc.f1, ml1_tmp);
    dc.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(ec.f1->size[0] * ec.f1->size[1]);
    ec.f1->size[0] = 1;
    ec.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ec.f1, ml1_tmp);
    ec.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(fc.f1->size[0] * fc.f1->size[1]);
    fc.f1->size[0] = 1;
    fc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fc.f1, ml1_tmp);
    fc.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(gc.f1->size[0] * gc.f1->size[1]);
    gc.f1->size[0] = 1;
    gc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gc.f1, ml1_tmp);
    gc.f1->data[0] = 'N';
    ml1_tmp = static_cast<int32_T>(hc.f1->size[0] * hc.f1->size[1]);
    hc.f1->size[0] = 1;
    hc.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(hc.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(ic.f1->size[0] * ic.f1->size[1]);
    ic.f1->size[0] = 1;
    ic.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ic.f1, ml1_tmp);
    ic.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(jc.f1->size[0] * jc.f1->size[1]);
    jc.f1->size[0] = 1;
    jc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jc.f1, ml1_tmp);
    jc.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(kc.f1->size[0] * kc.f1->size[1]);
    kc.f1->size[0] = 1;
    kc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kc.f1, ml1_tmp);
    kc.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(lc.f1->size[0] * lc.f1->size[1]);
    lc.f1->size[0] = 1;
    lc.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(lc.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(mc.f1->size[0] * mc.f1->size[1]);
    mc.f1->size[0] = 1;
    mc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mc.f1, ml1_tmp);
    mc.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(nc.f1->size[0] * nc.f1->size[1]);
    nc.f1->size[0] = 1;
    nc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nc.f1, ml1_tmp);
    nc.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(oc.f1->size[0] * oc.f1->size[1]);
    oc.f1->size[0] = 1;
    oc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oc.f1, ml1_tmp);
    oc.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(pc.f1->size[0] * pc.f1->size[1]);
    pc.f1->size[0] = 1;
    pc.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(pc.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(qc.f1->size[0] * qc.f1->size[1]);
    qc.f1->size[0] = 1;
    qc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qc.f1, ml1_tmp);
    qc.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(rc.f1->size[0] * rc.f1->size[1]);
    rc.f1->size[0] = 1;
    rc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rc.f1, ml1_tmp);
    rc.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(sc.f1->size[0] * sc.f1->size[1]);
    sc.f1->size[0] = 1;
    sc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sc.f1, ml1_tmp);
    sc.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(tc.f1->size[0] * tc.f1->size[1]);
    tc.f1->size[0] = 1;
    tc.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(tc.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(uc.f1->size[0] * uc.f1->size[1]);
    uc.f1->size[0] = 1;
    uc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uc.f1, ml1_tmp);
    uc.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(vc.f1->size[0] * vc.f1->size[1]);
    vc.f1->size[0] = 1;
    vc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(vc.f1, ml1_tmp);
    vc.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(wc.f1->size[0] * wc.f1->size[1]);
    wc.f1->size[0] = 1;
    wc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wc.f1, ml1_tmp);
    wc.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(xc.f1->size[0] * xc.f1->size[1]);
    xc.f1->size[0] = 1;
    xc.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(xc.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(yc.f1->size[0] * yc.f1->size[1]);
    yc.f1->size[0] = 1;
    yc.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yc.f1, ml1_tmp);
    yc.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(ad.f1->size[0] * ad.f1->size[1]);
    ad.f1->size[0] = 1;
    ad.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ad.f1, ml1_tmp);
    ad.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(bd.f1->size[0] * bd.f1->size[1]);
    bd.f1->size[0] = 1;
    bd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bd.f1, ml1_tmp);
    bd.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(cd.f1->size[0] * cd.f1->size[1]);
    cd.f1->size[0] = 1;
    cd.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(cd.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(dd.f1->size[0] * dd.f1->size[1]);
    dd.f1->size[0] = 1;
    dd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(dd.f1, ml1_tmp);
    dd.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(ed.f1->size[0] * ed.f1->size[1]);
    ed.f1->size[0] = 1;
    ed.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ed.f1, ml1_tmp);
    ed.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(fd.f1->size[0] * fd.f1->size[1]);
    fd.f1->size[0] = 1;
    fd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fd.f1, ml1_tmp);
    fd.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(gd.f1->size[0] * gd.f1->size[1]);
    gd.f1->size[0] = 1;
    gd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gd.f1, ml1_tmp);
    gd.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(hd.f1->size[0] * hd.f1->size[1]);
    hd.f1->size[0] = 1;
    hd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hd.f1, ml1_tmp);
    hd.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(id.f1->size[0] * id.f1->size[1]);
    id.f1->size[0] = 1;
    id.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(id.f1, ml1_tmp);
    id.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(jd.f1->size[0] * jd.f1->size[1]);
    jd.f1->size[0] = 1;
    jd.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(jd.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(kd.f1->size[0] * kd.f1->size[1]);
    kd.f1->size[0] = 1;
    kd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kd.f1, ml1_tmp);
    kd.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(ld.f1->size[0] * ld.f1->size[1]);
    ld.f1->size[0] = 1;
    ld.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ld.f1, ml1_tmp);
    ld.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(md.f1->size[0] * md.f1->size[1]);
    md.f1->size[0] = 1;
    md.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(md.f1, ml1_tmp);
    md.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(nd.f1->size[0] * nd.f1->size[1]);
    nd.f1->size[0] = 1;
    nd.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(nd.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(od.f1->size[0] * od.f1->size[1]);
    od.f1->size[0] = 1;
    od.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(od.f1, ml1_tmp);
    od.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(pd.f1->size[0] * pd.f1->size[1]);
    pd.f1->size[0] = 1;
    pd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pd.f1, ml1_tmp);
    pd.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(qd.f1->size[0] * qd.f1->size[1]);
    qd.f1->size[0] = 1;
    qd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qd.f1, ml1_tmp);
    qd.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(rd.f1->size[0] * rd.f1->size[1]);
    rd.f1->size[0] = 1;
    rd.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(rd.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(sd.f1->size[0] * sd.f1->size[1]);
    sd.f1->size[0] = 1;
    sd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sd.f1, ml1_tmp);
    sd.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(td.f1->size[0] * td.f1->size[1]);
    td.f1->size[0] = 1;
    td.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(td.f1, ml1_tmp);
    td.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(ud.f1->size[0] * ud.f1->size[1]);
    ud.f1->size[0] = 1;
    ud.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ud.f1, ml1_tmp);
    ud.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(vd.f1->size[0] * vd.f1->size[1]);
    vd.f1->size[0] = 1;
    vd.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(vd.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(wd.f1->size[0] * wd.f1->size[1]);
    wd.f1->size[0] = 1;
    wd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(wd.f1, ml1_tmp);
    wd.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(xd.f1->size[0] * xd.f1->size[1]);
    xd.f1->size[0] = 1;
    xd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xd.f1, ml1_tmp);
    xd.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(yd.f1->size[0] * yd.f1->size[1]);
    yd.f1->size[0] = 1;
    yd.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(yd.f1, ml1_tmp);
    yd.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(ae.f1->size[0] * ae.f1->size[1]);
    ae.f1->size[0] = 1;
    ae.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(ae.f1, ml1_tmp);
    ml1_tmp = static_cast<int32_T>(be.f1->size[0] * be.f1->size[1]);
    be.f1->size[0] = 1;
    be.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(be.f1, ml1_tmp);
    be.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(ce.f1->size[0] * ce.f1->size[1]);
    ce.f1->size[0] = 1;
    ce.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ce.f1, ml1_tmp);
    ce.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(de.f1->size[0] * de.f1->size[1]);
    de.f1->size[0] = 1;
    de.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(de.f1, ml1_tmp);
    de.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(ee.f1->size[0] * ee.f1->size[1]);
    ee.f1->size[0] = 1;
    ee.f1->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_char_T(ee.f1, ml1_tmp);
    hc.f1->data[0] = 'H';
    lc.f1->data[0] = 'H';
    pc.f1->data[0] = 'H';
    tc.f1->data[0] = 'H';
    xc.f1->data[0] = 'H';
    cd.f1->data[0] = 'H';
    jd.f1->data[0] = 'H';
    nd.f1->data[0] = 'H';
    rd.f1->data[0] = 'H';
    vd.f1->data[0] = 'H';
    ae.f1->data[0] = 'H';
    ee.f1->data[0] = 'H';
    hc.f1->data[1] = 'l';
    lc.f1->data[1] = 'l';
    pc.f1->data[1] = 'r';
    tc.f1->data[1] = 'r';
    xc.f1->data[1] = 'r';
    cd.f1->data[1] = 'l';
    jd.f1->data[1] = 'l';
    nd.f1->data[1] = 'r';
    rd.f1->data[1] = 'l';
    vd.f1->data[1] = 'r';
    ae.f1->data[1] = 'r';
    ee.f1->data[1] = 'l';
    ml1_tmp = static_cast<int32_T>(fe.f1->size[0] * fe.f1->size[1]);
    fe.f1->size[0] = 1;
    fe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(fe.f1, ml1_tmp);
    fe.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(ge.f1->size[0] * ge.f1->size[1]);
    ge.f1->size[0] = 1;
    ge.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ge.f1, ml1_tmp);
    ge.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(he.f1->size[0] * he.f1->size[1]);
    he.f1->size[0] = 1;
    he.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(he.f1, ml1_tmp);
    he.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(ie.f1->size[0] * ie.f1->size[1]);
    ie.f1->size[0] = 1;
    ie.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ie.f1, ml1_tmp);
    ie.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(je.f1->size[0] * je.f1->size[1]);
    je.f1->size[0] = 1;
    je.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(je.f1, ml1_tmp);
    je.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(ke.f1->size[0] * ke.f1->size[1]);
    ke.f1->size[0] = 1;
    ke.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ke.f1, ml1_tmp);
    ke.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(le.f1->size[0] * le.f1->size[1]);
    le.f1->size[0] = 1;
    le.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(le.f1, ml1_tmp);
    le.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(me.f1->size[0] * me.f1->size[1]);
    me.f1->size[0] = 1;
    me.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(me.f1, ml1_tmp);
    me.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(ne.f1->size[0] * ne.f1->size[1]);
    ne.f1->size[0] = 1;
    ne.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ne.f1, ml1_tmp);
    ne.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(oe.f1->size[0] * oe.f1->size[1]);
    oe.f1->size[0] = 1;
    oe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(oe.f1, ml1_tmp);
    oe.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(pe.f1->size[0] * pe.f1->size[1]);
    pe.f1->size[0] = 1;
    pe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pe.f1, ml1_tmp);
    pe.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(qe.f1->size[0] * qe.f1->size[1]);
    qe.f1->size[0] = 1;
    qe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qe.f1, ml1_tmp);
    qe.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(re.f1->size[0] * re.f1->size[1]);
    re.f1->size[0] = 1;
    re.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(re.f1, ml1_tmp);
    re.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(se.f1->size[0] * se.f1->size[1]);
    se.f1->size[0] = 1;
    se.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(se.f1, ml1_tmp);
    se.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(te.f1->size[0] * te.f1->size[1]);
    te.f1->size[0] = 1;
    te.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(te.f1, ml1_tmp);
    te.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(ue.f1->size[0] * ue.f1->size[1]);
    ue.f1->size[0] = 1;
    ue.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ue.f1, ml1_tmp);
    ue.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(ve.f1->size[0] * ve.f1->size[1]);
    ve.f1->size[0] = 1;
    ve.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ve.f1, ml1_tmp);
    ve.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(we.f1->size[0] * we.f1->size[1]);
    we.f1->size[0] = 1;
    we.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(we.f1, ml1_tmp);
    we.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(xe.f1->size[0] * xe.f1->size[1]);
    xe.f1->size[0] = 1;
    xe.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(xe.f1, ml1_tmp);
    xe.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(ye.f1->size[0] * ye.f1->size[1]);
    ye.f1->size[0] = 1;
    ye.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ye.f1, ml1_tmp);
    ye.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(af.f1->size[0] * af.f1->size[1]);
    af.f1->size[0] = 1;
    af.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(af.f1, ml1_tmp);
    af.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(bf.f1->size[0] * bf.f1->size[1]);
    bf.f1->size[0] = 1;
    bf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(bf.f1, ml1_tmp);
    bf.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(cf.f1->size[0] * cf.f1->size[1]);
    cf.f1->size[0] = 1;
    cf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(cf.f1, ml1_tmp);
    cf.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(df.f1->size[0] * df.f1->size[1]);
    df.f1->size[0] = 1;
    df.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(df.f1, ml1_tmp);
    df.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(ef.f1->size[0] * ef.f1->size[1]);
    ef.f1->size[0] = 1;
    ef.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ef.f1, ml1_tmp);
    ef.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(ff.f1->size[0] * ff.f1->size[1]);
    ff.f1->size[0] = 1;
    ff.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(ff.f1, ml1_tmp);
    ff.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(gf.f1->size[0] * gf.f1->size[1]);
    gf.f1->size[0] = 1;
    gf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(gf.f1, ml1_tmp);
    gf.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(hf.f1->size[0] * hf.f1->size[1]);
    hf.f1->size[0] = 1;
    hf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(hf.f1, ml1_tmp);
    hf.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(jf.f1->size[0] * jf.f1->size[1]);
    jf.f1->size[0] = 1;
    jf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(jf.f1, ml1_tmp);
    jf.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(kf.f1->size[0] * kf.f1->size[1]);
    kf.f1->size[0] = 1;
    kf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(kf.f1, ml1_tmp);
    kf.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(lf.f1->size[0] * lf.f1->size[1]);
    lf.f1->size[0] = 1;
    lf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(lf.f1, ml1_tmp);
    lf.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(mf.f1->size[0] * mf.f1->size[1]);
    mf.f1->size[0] = 1;
    mf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(mf.f1, ml1_tmp);
    mf.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(nf.f1->size[0] * nf.f1->size[1]);
    nf.f1->size[0] = 1;
    nf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(nf.f1, ml1_tmp);
    nf.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(of.f1->size[0] * of.f1->size[1]);
    of.f1->size[0] = 1;
    of.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(of.f1, ml1_tmp);
    of.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(pf.f1->size[0] * pf.f1->size[1]);
    pf.f1->size[0] = 1;
    pf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(pf.f1, ml1_tmp);
    pf.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(qf.f1->size[0] * qf.f1->size[1]);
    qf.f1->size[0] = 1;
    qf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(qf.f1, ml1_tmp);
    qf.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(rf.f1->size[0] * rf.f1->size[1]);
    rf.f1->size[0] = 1;
    rf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(rf.f1, ml1_tmp);
    rf.f1->data[0] = 'R';
    ml1_tmp = static_cast<int32_T>(sf.f1->size[0] * sf.f1->size[1]);
    sf.f1->size[0] = 1;
    sf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(sf.f1, ml1_tmp);
    sf.f1->data[0] = 'S';
    ml1_tmp = static_cast<int32_T>(tf.f1->size[0] * tf.f1->size[1]);
    tf.f1->size[0] = 1;
    tf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(tf.f1, ml1_tmp);
    tf.f1->data[0] = 'L';
    ml1_tmp = static_cast<int32_T>(uf.f1->size[0] * uf.f1->size[1]);
    uf.f1->size[0] = 1;
    uf.f1->size[1] = 1;
    FlightMissionMode_emxEnsureCapacity_char_T(uf.f1, ml1_tmp);
    uf.f1->data[0] = 'R';
    FlightMissionMode_emxCopyStruct_cell_wrap_2(&motionTypes[0], &b);
    b_obj_UAVDubinsBuildableObj =
        FlightMissionMode_uavDubinsBuildable_uavDubinsBuildable_n(obj->AirSpeed,
        obj->MaxRollAngle, obj->FlightPathAngleLimit, dpt_data, dpt_size);
    b_startPose[0] = startPose[0];
    b_goalPose[0] = goalPose[0];
    b_startPose[1] = startPose[1];
    b_goalPose[1] = goalPose[1];
    b_startPose[2] = startPose[2];
    b_goalPose[2] = goalPose[2];
    b_startPose[3] = startPose[3];
    b_goalPose[3] = goalPose[3];
    uavDubinsDistanceCodegen_real64(b_obj_UAVDubinsBuildableObj, &b_startPose[0],
        1U, &b_goalPose[0], 1U, true, turningRadius, &s[0], &g[0], &b_fpa, &b_a,
        &mtr, &h, &mt, &ml[0]);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ib);
    FlightMissionMode_emxFreeStruct_cell_wrap_2(&b);
    for (i = 0; i < 4; i++) {
        ml1_tmp = static_cast<int32_T>(i << 2);
        ml1[ml1_tmp] = ml[i];
        ml1[static_cast<int32_T>(ml1_tmp + 1)] = ml[static_cast<int32_T>(i + 4)];
        ml1[static_cast<int32_T>(ml1_tmp + 2)] = ml[static_cast<int32_T>(i + 8)];
        ml1[static_cast<int32_T>(ml1_tmp + 3)] = ml[static_cast<int32_T>(i + 12)];
    }

    if (mt + 1.0 == 2.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &mb);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &nb);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &ob);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &pb);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mb);
    if (mt + 1.0 == 3.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &qb);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &rb);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &sb);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &tb);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qb);
    if (mt + 1.0 == 4.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &ub);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &vb);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &wb);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &xb);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ub);
    if (mt + 1.0 == 5.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &yb);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &ac);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &bc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &cc);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yb);
    if (mt + 1.0 == 6.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &dc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &ec);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &fc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &gc);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dc);
    if (mt + 1.0 == 7.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &hc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &ic);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &jc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &kc);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ic);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hc);
    if (mt + 1.0 == 8.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &lc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &mc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &nc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &oc);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lc);
    if (mt + 1.0 == 9.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &pc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &qc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &rc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &sc);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pc);
    if (mt + 1.0 == 10.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &tc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &uc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &vc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &wc);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tc);
    if (mt + 1.0 == 11.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &xc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &yc);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &ad);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &bd);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ad);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xc);
    if (mt + 1.0 == 12.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &cd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &dd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &ed);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &fd);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ed);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cd);
    if (mt + 1.0 == 13.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &gd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &hd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &id);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &jd);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&id);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gd);
    if (mt + 1.0 == 14.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &kd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &ld);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &md);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &nd);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&md);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ld);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kd);
    if (mt + 1.0 == 15.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &od);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &pd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &qd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &rd);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&od);
    if (mt + 1.0 == 16.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &sd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &td);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &ud);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &vd);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ud);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&td);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sd);
    if (mt + 1.0 == 17.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &wd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &xd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &yd);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &ae);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ae);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xd);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wd);
    if (mt + 1.0 == 18.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &be);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &ce);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &de);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &ee);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ee);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&de);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ce);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&be);
    if (mt + 1.0 == 19.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &fe);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &ge);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &he);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &ie);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ie);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&he);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ge);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fe);
    if (mt + 1.0 == 20.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &je);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &ke);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &le);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &me);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&me);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&le);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ke);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&je);
    if (mt + 1.0 == 21.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &ne);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &oe);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &pe);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &qe);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&oe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ne);
    if (mt + 1.0 == 22.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &re);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &se);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &te);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &ue);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ue);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&te);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&se);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&re);
    if (mt + 1.0 == 23.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &ve);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &we);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &xe);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &ye);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ye);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xe);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&we);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ve);
    if (mt + 1.0 == 24.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &af);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &bf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &cf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &df);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&df);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&af);
    if (mt + 1.0 == 25.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &ef);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &ff);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &gf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &hf);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ff);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ef);
    if (mt + 1.0 == 26.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &jf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &kf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &lf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &mf);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jf);
    if (mt + 1.0 == 27.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &nf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &of);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &pf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &qf);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&of);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nf);
    if (mt + 1.0 == 28.0) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[0], &rf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[1], &sf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[2], &tf);
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&motionTypes[0].f1[3], &uf);
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&uf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sf);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rf);
    b_startPose[0] = s[0];
    b_goalPose[0] = g[0];
    ml1_0[0] = ml1[0];
    b_startPose[1] = s[1];
    b_goalPose[1] = g[1];
    ml1_0[1] = ml1[4];
    b_startPose[2] = s[2];
    b_goalPose[2] = g[2];
    ml1_0[2] = ml1[8];
    b_startPose[3] = s[3];
    b_goalPose[3] = g[3];
    ml1_0[3] = ml1[12];
    FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_hr(b_startPose,
        b_goalPose, b_fpa, b_a, mtr, h, motionTypes[0].f1, ml1_0, pathSegObjs);
    ml1_0[0] = ml1[0];
    ml1_0[1] = ml1[4];
    ml1_0[2] = ml1[8];
    ml1_0[3] = ml1[12];
    *pathCosts = sum_4Il0TNcY(ml1_0);
    FlightMissionMode_emxFreeMatrix_cell_wrap_21(motionTypes);
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsConnection_connect_l(const
    uavDubinsConnection_1_FlightMissionMode_T *obj, const real_T
    startPoses_data[], const real_T goalPoses_data[],
    uavDubinsPathSegment_1_FlightMissionMode_T *pathSegObjs)
{
    static const boolean_T g[128]{ false, false, false, false, false, false,
        false, false, false, true, true, true, true, true, false, false, false,
        false, false, false, false, false, false, false, false, false, false,
        false, true, true, true, true, true, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false,
        false, false, false, false, false, false, false, false, false, false };

    emxArray_real_T_FlightMissionMode_T *hdisabledTypes;
    emxArray_uint64_T_FlightMissionMode_T *charVal;
    real_T a__1_data[28];
    real_T iia_data_0[28];
    real_T pathCosts;
    int32_T iia_data[28];
    int32_T a__1_size[2];
    int32_T iia_size;
    int32_T j2;
    int32_T loop_ub;
    FlightMissionMode_emxInit_real_T_h(&hdisabledTypes, 2);
    iia_size = static_cast<int32_T>(hdisabledTypes->size[0] *
        hdisabledTypes->size[1]);
    hdisabledTypes->size[0] = 1;
    hdisabledTypes->size[1] = static_cast<int32_T>(obj->DisabledPathTypes->size
        [0] * obj->DisabledPathTypes->size[1]);
    FlightMissionMode_emxEnsureCapacity_real_T_c(hdisabledTypes, iia_size);
    loop_ub = static_cast<int32_T>(static_cast<int32_T>(obj->
        DisabledPathTypes->size[0] * obj->DisabledPathTypes->size[1]) - 1);
    for (j2 = 0; j2 <= loop_ub; j2++) {
        hdisabledTypes->data[j2] = 0.0;
    }

    if (static_cast<boolean_T>(static_cast<int32_T>((obj->
            DisabledPathTypes->size[0] != 0) & (obj->DisabledPathTypes->size[1]
            != 0)))) {
        int32_T b;
        int32_T idDis;
        b = static_cast<int32_T>(obj->DisabledPathTypes->size[0] *
            obj->DisabledPathTypes->size[1]);
        idDis = 0;
        FlightMissionMode_emxInit_uint64_T(&charVal, 2);
        while (idDis <= static_cast<int32_T>(b - 1)) {
            uint64_T out;
            int32_T b_j1;
            b_j1 = 0;
            while ((static_cast<int32_T>(b_j1 + 1) <= obj->
                    DisabledPathTypes->data[idDis].f1->size[1]) && (static_cast<
                    boolean_T>(static_cast<int32_T>(static_cast<int32_T>(
                       static_cast<boolean_T>(static_cast<int32_T>
                        ((obj->DisabledPathTypes->data[idDis].f1->data[b_j1] ==
                          '\x00') ^ 1))) & static_cast<int32_T>(g
                       [static_cast<int32_T>(static_cast<int32_T>
                        (static_cast<uint8_T>(obj->DisabledPathTypes->data[idDis]
                          .f1->data[b_j1])) & 127)]))))) {
                b_j1 = static_cast<int32_T>(b_j1 + 1);
            }

            j2 = static_cast<int32_T>(obj->DisabledPathTypes->data[idDis]
                .f1->size[1] - 1);
            while ((static_cast<int32_T>(j2 + 1) > 0) && (static_cast<boolean_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                      (static_cast<boolean_T>(static_cast<int32_T>
                        ((obj->DisabledPathTypes->data[idDis].f1->data[j2] ==
                          '\x00') ^ 1))) & static_cast<int32_T>(g[static_cast<
                       int32_T>(static_cast<int32_T>(static_cast<uint8_T>
                         (obj->DisabledPathTypes->data[idDis].f1->data[j2])) &
                                127)]))))) {
                j2 = static_cast<int32_T>(j2 - 1);
            }

            if (static_cast<int32_T>(b_j1 + 1) > static_cast<int32_T>(j2 + 1)) {
                b_j1 = 0;
                j2 = -1;
            }

            iia_size = static_cast<int32_T>(charVal->size[0] * charVal->size[1]);
            charVal->size[0] = 1;
            loop_ub = static_cast<int32_T>(j2 - b_j1);
            charVal->size[1] = static_cast<int32_T>(loop_ub + 1);
            FlightMissionMode_emxEnsureCapacity_uint64_T(charVal, iia_size);
            for (j2 = 0; j2 <= loop_ub; j2++) {
                charVal->data[j2] = static_cast<uint64_T>(static_cast<uint8_T>
                    (obj->DisabledPathTypes->data[idDis].f1->data
                     [static_cast<int32_T>(b_j1 + j2)]));
            }

            out = 5381ULL;
            for (j2 = 0; j2 <= static_cast<int32_T>(charVal->size[1] - 1); j2 =
                    static_cast<int32_T>(j2 + 1)) {
                uint64_T q0;
                uint64_T qY;
                q0 = static_cast<uint64_T>(out << 5);
                qY = static_cast<uint64_T>(q0 + /*MW:OvSatOk*/ out);
                if (qY < q0) {
                    qY = MAX_uint64_T;
                }

                out = static_cast<uint64_T>(qY + /*MW:OvSatOk*/ charVal->data[j2]);
                if (out < qY) {
                    out = MAX_uint64_T;
                }
            }

            hdisabledTypes->data[idDis] = static_cast<real_T>(out);
            idDis = static_cast<int32_T>(idDis + 1);
        }

        FlightMissionMode_emxFree_uint64_T(&charVal);
    }

    FlightMissionMode_do_vectors_b(hdisabledTypes, a__1_data, a__1_size,
        iia_data, &iia_size, &j2);
    loop_ub = iia_size;
    FlightMissionMode_emxFree_real_T_n(&hdisabledTypes);
    for (j2 = 0; j2 <= static_cast<int32_T>(iia_size - 1); j2++) {
        iia_data_0[j2] = static_cast<real_T>(iia_data[j2]);
    }

    FlightMissionMode_do_vectors_bz(iia_data_0, &loop_ub, a__1_data, a__1_size,
        iia_data, &iia_size, &j2);
    for (j2 = 0; j2 <= static_cast<int32_T>(iia_size - 1); j2++) {
        iia_data_0[j2] = static_cast<real_T>(iia_data[j2]);
    }

    FlightMissionMode_sort_m04(iia_data_0, &iia_size);
    for (j2 = 0; j2 <= static_cast<int32_T>(iia_size - 1); j2++) {
        a__1_data[j2] = iia_data_0[j2] - 1.0;
    }

    FlightMissionMode_uavDubinsBuiltins_connect_op(obj, &startPoses_data[0],
        &goalPoses_data[0], obj->MinTurningRadius, a__1_data, &iia_size,
        pathSegObjs, &pathCosts);
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_set_StartPose_b
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this, const real_T startPose
     [4])
{
    real_T thetaWrap;
    b_this->StartPose.size[0] = 1;
    b_this->StartPose.size[1] = 4;
    b_this->StartPose.data[0] = startPose[0];
    b_this->StartPose.data[1] = startPose[1];
    b_this->StartPose.data[2] = startPose[2];
    b_this->StartPose.data[3] = startPose[3];
    thetaWrap = mod_ZflSpsmf(startPose[3]);
    b_this->StartPose.data[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (startPose[3] > 0.0)))) {
        b_this->StartPose.data[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->StartPose.data[3]);
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_set_GoalPose_k
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this, const real_T goalPose[4])
{
    real_T thetaWrap;
    b_this->GoalPose.size[0] = 1;
    b_this->GoalPose.size[1] = 4;
    b_this->GoalPose.data[0] = goalPose[0];
    b_this->GoalPose.data[1] = goalPose[1];
    b_this->GoalPose.data[2] = goalPose[2];
    b_this->GoalPose.data[3] = goalPose[3];
    thetaWrap = mod_ZflSpsmf(goalPose[3]);
    b_this->GoalPose.data[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (goalPose[3] > 0.0)))) {
        b_this->GoalPose.data[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->GoalPose.data[3]);
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_set_MotionTypes_f
    (uavDubinsPathSegment_FlightMissionMode_g_T *b_this,
     cell_wrap_1_FlightMissionMode_i_T motionTypes[4])
{
    static const char_T d[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
        'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',
        'Z', '[', '\\', ']', '^', '_', '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
        'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', '\x7f' };

    emxArray_char_T_FlightMissionMode_T *x;
    int32_T k;
    FlightMissionMode_emxInit_char_T(&x, 2);
    for (int32_T i{0}; i < 4; i++) {
        int32_T loop_ub;
        k = static_cast<int32_T>(x->size[0] * x->size[1]);
        x->size[0] = 1;
        x->size[1] = motionTypes[i].f1->size[1];
        FlightMissionMode_emxEnsureCapacity_char_T(x, k);
        loop_ub = static_cast<int32_T>(motionTypes[i].f1->size[1] - 1);
        for (k = 0; k <= loop_ub; k++) {
            x->data[k] = motionTypes[i].f1->data[k];
        }

        for (k = 0; k <= static_cast<int32_T>(x->size[1] - 1); k = static_cast<
                int32_T>(k + 1)) {
            motionTypes[i].f1->data[k] = d[static_cast<int32_T>
                (static_cast<int32_T>(static_cast<uint8_T>(x->data[k])) & 127)];
        }
    }

    FlightMissionMode_emxFree_char_T(&x);
    if (FlightMissionMode_strcmp_o(motionTypes[0].f1->data, motionTypes[0]
            .f1->size)) {
        k = static_cast<int32_T>(motionTypes[0].f1->size[0] * motionTypes[0].
            f1->size[1]);
        motionTypes[0].f1->size[0] = 1;
        motionTypes[0].f1->size[1] = 2;
        FlightMissionMode_emxEnsureCapacity_char_T(motionTypes[0].f1, k);
        motionTypes[0].f1->data[0] = 'H';
        motionTypes[0].f1->data[1] = 'l';
    } else if (FlightMissionMode_strcmp_op(motionTypes[0].f1->data, motionTypes
                [0].f1->size)) {
        k = static_cast<int32_T>(motionTypes[0].f1->size[0] * motionTypes[0].
            f1->size[1]);
        motionTypes[0].f1->size[0] = 1;
        motionTypes[0].f1->size[1] = 2;
        FlightMissionMode_emxEnsureCapacity_char_T(motionTypes[0].f1, k);
        motionTypes[0].f1->data[0] = 'H';
        motionTypes[0].f1->data[1] = 'r';
    } else if (FlightMissionMode_strcmp_op(motionTypes[3].f1->data, motionTypes
                [3].f1->size)) {
        k = static_cast<int32_T>(motionTypes[3].f1->size[0] * motionTypes[3].
            f1->size[1]);
        motionTypes[3].f1->size[0] = 1;
        motionTypes[3].f1->size[1] = 2;
        FlightMissionMode_emxEnsureCapacity_char_T(motionTypes[3].f1, k);
        motionTypes[3].f1->data[0] = 'H';
        motionTypes[3].f1->data[1] = 'r';
    } else if (FlightMissionMode_strcmp_o(motionTypes[3].f1->data, motionTypes[3]
                .f1->size)) {
        k = static_cast<int32_T>(motionTypes[3].f1->size[0] * motionTypes[3].
            f1->size[1]);
        motionTypes[3].f1->size[0] = 1;
        motionTypes[3].f1->size[1] = 2;
        FlightMissionMode_emxEnsureCapacity_char_T(motionTypes[3].f1, k);
        motionTypes[3].f1->data[0] = 'H';
        motionTypes[3].f1->data[1] = 'l';
    }

    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[0],
        &motionTypes[0]);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[1],
        &motionTypes[1]);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[2],
        &motionTypes[2]);
    FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->MotionTypes[3],
        &motionTypes[3]);
}

static void FlightMissionMode_emxFreeStruct_uavDubinsPathSegm_b
    (uavDubinsPathSegment_1_FlightMissionMode_T *pStruct)
{
    FlightMissionMode_emxFreeMatrix_cell_wrap_1(pStruct->MotionTypes);
}

static void FlightMissionMode_emxFreeMatrix_uavDubinsPathSegm
    (uavDubinsPathSegment_1_FlightMissionMode_T *pMatrix)
{
    for (int32_T i{0}; i < 1; i++) {
        FlightMissionMode_emxFreeStruct_uavDubinsPathSegm_b(pMatrix);
    }
}

static void FlightMissionMode_emxFree_cell_wrap_1
    (emxArray_cell_wrap_1_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_cell_wrap_1_FlightMissionMode_T *)nullptr) {
        if ((*pEmxArray)->data != (cell_wrap_1_FlightMissionMode_i_T *)nullptr)
        {
            int32_T i;
            int32_T numEl;
            numEl = 1;
            for (i = 0; i <= static_cast<int32_T>((*pEmxArray)->numDimensions -
                    1); i++) {
                numEl = static_cast<int32_T>(numEl * (*pEmxArray)->size[i]);
            }

            for (i = 0; i <= static_cast<int32_T>(numEl - 1); i++) {
                FlightMissionMode_emxFreeStruct_cell_wrap_1(&(*pEmxArray)->
                    data[i]);
            }

            if ((*pEmxArray)->canFreeData) {
                std::free((*pEmxArray)->data);
            }
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_cell_wrap_1_FlightMissionMode_T *)nullptr;
    }
}

static void FlightMissionMode_emxFreeStruct_uavDubinsConnecti
    (uavDubinsConnection_1_FlightMissionMode_T *pStruct)
{
    FlightMissionMode_emxFree_cell_wrap_1(&pStruct->DisabledPathTypes);
}

static void FlightMissionMode_emxFreeMatrix_uavDubinsConnecti
    (uavDubinsConnection_1_FlightMissionMode_T pMatrix[2])
{
    for (int32_T i{0}; i < 2; i++) {
        FlightMissionMode_emxFreeStruct_uavDubinsConnecti(&pMatrix[i]);
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_strcmp_k(const char_T a_f1_data[], const int32_T
    a_f1_size[2], char_T a_f2, char_T a_f3, const char_T a_f4_data[], const
    int32_T a_f4_size[2], const cell_wrap_1_FlightMissionMode_i_T b[4],
    boolean_T b_bool[4])
{
    static const char_T c[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    b_bool[0] = false;
    if ((a_f1_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>((c[
            static_cast<int32_T>(static_cast<int32_T>(static_cast<uint8_T>
              (a_f1_data[0])) & 127)] != c[static_cast<int32_T>
            (static_cast<int32_T>(static_cast<uint8_T>(b[0].f1->data[0])) & 127)])
           ^ 1)))) {
        b_bool[0] = true;
    }

    b_bool[1] = false;
    if (static_cast<boolean_T>(static_cast<int32_T>((c[static_cast<int32_T>(
            static_cast<int32_T>(static_cast<uint8_T>(a_f2)) & 127)] != 's') ^ 1)))
    {
        b_bool[1] = true;
    }

    b_bool[2] = false;
    if (static_cast<boolean_T>(static_cast<int32_T>((c[static_cast<int32_T>(
            static_cast<int32_T>(static_cast<uint8_T>(a_f3)) & 127)] != c[
            static_cast<int32_T>(static_cast<int32_T>(static_cast<uint8_T>(b[2].
              f1->data[0])) & 127)]) ^ 1))) {
        b_bool[2] = true;
    }

    b_bool[3] = false;
    if ((a_f4_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>((c[
            static_cast<int32_T>(static_cast<int32_T>(static_cast<uint8_T>
              (a_f4_data[0])) & 127)] != 'n') ^ 1)))) {
        b_bool[3] = true;
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static boolean_T FlightMissionMode_any_i(const boolean_T x[4])
{
    int32_T k;
    boolean_T exitg1;
    boolean_T y;
    y = false;
    k = 0;
    exitg1 = false;
    while ((!exitg1) && (k < 4)) {
        if (x[k]) {
            y = true;
            exitg1 = true;
        } else {
            k = static_cast<int32_T>(k + 1);
        }
    }

    return y;
}

static void FlightMissionMode_emxInit_cell_wrap_1_1x28
    (emxArray_cell_wrap_1_1x28_FlightMissionMode_T *pEmxArray)
{
    for (int32_T i{0}; i < 2; i++) {
        pEmxArray->size[i] = 0;
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_repmat(cell_wrap_1_FlightMissionMode_i_T b[27])
{
    for (int32_T jtilecol{0}; jtilecol < 27; jtilecol++) {
        int32_T tmp;
        tmp = static_cast<int32_T>(b[jtilecol].f1->size[0] * b[jtilecol]
            .f1->size[1]);
        b[jtilecol].f1->size[0] = 1;
        b[jtilecol].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T(b[jtilecol].f1, tmp);
        b[jtilecol].f1->data[0] = ' ';
        b[jtilecol].f1->data[1] = ' ';
        b[jtilecol].f1->data[2] = ' ';
        b[jtilecol].f1->data[3] = ' ';
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'L', 'S', 'L', 'N' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc3(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'L', 'S', 'R', 'N' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'R', 'S', 'L', 'N' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35a(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'R', 'S', 'R', 'N' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35ai(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'R', 'L', 'R', 'N' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35ai0(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'L', 'R', 'L', 'N' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35ai04(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'H', 'l', 'L', 'S', 'L' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35ai04m(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'H', 'l', 'L', 'S', 'R' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35ai04mt(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'H', 'r', 'R', 'S', 'L' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35ai04mto(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'H', 'r', 'R', 'S', 'R' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35ai04mtol(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'H', 'r', 'R', 'L', 'R' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35ai04mtol1(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'H', 'l', 'L', 'R', 'L' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35ai04mtol1w(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'L', 'S', 'L', 'H', 'l' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kc35ai04mtol1wh(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'L', 'S', 'R', 'H', 'r' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_h(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'R', 'S', 'L', 'H', 'l' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_d(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'R', 'S', 'R', 'H', 'r' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kd(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'R', 'L', 'R', 'H', 'r' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_i(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[5]{ 'L', 'R', 'L', 'H', 'l' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 5) {
        minnanb = a->size[1];
    } else {
        minnanb = 5;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 5) {
        minnanb = 4;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_a(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'L', 'R', 'S', 'L' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_at(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'L', 'R', 'S', 'R' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_e(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'L', 'R', 'L', 'R' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_j(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'R', 'L', 'S', 'R' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_bs(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'R', 'L', 'R', 'L' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_p(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'R', 'L', 'S', 'L' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_ch(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'L', 'S', 'R', 'L' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_g(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'R', 'S', 'R', 'L' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_o0(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'L', 'S', 'L', 'R' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_i2(const
    emxArray_char_T_FlightMissionMode_T *a, real_T cmpLen)
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
        'z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
        'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f' };

    static const char_T c[4]{ 'R', 'S', 'L', 'R' };

    real_T x;
    int32_T minnanb;
    boolean_T b_bool;
    boolean_T guard1{ false };

    x = std::floor(cmpLen);
    b_bool = false;
    if (a->size[1] <= 4) {
        minnanb = a->size[1];
    } else {
        minnanb = 4;
    }

    guard1 = false;
    if (static_cast<int32_T>(x) <= minnanb) {
        if (minnanb > static_cast<int32_T>(x)) {
            minnanb = static_cast<int32_T>(x);
        }

        minnanb = static_cast<int32_T>(minnanb - 1);
        guard1 = true;
    } else if (a->size[1] == 4) {
        minnanb = 3;
        guard1 = true;
    }

    if (guard1) {
        int32_T b_kstr;
        b_kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (b_kstr <= minnanb) {
                if (b[static_cast<int32_T>(static_cast<int32_T>
                                           (static_cast<uint8_T>(a->data[b_kstr]))
                     & 127)] != b[static_cast<int32_T>(c[b_kstr])]) {
                    exitg1 = 1;
                } else {
                    b_kstr = static_cast<int32_T>(b_kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_get_match(const
    emxArray_char_T_FlightMissionMode_T *str, char_T match_data[], int32_T
    match_size[2], int32_T *nmatched)
{
    static const char_T h[5]{ 'H', 'l', 'L', 'S', 'L' };

    static const char_T i_0[5]{ 'H', 'l', 'L', 'S', 'R' };

    static const char_T j[5]{ 'H', 'r', 'R', 'S', 'L' };

    static const char_T k[5]{ 'H', 'r', 'R', 'S', 'R' };

    static const char_T l[5]{ 'H', 'r', 'R', 'L', 'R' };

    static const char_T m[5]{ 'H', 'l', 'L', 'R', 'L' };

    static const char_T n[5]{ 'L', 'S', 'L', 'H', 'l' };

    static const char_T o[5]{ 'L', 'S', 'R', 'H', 'r' };

    static const char_T p[5]{ 'R', 'S', 'L', 'H', 'l' };

    static const char_T q[5]{ 'R', 'S', 'R', 'H', 'r' };

    static const char_T r[5]{ 'R', 'L', 'R', 'H', 'r' };

    static const char_T s[5]{ 'L', 'R', 'L', 'H', 'l' };

    int32_T i;
    boolean_T guard1{ false };

    boolean_T guard10{ false };

    boolean_T guard11{ false };

    boolean_T guard12{ false };

    boolean_T guard13{ false };

    boolean_T guard14{ false };

    boolean_T guard15{ false };

    boolean_T guard16{ false };

    boolean_T guard17{ false };

    boolean_T guard18{ false };

    boolean_T guard19{ false };

    boolean_T guard2{ false };

    boolean_T guard20{ false };

    boolean_T guard21{ false };

    boolean_T guard22{ false };

    boolean_T guard23{ false };

    boolean_T guard24{ false };

    boolean_T guard25{ false };

    boolean_T guard26{ false };

    boolean_T guard27{ false };

    boolean_T guard28{ false };

    boolean_T guard3{ false };

    boolean_T guard4{ false };

    boolean_T guard5{ false };

    boolean_T guard6{ false };

    boolean_T guard7{ false };

    boolean_T guard8{ false };

    boolean_T guard9{ false };

    boolean_T matched;
    match_size[0] = 1;
    match_size[1] = 4;
    match_data[0] = ' ';
    match_data[1] = ' ';
    match_data[2] = ' ';
    match_data[3] = ' ';
    *nmatched = 0;
    matched = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    if ((str->size[1] <= 4) && FlightMissionMode_strcmp_kc(str,
            static_cast<real_T>(str->size[1]))) {
        if (str->size[1] == 4) {
            *nmatched = 1;
            match_size[0] = 1;
            match_size[1] = 4;
            match_data[0] = 'L';
            match_data[1] = 'S';
            match_data[2] = 'L';
            match_data[3] = 'N';
        } else {
            match_size[0] = 1;
            match_size[1] = 4;
            match_data[0] = 'L';
            match_data[1] = 'S';
            match_data[2] = 'L';
            match_data[3] = 'N';
            matched = true;
            *nmatched = 1;
            guard28 = true;
        }
    } else {
        guard28 = true;
    }

    if (guard28) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_kc3(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'L';
                match_data[1] = 'S';
                match_data[2] = 'R';
                match_data[3] = 'N';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'L';
                    match_data[1] = 'S';
                    match_data[2] = 'R';
                    match_data[3] = 'N';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard27 = true;
            }
        } else {
            guard27 = true;
        }
    }

    if (guard27) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_kc35(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'R';
                match_data[1] = 'S';
                match_data[2] = 'L';
                match_data[3] = 'N';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'R';
                    match_data[1] = 'S';
                    match_data[2] = 'L';
                    match_data[3] = 'N';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard26 = true;
            }
        } else {
            guard26 = true;
        }
    }

    if (guard26) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_kc35a(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'R';
                match_data[1] = 'S';
                match_data[2] = 'R';
                match_data[3] = 'N';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'R';
                    match_data[1] = 'S';
                    match_data[2] = 'R';
                    match_data[3] = 'N';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard25 = true;
            }
        } else {
            guard25 = true;
        }
    }

    if (guard25) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_kc35ai(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'R';
                match_data[1] = 'L';
                match_data[2] = 'R';
                match_data[3] = 'N';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'R';
                    match_data[1] = 'L';
                    match_data[2] = 'R';
                    match_data[3] = 'N';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard24 = true;
            }
        } else {
            guard24 = true;
        }
    }

    if (guard24) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_kc35ai0(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'L';
                match_data[1] = 'R';
                match_data[2] = 'L';
                match_data[3] = 'N';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'L';
                    match_data[1] = 'R';
                    match_data[2] = 'L';
                    match_data[3] = 'N';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard23 = true;
            }
        } else {
            guard23 = true;
        }
    }

    if (guard23) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_kc35ai04(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = h[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = h[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard22 = true;
            }
        } else {
            guard22 = true;
        }
    }

    if (guard22) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_kc35ai04m(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = i_0[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = i_0[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard21 = true;
            }
        } else {
            guard21 = true;
        }
    }

    if (guard21) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_kc35ai04mt(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = j[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<
                        int32_T>(matched) ^ 1))) {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = j[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard20 = true;
            }
        } else {
            guard20 = true;
        }
    }

    if (guard20) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_kc35ai04mto(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = k[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = k[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard19 = true;
            }
        } else {
            guard19 = true;
        }
    }

    if (guard19) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_kc35ai04mtol(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = l[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = l[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard18 = true;
            }
        } else {
            guard18 = true;
        }
    }

    if (guard18) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_kc35ai04mtol1(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = m[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = m[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard17 = true;
            }
        } else {
            guard17 = true;
        }
    }

    if (guard17) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_kc35ai04mtol1w(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = n[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = n[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard16 = true;
            }
        } else {
            guard16 = true;
        }
    }

    if (guard16) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_kc35ai04mtol1wh(str,
             static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = o[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = o[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard15 = true;
            }
        } else {
            guard15 = true;
        }
    }

    if (guard15) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_h(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = p[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = p[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard14 = true;
            }
        } else {
            guard14 = true;
        }
    }

    if (guard14) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_d(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = q[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = q[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard13 = true;
            }
        } else {
            guard13 = true;
        }
    }

    if (guard13) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_kd(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = r[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = r[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard12 = true;
            }
        } else {
            guard12 = true;
        }
    }

    if (guard12) {
        if ((str->size[1] <= 5) && FlightMissionMode_strcmp_i(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 5) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 5;
                for (i = 0; i < 5; i++) {
                    match_data[i] = s[i];
                }
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 5;
                    for (i = 0; i < 5; i++) {
                        match_data[i] = s[i];
                    }
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard11 = true;
            }
        } else {
            guard11 = true;
        }
    }

    if (guard11) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_a(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'L';
                match_data[1] = 'R';
                match_data[2] = 'S';
                match_data[3] = 'L';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'L';
                    match_data[1] = 'R';
                    match_data[2] = 'S';
                    match_data[3] = 'L';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard10 = true;
            }
        } else {
            guard10 = true;
        }
    }

    if (guard10) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_at(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'L';
                match_data[1] = 'R';
                match_data[2] = 'S';
                match_data[3] = 'R';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'L';
                    match_data[1] = 'R';
                    match_data[2] = 'S';
                    match_data[3] = 'R';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard9 = true;
            }
        } else {
            guard9 = true;
        }
    }

    if (guard9) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_e(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'L';
                match_data[1] = 'R';
                match_data[2] = 'L';
                match_data[3] = 'R';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'L';
                    match_data[1] = 'R';
                    match_data[2] = 'L';
                    match_data[3] = 'R';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard8 = true;
            }
        } else {
            guard8 = true;
        }
    }

    if (guard8) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_j(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'R';
                match_data[1] = 'L';
                match_data[2] = 'S';
                match_data[3] = 'R';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'R';
                    match_data[1] = 'L';
                    match_data[2] = 'S';
                    match_data[3] = 'R';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard7 = true;
            }
        } else {
            guard7 = true;
        }
    }

    if (guard7) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_bs(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'R';
                match_data[1] = 'L';
                match_data[2] = 'R';
                match_data[3] = 'L';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'R';
                    match_data[1] = 'L';
                    match_data[2] = 'R';
                    match_data[3] = 'L';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard6 = true;
            }
        } else {
            guard6 = true;
        }
    }

    if (guard6) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_p(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'R';
                match_data[1] = 'L';
                match_data[2] = 'S';
                match_data[3] = 'L';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'R';
                    match_data[1] = 'L';
                    match_data[2] = 'S';
                    match_data[3] = 'L';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard5 = true;
            }
        } else {
            guard5 = true;
        }
    }

    if (guard5) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_ch(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'L';
                match_data[1] = 'S';
                match_data[2] = 'R';
                match_data[3] = 'L';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'L';
                    match_data[1] = 'S';
                    match_data[2] = 'R';
                    match_data[3] = 'L';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard4 = true;
            }
        } else {
            guard4 = true;
        }
    }

    if (guard4) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_g(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'R';
                match_data[1] = 'S';
                match_data[2] = 'R';
                match_data[3] = 'L';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'R';
                    match_data[1] = 'S';
                    match_data[2] = 'R';
                    match_data[3] = 'L';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard3 = true;
            }
        } else {
            guard3 = true;
        }
    }

    if (guard3) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_o0(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'L';
                match_data[1] = 'S';
                match_data[2] = 'L';
                match_data[3] = 'R';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'L';
                    match_data[1] = 'S';
                    match_data[2] = 'L';
                    match_data[3] = 'R';
                }

                matched = true;
                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard2 = true;
            }
        } else {
            guard2 = true;
        }
    }

    if (guard2) {
        if ((str->size[1] <= 4) && FlightMissionMode_strcmp_i2(str,
                static_cast<real_T>(str->size[1]))) {
            if (str->size[1] == 4) {
                *nmatched = 1;
                match_size[0] = 1;
                match_size[1] = 4;
                match_data[0] = 'R';
                match_data[1] = 'S';
                match_data[2] = 'L';
                match_data[3] = 'R';
            } else {
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(matched) ^ 1)))
                {
                    match_size[0] = 1;
                    match_size[1] = 4;
                    match_data[0] = 'R';
                    match_data[1] = 'S';
                    match_data[2] = 'L';
                    match_data[3] = 'R';
                }

                *nmatched = static_cast<int32_T>(*nmatched + 1);
                guard1 = true;
            }
        } else {
            guard1 = true;
        }
    }

    if (guard1) {
        if (*nmatched == 0) {
            match_size[0] = 1;
            match_size[1] = 4;
            match_data[0] = ' ';
            match_data[1] = ' ';
            match_data[2] = ' ';
            match_data[3] = ' ';
        }
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_validatestring(const
    emxArray_char_T_FlightMissionMode_T *str, char_T out_data[], int32_T
    out_size[2])
{
    int32_T nmatched;
    FlightMissionMode_get_match(str, out_data, out_size, &nmatched);
    if (nmatched == 0) {
        out_size[0] = 1;
        out_size[1] = 4;
        out_data[0] = ' ';
        out_data[1] = ' ';
        out_data[2] = ' ';
        out_data[3] = ' ';
    } else if (str->size[1] == 0) {
        out_size[0] = 1;
        out_size[1] = 4;
        out_data[0] = ' ';
        out_data[1] = ' ';
        out_data[2] = ' ';
        out_data[3] = ' ';
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_ga(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'L', 'S', 'L', 'N' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_hl(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'L', 'S', 'R', 'N' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_am(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'R', 'S', 'L', 'N' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_jj(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'R', 'S', 'R', 'N' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_f(const char_T b_data[], const int32_T
    b_size[2])
{
    static const char_T c[4]{ 'R', 'L', 'R', 'N' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_l(const char_T b_data[], const int32_T
    b_size[2])
{
    static const char_T c[4]{ 'L', 'R', 'L', 'N' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_gq(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'H', 'l', 'L', 'S', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_dt(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'H', 'l', 'L', 'S', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_l4(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'H', 'r', 'R', 'S', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_fe(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'H', 'r', 'R', 'S', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_ah(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'H', 'r', 'R', 'L', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kj(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'H', 'l', 'L', 'R', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_oq(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'L', 'S', 'L', 'H', 'l' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_co(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'L', 'S', 'R', 'H', 'r' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_fx(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'R', 'S', 'L', 'H', 'l' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_jo(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'R', 'S', 'R', 'H', 'r' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_h4(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'R', 'L', 'R', 'H', 'r' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_on(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[5]{ 'L', 'R', 'L', 'H', 'l' };

    boolean_T b_bool;
    b_bool = false;
    if (5 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 5) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_ix(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'L', 'R', 'S', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_j1(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'L', 'R', 'S', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_ho(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'L', 'R', 'L', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_ii(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'R', 'L', 'S', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_n(const char_T b_data[], const int32_T
    b_size[2])
{
    static const char_T c[4]{ 'R', 'L', 'R', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_o4(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'R', 'L', 'S', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_nb(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'L', 'S', 'R', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_jw(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'R', 'S', 'R', 'L' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_o4o(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'L', 'S', 'L', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_kl(const char_T b_data[], const
    int32_T b_size[2])
{
    static const char_T c[4]{ 'R', 'S', 'L', 'R' };

    boolean_T b_bool;
    b_bool = false;
    if (4 == b_size[1]) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 4) {
                if (c[kstr] != b_data[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

static void FlightMissionMode_emxTrim_cell_wrap_1_1x28
    (cell_wrap_1_FlightMissionMode_i_T data[28], int32_T fromIndex, int32_T
     toIndex)
{
    for (int32_T i{fromIndex}; i <= static_cast<int32_T>(toIndex - 1); i++) {
        FlightMissionMode_emxFreeStruct_cell_wrap_1(&data[i]);
    }
}

static void FlightMissionMode_emxExpand_cell_wrap_1_1x28
    (cell_wrap_1_FlightMissionMode_i_T data[28], int32_T fromIndex, int32_T
     toIndex)
{
    for (int32_T i{fromIndex}; i <= static_cast<int32_T>(toIndex - 1); i++) {
        FlightMissionMode_emxInitStruct_cell_wrap_1(&data[i]);
    }
}

static void FlightMissionMode_emxEnsureCapacity_cell_wrap_11
    (cell_wrap_1_FlightMissionMode_i_T data[28], const int32_T size[2], int32_T
     oldNumel)
{
    int32_T newNumel;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = static_cast<int32_T>(size[0] * size[1]);
    if (oldNumel > newNumel) {
        FlightMissionMode_emxTrim_cell_wrap_1_1x28(data, newNumel, oldNumel);
    } else if (oldNumel < newNumel) {
        FlightMissionMode_emxExpand_cell_wrap_1_1x28(data, oldNumel, newNumel);
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uniquePathTypes(const
    cell_wrap_1_FlightMissionMode_i_T disabledTypes[27],
    cell_wrap_1_FlightMissionMode_i_T uniqueDisabledTypes_data[], int32_T
    uniqueDisabledTypes_size[2])
{
    static const char_T j[5]{ 'H', 'l', 'L', 'S', 'L' };

    static const char_T k[5]{ 'H', 'l', 'L', 'S', 'R' };

    static const char_T l[5]{ 'H', 'r', 'R', 'S', 'L' };

    static const char_T m[5]{ 'H', 'r', 'R', 'S', 'R' };

    static const char_T o[5]{ 'H', 'r', 'R', 'L', 'R' };

    static const char_T p[5]{ 'H', 'l', 'L', 'R', 'L' };

    static const char_T q[5]{ 'L', 'S', 'L', 'H', 'l' };

    static const char_T r[5]{ 'L', 'S', 'R', 'H', 'r' };

    static const char_T s[5]{ 'R', 'S', 'L', 'H', 'l' };

    static const char_T t[5]{ 'R', 'S', 'R', 'H', 'r' };

    static const char_T u[5]{ 'R', 'L', 'R', 'H', 'r' };

    static const char_T v[5]{ 'L', 'R', 'L', 'H', 'l' };

    cell_wrap_1_FlightMissionMode_i_T dt[27];
    int32_T tmp_size[2];
    int32_T count;
    int32_T i;
    int32_T loop_ub;
    char_T tmp_data[5];
    boolean_T id[28];
    boolean_T exitg1;
    FlightMissionMode_emxInitMatrix_cell_wrap_11(dt);
    FlightMissionMode_repmat(dt);
    for (count = 0; count < 27; count++) {
        FlightMissionMode_validatestring(disabledTypes[count].f1, tmp_data,
            tmp_size);
        i = static_cast<int32_T>(dt[count].f1->size[0] * dt[count].f1->size[1]);
        dt[count].f1->size[0] = 1;
        dt[count].f1->size[1] = tmp_size[1];
        FlightMissionMode_emxEnsureCapacity_char_T(dt[count].f1, i);
        loop_ub = tmp_size[1];
        for (i = 0; i <= static_cast<int32_T>(loop_ub - 1); i++) {
            dt[count].f1->data[i] = tmp_data[i];
        }
    }

    for (i = 0; i < 28; i++) {
        id[i] = false;
    }

    count = 0;
    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_ga(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[0] = true;
            count = 1;
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_hl(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[1] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_am(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[2] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_jj(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[3] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_f(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[4] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_l(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[5] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_gq(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[6] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_dt(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[7] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_l4(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[8] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_fe(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[9] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_ah(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[10] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_kj(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[11] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_oq(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[12] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_co(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[13] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_fx(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[14] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_jo(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[15] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_h4(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[16] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_on(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[17] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_ix(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[18] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_j1(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[19] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_ho(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[20] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_ii(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[21] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_n(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[22] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_o4(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[23] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_nb(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[24] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_jw(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[25] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_o4o(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[26] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    loop_ub = 0;
    exitg1 = false;
    while ((!exitg1) && (loop_ub < 27)) {
        if (FlightMissionMode_strcmp_kl(dt[loop_ub].f1->data, dt[loop_ub]
                .f1->size)) {
            id[27] = true;
            count = static_cast<int32_T>(count + 1);
            exitg1 = true;
        } else {
            loop_ub = static_cast<int32_T>(loop_ub + 1);
        }
    }

    FlightMissionMode_emxFreeMatrix_cell_wrap_11(dt);
    i = static_cast<int32_T>(uniqueDisabledTypes_size[0] *
        uniqueDisabledTypes_size[1]);
    uniqueDisabledTypes_size[0] = 1;
    uniqueDisabledTypes_size[1] = count;
    FlightMissionMode_emxEnsureCapacity_cell_wrap_11(uniqueDisabledTypes_data,
        uniqueDisabledTypes_size, i);
    count = 0;
    if (id[0]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[0].f1->size[0] *
            uniqueDisabledTypes_data[0].f1->size[1]);
        uniqueDisabledTypes_data[0].f1->size[0] = 1;
        uniqueDisabledTypes_data[0].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T(uniqueDisabledTypes_data[0].
            f1, i);
        uniqueDisabledTypes_data[0].f1->data[0] = 'L';
        uniqueDisabledTypes_data[0].f1->data[1] = 'S';
        uniqueDisabledTypes_data[0].f1->data[2] = 'L';
        uniqueDisabledTypes_data[0].f1->data[3] = 'N';
        count = 1;
    }

    if (id[1]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'L';
        uniqueDisabledTypes_data[count].f1->data[1] = 'S';
        uniqueDisabledTypes_data[count].f1->data[2] = 'R';
        uniqueDisabledTypes_data[count].f1->data[3] = 'N';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[2]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'R';
        uniqueDisabledTypes_data[count].f1->data[1] = 'S';
        uniqueDisabledTypes_data[count].f1->data[2] = 'L';
        uniqueDisabledTypes_data[count].f1->data[3] = 'N';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[3]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'R';
        uniqueDisabledTypes_data[count].f1->data[1] = 'S';
        uniqueDisabledTypes_data[count].f1->data[2] = 'R';
        uniqueDisabledTypes_data[count].f1->data[3] = 'N';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[4]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'R';
        uniqueDisabledTypes_data[count].f1->data[1] = 'L';
        uniqueDisabledTypes_data[count].f1->data[2] = 'R';
        uniqueDisabledTypes_data[count].f1->data[3] = 'N';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[5]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'L';
        uniqueDisabledTypes_data[count].f1->data[1] = 'R';
        uniqueDisabledTypes_data[count].f1->data[2] = 'L';
        uniqueDisabledTypes_data[count].f1->data[3] = 'N';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[6]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = j[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[7]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = k[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[8]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = l[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[9]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = m[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[10]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = o[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[11]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = p[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[12]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = q[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[13]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = r[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[14]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = s[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[15]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = t[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[16]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = u[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[17]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 5;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        for (i = 0; i < 5; i++) {
            uniqueDisabledTypes_data[count].f1->data[i] = v[i];
        }

        count = static_cast<int32_T>(count + 1);
    }

    if (id[18]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'L';
        uniqueDisabledTypes_data[count].f1->data[1] = 'R';
        uniqueDisabledTypes_data[count].f1->data[2] = 'S';
        uniqueDisabledTypes_data[count].f1->data[3] = 'L';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[19]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'L';
        uniqueDisabledTypes_data[count].f1->data[1] = 'R';
        uniqueDisabledTypes_data[count].f1->data[2] = 'S';
        uniqueDisabledTypes_data[count].f1->data[3] = 'R';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[20]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'L';
        uniqueDisabledTypes_data[count].f1->data[1] = 'R';
        uniqueDisabledTypes_data[count].f1->data[2] = 'L';
        uniqueDisabledTypes_data[count].f1->data[3] = 'R';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[21]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'R';
        uniqueDisabledTypes_data[count].f1->data[1] = 'L';
        uniqueDisabledTypes_data[count].f1->data[2] = 'S';
        uniqueDisabledTypes_data[count].f1->data[3] = 'R';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[22]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'R';
        uniqueDisabledTypes_data[count].f1->data[1] = 'L';
        uniqueDisabledTypes_data[count].f1->data[2] = 'R';
        uniqueDisabledTypes_data[count].f1->data[3] = 'L';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[23]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'R';
        uniqueDisabledTypes_data[count].f1->data[1] = 'L';
        uniqueDisabledTypes_data[count].f1->data[2] = 'S';
        uniqueDisabledTypes_data[count].f1->data[3] = 'L';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[24]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'L';
        uniqueDisabledTypes_data[count].f1->data[1] = 'S';
        uniqueDisabledTypes_data[count].f1->data[2] = 'R';
        uniqueDisabledTypes_data[count].f1->data[3] = 'L';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[25]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'R';
        uniqueDisabledTypes_data[count].f1->data[1] = 'S';
        uniqueDisabledTypes_data[count].f1->data[2] = 'R';
        uniqueDisabledTypes_data[count].f1->data[3] = 'L';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[26]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'L';
        uniqueDisabledTypes_data[count].f1->data[1] = 'S';
        uniqueDisabledTypes_data[count].f1->data[2] = 'L';
        uniqueDisabledTypes_data[count].f1->data[3] = 'R';
        count = static_cast<int32_T>(count + 1);
    }

    if (id[27]) {
        i = static_cast<int32_T>(uniqueDisabledTypes_data[count].f1->size[0] *
            uniqueDisabledTypes_data[count].f1->size[1]);
        uniqueDisabledTypes_data[count].f1->size[0] = 1;
        uniqueDisabledTypes_data[count].f1->size[1] = 4;
        FlightMissionMode_emxEnsureCapacity_char_T
            (uniqueDisabledTypes_data[count].f1, i);
        uniqueDisabledTypes_data[count].f1->data[0] = 'R';
        uniqueDisabledTypes_data[count].f1->data[1] = 'S';
        uniqueDisabledTypes_data[count].f1->data[2] = 'L';
        uniqueDisabledTypes_data[count].f1->data[3] = 'R';
    }
}

static void FlightMissionMode_emxTrim_cell_wrap_1
    (emxArray_cell_wrap_1_FlightMissionMode_T *emxArray, int32_T fromIndex,
     int32_T toIndex)
{
    for (int32_T i{fromIndex}; i <= static_cast<int32_T>(toIndex - 1); i++) {
        FlightMissionMode_emxFreeStruct_cell_wrap_1(&emxArray->data[i]);
    }
}

static void FlightMissionMode_emxExpand_cell_wrap_1
    (emxArray_cell_wrap_1_FlightMissionMode_T *emxArray, int32_T fromIndex,
     int32_T toIndex)
{
    for (int32_T i{fromIndex}; i <= static_cast<int32_T>(toIndex - 1); i++) {
        FlightMissionMode_emxInitStruct_cell_wrap_1(&emxArray->data[i]);
    }
}

static void FlightMissionMode_emxEnsureCapacity_cell_wrap_1
    (emxArray_cell_wrap_1_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof
                              (cell_wrap_1_FlightMissionMode_i_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (cell_wrap_1_FlightMissionMode_i_T)
                         * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (cell_wrap_1_FlightMissionMode_i_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }

    if (oldNumel > newNumel) {
        FlightMissionMode_emxTrim_cell_wrap_1(emxArray, newNumel, oldNumel);
    } else if (oldNumel < newNumel) {
        FlightMissionMode_emxExpand_cell_wrap_1(emxArray, oldNumel, newNumel);
    }
}

static void FlightMissionMode_emxFree_cell_wrap_1_1x28
    (emxArray_cell_wrap_1_1x28_FlightMissionMode_T *pEmxArray)
{
    int32_T i;
    int32_T numEl;
    numEl = 1;
    for (i = 0; i < 2; i++) {
        numEl = static_cast<int32_T>(numEl * pEmxArray->size[i]);
    }

    for (i = 0; i <= static_cast<int32_T>(numEl - 1); i++) {
        FlightMissionMode_emxFreeStruct_cell_wrap_1(&pEmxArray->data[i]);
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static uavDubinsConnection_1_FlightMissionMode_T
    *FlightMissionMode_uavDubinsConnection_uavDubinsConnection_f
    (uavDubinsConnection_1_FlightMissionMode_T *b_this, real_T varargin_2,
     real_T varargin_4, const real_T varargin_6[2], const
     cell_wrap_1_FlightMissionMode_i_T varargin_8[27])
{
    static const char_T b[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
        'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',
        'Z', '[', '\\', ']', '^', '_', '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
        'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', '\x7f' };

    cell_wrap_1_FlightMissionMode_i_T disabledTypes[27];
    emxArray_cell_wrap_1_1x28_FlightMissionMode_T tmp;
    emxArray_char_T_FlightMissionMode_T *b_x;
    uavDubinsConnection_1_FlightMissionMode_T *c_this;
    int32_T k;
    int32_T loop_ub;
    FlightMissionMode_emxInitMatrix_cell_wrap_11(disabledTypes);
    c_this = b_this;
    b_this->AirSpeed = 10.0;
    for (k = 0; k < 27; k++) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledTypes[k],
            &varargin_8[k]);
    }

    FlightMissionMode_emxInit_char_T(&b_x, 2);
    for (int32_T n{0}; n < 27; n++) {
        k = static_cast<int32_T>(b_x->size[0] * b_x->size[1]);
        b_x->size[0] = 1;
        b_x->size[1] = disabledTypes[n].f1->size[1];
        FlightMissionMode_emxEnsureCapacity_char_T(b_x, k);
        loop_ub = static_cast<int32_T>(disabledTypes[n].f1->size[1] - 1);
        for (k = 0; k <= loop_ub; k++) {
            b_x->data[k] = disabledTypes[n].f1->data[k];
        }

        for (k = 0; k <= static_cast<int32_T>(b_x->size[1] - 1); k =
                static_cast<int32_T>(k + 1)) {
            disabledTypes[n].f1->data[k] = b[static_cast<int32_T>(static_cast<
                int32_T>(static_cast<uint8_T>(b_x->data[k])) & 127)];
        }
    }

    FlightMissionMode_emxFree_char_T(&b_x);
    FlightMissionMode_emxInit_cell_wrap_1_1x28(&tmp);
    FlightMissionMode_uniquePathTypes(disabledTypes, tmp.data, tmp.size);
    k = static_cast<int32_T>(b_this->DisabledPathTypes->size[0] *
        b_this->DisabledPathTypes->size[1]);
    b_this->DisabledPathTypes->size[0] = 1;
    b_this->DisabledPathTypes->size[1] = tmp.size[1];
    FlightMissionMode_emxEnsureCapacity_cell_wrap_1(b_this->DisabledPathTypes, k);
    loop_ub = tmp.size[1];
    FlightMissionMode_emxFreeMatrix_cell_wrap_11(disabledTypes);
    for (k = 0; k <= static_cast<int32_T>(loop_ub - 1); k++) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&b_this->
            DisabledPathTypes->data[k], &tmp.data[k]);
    }

    real_T c_x;
    FlightMissionMode_emxFree_cell_wrap_1_1x28(&tmp);
    b_this->FlightPathAngleLimit[0] = varargin_6[0];
    b_this->FlightPathAngleLimit[1] = varargin_6[1];
    b_this->MaxRollAngle = varargin_4;
    c_x = b_this->MaxRollAngle;
    b_this->MinTurningRadius = b_this->AirSpeed * b_this->AirSpeed / (9.8 * std::
        tan(c_x));
    b_this->AirSpeed = varargin_2;
    c_x = b_this->MaxRollAngle;
    b_this->MinTurningRadius = b_this->AirSpeed * b_this->AirSpeed / (9.8 * std::
        tan(c_x));
    c_x = b_this->MaxRollAngle;
    b_this->MinTurningRadius = b_this->AirSpeed * b_this->AirSpeed / (9.8 * std::
        tan(c_x));
    return c_this;
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_h(const
    uavDubinsConnection_FlightMissionMode_a_T *varargin_1, const real_T
    varargin_2_data[], const int32_T varargin_2_size[2], const real_T
    varargin_3_data[], const int32_T varargin_3_size[2], const
    cell_wrap_1_FlightMissionMode_i_T varargin_4[4],
    uavDubinsPathSegment_FlightMissionMode_g_T *b_this)
{
    static const char_T ad[5]{ 'R', 'S', 'L', 'H', 'l' };

    static const char_T bd[5]{ 'R', 'S', 'R', 'H', 'r' };

    static const char_T cd[5]{ 'R', 'L', 'R', 'H', 'r' };

    static const char_T dd[5]{ 'L', 'R', 'L', 'H', 'l' };

    static const char_T rc[5]{ 'H', 'l', 'L', 'S', 'L' };

    static const char_T sc[5]{ 'H', 'l', 'L', 'S', 'R' };

    static const char_T tc[5]{ 'H', 'r', 'R', 'S', 'L' };

    static const char_T uc[5]{ 'H', 'r', 'R', 'S', 'R' };

    static const char_T vc[5]{ 'H', 'r', 'R', 'L', 'R' };

    static const char_T wc[5]{ 'H', 'l', 'L', 'R', 'L' };

    static const char_T xc[5]{ 'L', 'S', 'L', 'H', 'l' };

    static const char_T yc[5]{ 'L', 'S', 'R', 'H', 'r' };

    cell_21_FlightMissionMode_T b_0[28];
    cell_21_FlightMissionMode_T b_1[28];
    cell_21_FlightMissionMode_T b_2[28];
    cell_21_FlightMissionMode_T b_3[28];
    cell_21_FlightMissionMode_T ab;
    cell_21_FlightMissionMode_T b;
    cell_21_FlightMissionMode_T bb;
    cell_21_FlightMissionMode_T c;
    cell_21_FlightMissionMode_T cb;
    cell_21_FlightMissionMode_T d;
    cell_21_FlightMissionMode_T db;
    cell_21_FlightMissionMode_T e;
    cell_21_FlightMissionMode_T eb;
    cell_21_FlightMissionMode_T f;
    cell_21_FlightMissionMode_T g;
    cell_21_FlightMissionMode_T h;
    cell_21_FlightMissionMode_T j;
    cell_21_FlightMissionMode_T k;
    cell_21_FlightMissionMode_T l;
    cell_21_FlightMissionMode_T m;
    cell_21_FlightMissionMode_T n;
    cell_21_FlightMissionMode_T o;
    cell_21_FlightMissionMode_T p;
    cell_21_FlightMissionMode_T q;
    cell_21_FlightMissionMode_T r;
    cell_21_FlightMissionMode_T s;
    cell_21_FlightMissionMode_T t;
    cell_21_FlightMissionMode_T u;
    cell_21_FlightMissionMode_T v;
    cell_21_FlightMissionMode_T w;
    cell_21_FlightMissionMode_T x;
    cell_21_FlightMissionMode_T y;
    cell_wrap_1_FlightMissionMode_i_T allPath[28];
    cell_wrap_1_FlightMissionMode_i_T disabledPath[27];
    cell_wrap_1_FlightMissionMode_i_T A_0[4];
    cell_wrap_1_FlightMissionMode_i_T A_1[4];
    cell_wrap_1_FlightMissionMode_i_T ac;
    cell_wrap_1_FlightMissionMode_i_T bc;
    cell_wrap_1_FlightMissionMode_i_T cc;
    cell_wrap_1_FlightMissionMode_i_T dc;
    cell_wrap_1_FlightMissionMode_i_T ec;
    cell_wrap_1_FlightMissionMode_i_T fb;
    cell_wrap_1_FlightMissionMode_i_T fc;
    cell_wrap_1_FlightMissionMode_i_T gb;
    cell_wrap_1_FlightMissionMode_i_T gc;
    cell_wrap_1_FlightMissionMode_i_T hb;
    cell_wrap_1_FlightMissionMode_i_T hc;
    cell_wrap_1_FlightMissionMode_i_T ib;
    cell_wrap_1_FlightMissionMode_i_T jb;
    cell_wrap_1_FlightMissionMode_i_T kb;
    cell_wrap_1_FlightMissionMode_i_T lb;
    cell_wrap_1_FlightMissionMode_i_T mb;
    cell_wrap_1_FlightMissionMode_i_T nb;
    cell_wrap_1_FlightMissionMode_i_T ob;
    cell_wrap_1_FlightMissionMode_i_T pb;
    cell_wrap_1_FlightMissionMode_i_T qb;
    cell_wrap_1_FlightMissionMode_i_T rb;
    cell_wrap_1_FlightMissionMode_i_T sb;
    cell_wrap_1_FlightMissionMode_i_T tb;
    cell_wrap_1_FlightMissionMode_i_T ub;
    cell_wrap_1_FlightMissionMode_i_T vb;
    cell_wrap_1_FlightMissionMode_i_T wb;
    cell_wrap_1_FlightMissionMode_i_T xb;
    cell_wrap_1_FlightMissionMode_i_T yb;
    uavDubinsConnection_1_FlightMissionMode_T lobj_0[2];
    uavDubinsConnection_1_FlightMissionMode_T *tempObj;
    uavDubinsPathSegment_1_FlightMissionMode_T A;
    int32_T i;
    int32_T ic;
    int8_T b_I_data[28];
    boolean_T tmp[4];
    boolean_T tmp_0[4];
    boolean_T exitg1;
    FlightMissionMode_emxInitMatrix_uavDubinsConnecti(lobj_0);
    b_this->StartPose.size[0] = 1;
    b_this->StartPose.size[1] = 0;
    b_this->GoalPose.size[0] = 1;
    b_this->GoalPose.size[1] = 0;
    b_this->MotionTypes[0].f1->size[0] = 1;
    b_this->MotionTypes[0].f1->size[1] = 0;
    b_this->MotionTypes[1].f1->size[0] = 1;
    b_this->MotionTypes[1].f1->size[1] = 0;
    b_this->MotionTypes[2].f1->size[0] = 1;
    b_this->MotionTypes[2].f1->size[1] = 0;
    b_this->MotionTypes[3].f1->size[0] = 1;
    b_this->MotionTypes[3].f1->size[1] = 0;
    FlightMissionMode_uavDubinsPathSegment_set_StartPose(b_this, varargin_2_data,
        varargin_2_size);
    FlightMissionMode_uavDubinsPathSegment_set_GoalPose(b_this, varargin_3_data,
        varargin_3_size);
    tempObj = FlightMissionMode_uavDubinsConnection_uavDubinsConnection(&lobj_0
        [0], varargin_1->AirSpeed, varargin_1->MaxRollAngle,
        varargin_1->FlightPathAngleLimit);
    FlightMissionMode_uavDubinsPathSegment_set_MotionTypes(b_this, varargin_4);
    ic = 0;
    FlightMissionMode_emxInitMatrix_cell_wrap_11(disabledPath);
    FlightMissionMode_emxInitMatrix_cell_wrap_12(allPath);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ib);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&jb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&kb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&lb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&mb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&nb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ob);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&pb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&qb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&rb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&sb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&tb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ub);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&vb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&wb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&xb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&yb);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ac);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&bc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&cc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&dc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&ec);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&fc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&gc);
    FlightMissionMode_emxInitStruct_cell_wrap_1(&hc);
    exitg1 = false;
    while ((!exitg1) && (ic < 28)) {
        b.f1.size[0] = 1;
        b.f1.size[1] = 1;
        b.f1.data[0] = 'L';
        b.f2 = 'S';
        b.f3 = 'L';
        b.f4.size[0] = 1;
        b.f4.size[1] = 1;
        b.f4.data[0] = 'N';
        c.f1.size[0] = 1;
        c.f1.size[1] = 1;
        c.f1.data[0] = 'L';
        c.f2 = 'S';
        c.f3 = 'R';
        c.f4.size[0] = 1;
        c.f4.size[1] = 1;
        c.f4.data[0] = 'N';
        d.f1.size[0] = 1;
        d.f1.size[1] = 1;
        d.f1.data[0] = 'R';
        d.f2 = 'S';
        d.f3 = 'L';
        d.f4.size[0] = 1;
        d.f4.size[1] = 1;
        d.f4.data[0] = 'N';
        e.f1.size[0] = 1;
        e.f1.size[1] = 1;
        e.f1.data[0] = 'R';
        e.f2 = 'S';
        e.f3 = 'R';
        e.f4.size[0] = 1;
        e.f4.size[1] = 1;
        e.f4.data[0] = 'N';
        f.f1.size[0] = 1;
        f.f1.size[1] = 1;
        f.f1.data[0] = 'R';
        f.f2 = 'L';
        f.f3 = 'R';
        f.f4.size[0] = 1;
        f.f4.size[1] = 1;
        f.f4.data[0] = 'N';
        g.f1.size[0] = 1;
        g.f1.size[1] = 1;
        g.f1.data[0] = 'L';
        g.f2 = 'R';
        g.f3 = 'L';
        g.f4.size[0] = 1;
        g.f4.size[1] = 1;
        g.f4.data[0] = 'N';
        h.f1.size[0] = 1;
        h.f1.size[1] = 2;
        h.f2 = 'L';
        h.f3 = 'S';
        h.f4.size[0] = 1;
        h.f4.size[1] = 1;
        h.f4.data[0] = 'L';
        j.f1.size[0] = 1;
        j.f1.size[1] = 2;
        j.f2 = 'L';
        j.f3 = 'S';
        j.f4.size[0] = 1;
        j.f4.size[1] = 1;
        j.f4.data[0] = 'R';
        k.f1.size[0] = 1;
        k.f1.size[1] = 2;
        k.f2 = 'R';
        k.f3 = 'S';
        k.f4.size[0] = 1;
        k.f4.size[1] = 1;
        k.f4.data[0] = 'L';
        l.f1.size[0] = 1;
        l.f1.size[1] = 2;
        l.f2 = 'R';
        l.f3 = 'S';
        l.f4.size[0] = 1;
        l.f4.size[1] = 1;
        l.f4.data[0] = 'R';
        m.f1.size[0] = 1;
        m.f1.size[1] = 2;
        m.f2 = 'R';
        m.f3 = 'L';
        m.f4.size[0] = 1;
        m.f4.size[1] = 1;
        m.f4.data[0] = 'R';
        n.f1.size[0] = 1;
        n.f1.size[1] = 2;
        n.f2 = 'L';
        n.f3 = 'R';
        n.f4.size[0] = 1;
        n.f4.size[1] = 1;
        n.f4.data[0] = 'L';
        o.f1.size[0] = 1;
        o.f1.size[1] = 1;
        o.f1.data[0] = 'L';
        o.f2 = 'S';
        o.f3 = 'L';
        o.f4.size[0] = 1;
        o.f4.size[1] = 2;
        p.f1.size[0] = 1;
        p.f1.size[1] = 1;
        p.f1.data[0] = 'L';
        p.f2 = 'S';
        p.f3 = 'R';
        p.f4.size[0] = 1;
        p.f4.size[1] = 2;
        q.f1.size[0] = 1;
        q.f1.size[1] = 1;
        q.f1.data[0] = 'R';
        q.f2 = 'S';
        q.f3 = 'L';
        q.f4.size[0] = 1;
        q.f4.size[1] = 2;
        r.f1.size[0] = 1;
        r.f1.size[1] = 1;
        r.f1.data[0] = 'R';
        r.f2 = 'S';
        r.f3 = 'R';
        r.f4.size[0] = 1;
        r.f4.size[1] = 2;
        s.f1.size[0] = 1;
        s.f1.size[1] = 1;
        s.f1.data[0] = 'R';
        s.f2 = 'L';
        s.f3 = 'R';
        s.f4.size[0] = 1;
        s.f4.size[1] = 2;
        t.f1.size[0] = 1;
        t.f1.size[1] = 1;
        t.f1.data[0] = 'L';
        t.f2 = 'R';
        t.f3 = 'L';
        t.f4.size[0] = 1;
        t.f4.size[1] = 2;
        h.f1.data[0] = 'H';
        j.f1.data[0] = 'H';
        k.f1.data[0] = 'H';
        l.f1.data[0] = 'H';
        m.f1.data[0] = 'H';
        n.f1.data[0] = 'H';
        o.f4.data[0] = 'H';
        p.f4.data[0] = 'H';
        q.f4.data[0] = 'H';
        r.f4.data[0] = 'H';
        s.f4.data[0] = 'H';
        t.f4.data[0] = 'H';
        h.f1.data[1] = 'l';
        j.f1.data[1] = 'l';
        k.f1.data[1] = 'r';
        l.f1.data[1] = 'r';
        m.f1.data[1] = 'r';
        n.f1.data[1] = 'l';
        o.f4.data[1] = 'l';
        p.f4.data[1] = 'r';
        q.f4.data[1] = 'l';
        r.f4.data[1] = 'r';
        s.f4.data[1] = 'r';
        t.f4.data[1] = 'l';
        u.f1.size[0] = 1;
        u.f1.size[1] = 1;
        u.f1.data[0] = 'L';
        u.f2 = 'R';
        u.f3 = 'S';
        u.f4.size[0] = 1;
        u.f4.size[1] = 1;
        u.f4.data[0] = 'L';
        v.f1.size[0] = 1;
        v.f1.size[1] = 1;
        v.f1.data[0] = 'L';
        v.f2 = 'R';
        v.f3 = 'S';
        v.f4.size[0] = 1;
        v.f4.size[1] = 1;
        v.f4.data[0] = 'R';
        w.f1.size[0] = 1;
        w.f1.size[1] = 1;
        w.f1.data[0] = 'L';
        w.f2 = 'R';
        w.f3 = 'L';
        w.f4.size[0] = 1;
        w.f4.size[1] = 1;
        w.f4.data[0] = 'R';
        x.f1.size[0] = 1;
        x.f1.size[1] = 1;
        x.f1.data[0] = 'R';
        x.f2 = 'L';
        x.f3 = 'S';
        x.f4.size[0] = 1;
        x.f4.size[1] = 1;
        x.f4.data[0] = 'R';
        y.f1.size[0] = 1;
        y.f1.size[1] = 1;
        y.f1.data[0] = 'R';
        y.f2 = 'L';
        y.f3 = 'R';
        y.f4.size[0] = 1;
        y.f4.size[1] = 1;
        y.f4.data[0] = 'L';
        ab.f1.size[0] = 1;
        ab.f1.size[1] = 1;
        ab.f1.data[0] = 'R';
        ab.f2 = 'L';
        ab.f3 = 'S';
        ab.f4.size[0] = 1;
        ab.f4.size[1] = 1;
        ab.f4.data[0] = 'L';
        bb.f1.size[0] = 1;
        bb.f1.size[1] = 1;
        bb.f1.data[0] = 'L';
        bb.f2 = 'S';
        bb.f3 = 'R';
        bb.f4.size[0] = 1;
        bb.f4.size[1] = 1;
        bb.f4.data[0] = 'L';
        cb.f1.size[0] = 1;
        cb.f1.size[1] = 1;
        cb.f1.data[0] = 'R';
        cb.f2 = 'S';
        cb.f3 = 'R';
        cb.f4.size[0] = 1;
        cb.f4.size[1] = 1;
        cb.f4.data[0] = 'L';
        db.f1.size[0] = 1;
        db.f1.size[1] = 1;
        db.f1.data[0] = 'L';
        db.f2 = 'S';
        db.f3 = 'L';
        db.f4.size[0] = 1;
        db.f4.size[1] = 1;
        db.f4.data[0] = 'R';
        eb.f1.size[0] = 1;
        eb.f1.size[1] = 1;
        eb.f1.data[0] = 'R';
        eb.f2 = 'S';
        eb.f3 = 'L';
        eb.f4.size[0] = 1;
        eb.f4.size[1] = 1;
        eb.f4.data[0] = 'R';
        b_0[0] = b;
        b_0[1] = c;
        b_0[2] = d;
        b_0[3] = e;
        b_0[4] = f;
        b_0[5] = g;
        b_0[6] = h;
        b_0[7] = j;
        b_0[8] = k;
        b_0[9] = l;
        b_0[10] = m;
        b_0[11] = n;
        b_0[12] = o;
        b_0[13] = p;
        b_0[14] = q;
        b_0[15] = r;
        b_0[16] = s;
        b_0[17] = t;
        b_0[18] = u;
        b_0[19] = v;
        b_0[20] = w;
        b_0[21] = x;
        b_0[22] = y;
        b_0[23] = ab;
        b_0[24] = bb;
        b_0[25] = cb;
        b_0[26] = db;
        b_0[27] = eb;
        b_1[0] = b;
        b_1[1] = c;
        b_1[2] = d;
        b_1[3] = e;
        b_1[4] = f;
        b_1[5] = g;
        b_1[6] = h;
        b_1[7] = j;
        b_1[8] = k;
        b_1[9] = l;
        b_1[10] = m;
        b_1[11] = n;
        b_1[12] = o;
        b_1[13] = p;
        b_1[14] = q;
        b_1[15] = r;
        b_1[16] = s;
        b_1[17] = t;
        b_1[18] = u;
        b_1[19] = v;
        b_1[20] = w;
        b_1[21] = x;
        b_1[22] = y;
        b_1[23] = ab;
        b_1[24] = bb;
        b_1[25] = cb;
        b_1[26] = db;
        b_1[27] = eb;
        b_2[0] = b;
        b_2[1] = c;
        b_2[2] = d;
        b_2[3] = e;
        b_2[4] = f;
        b_2[5] = g;
        b_2[6] = h;
        b_2[7] = j;
        b_2[8] = k;
        b_2[9] = l;
        b_2[10] = m;
        b_2[11] = n;
        b_2[12] = o;
        b_2[13] = p;
        b_2[14] = q;
        b_2[15] = r;
        b_2[16] = s;
        b_2[17] = t;
        b_2[18] = u;
        b_2[19] = v;
        b_2[20] = w;
        b_2[21] = x;
        b_2[22] = y;
        b_2[23] = ab;
        b_2[24] = bb;
        b_2[25] = cb;
        b_2[26] = db;
        b_2[27] = eb;
        b_3[0] = b;
        b_3[1] = c;
        b_3[2] = d;
        b_3[3] = e;
        b_3[4] = f;
        b_3[5] = g;
        b_3[6] = h;
        b_3[7] = j;
        b_3[8] = k;
        b_3[9] = l;
        b_3[10] = m;
        b_3[11] = n;
        b_3[12] = o;
        b_3[13] = p;
        b_3[14] = q;
        b_3[15] = r;
        b_3[16] = s;
        b_3[17] = t;
        b_3[18] = u;
        b_3[19] = v;
        b_3[20] = w;
        b_3[21] = x;
        b_3[22] = y;
        b_3[23] = ab;
        b_3[24] = bb;
        b_3[25] = cb;
        b_3[26] = db;
        b_3[27] = eb;
        FlightMissionMode_strcmp_k(b_0[ic].f1.data, b_0[ic].f1.size, b_1[ic].f2,
            b_2[ic].f3, b_3[ic].f4.data, b_3[ic].f4.size, varargin_4, tmp);
        tmp_0[0] = static_cast<boolean_T>(static_cast<int32_T>
            (static_cast<int32_T>(tmp[0]) ^ 1));
        tmp_0[1] = static_cast<boolean_T>(static_cast<int32_T>
            (static_cast<int32_T>(tmp[1]) ^ 1));
        tmp_0[2] = static_cast<boolean_T>(static_cast<int32_T>
            (static_cast<int32_T>(tmp[2]) ^ 1));
        tmp_0[3] = static_cast<boolean_T>(static_cast<int32_T>
            (static_cast<int32_T>(tmp[3]) ^ 1));
        if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                (FlightMissionMode_any_i(tmp_0)) ^ 1))) {
            for (i = 0; i < 28; i++) {
                b_I_data[i] = static_cast<int8_T>(static_cast<int32_T>(i + 1));
            }

            while (static_cast<int32_T>(ic + 1) <= 27) {
                b_I_data[ic] = b_I_data[static_cast<int32_T>(ic + 1)];
                ic = static_cast<int32_T>(ic + 1);
            }

            i = static_cast<int32_T>(fb.f1->size[0] * fb.f1->size[1]);
            fb.f1->size[0] = 1;
            fb.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(fb.f1, i);
            i = static_cast<int32_T>(gb.f1->size[0] * gb.f1->size[1]);
            gb.f1->size[0] = 1;
            gb.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(gb.f1, i);
            i = static_cast<int32_T>(hb.f1->size[0] * hb.f1->size[1]);
            hb.f1->size[0] = 1;
            hb.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(hb.f1, i);
            i = static_cast<int32_T>(ib.f1->size[0] * ib.f1->size[1]);
            ib.f1->size[0] = 1;
            ib.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(ib.f1, i);
            i = static_cast<int32_T>(jb.f1->size[0] * jb.f1->size[1]);
            jb.f1->size[0] = 1;
            jb.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(jb.f1, i);
            i = static_cast<int32_T>(kb.f1->size[0] * kb.f1->size[1]);
            kb.f1->size[0] = 1;
            kb.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(kb.f1, i);
            fb.f1->data[0] = 'L';
            gb.f1->data[0] = 'L';
            hb.f1->data[0] = 'R';
            ib.f1->data[0] = 'R';
            jb.f1->data[0] = 'R';
            kb.f1->data[0] = 'L';
            fb.f1->data[1] = 'S';
            gb.f1->data[1] = 'S';
            hb.f1->data[1] = 'S';
            ib.f1->data[1] = 'S';
            jb.f1->data[1] = 'L';
            kb.f1->data[1] = 'R';
            fb.f1->data[2] = 'L';
            gb.f1->data[2] = 'R';
            hb.f1->data[2] = 'L';
            ib.f1->data[2] = 'R';
            jb.f1->data[2] = 'R';
            kb.f1->data[2] = 'L';
            fb.f1->data[3] = 'N';
            gb.f1->data[3] = 'N';
            hb.f1->data[3] = 'N';
            ib.f1->data[3] = 'N';
            jb.f1->data[3] = 'N';
            kb.f1->data[3] = 'N';
            i = static_cast<int32_T>(lb.f1->size[0] * lb.f1->size[1]);
            lb.f1->size[0] = 1;
            lb.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(lb.f1, i);
            i = static_cast<int32_T>(mb.f1->size[0] * mb.f1->size[1]);
            mb.f1->size[0] = 1;
            mb.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(mb.f1, i);
            i = static_cast<int32_T>(nb.f1->size[0] * nb.f1->size[1]);
            nb.f1->size[0] = 1;
            nb.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(nb.f1, i);
            i = static_cast<int32_T>(ob.f1->size[0] * ob.f1->size[1]);
            ob.f1->size[0] = 1;
            ob.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(ob.f1, i);
            i = static_cast<int32_T>(pb.f1->size[0] * pb.f1->size[1]);
            pb.f1->size[0] = 1;
            pb.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(pb.f1, i);
            i = static_cast<int32_T>(qb.f1->size[0] * qb.f1->size[1]);
            qb.f1->size[0] = 1;
            qb.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(qb.f1, i);
            i = static_cast<int32_T>(rb.f1->size[0] * rb.f1->size[1]);
            rb.f1->size[0] = 1;
            rb.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(rb.f1, i);
            i = static_cast<int32_T>(sb.f1->size[0] * sb.f1->size[1]);
            sb.f1->size[0] = 1;
            sb.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(sb.f1, i);
            i = static_cast<int32_T>(tb.f1->size[0] * tb.f1->size[1]);
            tb.f1->size[0] = 1;
            tb.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(tb.f1, i);
            i = static_cast<int32_T>(ub.f1->size[0] * ub.f1->size[1]);
            ub.f1->size[0] = 1;
            ub.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(ub.f1, i);
            i = static_cast<int32_T>(vb.f1->size[0] * vb.f1->size[1]);
            vb.f1->size[0] = 1;
            vb.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(vb.f1, i);
            i = static_cast<int32_T>(wb.f1->size[0] * wb.f1->size[1]);
            wb.f1->size[0] = 1;
            wb.f1->size[1] = 5;
            FlightMissionMode_emxEnsureCapacity_char_T(wb.f1, i);
            for (i = 0; i < 5; i++) {
                lb.f1->data[i] = rc[i];
                mb.f1->data[i] = sc[i];
                nb.f1->data[i] = tc[i];
                ob.f1->data[i] = uc[i];
                pb.f1->data[i] = vc[i];
                qb.f1->data[i] = wc[i];
                rb.f1->data[i] = xc[i];
                sb.f1->data[i] = yc[i];
                tb.f1->data[i] = ad[i];
                ub.f1->data[i] = bd[i];
                vb.f1->data[i] = cd[i];
                wb.f1->data[i] = dd[i];
            }

            i = static_cast<int32_T>(xb.f1->size[0] * xb.f1->size[1]);
            xb.f1->size[0] = 1;
            xb.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(xb.f1, i);
            i = static_cast<int32_T>(yb.f1->size[0] * yb.f1->size[1]);
            yb.f1->size[0] = 1;
            yb.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(yb.f1, i);
            i = static_cast<int32_T>(ac.f1->size[0] * ac.f1->size[1]);
            ac.f1->size[0] = 1;
            ac.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(ac.f1, i);
            i = static_cast<int32_T>(bc.f1->size[0] * bc.f1->size[1]);
            bc.f1->size[0] = 1;
            bc.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(bc.f1, i);
            i = static_cast<int32_T>(cc.f1->size[0] * cc.f1->size[1]);
            cc.f1->size[0] = 1;
            cc.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(cc.f1, i);
            i = static_cast<int32_T>(dc.f1->size[0] * dc.f1->size[1]);
            dc.f1->size[0] = 1;
            dc.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(dc.f1, i);
            i = static_cast<int32_T>(ec.f1->size[0] * ec.f1->size[1]);
            ec.f1->size[0] = 1;
            ec.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(ec.f1, i);
            i = static_cast<int32_T>(fc.f1->size[0] * fc.f1->size[1]);
            fc.f1->size[0] = 1;
            fc.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(fc.f1, i);
            i = static_cast<int32_T>(gc.f1->size[0] * gc.f1->size[1]);
            gc.f1->size[0] = 1;
            gc.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(gc.f1, i);
            i = static_cast<int32_T>(hc.f1->size[0] * hc.f1->size[1]);
            hc.f1->size[0] = 1;
            hc.f1->size[1] = 4;
            FlightMissionMode_emxEnsureCapacity_char_T(hc.f1, i);
            xb.f1->data[0] = 'L';
            yb.f1->data[0] = 'L';
            ac.f1->data[0] = 'L';
            bc.f1->data[0] = 'R';
            cc.f1->data[0] = 'R';
            dc.f1->data[0] = 'R';
            ec.f1->data[0] = 'L';
            fc.f1->data[0] = 'R';
            gc.f1->data[0] = 'L';
            hc.f1->data[0] = 'R';
            xb.f1->data[1] = 'R';
            yb.f1->data[1] = 'R';
            ac.f1->data[1] = 'R';
            bc.f1->data[1] = 'L';
            cc.f1->data[1] = 'L';
            dc.f1->data[1] = 'L';
            ec.f1->data[1] = 'S';
            fc.f1->data[1] = 'S';
            gc.f1->data[1] = 'S';
            hc.f1->data[1] = 'S';
            xb.f1->data[2] = 'S';
            yb.f1->data[2] = 'S';
            ac.f1->data[2] = 'L';
            bc.f1->data[2] = 'S';
            cc.f1->data[2] = 'R';
            dc.f1->data[2] = 'S';
            ec.f1->data[2] = 'R';
            fc.f1->data[2] = 'R';
            gc.f1->data[2] = 'L';
            hc.f1->data[2] = 'L';
            xb.f1->data[3] = 'L';
            yb.f1->data[3] = 'R';
            ac.f1->data[3] = 'R';
            bc.f1->data[3] = 'R';
            cc.f1->data[3] = 'L';
            dc.f1->data[3] = 'L';
            ec.f1->data[3] = 'L';
            fc.f1->data[3] = 'L';
            gc.f1->data[3] = 'R';
            hc.f1->data[3] = 'R';
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[0], &fb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[1], &gb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[2], &hb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[3], &ib);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[4], &jb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[5], &kb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[6], &lb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[7], &mb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[8], &nb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[9], &ob);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[10], &pb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[11], &qb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[12], &rb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[13], &sb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[14], &tb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[15], &ub);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[16], &vb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[17], &wb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[18], &xb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[19], &yb);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[20], &ac);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[21], &bc);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[22], &cc);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[23], &dc);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[24], &ec);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[25], &fc);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[26], &gc);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&allPath[27], &hc);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[0],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[0])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[1],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[1])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[2],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[2])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[3],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[3])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[4],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[4])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[5],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[5])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[6],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[6])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[7],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[7])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[8],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[8])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[9],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[9])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[10],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[10])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[11],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[11])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[12],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[12])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[13],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[13])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[14],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[14])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[15],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[15])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[16],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[16])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[17],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[17])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[18],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[18])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[19],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[19])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[20],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[20])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[21],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[21])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[22],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[22])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[23],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[23])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[24],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[24])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[25],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[25])
                - 1)]);
            FlightMissionMode_emxCopyStruct_cell_wrap_1(&disabledPath[26],
                &allPath[static_cast<int32_T>(static_cast<int32_T>(b_I_data[26])
                - 1)]);
            tempObj =
                FlightMissionMode_uavDubinsConnection_uavDubinsConnection_f
                (&lobj_0[1], varargin_1->AirSpeed, varargin_1->MaxRollAngle,
                 varargin_1->FlightPathAngleLimit, disabledPath);
            exitg1 = true;
        } else {
            ic = static_cast<int32_T>(ic + 1);
        }
    }

    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ec);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&dc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&cc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&bc);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ac);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&yb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&xb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&wb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&vb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ub);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&tb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&sb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&rb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&qb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&pb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ob);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&nb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&mb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&lb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&kb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&jb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&ib);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&hb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&gb);
    FlightMissionMode_emxFreeStruct_cell_wrap_1(&fb);
    FlightMissionMode_emxFreeMatrix_cell_wrap_12(allPath);
    FlightMissionMode_emxFreeMatrix_cell_wrap_11(disabledPath);
    FlightMissionMode_emxInitMatrix_uavDubinsPathSegm(&A);
    FlightMissionMode_emxInitMatrix_cell_wrap_1(A_0);
    FlightMissionMode_uavDubinsConnection_connect_l(tempObj,
        b_this->StartPose.data, b_this->GoalPose.data, &A);
    b_this->MinTurningRadius = A.MinTurningRadius;
    FlightMissionMode_uavDubinsPathSegment_set_StartPose_b(b_this, A.StartPose);
    FlightMissionMode_uavDubinsPathSegment_set_GoalPose_k(b_this, A.GoalPose);
    b_this->AirSpeed = A.AirSpeed;
    b_this->HelixRadius = A.HelixRadius;
    b_this->FlightPathAngle = A.FlightPathAngle;
    b_this->MotionLengths[0] = A.MotionLengths[0];
    b_this->MotionLengths[1] = A.MotionLengths[1];
    b_this->MotionLengths[2] = A.MotionLengths[2];
    b_this->MotionLengths[3] = A.MotionLengths[3];
    for (i = 0; i < 4; i++) {
        FlightMissionMode_emxCopyStruct_cell_wrap_1(&A_0[i], &A.MotionTypes[i]);
    }

    for (i = 0; i < 4; i++) {
        A_1[i] = A_0[i];
    }

    FlightMissionMode_uavDubinsPathSegment_set_MotionTypes_f(b_this, A_1);
    b_this->Length = A.Length;
    FlightMissionMode_emxFreeMatrix_cell_wrap_1(A_0);
    FlightMissionMode_emxFreeMatrix_uavDubinsPathSegm(&A);
    FlightMissionMode_emxFreeMatrix_uavDubinsConnecti(lobj_0);
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_eml_float_colon(real_T d, real_T b,
    emxArray_real_T_FlightMissionMode_T *y)
{
    real_T apnd;
    real_T cdiff;
    real_T ndbl;
    int32_T n;
    int32_T nm1d2;
    ndbl = std::floor(b / d + 0.5);
    apnd = ndbl * d;
    if (d > 0.0) {
        cdiff = apnd - b;
    } else {
        cdiff = b - apnd;
    }

    if (std::abs(cdiff) < 4.4408920985006262E-16 * std::fmax(0.0, std::abs(b)))
    {
        ndbl++;
        apnd = b;
    } else if (cdiff > 0.0) {
        apnd = (ndbl - 1.0) * d;
    } else {
        ndbl++;
    }

    if (ndbl >= 0.0) {
        n = static_cast<int32_T>(static_cast<int32_T>(ndbl) - 1);
    } else {
        n = -1;
    }

    nm1d2 = static_cast<int32_T>(y->size[0] * y->size[1]);
    y->size[0] = 1;
    y->size[1] = static_cast<int32_T>(n + 1);
    FlightMissionMode_emxEnsureCapacity_real_T_c(y, nm1d2);
    if (static_cast<int32_T>(n + 1) > 0) {
        y->data[0] = 0.0;
        if (static_cast<int32_T>(n + 1) > 1) {
            y->data[n] = apnd;
            nm1d2 = static_cast<int32_T>(n / 2);
            for (int32_T k{1}; static_cast<int32_T>(k - 1) <=
                    static_cast<int32_T>(nm1d2 - 2); k = static_cast<int32_T>(k
                    + 1)) {
                ndbl = static_cast<real_T>(k) * d;
                y->data[k] = ndbl;
                y->data[static_cast<int32_T>(n - k)] = apnd - ndbl;
            }

            if (static_cast<int32_T>(nm1d2 << 1) == n) {
                y->data[nm1d2] = apnd / 2.0;
            } else {
                ndbl = static_cast<real_T>(nm1d2) * d;
                y->data[nm1d2] = ndbl;
                y->data[static_cast<int32_T>(nm1d2 + 1)] = apnd - ndbl;
            }
        }
    }
}

static void FlightMissionMode_emxFree_uavDubinsPathSegment_10
    (emxArray_uavDubinsPathSegment_1_FlightMissionMode_T *pEmxArray)
{
    int32_T i;
    int32_T numEl;
    numEl = 1;
    for (i = 0; i < 1; i++) {
        numEl = static_cast<int32_T>(numEl * pEmxArray->size);
    }

    for (i = 0; i <= static_cast<int32_T>(numEl - 1); i++) {
        FlightMissionMode_emxFreeStruct_uavDubinsPathSegm(&pEmxArray->data[i]);
    }
}

static void FlightMissionMode_emxInit_int8_T(emxArray_int8_T_FlightMissionMode_T
    **pEmxArray, int32_T numDimensions)
{
    emxArray_int8_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_int8_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_int8_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (int8_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_int8_T
    (emxArray_int8_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(int8_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (int8_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (int8_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxInit_cell_wrap_38_100
    (emxArray_cell_wrap_38_100_FlightMissionMode_T *pEmxArray)
{
    for (int32_T i{0}; i < 1; i++) {
        pEmxArray->size = 0;
    }
}

static void FlightMissionMode_emxFreeStruct_cell_wrap_38
    (cell_wrap_38_FlightMissionMode_T *pStruct)
{
    FlightMissionMode_emxFree_real_T_n(&pStruct->f1);
}

static void FlightMissionMode_emxTrim_cell_wrap_38_100
    (cell_wrap_38_FlightMissionMode_T data[100], int32_T fromIndex, int32_T
     toIndex)
{
    for (int32_T i{fromIndex}; i <= static_cast<int32_T>(toIndex - 1); i++) {
        FlightMissionMode_emxFreeStruct_cell_wrap_38(&data[i]);
    }
}

static void FlightMissionMode_emxInitStruct_cell_wrap_38
    (cell_wrap_38_FlightMissionMode_T *pStruct)
{
    FlightMissionMode_emxInit_real_T_h(&pStruct->f1, 2);
}

static void FlightMissionMode_emxExpand_cell_wrap_38_100
    (cell_wrap_38_FlightMissionMode_T data[100], int32_T fromIndex, int32_T
     toIndex)
{
    for (int32_T i{fromIndex}; i <= static_cast<int32_T>(toIndex - 1); i++) {
        FlightMissionMode_emxInitStruct_cell_wrap_38(&data[i]);
    }
}

static void FlightMissionMode_emxEnsureCapacity_cell_wrap_38
    (cell_wrap_38_FlightMissionMode_T data[100], const int32_T *size, int32_T
     oldNumel)
{
    int32_T newNumel;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = *size;
    if (oldNumel > newNumel) {
        FlightMissionMode_emxTrim_cell_wrap_38_100(data, newNumel, oldNumel);
    } else if (oldNumel < newNumel) {
        FlightMissionMode_emxExpand_cell_wrap_38_100(data, oldNumel, newNumel);
    }
}

static void FlightMissionMode_emxFree_int8_T(emxArray_int8_T_FlightMissionMode_T
    **pEmxArray)
{
    if (*pEmxArray != (emxArray_int8_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (int8_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_int8_T_FlightMissionMode_T *)nullptr;
    }
}

static void FlightMissionMode_emxFree_cell_wrap_38_100
    (emxArray_cell_wrap_38_100_FlightMissionMode_T *pEmxArray)
{
    int32_T i;
    int32_T numEl;
    numEl = 1;
    for (i = 0; i < 1; i++) {
        numEl = static_cast<int32_T>(numEl * pEmxArray->size);
    }

    for (i = 0; i <= static_cast<int32_T>(numEl - 1); i++) {
        FlightMissionMode_emxFreeStruct_cell_wrap_38(&pEmxArray->data[i]);
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_strcmp_nh(const cell_wrap_1_FlightMissionMode_i_T
    a[4], boolean_T b_bool[4])
{
    b_bool[0] = false;
    if ((a[0].f1->size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[0].f1->data[0] != 'N') ^ 1)))) {
        b_bool[0] = true;
    }

    b_bool[1] = false;
    if ((a[1].f1->size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[1].f1->data[0] != 'N') ^ 1)))) {
        b_bool[1] = true;
    }

    b_bool[2] = false;
    if ((a[2].f1->size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[2].f1->data[0] != 'N') ^ 1)))) {
        b_bool[2] = true;
    }

    b_bool[3] = false;
    if ((a[3].f1->size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[3].f1->data[0] != 'N') ^ 1)))) {
        b_bool[3] = true;
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_useConstantDim_h(const real_T varargin_2_data[],
    const int32_T varargin_2_size[2], real_T varargout_1_data[], int32_T
    varargout_1_size[2])
{
    int32_T loop_ub;
    varargout_1_size[0] = 1;
    varargout_1_size[1] = varargin_2_size[1];
    loop_ub = static_cast<int32_T>(varargin_2_size[1] - 1);
    for (int32_T varargout_1_data_tmp{0}; varargout_1_data_tmp <= loop_ub;
            varargout_1_data_tmp++) {
        varargout_1_data[varargout_1_data_tmp] =
            varargin_2_data[varargout_1_data_tmp];
    }

    for (loop_ub = 0; loop_ub <= static_cast<int32_T>(varargin_2_size[1] - 2);
            loop_ub = static_cast<int32_T>(loop_ub + 1)) {
        varargout_1_data[static_cast<int32_T>(loop_ub + 1)] +=
            varargout_1_data[loop_ub];
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_merge_bri(emxArray_int32_T_FlightMissionMode_T
    *idx, emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T np,
    int32_T nq, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork)
{
    if (nq != 0) {
        int32_T iout;
        int32_T n;
        int32_T n_tmp;
        int32_T q;
        n_tmp = static_cast<int32_T>(np + nq);
        for (q = 0; q <= static_cast<int32_T>(n_tmp - 1); q =
                static_cast<int32_T>(q + 1)) {
            iout = static_cast<int32_T>(offset + q);
            iwork->data[q] = idx->data[iout];
            xwork->data[q] = x->data[iout];
        }

        n = 0;
        q = np;
        iout = static_cast<int32_T>(offset - 1);
        int32_T exitg1;
        do {
            exitg1 = 0;
            iout = static_cast<int32_T>(iout + 1);
            if (xwork->data[n] <= xwork->data[q]) {
                idx->data[iout] = iwork->data[n];
                x->data[iout] = xwork->data[n];
                if (static_cast<int32_T>(n + 1) < np) {
                    n = static_cast<int32_T>(n + 1);
                } else {
                    exitg1 = 1;
                }
            } else {
                idx->data[iout] = iwork->data[q];
                x->data[iout] = xwork->data[q];
                if (static_cast<int32_T>(q + 1) < n_tmp) {
                    q = static_cast<int32_T>(q + 1);
                } else {
                    q = static_cast<int32_T>(iout - n);
                    while (static_cast<int32_T>(n + 1) <= np) {
                        n_tmp = static_cast<int32_T>(static_cast<int32_T>(q + n)
                            + 1);
                        idx->data[n_tmp] = iwork->data[n];
                        x->data[n_tmp] = xwork->data[n];
                        n = static_cast<int32_T>(n + 1);
                    }

                    exitg1 = 1;
                }
            }
        } while (exitg1 == 0);
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_merge_block_b(emxArray_int32_T_FlightMissionMode_T
    *idx, emxArray_real_T_FlightMissionMode_T *x, int32_T offset, int32_T n,
    int32_T preSortLevel, emxArray_int32_T_FlightMissionMode_T *iwork,
    emxArray_real_T_FlightMissionMode_T *xwork)
{
    int32_T bLen;
    int32_T nPairs;
    nPairs = static_cast<int32_T>(n >> preSortLevel);
    bLen = static_cast<int32_T>(1 << preSortLevel);
    while (nPairs > 1) {
        int32_T nTail;
        int32_T tailOffset;
        if (static_cast<uint32_T>(static_cast<uint32_T>(nPairs) & 1U) != 0U) {
            nPairs = static_cast<int32_T>(nPairs - 1);
            tailOffset = static_cast<int32_T>(bLen * nPairs);
            nTail = static_cast<int32_T>(n - tailOffset);
            if (nTail > bLen) {
                FlightMissionMode_merge_bri(idx, x, static_cast<int32_T>(offset
                    + tailOffset), bLen, static_cast<int32_T>(nTail - bLen),
                    iwork, xwork);
            }
        }

        tailOffset = static_cast<int32_T>(bLen << 1);
        nPairs = static_cast<int32_T>(nPairs >> 1);
        for (nTail = 0; nTail <= static_cast<int32_T>(nPairs - 1); nTail =
                static_cast<int32_T>(nTail + 1)) {
            FlightMissionMode_merge_bri(idx, x, static_cast<int32_T>(offset +
                static_cast<int32_T>(nTail * tailOffset)), bLen, bLen, iwork,
                xwork);
        }

        bLen = tailOffset;
    }

    if (n > bLen) {
        FlightMissionMode_merge_bri(idx, x, offset, bLen, static_cast<int32_T>(n
            - bLen), iwork, xwork);
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_sort_mkw(emxArray_real_T_FlightMissionMode_T *x)
{
    emxArray_int32_T_FlightMissionMode_T *idx;
    emxArray_int32_T_FlightMissionMode_T *iwork;
    emxArray_real_T_FlightMissionMode_T *b_x;
    emxArray_real_T_FlightMissionMode_T *xwork;
    real_T b_xwork[256];
    real_T x4[4];
    int32_T b_iwork[256];
    int32_T idx4[4];
    int32_T b_iwork_tmp;
    int32_T nBlocks;
    int32_T wOffset;
    int8_T perm[4];
    FlightMissionMode_emxInit_real_T_h(&b_x, 2);
    b_iwork_tmp = static_cast<int32_T>(b_x->size[0] * b_x->size[1]);
    b_x->size[0] = 1;
    b_x->size[1] = x->size[1];
    FlightMissionMode_emxEnsureCapacity_real_T_c(b_x, b_iwork_tmp);
    nBlocks = static_cast<int32_T>(x->size[1] - 1);
    for (wOffset = 0; wOffset <= nBlocks; wOffset++) {
        b_x->data[wOffset] = x->data[wOffset];
    }

    if (x->size[1] != 0) {
        int32_T bLen;
        int32_T bLen2;
        int32_T i1;
        int32_T ib;
        int32_T n;
        int32_T nPairs;
        int32_T q;
        FlightMissionMode_emxInit_int32_T_k(&idx, 2);
        b_iwork_tmp = static_cast<int32_T>(idx->size[0] * idx->size[1]);
        idx->size[0] = 1;
        idx->size[1] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_int32_T_j(idx, b_iwork_tmp);
        nBlocks = static_cast<int32_T>(x->size[1] - 1);
        for (wOffset = 0; wOffset <= nBlocks; wOffset++) {
            idx->data[wOffset] = 0;
        }

        b_iwork_tmp = static_cast<int32_T>(b_x->size[0] * b_x->size[1]);
        b_x->size[0] = 1;
        b_x->size[1] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_real_T_c(b_x, b_iwork_tmp);
        nBlocks = static_cast<int32_T>(x->size[1] - 1);
        for (wOffset = 0; wOffset <= nBlocks; wOffset++) {
            b_x->data[wOffset] = x->data[wOffset];
        }

        FlightMissionMode_emxInit_int32_T1_lv(&iwork, 1);
        FlightMissionMode_emxInit_real_T1_o(&xwork, 1);
        n = x->size[1];
        x4[0] = 0.0;
        idx4[0] = 0;
        x4[1] = 0.0;
        idx4[1] = 0;
        x4[2] = 0.0;
        idx4[2] = 0;
        x4[3] = 0.0;
        idx4[3] = 0;
        nBlocks = x->size[1];
        b_iwork_tmp = xwork->size[0];
        xwork->size[0] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_real_T1_g(xwork, b_iwork_tmp);
        for (wOffset = 0; wOffset <= static_cast<int32_T>(nBlocks - 1); wOffset
                ++) {
            xwork->data[wOffset] = 0.0;
        }

        nBlocks = 0;
        ib = 0;
        for (wOffset = 0; wOffset <= static_cast<int32_T>(n - 1); wOffset =
                static_cast<int32_T>(wOffset + 1)) {
            if (std::isnan(b_x->data[wOffset])) {
                q = static_cast<int32_T>(static_cast<int32_T>(n - nBlocks) - 1);
                idx->data[q] = static_cast<int32_T>(wOffset + 1);
                xwork->data[q] = b_x->data[wOffset];
                nBlocks = static_cast<int32_T>(nBlocks + 1);
            } else {
                ib = static_cast<int32_T>(ib + 1);
                idx4[static_cast<int32_T>(ib - 1)] = static_cast<int32_T>
                    (wOffset + 1);
                x4[static_cast<int32_T>(ib - 1)] = b_x->data[wOffset];
                if (ib == 4) {
                    real_T tmp;
                    real_T tmp_0;
                    ib = static_cast<int32_T>(wOffset - nBlocks);
                    if (x4[0] <= x4[1]) {
                        i1 = 1;
                        bLen = 2;
                    } else {
                        i1 = 2;
                        bLen = 1;
                    }

                    if (x4[2] <= x4[3]) {
                        bLen2 = 3;
                        nPairs = 4;
                    } else {
                        bLen2 = 4;
                        nPairs = 3;
                    }

                    tmp = x4[static_cast<int32_T>(i1 - 1)];
                    tmp_0 = x4[static_cast<int32_T>(bLen2 - 1)];
                    if (tmp <= tmp_0) {
                        tmp = x4[static_cast<int32_T>(bLen - 1)];
                        if (tmp <= tmp_0) {
                            perm[0] = static_cast<int8_T>(i1);
                            perm[1] = static_cast<int8_T>(bLen);
                            perm[2] = static_cast<int8_T>(bLen2);
                            perm[3] = static_cast<int8_T>(nPairs);
                        } else if (tmp <= x4[static_cast<int32_T>(nPairs - 1)])
                        {
                            perm[0] = static_cast<int8_T>(i1);
                            perm[1] = static_cast<int8_T>(bLen2);
                            perm[2] = static_cast<int8_T>(bLen);
                            perm[3] = static_cast<int8_T>(nPairs);
                        } else {
                            perm[0] = static_cast<int8_T>(i1);
                            perm[1] = static_cast<int8_T>(bLen2);
                            perm[2] = static_cast<int8_T>(nPairs);
                            perm[3] = static_cast<int8_T>(bLen);
                        }
                    } else {
                        tmp_0 = x4[static_cast<int32_T>(nPairs - 1)];
                        if (tmp <= tmp_0) {
                            if (x4[static_cast<int32_T>(bLen - 1)] <= tmp_0) {
                                perm[0] = static_cast<int8_T>(bLen2);
                                perm[1] = static_cast<int8_T>(i1);
                                perm[2] = static_cast<int8_T>(bLen);
                                perm[3] = static_cast<int8_T>(nPairs);
                            } else {
                                perm[0] = static_cast<int8_T>(bLen2);
                                perm[1] = static_cast<int8_T>(i1);
                                perm[2] = static_cast<int8_T>(nPairs);
                                perm[3] = static_cast<int8_T>(bLen);
                            }
                        } else {
                            perm[0] = static_cast<int8_T>(bLen2);
                            perm[1] = static_cast<int8_T>(nPairs);
                            perm[2] = static_cast<int8_T>(i1);
                            perm[3] = static_cast<int8_T>(bLen);
                        }
                    }

                    idx->data[static_cast<int32_T>(ib - 3)] = idx4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[0]) - 1)];
                    idx->data[static_cast<int32_T>(ib - 2)] = idx4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                    idx->data[static_cast<int32_T>(ib - 1)] = idx4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                    idx->data[ib] = idx4[static_cast<int32_T>
                        (static_cast<int32_T>(perm[3]) - 1)];
                    b_x->data[static_cast<int32_T>(ib - 3)] = x4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[0]) - 1)];
                    b_x->data[static_cast<int32_T>(ib - 2)] = x4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                    b_x->data[static_cast<int32_T>(ib - 1)] = x4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                    b_x->data[ib] = x4[static_cast<int32_T>(static_cast<int32_T>
                        (perm[3]) - 1)];
                    ib = 0;
                }
            }
        }

        wOffset = static_cast<int32_T>(static_cast<int32_T>(x->size[1] - nBlocks)
            - 1);
        if (ib > 0) {
            perm[1] = 0;
            perm[2] = 0;
            perm[3] = 0;
            switch (ib) {
              case 1:
                perm[0] = 1;
                break;

              case 2:
                if (x4[0] <= x4[1]) {
                    perm[0] = 1;
                    perm[1] = 2;
                } else {
                    perm[0] = 2;
                    perm[1] = 1;
                }
                break;

              default:
                if (x4[0] <= x4[1]) {
                    if (x4[1] <= x4[2]) {
                        perm[0] = 1;
                        perm[1] = 2;
                        perm[2] = 3;
                    } else if (x4[0] <= x4[2]) {
                        perm[0] = 1;
                        perm[1] = 3;
                        perm[2] = 2;
                    } else {
                        perm[0] = 3;
                        perm[1] = 1;
                        perm[2] = 2;
                    }
                } else if (x4[0] <= x4[2]) {
                    perm[0] = 2;
                    perm[1] = 1;
                    perm[2] = 3;
                } else if (x4[1] <= x4[2]) {
                    perm[0] = 2;
                    perm[1] = 3;
                    perm[2] = 1;
                } else {
                    perm[0] = 3;
                    perm[1] = 2;
                    perm[2] = 1;
                }
                break;
            }

            for (i1 = 0; i1 <= static_cast<int32_T>(ib - 1); i1 =
                    static_cast<int32_T>(i1 + 1)) {
                q = static_cast<int32_T>(static_cast<int32_T>(perm[i1]) - 1);
                b_iwork_tmp = static_cast<int32_T>(static_cast<int32_T>(
                    static_cast<int32_T>(wOffset - ib) + i1) + 1);
                idx->data[b_iwork_tmp] = idx4[q];
                b_x->data[b_iwork_tmp] = x4[q];
            }
        }

        ib = static_cast<int32_T>(static_cast<int32_T>(nBlocks >> 1) + 1);
        for (i1 = 1; static_cast<int32_T>(i1 - 1) <= static_cast<int32_T>(ib - 2);
             i1 = static_cast<int32_T>(i1 + 1)) {
            bLen2 = static_cast<int32_T>(wOffset + i1);
            bLen = idx->data[bLen2];
            q = static_cast<int32_T>(n - i1);
            idx->data[bLen2] = idx->data[q];
            idx->data[q] = bLen;
            b_x->data[bLen2] = xwork->data[q];
            b_x->data[q] = xwork->data[bLen2];
        }

        if (static_cast<uint32_T>(static_cast<uint32_T>(nBlocks) & 1U) != 0U) {
            n = static_cast<int32_T>(wOffset + ib);
            b_x->data[n] = xwork->data[n];
        }

        n = x->size[1];
        b_iwork_tmp = iwork->size[0];
        iwork->size[0] = x->size[1];
        FlightMissionMode_emxEnsureCapacity_int32_T1_k(iwork, b_iwork_tmp);
        for (wOffset = 0; wOffset <= static_cast<int32_T>(n - 1); wOffset++) {
            iwork->data[wOffset] = 0;
        }

        n = static_cast<int32_T>(x->size[1] - nBlocks);
        wOffset = 2;
        if (n > 1) {
            if (x->size[1] >= 256) {
                nBlocks = static_cast<int32_T>(n >> 8);
                if (nBlocks > 0) {
                    for (ib = 0; ib <= static_cast<int32_T>(nBlocks - 1); ib =
                            static_cast<int32_T>(ib + 1)) {
                        i1 = static_cast<int32_T>(static_cast<int32_T>(ib << 8)
                            - 1);
                        for (wOffset = 0; wOffset < 6; wOffset++) {
                            bLen = static_cast<int32_T>(1 << static_cast<int32_T>
                                (wOffset + 2));
                            bLen2 = static_cast<int32_T>(bLen << 1);
                            nPairs = static_cast<int32_T>(256 >>
                                static_cast<int32_T>(wOffset + 3));
                            for (int32_T e_k{0}; e_k <= static_cast<int32_T>
                                    (nPairs - 1); e_k = static_cast<int32_T>(e_k
                                  + 1)) {
                                int32_T blockOffset;
                                int32_T p;
                                blockOffset = static_cast<int32_T>
                                    (static_cast<int32_T>(e_k * bLen2) + i1);
                                for (p = 0; p <= static_cast<int32_T>(bLen2 - 1);
                                     p = static_cast<int32_T>(p + 1)) {
                                    b_iwork_tmp = static_cast<int32_T>(
                                        static_cast<int32_T>(blockOffset + p) +
                                        1);
                                    b_iwork[p] = idx->data[b_iwork_tmp];
                                    b_xwork[p] = b_x->data[b_iwork_tmp];
                                }

                                p = 0;
                                q = bLen;
                                int32_T exitg1;
                                do {
                                    exitg1 = 0;
                                    blockOffset = static_cast<int32_T>
                                        (blockOffset + 1);
                                    if (b_xwork[p] <= b_xwork[q]) {
                                        idx->data[blockOffset] = b_iwork[p];
                                        b_x->data[blockOffset] = b_xwork[p];
                                        if (static_cast<int32_T>(p + 1) < bLen)
                                        {
                                            p = static_cast<int32_T>(p + 1);
                                        } else {
                                            exitg1 = 1;
                                        }
                                    } else {
                                        idx->data[blockOffset] = b_iwork[q];
                                        b_x->data[blockOffset] = b_xwork[q];
                                        if (static_cast<int32_T>(q + 1) < bLen2)
                                        {
                                            q = static_cast<int32_T>(q + 1);
                                        } else {
                                            blockOffset = static_cast<int32_T>
                                                (blockOffset - p);
                                            while (static_cast<int32_T>(p + 1) <=
                                                   bLen) {
                                                b_iwork_tmp =
                                                    static_cast<int32_T>(
                                                    static_cast<int32_T>
                                                    (blockOffset + p) + 1);
                                                idx->data[b_iwork_tmp] =
                                                    b_iwork[p];
                                                b_x->data[b_iwork_tmp] =
                                                    b_xwork[p];
                                                p = static_cast<int32_T>(p + 1);
                                            }

                                            exitg1 = 1;
                                        }
                                    }
                                } while (exitg1 == 0);
                            }
                        }
                    }

                    nBlocks = static_cast<int32_T>(nBlocks << 8);
                    wOffset = static_cast<int32_T>(n - nBlocks);
                    if (wOffset > 0) {
                        FlightMissionMode_merge_block_b(idx, b_x, nBlocks,
                            wOffset, 2, iwork, xwork);
                    }

                    wOffset = 8;
                }
            }

            FlightMissionMode_merge_block_b(idx, b_x, 0, n, wOffset, iwork,
                xwork);
        }

        FlightMissionMode_emxFree_real_T_n(&xwork);
        FlightMissionMode_emxFree_int32_T_a(&iwork);
        FlightMissionMode_emxFree_int32_T_a(&idx);
    }

    b_iwork_tmp = static_cast<int32_T>(x->size[0] * x->size[1]);
    x->size[0] = 1;
    x->size[1] = b_x->size[1];
    FlightMissionMode_emxEnsureCapacity_real_T_c(x, b_iwork_tmp);
    nBlocks = b_x->size[1];
    for (wOffset = 0; wOffset <= static_cast<int32_T>(nBlocks - 1); wOffset++) {
        x->data[wOffset] = b_x->data[wOffset];
    }

    FlightMissionMode_emxFree_real_T_n(&b_x);
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_nullAssignment(real_T x_data[], int32_T x_size[2],
    int32_T idx)
{
    int32_T k;
    int32_T nxin;
    k = idx;
    nxin = static_cast<int32_T>(x_size[1] - 1);
    while (k <= nxin) {
        x_data[static_cast<int32_T>(k - 1)] = x_data[k];
        k = static_cast<int32_T>(k + 1);
    }

    x_size[0] = 1;
    x_size[1] = nxin;
}

static void FlightMissionMode_emxInit_boolean_T_c
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_boolean_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_boolean_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_boolean_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (boolean_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxFree_boolean_T_n
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray)
{
    if (*pEmxArray != (emxArray_boolean_T_FlightMissionMode_T *)nullptr) {
        if (((*pEmxArray)->data != (boolean_T *)nullptr) && (*pEmxArray)
                ->canFreeData) {
            std::free((*pEmxArray)->data);
        }

        std::free((*pEmxArray)->size);
        std::free(*pEmxArray);
        *pEmxArray = (emxArray_boolean_T_FlightMissionMode_T *)nullptr;
    }
}

static void FlightMissionMode_emxEnsureCapacity_boolean_T_f
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(boolean_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (boolean_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (boolean_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

static void FlightMissionMode_emxInit_boolean_T1_g
    (emxArray_boolean_T_FlightMissionMode_T **pEmxArray, int32_T numDimensions)
{
    emxArray_boolean_T_FlightMissionMode_T *emxArray;
    *pEmxArray = (emxArray_boolean_T_FlightMissionMode_T *)std::malloc(sizeof
        (emxArray_boolean_T_FlightMissionMode_T));
    emxArray = *pEmxArray;
    emxArray->data = (boolean_T *)nullptr;
    emxArray->numDimensions = numDimensions;
    emxArray->size = (int32_T *)std::malloc(static_cast<uint32_T>(sizeof(int32_T)
        * static_cast<uint32_T>(numDimensions)));
    emxArray->allocatedSize = 0;
    emxArray->canFreeData = true;
    for (int32_T i{0}; i <= static_cast<int32_T>(numDimensions - 1); i++) {
        emxArray->size[i] = 0;
    }
}

static void FlightMissionMode_emxEnsureCapacity_boolean_T1_j
    (emxArray_boolean_T_FlightMissionMode_T *emxArray, int32_T oldNumel)
{
    int32_T i;
    int32_T newNumel;
    void *newData;
    if (oldNumel < 0) {
        oldNumel = 0;
    }

    newNumel = 1;
    for (i = 0; i <= static_cast<int32_T>(emxArray->numDimensions - 1); i++) {
        newNumel = static_cast<int32_T>(newNumel * emxArray->size[i]);
    }

    if (newNumel > emxArray->allocatedSize) {
        i = emxArray->allocatedSize;
        if (i < 16) {
            i = 16;
        }

        while (i < newNumel) {
            if (i > 1073741823) {
                i = MAX_int32_T;
            } else {
                i = static_cast<int32_T>(i << 1);
            }
        }

        newData = std::calloc(static_cast<uint32_T>(i), sizeof(boolean_T));
        if (emxArray->data != nullptr) {
            std::memcpy(newData, emxArray->data, static_cast<uint32_T>(sizeof
                         (boolean_T) * static_cast<uint32_T>(oldNumel)));
            if (emxArray->canFreeData) {
                std::free(emxArray->data);
            }
        }

        emxArray->data = (boolean_T *)newData;
        emxArray->allocatedSize = i;
        emxArray->canFreeData = true;
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_wrapToPi_f(emxArray_real_T_FlightMissionMode_T
    *theta)
{
    emxArray_boolean_T_FlightMissionMode_T *x;
    emxArray_real_T_FlightMissionMode_T *y;
    int32_T b_k;
    int32_T loop_ub;
    boolean_T b_y;
    boolean_T exitg1;
    FlightMissionMode_emxInit_real_T1_o(&y, 1);
    b_k = y->size[0];
    y->size[0] = theta->size[0];
    FlightMissionMode_emxEnsureCapacity_real_T1_g(y, b_k);
    for (b_k = 0; b_k <= static_cast<int32_T>(theta->size[0] - 1); b_k =
            static_cast<int32_T>(b_k + 1)) {
        y->data[b_k] = std::abs(theta->data[b_k]);
    }

    FlightMissionMode_emxInit_boolean_T1_g(&x, 1);
    b_k = x->size[0];
    x->size[0] = y->size[0];
    FlightMissionMode_emxEnsureCapacity_boolean_T1_j(x, b_k);
    loop_ub = y->size[0];
    for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
        x->data[b_k] = (y->data[b_k] > 3.1415926535897931);
    }

    b_y = false;
    b_k = 1;
    exitg1 = false;
    while ((!exitg1) && (b_k <= x->size[0])) {
        if (x->data[static_cast<int32_T>(b_k - 1)]) {
            b_y = true;
            exitg1 = true;
        } else {
            b_k = static_cast<int32_T>(b_k + 1);
        }
    }

    if (b_y) {
        b_k = y->size[0];
        y->size[0] = theta->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T1_g(y, b_k);
        loop_ub = theta->size[0];
        for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
            y->data[b_k] = theta->data[b_k] + 3.1415926535897931;
        }

        b_k = theta->size[0];
        theta->size[0] = y->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T1_g(theta, b_k);
        for (b_k = 0; b_k <= static_cast<int32_T>(y->size[0] - 1); b_k =
                static_cast<int32_T>(b_k + 1)) {
            theta->data[b_k] = mod_ZflSpsmf(y->data[b_k]);
        }

        b_k = x->size[0];
        x->size[0] = theta->size[0];
        FlightMissionMode_emxEnsureCapacity_boolean_T1_j(x, b_k);
        loop_ub = theta->size[0];
        for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
            x->data[b_k] = (theta->data[b_k] == 0.0);
        }

        for (b_k = 0; b_k <= static_cast<int32_T>(x->size[0] - 1); b_k =
                static_cast<int32_T>(b_k + 1)) {
            if (static_cast<boolean_T>(static_cast<int32_T>((y->data[b_k] > 0.0)
                  & static_cast<int32_T>(x->data[b_k])))) {
                theta->data[b_k] = 6.2831853071795862;
            }
        }

        loop_ub = theta->size[0];
        for (b_k = 0; b_k <= static_cast<int32_T>(loop_ub - 1); b_k++) {
            theta->data[b_k] -= 3.1415926535897931;
        }
    }

    FlightMissionMode_emxFree_boolean_T_n(&x);
    FlightMissionMode_emxFree_real_T_n(&y);
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_eml_find_l(const
    emxArray_boolean_T_FlightMissionMode_T *x,
    emxArray_int32_T_FlightMissionMode_T *i)
{
    int32_T idx;
    int32_T ii;
    int32_T nx;
    boolean_T exitg1;
    nx = x->size[1];
    idx = 0;
    ii = static_cast<int32_T>(i->size[0] * i->size[1]);
    i->size[0] = 1;
    i->size[1] = x->size[1];
    FlightMissionMode_emxEnsureCapacity_int32_T_j(i, ii);
    ii = 0;
    exitg1 = false;
    while ((!exitg1) && (ii <= static_cast<int32_T>(nx - 1))) {
        if (x->data[ii]) {
            idx = static_cast<int32_T>(idx + 1);
            i->data[static_cast<int32_T>(idx - 1)] = static_cast<int32_T>(ii + 1);
            if (idx >= nx) {
                exitg1 = true;
            } else {
                ii = static_cast<int32_T>(ii + 1);
            }
        } else {
            ii = static_cast<int32_T>(ii + 1);
        }
    }

    if (x->size[1] == 1) {
        if (idx == 0) {
            i->size[0] = 1;
            i->size[1] = 0;
        }
    } else if (1 > idx) {
        i->size[1] = 0;
    } else {
        ii = static_cast<int32_T>(i->size[0] * i->size[1]);
        i->size[1] = idx;
        FlightMissionMode_emxEnsureCapacity_int32_T_j(i, ii);
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_op2l(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'N') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_op2lj(const char_T a_data[], const
    int32_T a_size[2])
{
    static const char_T b[2]{ 'H', 'l' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (a_data[kstr] != b[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_op2ljy(const char_T a_data[], const
    int32_T a_size[2])
{
    static const char_T b[2]{ 'H', 'r' };

    boolean_T b_bool;
    b_bool = false;
    if (a_size[1] == 2) {
        int32_T kstr;
        kstr = 0;
        int32_T exitg1;
        do {
            exitg1 = 0;
            if (kstr < 2) {
                if (a_data[kstr] != b[kstr]) {
                    exitg1 = 1;
                } else {
                    kstr = static_cast<int32_T>(kstr + 1);
                }
            } else {
                b_bool = true;
                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return b_bool;
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_op2ljyn(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'L') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_op2ljyna(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'R') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static boolean_T FlightMissionMode_strcmp_op2ljynac(const char_T a_data[], const
    int32_T a_size[2])
{
    boolean_T b_bool;
    b_bool = false;
    if ((a_size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a_data[0] != 'S') ^ 1)))) {
        b_bool = true;
    }

    return b_bool;
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_mtimes_g(const emxArray_real_T_FlightMissionMode_T
    *A, const real_T B[4], emxArray_real_T_FlightMissionMode_T *C)
{
    int32_T i;
    int32_T m;
    m = A->size[0];
    i = static_cast<int32_T>(C->size[0] * C->size[1]);
    C->size[0] = A->size[0];
    C->size[1] = 2;
    FlightMissionMode_emxEnsureCapacity_real_T_c(C, i);
    for (i = 0; i <= static_cast<int32_T>(m - 1); i = static_cast<int32_T>(i + 1))
    {
        C->data[i] = A->data[static_cast<int32_T>(A->size[0] + i)] * B[1] +
            A->data[i] * B[0];
    }

    for (i = 0; i <= static_cast<int32_T>(m - 1); i = static_cast<int32_T>(i + 1))
    {
        C->data[static_cast<int32_T>(m + i)] = A->data[static_cast<int32_T>
            (A->size[0] + i)] * B[3] + A->data[i] * B[2];
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_interpolate_p(const real_T
    b_this_StartPose_data[], const real_T b_this_GoalPose_data[], real_T
    b_this_FlightPathAngle, real_T b_this_AirSpeed, real_T
    b_this_MinTurningRadius, real_T b_this_HelixRadius, const
    cell_wrap_1_FlightMissionMode_i_T b_this_MotionTypes[4], const real_T
    b_this_MotionLengths[4], real_T b_this_Length,
    emxArray_real_T_FlightMissionMode_T *samples,
    emxArray_real_T_FlightMissionMode_T *poses)
{
    emxArray_boolean_T_FlightMissionMode_T *tempSamplesIndex;
    emxArray_boolean_T_FlightMissionMode_T *tempSamplesIndex_0;
    emxArray_int32_T_FlightMissionMode_T *bb;
    emxArray_real_T_FlightMissionMode_T *S;
    emxArray_real_T_FlightMissionMode_T *S_0;
    emxArray_real_T_FlightMissionMode_T *d_x;
    emxArray_real_T_FlightMissionMode_T *ns;
    emxArray_real_T_FlightMissionMode_T *p;
    emxArray_real_T_FlightMissionMode_T *tempSamples;
    emxArray_real_T_FlightMissionMode_T *z;
    real_T ab_data[28];
    real_T state[6];
    real_T TransformMatrix[4];
    real_T tempGoalPose_data[4];
    real_T tempMotionLength_data[4];
    real_T tempStartPose_data[4];
    real_T transLength_data[4];
    int32_T ab_size[2];
    int32_T tempMotionLength_size[2];
    boolean_T tmp[4];
    poses->size[0] = 0;
    poses->size[1] = 6;
    if ((static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(std::
            isnan(b_this_Length)) ^ 1))) && (samples->size[1] != 0)) {
        real_T b_b_tmp;
        real_T intermediateLength;
        real_T radius;
        real_T startIndex;
        real_T tempMotionLength_tmp;
        int32_T loop_ub;
        int32_T tempStartPose_data_tmp;
        int32_T tempStartPose_data_tmp_1;
        tempStartPose_data[0] = b_this_StartPose_data[0];
        tempStartPose_data[1] = -b_this_StartPose_data[1];
        tempStartPose_data[2] = -b_this_StartPose_data[2];
        tempStartPose_data[3] = -b_this_StartPose_data[3];
        tempGoalPose_data[2] = -b_this_GoalPose_data[2];
        tempStartPose_data_tmp = static_cast<int32_T>(poses->size[0] *
            poses->size[1]);
        poses->size[0] = samples->size[1];
        poses->size[1] = 6;
        FlightMissionMode_emxEnsureCapacity_real_T_c(poses,
            tempStartPose_data_tmp);
        loop_ub = static_cast<int32_T>(static_cast<int32_T>(samples->size[1] * 6)
            - 1);
        for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <= loop_ub;
                tempStartPose_data_tmp++) {
            poses->data[tempStartPose_data_tmp] = 0.0;
        }

        b_b_tmp = std::cos(std::abs(b_this_FlightPathAngle));
        tempStartPose_data_tmp = static_cast<int32_T>(samples->size[0] *
            samples->size[1]);
        samples->size[0] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_c(samples,
            tempStartPose_data_tmp);
        loop_ub = static_cast<int32_T>(samples->size[1] - 1);
        for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <= loop_ub;
                tempStartPose_data_tmp++) {
            samples->data[tempStartPose_data_tmp] *= b_b_tmp;
        }

        tempMotionLength_size[0] = 1;
        tempMotionLength_size[1] = 4;
        intermediateLength = b_this_MotionLengths[0] * b_b_tmp;
        tempMotionLength_data[0] = intermediateLength;
        startIndex = b_this_MotionLengths[1] * b_b_tmp;
        tempMotionLength_data[1] = startIndex;
        radius = b_this_MotionLengths[2] * b_b_tmp;
        tempMotionLength_data[2] = radius;
        tempMotionLength_tmp = b_this_MotionLengths[3] * b_b_tmp;
        tempMotionLength_data[3] = tempMotionLength_tmp;
        FlightMissionMode_strcmp_nh(b_this_MotionTypes, tmp);
        if (FlightMissionMode_any_i(tmp)) {
            ab_size[0] = 1;
            ab_size[1] = 4;
            ab_data[0] = intermediateLength;
            ab_data[1] = startIndex;
            ab_data[2] = radius;
            ab_data[3] = tempMotionLength_tmp;
            FlightMissionMode_nullAssignment(ab_data, ab_size, 4);
            tempMotionLength_size[0] = 1;
            tempMotionLength_size[1] = ab_size[1];
            loop_ub = static_cast<int32_T>(ab_size[1] - 1);
            for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <= loop_ub;
                    tempStartPose_data_tmp++) {
                tempMotionLength_data[tempStartPose_data_tmp] =
                    ab_data[tempStartPose_data_tmp];
            }
        }

        FlightMissionMode_useConstantDim_h(tempMotionLength_data,
            tempMotionLength_size, transLength_data, ab_size);
        FlightMissionMode_sort_mkw(samples);
        intermediateLength = 0.0;
        startIndex = 1.0;
        state[0] = tempStartPose_data[0];
        state[1] = tempStartPose_data[1];
        state[3] = tempStartPose_data[3];
        tempStartPose_data_tmp_1 = 0;
        FlightMissionMode_emxInit_boolean_T_c(&tempSamplesIndex, 2);
        FlightMissionMode_emxInit_real_T1_o(&tempSamples, 1);
        FlightMissionMode_emxInit_real_T1_o(&S, 1);
        FlightMissionMode_emxInit_real_T_h(&ns, 2);
        FlightMissionMode_emxInit_real_T1_o(&z, 1);
        FlightMissionMode_emxInit_real_T_h(&p, 2);
        FlightMissionMode_emxInit_real_T1_o(&d_x, 1);
        FlightMissionMode_emxInit_int32_T_k(&bb, 2);
        FlightMissionMode_emxInit_boolean_T_c(&tempSamplesIndex_0, 2);
        FlightMissionMode_emxInit_real_T_h(&S_0, 2);
        while (tempStartPose_data_tmp_1 <= static_cast<int32_T>
                (tempMotionLength_size[1] - 1)) {
            if (static_cast<int32_T>(tempStartPose_data_tmp_1 + 1) == 1) {
                tempStartPose_data_tmp = static_cast<int32_T>
                    (tempSamplesIndex->size[0] * tempSamplesIndex->size[1]);
                tempSamplesIndex->size[0] = 1;
                tempSamplesIndex->size[1] = samples->size[1];
                FlightMissionMode_emxEnsureCapacity_boolean_T_f(tempSamplesIndex,
                    tempStartPose_data_tmp);
                loop_ub = static_cast<int32_T>(samples->size[1] - 1);
                radius = (intermediateLength + tempMotionLength_data[0]) +
                    1.0E-6;
                for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                        loop_ub; tempStartPose_data_tmp++) {
                    tempMotionLength_tmp = samples->data[tempStartPose_data_tmp];
                    tempSamplesIndex->data[tempStartPose_data_tmp] =
                        static_cast<boolean_T>(static_cast<int32_T>
                        ((tempMotionLength_tmp >= intermediateLength) &
                         (tempMotionLength_tmp <= radius)));
                }
            } else {
                tempStartPose_data_tmp = static_cast<int32_T>
                    (tempSamplesIndex->size[0] * tempSamplesIndex->size[1]);
                tempSamplesIndex->size[0] = 1;
                tempSamplesIndex->size[1] = samples->size[1];
                FlightMissionMode_emxEnsureCapacity_boolean_T_f(tempSamplesIndex,
                    tempStartPose_data_tmp);
                loop_ub = static_cast<int32_T>(samples->size[1] - 1);
                radius = (intermediateLength +
                          tempMotionLength_data[tempStartPose_data_tmp_1]) +
                    1.0E-6;
                for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                        loop_ub; tempStartPose_data_tmp++) {
                    tempMotionLength_tmp = samples->data[tempStartPose_data_tmp];
                    tempSamplesIndex->data[tempStartPose_data_tmp] =
                        static_cast<boolean_T>(static_cast<int32_T>
                        ((tempMotionLength_tmp > intermediateLength) &
                         (tempMotionLength_tmp <= radius)));
                }
            }

            tempStartPose_data_tmp = static_cast<int32_T>
                (tempSamplesIndex_0->size[0] * tempSamplesIndex_0->size[1]);
            tempSamplesIndex_0->size[0] = 1;
            tempSamplesIndex_0->size[1] = tempSamplesIndex->size[1];
            FlightMissionMode_emxEnsureCapacity_boolean_T_f(tempSamplesIndex_0,
                tempStartPose_data_tmp);
            loop_ub = tempSamplesIndex->size[1];
            for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                    static_cast<int32_T>(loop_ub - 1); tempStartPose_data_tmp++)
            {
                tempSamplesIndex_0->data[tempStartPose_data_tmp] =
                    tempSamplesIndex->data[tempStartPose_data_tmp];
            }

            FlightMissionMode_eml_find_l(tempSamplesIndex_0, bb);
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (FlightMissionMode_strcmp_op2l
                     (b_this_MotionTypes[tempStartPose_data_tmp_1].f1->data,
                      b_this_MotionTypes[tempStartPose_data_tmp_1].f1->size)) ^
                    1))) {
                real_T b_this_Length_0;
                real_T tempStartPose;
                real_T tempStartPose_tmp;
                int32_T count;
                int32_T tempStartPose_data_tmp_0;
                radius = b_this_MinTurningRadius;
                if (FlightMissionMode_strcmp_op2lj
                        (b_this_MotionTypes[tempStartPose_data_tmp_1].f1->data,
                         b_this_MotionTypes[tempStartPose_data_tmp_1].f1->size))
                {
                    radius = b_this_HelixRadius;
                } else if (FlightMissionMode_strcmp_op2ljy
                           (b_this_MotionTypes[tempStartPose_data_tmp_1]
                            .f1->data,
                            b_this_MotionTypes[tempStartPose_data_tmp_1]
                            .f1->size)) {
                    radius = b_this_HelixRadius;
                }

                count = 0;
                tempStartPose_data_tmp = tempSamples->size[0];
                tempSamples->size[0] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T1_g(tempSamples,
                    tempStartPose_data_tmp);
                tempSamples->data[0] = 0.0;
                if (bb->size[1] != 0) {
                    tempStartPose_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = static_cast<int32_T>(bb->size[1] + 1);
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(tempSamples,
                        tempStartPose_data_tmp);
                    loop_ub = bb->size[1];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            loop_ub; tempStartPose_data_tmp++) {
                        tempSamples->data[tempStartPose_data_tmp] = 0.0;
                    }

                    count = bb->size[1];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(count - 1);
                            tempStartPose_data_tmp++) {
                        tempSamples->data[tempStartPose_data_tmp] =
                            samples->data[static_cast<int32_T>(bb->
                            data[tempStartPose_data_tmp] - 1)];
                    }

                    count = bb->size[1];
                    loop_ub = static_cast<int32_T>(bb->size[1] - 1);
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            loop_ub; tempStartPose_data_tmp++) {
                        samples->data[static_cast<int32_T>(bb->
                            data[tempStartPose_data_tmp] - 1)] = -1.0;
                    }
                }

                tempSamples->data[count] =
                    transLength_data[tempStartPose_data_tmp_1];
                tempStartPose_data_tmp = S->size[0];
                S->size[0] = tempSamples->size[0];
                FlightMissionMode_emxEnsureCapacity_real_T1_g(S,
                    tempStartPose_data_tmp);
                loop_ub = tempSamples->size[0];
                for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                        static_cast<int32_T>(loop_ub - 1);
                        tempStartPose_data_tmp++) {
                    S->data[tempStartPose_data_tmp] = (tempSamples->
                        data[tempStartPose_data_tmp] - intermediateLength) /
                        radius;
                }

                tempStartPose_data_tmp = static_cast<int32_T>(ns->size[0] *
                    ns->size[1]);
                ns->size[0] = S->size[0];
                ns->size[1] = 6;
                FlightMissionMode_emxEnsureCapacity_real_T_c(ns,
                    tempStartPose_data_tmp);
                loop_ub = static_cast<int32_T>(static_cast<int32_T>(S->size[0] *
                    6) - 1);
                for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                        loop_ub; tempStartPose_data_tmp++) {
                    ns->data[tempStartPose_data_tmp] = 0.0;
                }

                tempStartPose_tmp = tempStartPose_data[2];
                tempStartPose_data_tmp = z->size[0];
                z->size[0] = tempSamples->size[0];
                FlightMissionMode_emxEnsureCapacity_real_T1_g(z,
                    tempStartPose_data_tmp);
                loop_ub = tempSamples->size[0];
                for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                        static_cast<int32_T>(loop_ub - 1);
                        tempStartPose_data_tmp++) {
                    z->data[tempStartPose_data_tmp] = tempStartPose_tmp +
                        tempSamples->data[tempStartPose_data_tmp];
                }

                tempMotionLength_tmp = std::sin(state[3]);
                tempStartPose = std::cos(state[3]);
                TransformMatrix[0] = tempStartPose;
                TransformMatrix[2] = tempMotionLength_tmp;
                TransformMatrix[1] = -tempMotionLength_tmp;
                TransformMatrix[3] = tempStartPose;
                if (b_this_Length != 0.0) {
                    tempMotionLength_tmp = tempGoalPose_data[2] -
                        tempStartPose_tmp;
                    b_this_Length_0 = b_this_Length * b_b_tmp;
                    tempStartPose_data_tmp = z->size[0];
                    z->size[0] = tempSamples->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(z,
                        tempStartPose_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        z->data[tempStartPose_data_tmp] = tempSamples->
                            data[tempStartPose_data_tmp] / b_this_Length_0 *
                            tempMotionLength_tmp + tempStartPose_tmp;
                    }
                }

                if (FlightMissionMode_strcmp_op2lj
                        (b_this_MotionTypes[tempStartPose_data_tmp_1].f1->data,
                         b_this_MotionTypes[tempStartPose_data_tmp_1].f1->size) ||
                    FlightMissionMode_strcmp_op2ljyn
                        (b_this_MotionTypes[tempStartPose_data_tmp_1].f1->data,
                         b_this_MotionTypes[tempStartPose_data_tmp_1].f1->size))
                {
                    tempStartPose_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(tempSamples,
                        tempStartPose_data_tmp);
                    loop_ub = S->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        tempSamples->data[tempStartPose_data_tmp] = S->
                            data[tempStartPose_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        tempSamples->data[count] = std::sin(tempSamples->
                            data[count]);
                    }

                    tempStartPose_data_tmp = d_x->size[0];
                    d_x->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(d_x,
                        tempStartPose_data_tmp);
                    loop_ub = S->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        d_x->data[tempStartPose_data_tmp] = S->
                            data[tempStartPose_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        d_x->data[count] = std::cos(d_x->data[count]);
                    }

                    tempStartPose_data_tmp = static_cast<int32_T>(S_0->size[0] *
                        S_0->size[1]);
                    S_0->size[0] = tempSamples->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(S_0,
                        tempStartPose_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        S_0->data[tempStartPose_data_tmp] = tempSamples->
                            data[tempStartPose_data_tmp];
                    }

                    loop_ub = d_x->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            tempSamples->size[0])] = 1.0 - d_x->
                            data[tempStartPose_data_tmp];
                    }

                    FlightMissionMode_mtimes_g(S_0, TransformMatrix, p);
                    tempMotionLength_tmp = rt_atan2d_snf(b_this_AirSpeed *
                        b_this_AirSpeed, 9.8 * radius);
                    tempStartPose = state[0];
                    b_this_Length_0 = state[1];
                    tempStartPose_tmp = state[3];
                    count = S->size[0];
                    tempStartPose_data_tmp_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempStartPose_data_tmp = static_cast<int32_T>(ns->size[0] *
                        ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(ns,
                        tempStartPose_data_tmp);
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[tempStartPose_data_tmp] = p->
                            data[tempStartPose_data_tmp] * radius +
                            tempStartPose;
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            ns->size[0])] = p->data[static_cast<int32_T>
                            (tempStartPose_data_tmp + p->size[0])] * radius +
                            b_this_Length_0;
                    }

                    loop_ub = z->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempStartPose_data_tmp];
                    }

                    loop_ub = S->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] * 3))] =
                            tempStartPose_tmp + S->data[tempStartPose_data_tmp];
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(count - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(tempStartPose_data_tmp_0 - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] * 5))] =
                            -tempMotionLength_tmp;
                    }
                } else if (FlightMissionMode_strcmp_op2ljy
                           (b_this_MotionTypes[tempStartPose_data_tmp_1]
                            .f1->data,
                            b_this_MotionTypes[tempStartPose_data_tmp_1]
                            .f1->size) || FlightMissionMode_strcmp_op2ljyna
                           (b_this_MotionTypes[tempStartPose_data_tmp_1]
                            .f1->data,
                            b_this_MotionTypes[tempStartPose_data_tmp_1]
                            .f1->size)) {
                    tempStartPose_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(tempSamples,
                        tempStartPose_data_tmp);
                    loop_ub = S->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        tempSamples->data[tempStartPose_data_tmp] = S->
                            data[tempStartPose_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        tempSamples->data[count] = std::sin(tempSamples->
                            data[count]);
                    }

                    tempStartPose_data_tmp = d_x->size[0];
                    d_x->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(d_x,
                        tempStartPose_data_tmp);
                    loop_ub = S->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        d_x->data[tempStartPose_data_tmp] = S->
                            data[tempStartPose_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        d_x->data[count] = std::cos(d_x->data[count]);
                    }

                    tempStartPose_data_tmp = static_cast<int32_T>(S_0->size[0] *
                        S_0->size[1]);
                    S_0->size[0] = tempSamples->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(S_0,
                        tempStartPose_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        S_0->data[tempStartPose_data_tmp] = tempSamples->
                            data[tempStartPose_data_tmp];
                    }

                    loop_ub = d_x->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            tempSamples->size[0])] = d_x->
                            data[tempStartPose_data_tmp] - 1.0;
                    }

                    FlightMissionMode_mtimes_g(S_0, TransformMatrix, p);
                    tempMotionLength_tmp = rt_atan2d_snf(b_this_AirSpeed *
                        b_this_AirSpeed, 9.8 * radius);
                    tempStartPose = state[0];
                    b_this_Length_0 = state[1];
                    tempStartPose_tmp = state[3];
                    count = S->size[0];
                    tempStartPose_data_tmp_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempStartPose_data_tmp = static_cast<int32_T>(ns->size[0] *
                        ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(ns,
                        tempStartPose_data_tmp);
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[tempStartPose_data_tmp] = p->
                            data[tempStartPose_data_tmp] * radius +
                            tempStartPose;
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            ns->size[0])] = p->data[static_cast<int32_T>
                            (tempStartPose_data_tmp + p->size[0])] * radius +
                            b_this_Length_0;
                    }

                    loop_ub = z->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempStartPose_data_tmp];
                    }

                    loop_ub = S->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] * 3))] =
                            tempStartPose_tmp - S->data[tempStartPose_data_tmp];
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(count - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(tempStartPose_data_tmp_0 - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] * 5))] =
                            tempMotionLength_tmp;
                    }
                } else if (FlightMissionMode_strcmp_op2ljynac
                           (b_this_MotionTypes[tempStartPose_data_tmp_1]
                            .f1->data,
                            b_this_MotionTypes[tempStartPose_data_tmp_1]
                            .f1->size)) {
                    int32_T S_idx_0;
                    count = S->size[0];
                    tempStartPose_data_tmp = static_cast<int32_T>(S_0->size[0] *
                        S_0->size[1]);
                    S_0->size[0] = S->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(S_0,
                        tempStartPose_data_tmp);
                    loop_ub = S->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        S_0->data[tempStartPose_data_tmp] = S->
                            data[tempStartPose_data_tmp];
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(count - 1);
                            tempStartPose_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            S->size[0])] = 0.0;
                    }

                    FlightMissionMode_mtimes_g(S_0, TransformMatrix, p);
                    tempStartPose = state[0];
                    b_this_Length_0 = state[1];
                    count = S->size[0];
                    tempStartPose_data_tmp_0 = S->size[0];
                    S_idx_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempStartPose_data_tmp = static_cast<int32_T>(ns->size[0] *
                        ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(ns,
                        tempStartPose_data_tmp);
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[tempStartPose_data_tmp] = p->
                            data[tempStartPose_data_tmp] * radius +
                            tempStartPose;
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            ns->size[0])] = p->data[static_cast<int32_T>
                            (tempStartPose_data_tmp + p->size[0])] * radius +
                            b_this_Length_0;
                    }

                    loop_ub = z->size[0];
                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(loop_ub - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempStartPose_data_tmp];
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(count - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] * 3))] = state[3];
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(tempStartPose_data_tmp_0 - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            static_cast<int32_T>(S_idx_0 - 1);
                            tempStartPose_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempStartPose_data_tmp +
                            static_cast<int32_T>(ns->size[0] * 5))] = 0.0;
                    }
                }

                if (bb->size[1] != 0) {
                    if (startIndex > (startIndex + static_cast<real_T>(bb->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp < 6;
                         tempStartPose_data_tmp++) {
                        for (tempStartPose_data_tmp_0 = 0;
                                tempStartPose_data_tmp_0 <= loop_ub;
                                tempStartPose_data_tmp_0++) {
                            poses->data[static_cast<int32_T>(static_cast<int32_T>
                                (static_cast<int32_T>(count +
                                tempStartPose_data_tmp_0) + static_cast<int32_T>
                                 (poses->size[0] * tempStartPose_data_tmp)) - 1)]
                                = ns->data[static_cast<int32_T>
                                (static_cast<int32_T>(ns->size[0] *
                                  tempStartPose_data_tmp) +
                                 tempStartPose_data_tmp_0)];
                        }
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(bb->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            loop_ub; tempStartPose_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>
                            (count + tempStartPose_data_tmp) - 1)] = ns->
                            data[tempStartPose_data_tmp];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(bb->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            loop_ub; tempStartPose_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count + tempStartPose_data_tmp)
                            + poses->size[0]) - 1)] = -ns->data
                            [static_cast<int32_T>(tempStartPose_data_tmp +
                            ns->size[0])];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(bb->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            loop_ub; tempStartPose_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count + tempStartPose_data_tmp)
                            + static_cast<int32_T>(poses->size[0] << 1)) - 1)] =
                            -ns->data[static_cast<int32_T>(static_cast<int32_T>
                            (ns->size[0] << 1) + tempStartPose_data_tmp)];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(bb->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                            loop_ub; tempStartPose_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count + tempStartPose_data_tmp)
                            + static_cast<int32_T>(poses->size[0] * 3)) - 1)] =
                            -ns->data[static_cast<int32_T>(static_cast<int32_T>
                            (ns->size[0] * 3) + tempStartPose_data_tmp)];
                    }
                }

                count = ns->size[0];
                for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp < 6;
                        tempStartPose_data_tmp++) {
                    state[tempStartPose_data_tmp] = ns->data[static_cast<int32_T>
                        (static_cast<int32_T>(static_cast<int32_T>(ns->size[0] *
                           tempStartPose_data_tmp) + count) - 1)];
                }

                startIndex += static_cast<real_T>(bb->size[1]);
            }

            intermediateLength += tempMotionLength_data[tempStartPose_data_tmp_1];
            tempStartPose_data_tmp_1 = static_cast<int32_T>
                (tempStartPose_data_tmp_1 + 1);
        }

        FlightMissionMode_emxFree_real_T_n(&S_0);
        FlightMissionMode_emxFree_boolean_T_n(&tempSamplesIndex_0);
        FlightMissionMode_emxFree_int32_T_a(&bb);
        FlightMissionMode_emxFree_real_T_n(&d_x);
        FlightMissionMode_emxFree_real_T_n(&p);
        FlightMissionMode_emxFree_real_T_n(&z);
        FlightMissionMode_emxFree_real_T_n(&ns);
        FlightMissionMode_emxFree_real_T_n(&S);
        FlightMissionMode_emxFree_boolean_T_n(&tempSamplesIndex);
        loop_ub = poses->size[0];
        tempStartPose_data_tmp = tempSamples->size[0];
        tempSamples->size[0] = poses->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T1_g(tempSamples,
            tempStartPose_data_tmp);
        for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                static_cast<int32_T>(loop_ub - 1); tempStartPose_data_tmp++) {
            tempSamples->data[tempStartPose_data_tmp] = poses->data[static_cast<
                int32_T>(static_cast<int32_T>(poses->size[0] * 3) +
                         tempStartPose_data_tmp)];
        }

        FlightMissionMode_wrapToPi_f(tempSamples);
        loop_ub = tempSamples->size[0];
        for (tempStartPose_data_tmp = 0; tempStartPose_data_tmp <=
                static_cast<int32_T>(loop_ub - 1); tempStartPose_data_tmp++) {
            poses->data[static_cast<int32_T>(tempStartPose_data_tmp +
                static_cast<int32_T>(poses->size[0] * 3))] = tempSamples->
                data[tempStartPose_data_tmp];
        }

        FlightMissionMode_emxFree_real_T_n(&tempSamples);
    }
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_waypointListGen(const
    uavDubinsPathSegment_FlightMissionMode_g_T pathSegment_data[], const int32_T
    *pathSegment_size, real_T pathLength, const real_T
    pathLengthSegmentAccumulated_data[], const int32_T
    *pathLengthSegmentAccumulated_size, real_T lengthInitial,
    emxArray_real_T_FlightMissionMode_T *stateWP, real_T *lengthTerminal, real_T
    *lengthInitialNew)
{
    emxArray_cell_wrap_38_100_FlightMissionMode_T lengthListPathSegment0;
    emxArray_int32_T_FlightMissionMode_T *g;
    emxArray_int32_T_FlightMissionMode_T *h;
    emxArray_int8_T_FlightMissionMode_T *idxPathSegment;
    emxArray_real_T_FlightMissionMode_T *lengthList;
    emxArray_real_T_FlightMissionMode_T *lengthListPathSegment0_0;
    emxArray_real_T_FlightMissionMode_T *tmp;
    real_T numberLengthListPathSegmentAccumulated_data[101];
    real_T x_data[100];
    real_T kd;
    real_T numberWP;
    int32_T d_k;
    int32_T loop_ub;
    int32_T loop_ub_tmp;
    int32_T nm1d2;
    int32_T numberLengthListPathSegment_size_idx_0;
    uint32_T numberLengthListPathSegment_data[100];
    int8_T ii_data_idx_0;
    boolean_T b_x_data[100];

    // '<S284>:1:142'
    // '<S284>:1:113'
    // '<S284>:1:116'
    // '<S284>:1:117'
    numberWP = std::floor((pathLength - lengthInitial) / 50.0);

    // '<S284>:1:118'
    loop_ub_tmp = static_cast<int32_T>(numberWP + 1.0);
    numberLengthListPathSegment_size_idx_0 = static_cast<int32_T>(stateWP->size
        [0] * stateWP->size[1]);
    stateWP->size[0] = static_cast<int32_T>(numberWP + 1.0);
    stateWP->size[1] = 6;
    FlightMissionMode_emxEnsureCapacity_real_T_c(stateWP,
        numberLengthListPathSegment_size_idx_0);
    loop_ub = static_cast<int32_T>(static_cast<int32_T>(static_cast<int32_T>
        (numberWP + 1.0) * 6) - 1);
    for (d_k = 0; d_k <= loop_ub; d_k++) {
        stateWP->data[d_k] = 0.0;
    }

    // '<S284>:1:119'
    kd = numberWP * 50.0 + lengthInitial;
    FlightMissionMode_emxInit_real_T_h(&lengthList, 2);
    if (std::isnan(lengthInitial)) {
        numberLengthListPathSegment_size_idx_0 = static_cast<int32_T>
            (lengthList->size[0] * lengthList->size[1]);
        lengthList->size[0] = 1;
        lengthList->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_c(lengthList,
            numberLengthListPathSegment_size_idx_0);
        lengthList->data[0] = (rtNaN);
    } else if (std::isnan(kd)) {
        numberLengthListPathSegment_size_idx_0 = static_cast<int32_T>
            (lengthList->size[0] * lengthList->size[1]);
        lengthList->size[0] = 1;
        lengthList->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_c(lengthList,
            numberLengthListPathSegment_size_idx_0);
        lengthList->data[0] = (rtNaN);
    } else if (kd < lengthInitial) {
        lengthList->size[0] = 1;
        lengthList->size[1] = 0;
    } else if ((std::isinf(lengthInitial) || std::isinf(kd)) && (lengthInitial ==
                kd)) {
        numberLengthListPathSegment_size_idx_0 = static_cast<int32_T>
            (lengthList->size[0] * lengthList->size[1]);
        lengthList->size[0] = 1;
        lengthList->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_c(lengthList,
            numberLengthListPathSegment_size_idx_0);
        lengthList->data[0] = (rtNaN);
    } else if (std::floor(lengthInitial) == lengthInitial) {
        numberLengthListPathSegment_size_idx_0 = static_cast<int32_T>
            (lengthList->size[0] * lengthList->size[1]);
        lengthList->size[0] = 1;
        loop_ub = static_cast<int32_T>(std::floor((kd - lengthInitial) / 50.0));
        lengthList->size[1] = static_cast<int32_T>(loop_ub + 1);
        FlightMissionMode_emxEnsureCapacity_real_T_c(lengthList,
            numberLengthListPathSegment_size_idx_0);
        for (d_k = 0; d_k <= loop_ub; d_k++) {
            lengthList->data[d_k] = 50.0 * static_cast<real_T>(d_k) +
                lengthInitial;
        }
    } else {
        real_T apnd;
        real_T cdiff;
        real_T ndbl;
        ndbl = std::floor((kd - lengthInitial) / 50.0 + 0.5);
        apnd = ndbl * 50.0 + lengthInitial;
        cdiff = apnd - kd;
        if (std::abs(cdiff) < 4.4408920985006262E-16 * std::fmax(std::abs
                (lengthInitial), std::abs(kd))) {
            ndbl++;
            apnd = kd;
        } else if (cdiff > 0.0) {
            apnd = (ndbl - 1.0) * 50.0 + lengthInitial;
        } else {
            ndbl++;
        }

        if (ndbl >= 0.0) {
            loop_ub = static_cast<int32_T>(static_cast<int32_T>(ndbl) - 1);
        } else {
            loop_ub = -1;
        }

        numberLengthListPathSegment_size_idx_0 = static_cast<int32_T>
            (lengthList->size[0] * lengthList->size[1]);
        lengthList->size[0] = 1;
        lengthList->size[1] = static_cast<int32_T>(loop_ub + 1);
        FlightMissionMode_emxEnsureCapacity_real_T_c(lengthList,
            numberLengthListPathSegment_size_idx_0);
        if (static_cast<int32_T>(loop_ub + 1) > 0) {
            lengthList->data[0] = lengthInitial;
            if (static_cast<int32_T>(loop_ub + 1) > 1) {
                lengthList->data[loop_ub] = apnd;
                nm1d2 = static_cast<int32_T>(loop_ub / 2);
                for (d_k = 1; static_cast<int32_T>(d_k - 1) <=
                        static_cast<int32_T>(nm1d2 - 2); d_k =
                        static_cast<int32_T>(d_k + 1)) {
                    kd = static_cast<real_T>(d_k) * 50.0;
                    lengthList->data[d_k] = lengthInitial + kd;
                    lengthList->data[static_cast<int32_T>(loop_ub - d_k)] = apnd
                        - kd;
                }

                if (static_cast<int32_T>(nm1d2 << 1) == loop_ub) {
                    lengthList->data[nm1d2] = (lengthInitial + apnd) / 2.0;
                } else {
                    kd = static_cast<real_T>(nm1d2) * 50.0;
                    lengthList->data[nm1d2] = lengthInitial + kd;
                    lengthList->data[static_cast<int32_T>(nm1d2 + 1)] = apnd -
                        kd;
                }
            }
        }
    }

    FlightMissionMode_emxInit_int8_T(&idxPathSegment, 1);

    // '<S284>:1:120'
    numberLengthListPathSegment_size_idx_0 = idxPathSegment->size[0];
    idxPathSegment->size[0] = static_cast<int32_T>(numberWP + 1.0);
    FlightMissionMode_emxEnsureCapacity_int8_T(idxPathSegment,
        numberLengthListPathSegment_size_idx_0);
    for (d_k = 0; d_k <= static_cast<int32_T>(loop_ub_tmp - 1); d_k++) {
        idxPathSegment->data[d_k] = 0;
    }

    // '<S284>:1:121'
    for (loop_ub = 0; loop_ub <= static_cast<int32_T>(static_cast<int32_T>
            (numberWP + 1.0) - 1); loop_ub = static_cast<int32_T>(loop_ub + 1))
    {
        boolean_T exitg1;

        // '<S284>:1:121'
        // '<S284>:1:122'
        kd = lengthList->data[loop_ub];
        loop_ub_tmp = *pathLengthSegmentAccumulated_size;
        for (d_k = 0; d_k <= static_cast<int32_T>(loop_ub_tmp - 1); d_k++) {
            b_x_data[d_k] = (pathLengthSegmentAccumulated_data[d_k] >= kd);
        }

        d_k = 0;
        exitg1 = false;
        while ((!exitg1) && (d_k <= static_cast<int32_T>
                             (*pathLengthSegmentAccumulated_size - 1))) {
            if (b_x_data[d_k]) {
                ii_data_idx_0 = static_cast<int8_T>(static_cast<int32_T>(d_k + 1));
                exitg1 = true;
            } else {
                d_k = static_cast<int32_T>(d_k + 1);
            }
        }

        // '<S284>:1:123'
        idxPathSegment->data[loop_ub] = ii_data_idx_0;
    }

    FlightMissionMode_emxInit_cell_wrap_38_100(&lengthListPathSegment0);
    numberLengthListPathSegment_size_idx_0 = lengthListPathSegment0.size;
    lengthListPathSegment0.size = *pathSegment_size;
    FlightMissionMode_emxEnsureCapacity_cell_wrap_38(lengthListPathSegment0.data,
        &lengthListPathSegment0.size, numberLengthListPathSegment_size_idx_0);
    for (loop_ub = 0; loop_ub <= static_cast<int32_T>(*pathSegment_size - 1);
            loop_ub = static_cast<int32_T>(loop_ub + 1)) {
        lengthListPathSegment0.data[loop_ub].f1->size[0] = 1;
        lengthListPathSegment0.data[loop_ub].f1->size[1] = 0;
    }

    // '<S284>:1:127'
    loop_ub = static_cast<int32_T>(idxPathSegment->size[0] - 1);
    nm1d2 = 0;
    for (d_k = 0; d_k <= loop_ub; d_k = static_cast<int32_T>(d_k + 1)) {
        if (static_cast<int32_T>(idxPathSegment->data[d_k]) == 1) {
            // '<S284>:1:128'
            nm1d2 = static_cast<int32_T>(nm1d2 + 1);
        }
    }

    FlightMissionMode_emxInit_int32_T1_lv(&g, 1);
    numberLengthListPathSegment_size_idx_0 = g->size[0];
    g->size[0] = nm1d2;
    FlightMissionMode_emxEnsureCapacity_int32_T1_k(g,
        numberLengthListPathSegment_size_idx_0);
    nm1d2 = 0;
    for (d_k = 0; d_k <= loop_ub; d_k = static_cast<int32_T>(d_k + 1)) {
        if (static_cast<int32_T>(idxPathSegment->data[d_k]) == 1) {
            // '<S284>:1:128'
            g->data[nm1d2] = static_cast<int32_T>(d_k + 1);
            nm1d2 = static_cast<int32_T>(nm1d2 + 1);
        }
    }

    // '<S284>:1:128'
    numberLengthListPathSegment_size_idx_0 = static_cast<int32_T>
        (lengthListPathSegment0.data[0].f1->size[0] *
         lengthListPathSegment0.data[0].f1->size[1]);
    lengthListPathSegment0.data[0].f1->size[0] = 1;
    lengthListPathSegment0.data[0].f1->size[1] = g->size[0];
    FlightMissionMode_emxEnsureCapacity_real_T_c(lengthListPathSegment0.data[0].
        f1, numberLengthListPathSegment_size_idx_0);
    loop_ub_tmp = g->size[0];
    for (d_k = 0; d_k <= static_cast<int32_T>(loop_ub_tmp - 1); d_k++) {
        lengthListPathSegment0.data[0].f1->data[d_k] = lengthList->data[
            static_cast<int32_T>(g->data[d_k] - 1)];
    }

    FlightMissionMode_emxFree_int32_T_a(&g);

    // '<S284>:1:129'
    loop_ub = 1;
    FlightMissionMode_emxInit_int32_T1_lv(&h, 1);
    while (static_cast<int32_T>(loop_ub - 1) <= static_cast<int32_T>(
            static_cast<int32_T>(*pathSegment_size - 1) - 1)) {
        // '<S284>:1:129'
        nm1d2 = static_cast<int32_T>(idxPathSegment->size[0] - 1);
        d_k = 0;
        for (loop_ub_tmp = 0; loop_ub_tmp <= nm1d2; loop_ub_tmp =
                static_cast<int32_T>(loop_ub_tmp + 1)) {
            if (static_cast<int32_T>(loop_ub + 1) == static_cast<int32_T>
                    (idxPathSegment->data[loop_ub_tmp])) {
                // '<S284>:1:130'
                d_k = static_cast<int32_T>(d_k + 1);
            }
        }

        numberLengthListPathSegment_size_idx_0 = h->size[0];
        h->size[0] = d_k;
        FlightMissionMode_emxEnsureCapacity_int32_T1_k(h,
            numberLengthListPathSegment_size_idx_0);
        d_k = 0;
        for (loop_ub_tmp = 0; loop_ub_tmp <= nm1d2; loop_ub_tmp =
                static_cast<int32_T>(loop_ub_tmp + 1)) {
            if (static_cast<int32_T>(loop_ub + 1) == static_cast<int32_T>
                    (idxPathSegment->data[loop_ub_tmp])) {
                // '<S284>:1:130'
                h->data[d_k] = static_cast<int32_T>(loop_ub_tmp + 1);
                d_k = static_cast<int32_T>(d_k + 1);
            }
        }

        // '<S284>:1:130'
        kd = pathLengthSegmentAccumulated_data[static_cast<int32_T>(loop_ub - 1)];
        numberLengthListPathSegment_size_idx_0 = static_cast<int32_T>
            (lengthListPathSegment0.data[loop_ub].f1->size[0] *
             lengthListPathSegment0.data[loop_ub].f1->size[1]);
        lengthListPathSegment0.data[loop_ub].f1->size[0] = 1;
        lengthListPathSegment0.data[loop_ub].f1->size[1] = h->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T_c
            (lengthListPathSegment0.data[loop_ub].f1,
             numberLengthListPathSegment_size_idx_0);
        loop_ub_tmp = h->size[0];
        for (d_k = 0; d_k <= static_cast<int32_T>(loop_ub_tmp - 1); d_k++) {
            lengthListPathSegment0.data[loop_ub].f1->data[d_k] =
                lengthList->data[static_cast<int32_T>(h->data[d_k] - 1)] - kd;
        }

        loop_ub = static_cast<int32_T>(loop_ub + 1);
    }

    FlightMissionMode_emxFree_int32_T_a(&h);
    FlightMissionMode_emxFree_int8_T(&idxPathSegment);

    // '<S284>:1:132'
    numberLengthListPathSegment_size_idx_0 = *pathSegment_size;
    loop_ub_tmp = *pathSegment_size;
    for (d_k = 0; d_k <= static_cast<int32_T>(loop_ub_tmp - 1); d_k++) {
        numberLengthListPathSegment_data[d_k] = 0U;
    }

    // '<S284>:1:133'
    for (loop_ub = 0; loop_ub <= static_cast<int32_T>(*pathSegment_size - 1);
            loop_ub = static_cast<int32_T>(loop_ub + 1)) {
        // '<S284>:1:133'
        // '<S284>:1:134'
        numberLengthListPathSegment_data[loop_ub] = static_cast<uint32_T>
            (lengthListPathSegment0.data[loop_ub].f1->size[1]);
    }

    // '<S284>:1:138'
    if (*pathSegment_size != 1) {
        loop_ub_tmp = *pathSegment_size;
        for (d_k = 0; d_k <= static_cast<int32_T>
                (numberLengthListPathSegment_size_idx_0 - 1); d_k++) {
            x_data[d_k] = static_cast<real_T>
                (numberLengthListPathSegment_data[d_k]);
        }

        for (loop_ub = 0; loop_ub <= static_cast<int32_T>(*pathSegment_size - 2);
             loop_ub = static_cast<int32_T>(loop_ub + 1)) {
            x_data[static_cast<int32_T>(loop_ub + 1)] += x_data[loop_ub];
        }
    } else {
        loop_ub_tmp = *pathSegment_size;
        for (d_k = 0; d_k <= static_cast<int32_T>
                (numberLengthListPathSegment_size_idx_0 - 1); d_k++) {
            x_data[d_k] = static_cast<real_T>
                (numberLengthListPathSegment_data[d_k]);
        }
    }

    numberLengthListPathSegmentAccumulated_data[0] = 0.0;
    for (d_k = 0; d_k <= static_cast<int32_T>(loop_ub_tmp - 1); d_k++) {
        numberLengthListPathSegmentAccumulated_data[static_cast<int32_T>(d_k + 1)]
            = x_data[d_k];
    }

    // '<S284>:1:140'
    loop_ub = 0;
    FlightMissionMode_emxInit_real_T_h(&tmp, 2);
    FlightMissionMode_emxInit_real_T_h(&lengthListPathSegment0_0, 2);
    while (loop_ub <= static_cast<int32_T>(*pathSegment_size - 1)) {
        // '<S284>:1:140'
        if (numberLengthListPathSegmentAccumulated_data[loop_ub] + 1.0 >
                numberLengthListPathSegmentAccumulated_data[static_cast<int32_T>
                (loop_ub + 1)]) {
            nm1d2 = 1;
        } else {
            nm1d2 = static_cast<int32_T>
                (numberLengthListPathSegmentAccumulated_data[loop_ub] + 1.0);
        }

        numberLengthListPathSegment_size_idx_0 = static_cast<int32_T>
            (lengthListPathSegment0_0->size[0] * lengthListPathSegment0_0->size
             [1]);
        lengthListPathSegment0_0->size[0] = 1;
        lengthListPathSegment0_0->size[1] = lengthListPathSegment0.data[loop_ub]
            .f1->size[1];
        FlightMissionMode_emxEnsureCapacity_real_T_c(lengthListPathSegment0_0,
            numberLengthListPathSegment_size_idx_0);
        loop_ub_tmp = static_cast<int32_T>(static_cast<int32_T>
            (lengthListPathSegment0.data[loop_ub].f1->size[0] *
             lengthListPathSegment0.data[loop_ub].f1->size[1]) - 1);
        for (numberLengthListPathSegment_size_idx_0 = 0;
                numberLengthListPathSegment_size_idx_0 <= loop_ub_tmp;
                numberLengthListPathSegment_size_idx_0++) {
            lengthListPathSegment0_0->
                data[numberLengthListPathSegment_size_idx_0] =
                lengthListPathSegment0.data[loop_ub].f1->
                data[numberLengthListPathSegment_size_idx_0];
        }

        FlightMissionMode_uavDubinsPathSegment_interpolate_p
            (pathSegment_data[loop_ub].StartPose.data, pathSegment_data[loop_ub]
             .GoalPose.data, pathSegment_data[loop_ub].FlightPathAngle,
             pathSegment_data[loop_ub].AirSpeed, pathSegment_data[loop_ub].
             MinTurningRadius, pathSegment_data[loop_ub].HelixRadius,
             pathSegment_data[loop_ub].MotionTypes, pathSegment_data[loop_ub].
             MotionLengths, pathSegment_data[loop_ub].Length,
             lengthListPathSegment0_0, tmp);
        loop_ub_tmp = tmp->size[0];
        for (d_k = 0; d_k < 6; d_k++) {
            for (numberLengthListPathSegment_size_idx_0 = 0;
                    numberLengthListPathSegment_size_idx_0 <=
                    static_cast<int32_T>(loop_ub_tmp - 1);
                    numberLengthListPathSegment_size_idx_0++) {
                stateWP->data[static_cast<int32_T>(static_cast<int32_T>(
                    static_cast<int32_T>(nm1d2 +
                    numberLengthListPathSegment_size_idx_0) +
                    static_cast<int32_T>(stateWP->size[0] * d_k)) - 1)] =
                    tmp->data[static_cast<int32_T>(static_cast<int32_T>
                    (tmp->size[0] * d_k) +
                    numberLengthListPathSegment_size_idx_0)];
            }
        }

        // '<S284>:1:142'
        loop_ub = static_cast<int32_T>(loop_ub + 1);
    }

    FlightMissionMode_emxFree_real_T_n(&lengthListPathSegment0_0);
    FlightMissionMode_emxFree_real_T_n(&tmp);
    FlightMissionMode_emxFree_cell_wrap_38_100(&lengthListPathSegment0);

    // '<S284>:1:145'
    *lengthTerminal = pathLength - lengthList->data[static_cast<int32_T>(
        static_cast<int32_T>(numberWP + 1.0) - 1)];

    // '<S284>:1:146'
    *lengthInitialNew = 50.0 - *lengthTerminal;
    FlightMissionMode_emxFree_real_T_n(&lengthList);
}

// Function for MATLAB Function: '<S260>/WayPointGenerator'
static void FlightMissionMode_NewRunwayTrajGen(const
    uavDubinsConnection_FlightMissionMode_a_T *connectionObj, real_T
    lengthRacetrack, real_T numberUAV, real_T idxUAV, real_T angleJamming,
    real_T lengthRacetrackOrigin2Target, const real_T positionENUTarget[3],
    real_T clockAngleInitial_data[], int32_T clockAngleInitial_size[2], const
    real_T numberGroup_data[], const cell_wrap_1_FlightMissionMode_i_T
    motionType1[4], const cell_wrap_1_FlightMissionMode_i_T motionType2[4],
    real_T stateWaypoints[61440], DW_FlightMissionMode_f_T *localDW)
{
    emxArray_real_T_FlightMissionMode_T *b_x;
    emxArray_real_T_FlightMissionMode_T *lengthInitialList;
    emxArray_real_T_FlightMissionMode_T *stateWP;
    emxArray_real_T_FlightMissionMode_T *x;
    real_T stateVertex_data[400];
    real_T b_data[300];
    real_T varargin_1_data[300];
    real_T x_data[300];
    real_T clockAngleVertex_data[100];
    real_T varargin_2_data[100];
    real_T clockAngleVertex_data_0[50];
    real_T a[6];
    real_T stateVertex_data_0[4];
    real_T stateVertex_data_1[4];
    real_T b_numberGroup;
    real_T b_numberGroup_tmp;
    real_T distanceApogee;
    real_T distancePerigee;
    real_T iacol_tmp;
    int32_T b_size[2];
    int32_T stateVertex_size[2];
    int32_T stateVertex_size_0[2];
    int32_T varargin_1_size[2];
    int32_T clockAngleVertex_size;
    int32_T iacol;
    int32_T iacol_tmp_0;
    int32_T ibcol;
    int32_T ibmat;
    int32_T itilerow;
    int32_T jcol;
    int32_T k;
    uint32_T numberWP_count;
    int8_T outsize_idx_0;
    int8_T outsize_idx_0_0;

    // '<S284>:1:289'
    // '<S284>:1:219'
    // '<S284>:1:220'
    distancePerigee = lengthRacetrackOrigin2Target - lengthRacetrack / 2.0;

    // '<S284>:1:221'
    distanceApogee = lengthRacetrack / 2.0 + lengthRacetrackOrigin2Target;

    // '<S284>:1:222'
    clockAngleInitial_size[0] = 1;
    iacol = static_cast<int32_T>(clockAngleInitial_size[1] - 1);
    for (k = 0; k <= iacol; k++) {
        clockAngleInitial_data[0] = clockAngleInitial_data[0] *
            3.1415926535897931 / 180.0;
    }

    // '<S284>:1:223'
    b_numberGroup = angleJamming * 3.1415926535897931 / 180.0;

    // '<S284>:1:226'
    b_numberGroup_tmp = numberGroup_data[0];

    // '<S284>:1:230'
    iacol_tmp = 2.0 * b_numberGroup_tmp;
    iacol_tmp_0 = static_cast<int32_T>(iacol_tmp);
    clockAngleVertex_size = static_cast<int32_T>(iacol_tmp);
    for (k = 0; k <= static_cast<int32_T>(iacol_tmp_0 - 1); k++) {
        clockAngleVertex_data[k] = 0.0;
    }

    // '<S284>:1:233'
    if (static_cast<int32_T>(static_cast<int32_T>(std::floor(b_numberGroup_tmp -
           1.0)) + 1) == clockAngleInitial_size[1]) {
        if (0 <= static_cast<int32_T>(clockAngleInitial_size[1] - 1)) {
            clockAngleVertex_data[0] = 0.0 * b_numberGroup +
                clockAngleInitial_data[0];
        }
    } else {
        FlightMissionMode_binary_expand_op_p(clockAngleVertex_data,
            numberGroup_data, clockAngleInitial_data, clockAngleInitial_size,
            b_numberGroup);
    }

    // '<S284>:1:234'
    iacol = static_cast<int32_T>(static_cast<int32_T>(static_cast<int32_T>
        (iacol_tmp - 1.0) - 1) >> 1);
    ibmat = static_cast<int32_T>(iacol + 1);
    for (k = 0; k <= iacol; k++) {
        clockAngleVertex_data_0[k] = clockAngleVertex_data[static_cast<int32_T>
            (k << 1)];
    }

    for (k = 0; k <= static_cast<int32_T>(ibmat - 1); k++) {
        clockAngleVertex_data[static_cast<int32_T>(static_cast<int32_T>(k << 1)
            + 1)] = clockAngleVertex_data_0[k];
    }

    // '<S284>:1:235'
    for (k = 0; k <= static_cast<int32_T>(clockAngleVertex_size - 1); k++) {
        varargin_2_data[k] = clockAngleVertex_data[k] + 3.1415926535897931;
    }

    a[0] = distancePerigee;
    a[2] = distancePerigee;
    a[4] = 1.0;
    a[1] = distanceApogee;
    a[3] = distanceApogee;
    a[5] = 1.0;
    k = static_cast<int32_T>(static_cast<int32_T>(b_numberGroup_tmp) << 1);
    b_size[0] = static_cast<int32_T>(static_cast<int8_T>(k));
    b_size[1] = 3;
    for (jcol = 0; jcol < 3; jcol++) {
        iacol = static_cast<int32_T>(jcol << 1);
        ibmat = static_cast<int32_T>(static_cast<int32_T>(k * jcol) - 1);
        for (itilerow = 0; itilerow <= static_cast<int32_T>(static_cast<int32_T>
                (b_numberGroup_tmp) - 1); itilerow = static_cast<int32_T>
                (itilerow + 1)) {
            ibcol = static_cast<int32_T>(static_cast<int32_T>
                (static_cast<int32_T>(itilerow << 1) + ibmat) + 1);
            b_data[ibcol] = a[iacol];
            b_data[static_cast<int32_T>(ibcol + 1)] = a[static_cast<int32_T>
                (iacol + 1)];
        }
    }

    FlightMissionMode_emxInit_real_T1_o(&x, 1);
    ibmat = x->size[0];
    x->size[0] = static_cast<int32_T>(iacol_tmp);
    FlightMissionMode_emxEnsureCapacity_real_T1_g(x, ibmat);
    for (k = 0; k <= static_cast<int32_T>(clockAngleVertex_size - 1); k++) {
        x->data[k] = clockAngleVertex_data[k];
    }

    for (jcol = 0; jcol <= static_cast<int32_T>(static_cast<int32_T>(iacol_tmp)
            - 1); jcol = static_cast<int32_T>(jcol + 1)) {
        x->data[jcol] = std::cos(x->data[jcol]);
    }

    FlightMissionMode_emxInit_real_T1_o(&b_x, 1);
    ibmat = b_x->size[0];
    b_x->size[0] = static_cast<int32_T>(iacol_tmp);
    FlightMissionMode_emxEnsureCapacity_real_T1_g(b_x, ibmat);
    for (k = 0; k <= static_cast<int32_T>(clockAngleVertex_size - 1); k++) {
        b_x->data[k] = clockAngleVertex_data[k];
    }

    for (jcol = 0; jcol <= static_cast<int32_T>(static_cast<int32_T>(iacol_tmp)
            - 1); jcol = static_cast<int32_T>(jcol + 1)) {
        b_x->data[jcol] = std::sin(b_x->data[jcol]);
    }

    // '<S284>:1:237'
    if (b_size[0] == x->size[0]) {
        jcol = x->size[0];
        iacol = x->size[0];
        for (k = 0; k <= static_cast<int32_T>(iacol - 1); k++) {
            x_data[k] = x->data[k];
        }

        iacol = b_x->size[0];
        for (k = 0; k <= static_cast<int32_T>(iacol - 1); k++) {
            x_data[static_cast<int32_T>(k + x->size[0])] = b_x->data[k];
        }

        for (k = 0; k <= static_cast<int32_T>(iacol_tmp_0 - 1); k++) {
            x_data[static_cast<int32_T>(static_cast<int32_T>(k + x->size[0]) +
                b_x->size[0])] = 500.0;
        }

        varargin_1_size[0] = b_size[0];
        iacol = b_size[0];
        for (k = 0; k < 3; k++) {
            for (ibmat = 0; ibmat <= static_cast<int32_T>(iacol - 1); ibmat++) {
                varargin_1_data[static_cast<int32_T>(ibmat + static_cast<int32_T>
                    (varargin_1_size[0] * k))] = b_data[static_cast<int32_T>(
                    static_cast<int32_T>(b_size[0] * k) + ibmat)] * x_data[
                    static_cast<int32_T>(static_cast<int32_T>(jcol * k) + ibmat)]
                    + positionENUTarget[k];
            }
        }
    } else {
        FlightMissionMode_binary_expand_op(varargin_1_data, varargin_1_size,
            positionENUTarget, b_data, b_size, x, b_x, numberGroup_data);
    }

    FlightMissionMode_emxFree_real_T_n(&b_x);
    FlightMissionMode_emxFree_real_T_n(&x);

    // '<S284>:1:240'
    if (varargin_1_size[0] != 0) {
        outsize_idx_0 = static_cast<int8_T>(varargin_1_size[0]);
    } else {
        outsize_idx_0 = static_cast<int8_T>(static_cast<int32_T>(iacol_tmp));
    }

    if (static_cast<int32_T>(outsize_idx_0) == 0) {
        outsize_idx_0_0 = 3;
    } else if (varargin_1_size[0] != 0) {
        outsize_idx_0_0 = 3;
    } else {
        outsize_idx_0_0 = 0;
    }

    ibcol = static_cast<int32_T>(static_cast<int32_T>(outsize_idx_0_0) + 1);
    if (static_cast<int32_T>(outsize_idx_0) == 0) {
        outsize_idx_0_0 = 3;
    } else if (varargin_1_size[0] != 0) {
        outsize_idx_0_0 = 3;
    } else {
        outsize_idx_0_0 = 0;
    }

    iacol = static_cast<int32_T>(static_cast<int32_T>(outsize_idx_0) *
        static_cast<int32_T>(outsize_idx_0_0));
    itilerow = static_cast<int32_T>(static_cast<int32_T>(outsize_idx_0) - 1);
    for (k = 0; k <= static_cast<int32_T>(iacol - 1); k++) {
        stateVertex_data[k] = varargin_1_data[k];
    }

    for (k = 0; k <= itilerow; k++) {
        stateVertex_data[static_cast<int32_T>(k + iacol)] = varargin_2_data[k];
    }

    FlightMissionMode_emxInit_uavDubinsPathSegment_10(&localDW->pathSegment0);
    ibmat = localDW->pathSegment0.size;
    localDW->pathSegment0.size = static_cast<int32_T>(iacol_tmp);
    FlightMissionMode_emxEnsureCapacity_uavDubinsPath(localDW->pathSegment0.data,
        &localDW->pathSegment0.size, ibmat);
    for (k = 0; k <= static_cast<int32_T>(static_cast<int32_T>(iacol_tmp) - 1);
            k = static_cast<int32_T>(k + 1)) {
        localDW->pathSegment0.data[k].StartPose.size[0] = 1;
        localDW->pathSegment0.data[k].StartPose.size[1] = 0;
        localDW->pathSegment0.data[k].GoalPose.size[0] = 1;
        localDW->pathSegment0.data[k].GoalPose.size[1] = 0;
        localDW->pathSegment0.data[k].MotionTypes[0].f1->size[0] = 1;
        localDW->pathSegment0.data[k].MotionTypes[0].f1->size[1] = 0;
        localDW->pathSegment0.data[k].MotionTypes[1].f1->size[0] = 1;
        localDW->pathSegment0.data[k].MotionTypes[1].f1->size[1] = 0;
        localDW->pathSegment0.data[k].MotionTypes[2].f1->size[0] = 1;
        localDW->pathSegment0.data[k].MotionTypes[2].f1->size[1] = 0;
        localDW->pathSegment0.data[k].MotionTypes[3].f1->size[0] = 1;
        localDW->pathSegment0.data[k].MotionTypes[3].f1->size[1] = 0;
    }

    // '<S284>:1:243'
    // '<S284>:1:244'
    for (jcol = 1; static_cast<int32_T>(jcol - 1) <= static_cast<int32_T>(
            static_cast<int32_T>(b_numberGroup_tmp) - 1); jcol =
            static_cast<int32_T>(jcol + 1)) {
        // '<S284>:1:244'
        // '<S284>:1:246'
        // '<S284>:1:247'
        // '<S284>:1:249'
        k = static_cast<int32_T>(jcol << 1);
        stateVertex_size[0] = 1;
        stateVertex_size[1] = ibcol;
        stateVertex_size_0[0] = 1;
        stateVertex_size_0[1] = ibcol;
        for (ibmat = 0; ibmat <= static_cast<int32_T>(ibcol - 1); ibmat++) {
            iacol = static_cast<int32_T>(static_cast<int32_T>(outsize_idx_0) *
                ibmat);
            stateVertex_data_0[ibmat] = stateVertex_data[static_cast<int32_T>(
                static_cast<int32_T>(k + iacol) - 1)];
            stateVertex_data_1[ibmat] = stateVertex_data[static_cast<int32_T>(
                static_cast<int32_T>(k + iacol) - 2)];
        }

        FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_h
            (connectionObj, stateVertex_data_0, stateVertex_size,
             stateVertex_data_1, stateVertex_size_0, motionType1,
             &localDW->pathSegment0.data[static_cast<int32_T>(k - 2)]);

        // '<S284>:1:250'
        // '<S284>:1:252'
        distancePerigee = (static_cast<real_T>(static_cast<int32_T>(jcol - 1)) +
                           1.0) * 2.0 - 1.0;

        // '<S284>:1:258'
        // '<S284>:1:259'
        if (static_cast<real_T>(static_cast<int32_T>(jcol - 1)) + 1.0 <
                b_numberGroup_tmp) {
            // '<S284>:1:253'
            // '<S284>:1:254'
            // '<S284>:1:261'
            // '<S284>:1:262'
            stateVertex_size[0] = 1;
            stateVertex_size[1] = ibcol;
            stateVertex_size_0[0] = 1;
            stateVertex_size_0[1] = ibcol;
            for (k = 0; k <= static_cast<int32_T>(ibcol - 1); k++) {
                stateVertex_data_0[k] = stateVertex_data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>
                    (static_cast<int32_T>(outsize_idx_0) * k) +
                    static_cast<int32_T>(distancePerigee)) - 1)];
                stateVertex_data_1[k] = stateVertex_data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>(distancePerigee +
                    3.0) + static_cast<int32_T>(static_cast<int32_T>
                    (outsize_idx_0) * k)) - 1)];
            }

            FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_h
                (connectionObj, stateVertex_data_0, stateVertex_size,
                 stateVertex_data_1, stateVertex_size_0, motionType1,
                 &localDW->pathSegment0.data[static_cast<int32_T>
                 (static_cast<int32_T>(jcol << 1) - 1)]);
        } else {
            // '<S284>:1:256'
            // '<S284>:1:264'
            stateVertex_size[0] = 1;
            stateVertex_size[1] = ibcol;
            stateVertex_size_0[0] = 1;
            stateVertex_size_0[1] = ibcol;
            for (k = 0; k <= static_cast<int32_T>(ibcol - 1); k++) {
                iacol = static_cast<int32_T>(static_cast<int32_T>(outsize_idx_0)
                    * k);
                stateVertex_data_0[k] = stateVertex_data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>(distancePerigee) +
                    iacol) - 1)];
                stateVertex_data_1[k] = stateVertex_data[static_cast<int32_T>(1
                    + iacol)];
            }

            FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_h
                (connectionObj, stateVertex_data_0, stateVertex_size,
                 stateVertex_data_1, stateVertex_size_0, motionType2,
                 &localDW->pathSegment0.data[static_cast<int32_T>
                 (static_cast<int32_T>(jcol << 1) - 1)]);
        }

        // '<S284>:1:266'
    }

    // '<S284>:1:268'
    for (k = 0; k <= static_cast<int32_T>(iacol_tmp_0 - 1); k++) {
        clockAngleVertex_data[k] = 0.0;
    }

    // '<S284>:1:269'
    b_numberGroup = 0.0;

    // '<S284>:1:270'
    for (jcol = 0; jcol <= static_cast<int32_T>(static_cast<int32_T>(iacol_tmp)
            - 1); jcol = static_cast<int32_T>(jcol + 1)) {
        // '<S284>:1:270'
        // '<S284>:1:271'
        clockAngleVertex_data[jcol] = localDW->pathSegment0.data[jcol].Length;

        // '<S284>:1:272'
        b_numberGroup += clockAngleVertex_data[jcol];
    }

    // '<S284>:1:274'
    if (static_cast<int32_T>(iacol_tmp) != 1) {
        iacol_tmp_0 = static_cast<int32_T>(iacol_tmp);
        iacol = static_cast<int32_T>(iacol_tmp);
        for (k = 0; k <= static_cast<int32_T>(iacol - 1); k++) {
            varargin_2_data[k] = clockAngleVertex_data[k];
        }

        for (jcol = 0; jcol <= static_cast<int32_T>(static_cast<int32_T>
                (iacol_tmp) - 2); jcol = static_cast<int32_T>(jcol + 1)) {
            varargin_2_data[static_cast<int32_T>(jcol + 1)] +=
                varargin_2_data[jcol];
        }
    } else {
        iacol_tmp_0 = static_cast<int32_T>(iacol_tmp);
        iacol = static_cast<int32_T>(iacol_tmp);
        for (k = 0; k <= static_cast<int32_T>(iacol - 1); k++) {
            varargin_2_data[k] = clockAngleVertex_data[k];
        }
    }

    // '<S284>:1:276'
    distancePerigee = b_numberGroup / numberUAV;

    // '<S284>:1:277'
    distanceApogee = numberUAV * distancePerigee;
    FlightMissionMode_emxInit_real_T_h(&lengthInitialList, 2);
    if (std::isnan(distancePerigee)) {
        ibmat = static_cast<int32_T>(lengthInitialList->size[0] *
            lengthInitialList->size[1]);
        lengthInitialList->size[0] = 1;
        lengthInitialList->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_c(lengthInitialList, ibmat);
        lengthInitialList->data[0] = (rtNaN);
    } else if (std::isnan(distanceApogee)) {
        ibmat = static_cast<int32_T>(lengthInitialList->size[0] *
            lengthInitialList->size[1]);
        lengthInitialList->size[0] = 1;
        lengthInitialList->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_c(lengthInitialList, ibmat);
        lengthInitialList->data[0] = (rtNaN);
    } else if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(
                  static_cast<boolean_T>(static_cast<int32_T>
                   (static_cast<int32_T>(static_cast<boolean_T>
                     (static_cast<int32_T>((0.0 < distanceApogee) &
                       (distancePerigee < 0.0)))) | (distancePerigee == 0.0)))) |
                 static_cast<int32_T>(static_cast<boolean_T>(static_cast<int32_T>
                   ((distanceApogee < 0.0) & (distancePerigee > 0.0))))))) {
        lengthInitialList->size[0] = 1;
        lengthInitialList->size[1] = 0;
    } else {
        boolean_T guard1{ false };

        guard1 = false;
        if (std::isinf(distanceApogee)) {
            if (std::isinf(distancePerigee)) {
                ibmat = static_cast<int32_T>(lengthInitialList->size[0] *
                    lengthInitialList->size[1]);
                lengthInitialList->size[0] = 1;
                lengthInitialList->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_c(lengthInitialList,
                    ibmat);
                lengthInitialList->data[0] = (rtNaN);
            } else if (0.0 == distanceApogee) {
                ibmat = static_cast<int32_T>(lengthInitialList->size[0] *
                    lengthInitialList->size[1]);
                lengthInitialList->size[0] = 1;
                lengthInitialList->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_c(lengthInitialList,
                    ibmat);
                lengthInitialList->data[0] = (rtNaN);
            } else {
                guard1 = true;
            }
        } else {
            guard1 = true;
        }

        if (guard1) {
            if (std::isinf(distancePerigee)) {
                ibmat = static_cast<int32_T>(lengthInitialList->size[0] *
                    lengthInitialList->size[1]);
                lengthInitialList->size[0] = 1;
                lengthInitialList->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_c(lengthInitialList,
                    ibmat);
                lengthInitialList->data[0] = 0.0;
            } else if (std::floor(distancePerigee) == distancePerigee) {
                ibmat = static_cast<int32_T>(lengthInitialList->size[0] *
                    lengthInitialList->size[1]);
                lengthInitialList->size[0] = 1;
                iacol = static_cast<int32_T>(std::floor(distanceApogee /
                    distancePerigee));
                lengthInitialList->size[1] = static_cast<int32_T>(iacol + 1);
                FlightMissionMode_emxEnsureCapacity_real_T_c(lengthInitialList,
                    ibmat);
                for (k = 0; k <= iacol; k++) {
                    lengthInitialList->data[k] = distancePerigee *
                        static_cast<real_T>(k);
                }
            } else {
                FlightMissionMode_eml_float_colon(distancePerigee,
                    distanceApogee, lengthInitialList);
            }
        }
    }

    // '<S284>:1:278'
    distancePerigee = lengthInitialList->data[static_cast<int32_T>
        (static_cast<int32_T>(idxUAV) - 1)];

    // '<S284>:1:279'
    FlightMissionMode_emxFree_real_T_n(&lengthInitialList);
    std::memset(&stateWaypoints[0], 0, static_cast<uint32_T>(61440U * sizeof
                 (real_T)));

    // '<S284>:1:280'
    numberWP_count = 0U;
    FlightMissionMode_emxInit_real_T_h(&stateWP, 2);
    while (numberWP_count < 10240U) {
        // '<S284>:1:281'
        // '<S284>:1:282'
        FlightMissionMode_waypointListGen(localDW->pathSegment0.data,
            &localDW->pathSegment0.size, b_numberGroup, varargin_2_data,
            &iacol_tmp_0, distancePerigee, stateWP, &distanceApogee,
            &distancePerigee);

        // '<S284>:1:284'
        // '<S284>:1:285'
        if (static_cast<uint32_T>(numberWP_count + static_cast<uint32_T>
                                  (stateWP->size[0])) <= 10240U) {
            // '<S284>:1:286'
            // '<S284>:1:287'
            iacol = stateWP->size[0];
            for (k = 0; k < 6; k++) {
                for (ibmat = 0; ibmat <= static_cast<int32_T>(iacol - 1); ibmat
                        ++) {
                    stateWaypoints[static_cast<int32_T>(static_cast<int32_T>
                        (ibmat + static_cast<int32_T>(numberWP_count)) +
                        static_cast<int32_T>(10240 * k))] = stateWP->data[
                        static_cast<int32_T>(static_cast<int32_T>(stateWP->size
                        [0] * k) + ibmat)];
                }
            }
        } else {
            // '<S284>:1:289'
            iacol = static_cast<int32_T>(10239 - static_cast<int32_T>
                (numberWP_count));
            for (k = 0; k < 6; k++) {
                for (ibmat = 0; ibmat <= iacol; ibmat++) {
                    stateWaypoints[static_cast<int32_T>(static_cast<int32_T>(
                        static_cast<int32_T>(numberWP_count) + ibmat) +
                        static_cast<int32_T>(10240 * k))] = stateWP->data[
                        static_cast<int32_T>(static_cast<int32_T>(stateWP->size
                        [0] * k) + ibmat)];
                }
            }
        }

        // '<S284>:1:291'
        numberWP_count = static_cast<uint32_T>(numberWP_count +
            static_cast<uint32_T>(stateWP->size[0]));
    }

    FlightMissionMode_emxFree_real_T_n(&stateWP);
    FlightMissionMode_emxFree_uavDubinsPathSegment_10(&localDW->pathSegment0);
}

static void FlightMissionMode_emxFreeMatrix_cell_wrap_2
    (cell_wrap_2_FlightMissionMode_T pMatrix[500])
{
    for (int32_T i{0}; i < 500; i++) {
        FlightMissionMode_emxFreeStruct_cell_wrap_2(&pMatrix[i]);
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_do_vectors_m(real_T c_data[], int32_T c_size[2],
    int32_T ia_data[], int32_T *ia_size, int32_T *ib_size)
{
    static const real_T b_a[28]{ 6.384265086E+9, 6.384265284E+9, 6.384480708E+9,
        6.384480906E+9, 6.384473283E+9, 6.384263997E+9, 2.1067690282E+11,
        2.10676902826E+11, 2.10677124976E+11, 2.10677124982E+11,
        2.10677124751E+11, 2.10676902787E+11, 2.10680747748E+11,
        2.10680754288E+11, 2.10687863274E+11, 2.10687869814E+11,
        2.10687618255E+11, 2.10680711811E+11, 6.384264226E+9, 6.384264232E+9,
        6.384264001E+9, 6.38447332E+9, 6.384473281E+9, 6.384473314E+9,
        6.384265282E+9, 6.384480904E+9, 6.38426509E+9, 6.384480712E+9 };

    static const int32_T e[28]{ 6, 21, 19, 20, 1, 27, 25, 2, 23, 5, 24, 22, 3,
        28, 26, 4, 12, 7, 8, 11, 9, 10, 18, 13, 14, 17, 15, 16 };

    static const int8_T f[28]{ 6, 21, 19, 20, 1, 27, 25, 2, 23, 5, 24, 22, 3, 28,
        26, 4, 12, 7, 8, 11, 9, 10, 18, 13, 14, 17, 15, 16 };

    emxArray_int32_T_28_FlightMissionMode_T ia_data_0;
    int32_T a;
    int32_T iafirst;
    int32_T ialast;
    int32_T nc;
    int32_T nia;
    c_size[0] = 1;
    *ib_size = 0;
    nc = 0;
    nia = -1;
    iafirst = 0;
    ialast = 1;
    while (ialast <= 28) {
        a = ialast;
        skip_to_last_equal_value_g4hWwl2B(&a, b_a, e);
        nc = static_cast<int32_T>(nc + 1);
        nia = static_cast<int32_T>(nia + 1);
        ia_data[nia] = static_cast<int32_T>(f[iafirst]);
        ialast = static_cast<int32_T>(a + 1);
        iafirst = a;
    }

    if (1 > static_cast<int32_T>(nia + 1)) {
        iafirst = -1;
    } else {
        iafirst = nia;
    }

    *ia_size = static_cast<int32_T>(iafirst + 1);
    FlightMissionMode_sort_m(ia_data, ia_size, ia_data_0.data, &ia_data_0.size);
    for (iafirst = 0; iafirst <= nia; iafirst = static_cast<int32_T>(iafirst + 1))
    {
        c_data[iafirst] = b_a[static_cast<int32_T>(ia_data[iafirst] - 1)];
    }

    if (1 > nc) {
        c_size[1] = 0;
    } else {
        c_size[1] = nc;
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_do_vectors_m3(const real_T b_data[], const int32_T
    *b_size, real_T c_data[], int32_T c_size[2], int32_T ia_data[], int32_T
    *ia_size, int32_T *ib_size)
{
    emxArray_int32_T_28_FlightMissionMode_T ia_data_0;
    real_T tmp[28];
    int32_T bperm_data[28];
    int32_T iwork_data[28];
    int32_T b_k;
    int32_T i;
    int32_T i2;
    int32_T i_0;
    int32_T j;
    int32_T k;
    int32_T kEnd;
    int32_T n;
    int32_T pEnd;
    int32_T qEnd;
    c_size[0] = 1;
    *ib_size = 0;
    i = static_cast<int32_T>(static_cast<int8_T>(*b_size));
    for (i_0 = 0; i_0 <= static_cast<int32_T>(i - 1); i_0++) {
        bperm_data[i_0] = 0;
    }

    if (*b_size != 0) {
        for (i = 1; i <= static_cast<int32_T>(static_cast<int32_T>(*b_size + 1)
                - 2); i = static_cast<int32_T>(i + 2)) {
            if (b_data[static_cast<int32_T>(i - 1)] <= b_data[i]) {
                bperm_data[static_cast<int32_T>(i - 1)] = i;
                bperm_data[i] = static_cast<int32_T>(i + 1);
            } else {
                bperm_data[static_cast<int32_T>(i - 1)] = static_cast<int32_T>(i
                    + 1);
                bperm_data[i] = i;
            }
        }

        if (static_cast<uint32_T>(static_cast<uint32_T>(*b_size) & 1U) != 0U) {
            bperm_data[static_cast<int32_T>(*b_size - 1)] = *b_size;
        }

        i = 2;
        while (i < static_cast<int32_T>(static_cast<int32_T>(*b_size + 1) - 1))
        {
            i2 = static_cast<int32_T>(i << 1);
            j = 1;
            pEnd = static_cast<int32_T>(i + 1);
            while (pEnd < static_cast<int32_T>(*b_size + 1)) {
                int32_T c_k;
                int32_T q;
                n = j;
                q = pEnd;
                qEnd = static_cast<int32_T>(j + i2);
                if (qEnd > static_cast<int32_T>(*b_size + 1)) {
                    qEnd = static_cast<int32_T>(*b_size + 1);
                }

                c_k = 0;
                kEnd = static_cast<int32_T>(qEnd - j);
                while (static_cast<int32_T>(c_k + 1) <= kEnd) {
                    int32_T tmp_0;
                    i_0 = bperm_data[static_cast<int32_T>(q - 1)];
                    tmp_0 = bperm_data[static_cast<int32_T>(n - 1)];
                    if (b_data[static_cast<int32_T>(tmp_0 - 1)] <= b_data[
                            static_cast<int32_T>(i_0 - 1)]) {
                        iwork_data[c_k] = tmp_0;
                        n = static_cast<int32_T>(n + 1);
                        if (n == pEnd) {
                            while (q < qEnd) {
                                c_k = static_cast<int32_T>(c_k + 1);
                                iwork_data[c_k] = bperm_data[static_cast<int32_T>
                                    (q - 1)];
                                q = static_cast<int32_T>(q + 1);
                            }
                        }
                    } else {
                        iwork_data[c_k] = i_0;
                        q = static_cast<int32_T>(q + 1);
                        if (q == qEnd) {
                            while (n < pEnd) {
                                c_k = static_cast<int32_T>(c_k + 1);
                                iwork_data[c_k] = bperm_data[static_cast<int32_T>
                                    (n - 1)];
                                n = static_cast<int32_T>(n + 1);
                            }
                        }
                    }

                    c_k = static_cast<int32_T>(c_k + 1);
                }

                for (pEnd = 0; pEnd <= static_cast<int32_T>(kEnd - 1); pEnd =
                        static_cast<int32_T>(pEnd + 1)) {
                    bperm_data[static_cast<int32_T>(static_cast<int32_T>(j +
                        pEnd) - 1)] = iwork_data[pEnd];
                }

                j = qEnd;
                pEnd = static_cast<int32_T>(qEnd + i);
            }

            i = i2;
        }
    }

    n = 0;
    i = -1;
    i2 = 0;
    j = 1;
    qEnd = 1;
    while ((j <= 28) && (qEnd <= *b_size)) {
        real_T ak;
        real_T b_absx;
        real_T bk;
        boolean_T exitg1;
        kEnd = j;
        for (i_0 = 0; i_0 < 28; i_0++) {
            tmp[i_0] = static_cast<real_T>(i_0) + 1.0;
            iwork_data[i_0] = static_cast<int32_T>(i_0 + 1);
        }

        ak = skip_to_last_equal_value_g4hWwl2B(&kEnd, tmp, iwork_data);
        j = kEnd;
        pEnd = qEnd;
        bk = b_data[static_cast<int32_T>(bperm_data[static_cast<int32_T>(qEnd -
            1)] - 1)];
        exitg1 = false;
        while ((!exitg1) && (pEnd < *b_size)) {
            b_absx = std::abs(bk / 2.0);
            if (b_absx <= 2.2250738585072014E-308) {
                b_absx = 4.94065645841247E-324;
            } else {
                frexp(b_absx, &b_k);
                b_absx = std::ldexp(1.0, static_cast<int32_T>(b_k - 53));
            }

            if (std::abs(bk - b_data[static_cast<int32_T>(bperm_data[pEnd] - 1)])
                < b_absx) {
                pEnd = static_cast<int32_T>(pEnd + 1);
            } else {
                exitg1 = true;
            }
        }

        qEnd = pEnd;
        b_absx = std::abs(bk / 2.0);
        if (b_absx <= 2.2250738585072014E-308) {
            b_absx = 4.94065645841247E-324;
        } else {
            frexp(b_absx, &k);
            b_absx = std::ldexp(1.0, static_cast<int32_T>(k - 53));
        }

        if (std::abs(bk - ak) < b_absx) {
            j = static_cast<int32_T>(kEnd + 1);
            i2 = kEnd;
            qEnd = static_cast<int32_T>(pEnd + 1);
        } else if (ak < bk) {
            n = static_cast<int32_T>(n + 1);
            i = static_cast<int32_T>(i + 1);
            ia_data[i] = static_cast<int32_T>(i2 + 1);
            j = static_cast<int32_T>(kEnd + 1);
            i2 = kEnd;
        } else {
            qEnd = static_cast<int32_T>(pEnd + 1);
        }
    }

    while (j <= 28) {
        b_k = j;
        for (i_0 = 0; i_0 < 28; i_0++) {
            tmp[i_0] = static_cast<real_T>(i_0) + 1.0;
            iwork_data[i_0] = static_cast<int32_T>(i_0 + 1);
        }

        skip_to_last_equal_value_g4hWwl2B(&b_k, tmp, iwork_data);
        n = static_cast<int32_T>(n + 1);
        i = static_cast<int32_T>(i + 1);
        ia_data[i] = static_cast<int32_T>(i2 + 1);
        j = static_cast<int32_T>(b_k + 1);
        i2 = b_k;
    }

    if (1 > static_cast<int32_T>(i + 1)) {
        i2 = -1;
    } else {
        i2 = i;
    }

    *ia_size = static_cast<int32_T>(i2 + 1);
    FlightMissionMode_sort_m(ia_data, ia_size, ia_data_0.data, &ia_data_0.size);
    for (b_k = 0; b_k <= i; b_k = static_cast<int32_T>(b_k + 1)) {
        c_data[b_k] = static_cast<real_T>(static_cast<int32_T>(ia_data[b_k] - 1))
            + 1.0;
    }

    if (1 > n) {
        c_size[1] = 0;
    } else {
        c_size[1] = n;
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_sort_mk(real_T x_data[], const int32_T *x_size)
{
    real_T b_x_data[28];
    real_T vwork_data[28];
    real_T x4[4];
    int32_T idx_data[28];
    int32_T iwork_data[28];
    int32_T b;
    int32_T dim;
    int32_T n;
    int32_T vstride;
    int32_T vwork_size_idx_0;
    int8_T idx4[4];
    int8_T perm[4];
    dim = 2;
    if (*x_size != 1) {
        dim = 1;
        b = static_cast<int32_T>(*x_size - 1);
    } else {
        b = 0;
    }

    vwork_size_idx_0 = static_cast<int32_T>(b + 1);
    vstride = 1;
    n = 0;
    while (n <= static_cast<int32_T>(dim - 2)) {
        vstride = static_cast<int32_T>(vstride * *x_size);
        n = 1;
    }

    for (dim = 0; dim <= static_cast<int32_T>(vstride - 1); dim = static_cast<
            int32_T>(dim + 1)) {
        for (n = 0; n <= b; n = static_cast<int32_T>(n + 1)) {
            vwork_data[n] = x_data[static_cast<int32_T>(static_cast<int32_T>(n *
                vstride) + dim)];
        }

        for (n = 0; n <= static_cast<int32_T>(vwork_size_idx_0 - 1); n++) {
            b_x_data[n] = vwork_data[n];
        }

        if (vwork_size_idx_0 != 0) {
            int32_T ib;
            int32_T nPairs;
            int32_T nTail;
            ib = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
            for (n = 0; n <= static_cast<int32_T>(ib - 1); n++) {
                idx_data[n] = 0;
            }

            x4[0] = 0.0;
            idx4[0] = 0;
            x4[1] = 0.0;
            idx4[1] = 0;
            x4[2] = 0.0;
            idx4[2] = 0;
            x4[3] = 0.0;
            idx4[3] = 0;
            ib = 0;
            for (nPairs = 0; nPairs <= static_cast<int32_T>(vwork_size_idx_0 - 1);
                 nPairs = static_cast<int32_T>(nPairs + 1)) {
                ib = static_cast<int32_T>(ib + 1);
                idx4[static_cast<int32_T>(ib - 1)] = static_cast<int8_T>(
                    static_cast<int32_T>(nPairs + 1));
                x4[static_cast<int32_T>(ib - 1)] = b_x_data[nPairs];
                if (ib == 4) {
                    real_T tmp;
                    real_T tmp_0;
                    int32_T i4;
                    if (x4[0] <= x4[1]) {
                        ib = 1;
                        nTail = 2;
                    } else {
                        ib = 2;
                        nTail = 1;
                    }

                    if (x4[2] <= x4[3]) {
                        n = 3;
                        i4 = 4;
                    } else {
                        n = 4;
                        i4 = 3;
                    }

                    tmp = x4[static_cast<int32_T>(ib - 1)];
                    tmp_0 = x4[static_cast<int32_T>(n - 1)];
                    if (tmp <= tmp_0) {
                        tmp = x4[static_cast<int32_T>(nTail - 1)];
                        if (tmp <= tmp_0) {
                            perm[0] = static_cast<int8_T>(ib);
                            perm[1] = static_cast<int8_T>(nTail);
                            perm[2] = static_cast<int8_T>(n);
                            perm[3] = static_cast<int8_T>(i4);
                        } else if (tmp <= x4[static_cast<int32_T>(i4 - 1)]) {
                            perm[0] = static_cast<int8_T>(ib);
                            perm[1] = static_cast<int8_T>(n);
                            perm[2] = static_cast<int8_T>(nTail);
                            perm[3] = static_cast<int8_T>(i4);
                        } else {
                            perm[0] = static_cast<int8_T>(ib);
                            perm[1] = static_cast<int8_T>(n);
                            perm[2] = static_cast<int8_T>(i4);
                            perm[3] = static_cast<int8_T>(nTail);
                        }
                    } else {
                        tmp_0 = x4[static_cast<int32_T>(i4 - 1)];
                        if (tmp <= tmp_0) {
                            if (x4[static_cast<int32_T>(nTail - 1)] <= tmp_0) {
                                perm[0] = static_cast<int8_T>(n);
                                perm[1] = static_cast<int8_T>(ib);
                                perm[2] = static_cast<int8_T>(nTail);
                                perm[3] = static_cast<int8_T>(i4);
                            } else {
                                perm[0] = static_cast<int8_T>(n);
                                perm[1] = static_cast<int8_T>(ib);
                                perm[2] = static_cast<int8_T>(i4);
                                perm[3] = static_cast<int8_T>(nTail);
                            }
                        } else {
                            perm[0] = static_cast<int8_T>(n);
                            perm[1] = static_cast<int8_T>(i4);
                            perm[2] = static_cast<int8_T>(ib);
                            perm[3] = static_cast<int8_T>(nTail);
                        }
                    }

                    idx_data[static_cast<int32_T>(nPairs - 3)] =
                        static_cast<int32_T>(idx4[static_cast<int32_T>(
                        static_cast<int32_T>(perm[0]) - 1)]);
                    idx_data[static_cast<int32_T>(nPairs - 2)] =
                        static_cast<int32_T>(idx4[static_cast<int32_T>(
                        static_cast<int32_T>(perm[1]) - 1)]);
                    idx_data[static_cast<int32_T>(nPairs - 1)] =
                        static_cast<int32_T>(idx4[static_cast<int32_T>(
                        static_cast<int32_T>(perm[2]) - 1)]);
                    idx_data[nPairs] = static_cast<int32_T>(idx4
                        [static_cast<int32_T>(static_cast<int32_T>(perm[3]) - 1)]);
                    b_x_data[static_cast<int32_T>(nPairs - 3)] = x4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[0]) - 1)];
                    b_x_data[static_cast<int32_T>(nPairs - 2)] = x4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[1]) - 1)];
                    b_x_data[static_cast<int32_T>(nPairs - 1)] = x4[static_cast<
                        int32_T>(static_cast<int32_T>(perm[2]) - 1)];
                    b_x_data[nPairs] = x4[static_cast<int32_T>
                        (static_cast<int32_T>(perm[3]) - 1)];
                    ib = 0;
                }
            }

            if (ib > 0) {
                perm[1] = 0;
                perm[2] = 0;
                perm[3] = 0;
                switch (ib) {
                  case 1:
                    perm[0] = 1;
                    break;

                  case 2:
                    if (x4[0] <= x4[1]) {
                        perm[0] = 1;
                        perm[1] = 2;
                    } else {
                        perm[0] = 2;
                        perm[1] = 1;
                    }
                    break;

                  default:
                    if (x4[0] <= x4[1]) {
                        if (x4[1] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 2;
                            perm[2] = 3;
                        } else if (x4[0] <= x4[2]) {
                            perm[0] = 1;
                            perm[1] = 3;
                            perm[2] = 2;
                        } else {
                            perm[0] = 3;
                            perm[1] = 1;
                            perm[2] = 2;
                        }
                    } else if (x4[0] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 1;
                        perm[2] = 3;
                    } else if (x4[1] <= x4[2]) {
                        perm[0] = 2;
                        perm[1] = 3;
                        perm[2] = 1;
                    } else {
                        perm[0] = 3;
                        perm[1] = 2;
                        perm[2] = 1;
                    }
                    break;
                }

                for (nPairs = 0; nPairs <= static_cast<int32_T>(ib - 1); nPairs =
                     static_cast<int32_T>(nPairs + 1)) {
                    nTail = static_cast<int32_T>(static_cast<int32_T>
                        (perm[nPairs]) - 1);
                    n = static_cast<int32_T>(static_cast<int32_T>
                        (vwork_size_idx_0 - ib) + nPairs);
                    idx_data[n] = static_cast<int32_T>(idx4[nTail]);
                    b_x_data[n] = x4[nTail];
                }
            }

            if (vwork_size_idx_0 > 1) {
                ib = static_cast<int32_T>(static_cast<int8_T>(vwork_size_idx_0));
                for (n = 0; n <= static_cast<int32_T>(ib - 1); n++) {
                    iwork_data[n] = 0;
                }

                for (n = 0; n <= static_cast<int32_T>(vwork_size_idx_0 - 1); n++)
                {
                    vwork_data[n] = 0.0;
                }

                nPairs = static_cast<int32_T>(vwork_size_idx_0 >> 2);
                n = 4;
                while (nPairs > 1) {
                    if (static_cast<uint32_T>(static_cast<uint32_T>(nPairs) & 1U)
                        != 0U) {
                        nPairs = static_cast<int32_T>(nPairs - 1);
                        ib = static_cast<int32_T>(n * nPairs);
                        nTail = static_cast<int32_T>(vwork_size_idx_0 - ib);
                        if (nTail > n) {
                            FlightMissionMode_merge_br(idx_data, b_x_data, ib, n,
                                static_cast<int32_T>(nTail - n), iwork_data,
                                vwork_data);
                        }
                    }

                    ib = static_cast<int32_T>(n << 1);
                    nPairs = static_cast<int32_T>(nPairs >> 1);
                    for (nTail = 0; nTail <= static_cast<int32_T>(nPairs - 1);
                            nTail = static_cast<int32_T>(nTail + 1)) {
                        FlightMissionMode_merge_br(idx_data, b_x_data,
                            static_cast<int32_T>(nTail * ib), n, n, iwork_data,
                            vwork_data);
                    }

                    n = ib;
                }

                if (vwork_size_idx_0 > n) {
                    FlightMissionMode_merge_br(idx_data, b_x_data, 0, n,
                        static_cast<int32_T>(vwork_size_idx_0 - n), iwork_data,
                        vwork_data);
                }
            }
        }

        for (n = 0; n <= static_cast<int32_T>(vwork_size_idx_0 - 1); n++) {
            vwork_data[n] = b_x_data[n];
        }

        for (n = 0; n <= b; n = static_cast<int32_T>(n + 1)) {
            x_data[static_cast<int32_T>(dim + static_cast<int32_T>(n * vstride))]
                = b_x_data[n];
        }
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_o3u(
    const real_T varargin_1[4], const real_T varargin_2[4], real_T varargin_3,
    real_T varargin_4, real_T varargin_5, real_T varargin_6, const
    cell_wrap_10_FlightMissionMode_T varargin_7[4], const real_T varargin_8[4],
    uavDubinsPathSegment_FlightMissionMode_b_T *b_this)
{
    static const char_T d[128]{ '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
        '\x06', '\x07', '\x08', '\x09', '\x0a', '\x0b', '\x0c', '\x0d', '\x0e',
        '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17',
        '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!',
        '\"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
        '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
        'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',
        'Z', '[', '\\', ']', '^', '_', '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
        'V', 'W', 'X', 'Y', 'Z', '{', '|', '}', '~', '\x7f' };

    real_T thetaWrap;
    int32_T k;
    b_this->MinTurningRadius = varargin_5;
    b_this->StartPose[0] = varargin_1[0];
    b_this->StartPose[1] = varargin_1[1];
    b_this->StartPose[2] = varargin_1[2];
    thetaWrap = mod_ZflSpsmf(varargin_1[3]);
    b_this->StartPose[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (varargin_1[3] > 0.0)))) {
        b_this->StartPose[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->StartPose[3]);
    b_this->GoalPose[0] = varargin_2[0];
    b_this->GoalPose[1] = varargin_2[1];
    b_this->GoalPose[2] = varargin_2[2];
    thetaWrap = mod_ZflSpsmf(varargin_2[3]);
    b_this->GoalPose[3] = thetaWrap;
    if (static_cast<boolean_T>(static_cast<int32_T>((thetaWrap == 0.0) &
            (varargin_2[3] > 0.0)))) {
        b_this->GoalPose[3] = 6.2831853071795862;
    }

    wrapToPi_eKulZbfm(&b_this->GoalPose[3]);
    b_this->AirSpeed = varargin_4;
    b_this->HelixRadius = varargin_6;
    b_this->FlightPathAngle = varargin_3;
    b_this->MotionLengths[0] = varargin_8[0];
    b_this->MotionTypes[0] = varargin_7[0];
    b_this->MotionLengths[1] = varargin_8[1];
    b_this->MotionTypes[1] = varargin_7[1];
    b_this->MotionLengths[2] = varargin_8[2];
    b_this->MotionTypes[2] = varargin_7[2];
    b_this->MotionLengths[3] = varargin_8[3];
    b_this->MotionTypes[3] = varargin_7[3];
    b_this->MotionTypes[0].f1.size[0] = 1;
    b_this->MotionTypes[0].f1.size[1] = varargin_7[0].f1.size[1];
    for (k = 0; k <= static_cast<int32_T>(varargin_7[0].f1.size[1] - 1); k =
            static_cast<int32_T>(k + 1)) {
        b_this->MotionTypes[0].f1.data[k] = d[static_cast<int32_T>(static_cast<
            uint8_T>(varargin_7[0].f1.data[k]))];
    }

    b_this->MotionTypes[1].f1.size[0] = 1;
    b_this->MotionTypes[1].f1.size[1] = 1;
    b_this->MotionTypes[1].f1.data[0] = d[static_cast<int32_T>
        (static_cast<int32_T>(static_cast<uint8_T>(varargin_7[1].f1.data[0])) &
         127)];
    b_this->MotionTypes[2].f1.size[0] = 1;
    b_this->MotionTypes[2].f1.size[1] = 1;
    b_this->MotionTypes[2].f1.data[0] = d[static_cast<int32_T>
        (static_cast<int32_T>(static_cast<uint8_T>(varargin_7[2].f1.data[0])) &
         127)];
    b_this->MotionTypes[3].f1.size[0] = 1;
    b_this->MotionTypes[3].f1.size[1] = varargin_7[3].f1.size[1];
    for (k = 0; k <= static_cast<int32_T>(varargin_7[3].f1.size[1] - 1); k =
            static_cast<int32_T>(k + 1)) {
        b_this->MotionTypes[3].f1.data[k] = d[static_cast<int32_T>
            (static_cast<uint8_T>(varargin_7[3].f1.data[k]))];
    }

    if (FlightMissionMode_strcmp_o(b_this->MotionTypes[0].f1.data,
            b_this->MotionTypes[0].f1.size)) {
        b_this->MotionTypes[0].f1.size[0] = 1;
        b_this->MotionTypes[0].f1.size[1] = 2;
        b_this->MotionTypes[0].f1.data[0] = 'H';
        b_this->MotionTypes[0].f1.data[1] = 'l';
    } else if (FlightMissionMode_strcmp_op(b_this->MotionTypes[0].f1.data,
                b_this->MotionTypes[0].f1.size)) {
        b_this->MotionTypes[0].f1.size[0] = 1;
        b_this->MotionTypes[0].f1.size[1] = 2;
        b_this->MotionTypes[0].f1.data[0] = 'H';
        b_this->MotionTypes[0].f1.data[1] = 'r';
    } else if (FlightMissionMode_strcmp_op(b_this->MotionTypes[3].f1.data,
                b_this->MotionTypes[3].f1.size)) {
        b_this->MotionTypes[3].f1.size[0] = 1;
        b_this->MotionTypes[3].f1.size[1] = 2;
        b_this->MotionTypes[3].f1.data[0] = 'H';
        b_this->MotionTypes[3].f1.data[1] = 'r';
    } else if (FlightMissionMode_strcmp_o(b_this->MotionTypes[3].f1.data,
                b_this->MotionTypes[3].f1.size)) {
        b_this->MotionTypes[3].f1.size[0] = 1;
        b_this->MotionTypes[3].f1.size[1] = 2;
        b_this->MotionTypes[3].f1.data[0] = 'H';
        b_this->MotionTypes[3].f1.data[1] = 'l';
    }

    b_this->Length = ((varargin_8[0] + varargin_8[1]) + varargin_8[2]) +
        varargin_8[3];
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_uavDubinsBuiltins_connect_o(const
    uavDubinsConnection_FlightMissionMode_T *obj, const real_T startPose[4],
    const real_T goalPose[4], real_T turningRadius, const real_T dpt_data[],
    const int32_T *dpt_size, uavDubinsPathSegment_FlightMissionMode_b_T
    *pathSegObjs, real_T *pathCosts)
{
    void* b_obj_UAVDubinsBuildableObj;
    cell_wrap_10_FlightMissionMode_T ac;
    cell_wrap_10_FlightMissionMode_T ad;
    cell_wrap_10_FlightMissionMode_T ae;
    cell_wrap_10_FlightMissionMode_T af;
    cell_wrap_10_FlightMissionMode_T bc;
    cell_wrap_10_FlightMissionMode_T bd;
    cell_wrap_10_FlightMissionMode_T be;
    cell_wrap_10_FlightMissionMode_T bf;
    cell_wrap_10_FlightMissionMode_T cc;
    cell_wrap_10_FlightMissionMode_T cd;
    cell_wrap_10_FlightMissionMode_T ce;
    cell_wrap_10_FlightMissionMode_T cf;
    cell_wrap_10_FlightMissionMode_T dc;
    cell_wrap_10_FlightMissionMode_T dd;
    cell_wrap_10_FlightMissionMode_T de;
    cell_wrap_10_FlightMissionMode_T df;
    cell_wrap_10_FlightMissionMode_T ec;
    cell_wrap_10_FlightMissionMode_T ed;
    cell_wrap_10_FlightMissionMode_T ee;
    cell_wrap_10_FlightMissionMode_T ef;
    cell_wrap_10_FlightMissionMode_T fc;
    cell_wrap_10_FlightMissionMode_T fd;
    cell_wrap_10_FlightMissionMode_T fe;
    cell_wrap_10_FlightMissionMode_T ff;
    cell_wrap_10_FlightMissionMode_T gc;
    cell_wrap_10_FlightMissionMode_T gd;
    cell_wrap_10_FlightMissionMode_T ge;
    cell_wrap_10_FlightMissionMode_T gf;
    cell_wrap_10_FlightMissionMode_T hc;
    cell_wrap_10_FlightMissionMode_T hd;
    cell_wrap_10_FlightMissionMode_T he;
    cell_wrap_10_FlightMissionMode_T hf;
    cell_wrap_10_FlightMissionMode_T ib;
    cell_wrap_10_FlightMissionMode_T ic;
    cell_wrap_10_FlightMissionMode_T id;
    cell_wrap_10_FlightMissionMode_T ie;
    cell_wrap_10_FlightMissionMode_T jb;
    cell_wrap_10_FlightMissionMode_T jc;
    cell_wrap_10_FlightMissionMode_T jd;
    cell_wrap_10_FlightMissionMode_T je;
    cell_wrap_10_FlightMissionMode_T jf;
    cell_wrap_10_FlightMissionMode_T kb;
    cell_wrap_10_FlightMissionMode_T kc;
    cell_wrap_10_FlightMissionMode_T kd;
    cell_wrap_10_FlightMissionMode_T ke;
    cell_wrap_10_FlightMissionMode_T kf;
    cell_wrap_10_FlightMissionMode_T lb;
    cell_wrap_10_FlightMissionMode_T lc;
    cell_wrap_10_FlightMissionMode_T ld;
    cell_wrap_10_FlightMissionMode_T le;
    cell_wrap_10_FlightMissionMode_T lf;
    cell_wrap_10_FlightMissionMode_T mb;
    cell_wrap_10_FlightMissionMode_T mc;
    cell_wrap_10_FlightMissionMode_T md;
    cell_wrap_10_FlightMissionMode_T me;
    cell_wrap_10_FlightMissionMode_T mf;
    cell_wrap_10_FlightMissionMode_T nb;
    cell_wrap_10_FlightMissionMode_T nc;
    cell_wrap_10_FlightMissionMode_T nd;
    cell_wrap_10_FlightMissionMode_T ne;
    cell_wrap_10_FlightMissionMode_T nf;
    cell_wrap_10_FlightMissionMode_T ob;
    cell_wrap_10_FlightMissionMode_T oc;
    cell_wrap_10_FlightMissionMode_T od;
    cell_wrap_10_FlightMissionMode_T oe;
    cell_wrap_10_FlightMissionMode_T of;
    cell_wrap_10_FlightMissionMode_T pb;
    cell_wrap_10_FlightMissionMode_T pc;
    cell_wrap_10_FlightMissionMode_T pd;
    cell_wrap_10_FlightMissionMode_T pe;
    cell_wrap_10_FlightMissionMode_T pf;
    cell_wrap_10_FlightMissionMode_T qb;
    cell_wrap_10_FlightMissionMode_T qc;
    cell_wrap_10_FlightMissionMode_T qd;
    cell_wrap_10_FlightMissionMode_T qe;
    cell_wrap_10_FlightMissionMode_T qf;
    cell_wrap_10_FlightMissionMode_T rb;
    cell_wrap_10_FlightMissionMode_T rc;
    cell_wrap_10_FlightMissionMode_T rd;
    cell_wrap_10_FlightMissionMode_T re;
    cell_wrap_10_FlightMissionMode_T rf;
    cell_wrap_10_FlightMissionMode_T sb;
    cell_wrap_10_FlightMissionMode_T sc;
    cell_wrap_10_FlightMissionMode_T sd;
    cell_wrap_10_FlightMissionMode_T se;
    cell_wrap_10_FlightMissionMode_T sf;
    cell_wrap_10_FlightMissionMode_T tb;
    cell_wrap_10_FlightMissionMode_T tc;
    cell_wrap_10_FlightMissionMode_T td;
    cell_wrap_10_FlightMissionMode_T te;
    cell_wrap_10_FlightMissionMode_T tf;
    cell_wrap_10_FlightMissionMode_T ub;
    cell_wrap_10_FlightMissionMode_T uc;
    cell_wrap_10_FlightMissionMode_T ud;
    cell_wrap_10_FlightMissionMode_T ue;
    cell_wrap_10_FlightMissionMode_T uf;
    cell_wrap_10_FlightMissionMode_T vb;
    cell_wrap_10_FlightMissionMode_T vc;
    cell_wrap_10_FlightMissionMode_T vd;
    cell_wrap_10_FlightMissionMode_T ve;
    cell_wrap_10_FlightMissionMode_T wb;
    cell_wrap_10_FlightMissionMode_T wc;
    cell_wrap_10_FlightMissionMode_T wd;
    cell_wrap_10_FlightMissionMode_T we;
    cell_wrap_10_FlightMissionMode_T xb;
    cell_wrap_10_FlightMissionMode_T xc;
    cell_wrap_10_FlightMissionMode_T xd;
    cell_wrap_10_FlightMissionMode_T xe;
    cell_wrap_10_FlightMissionMode_T yb;
    cell_wrap_10_FlightMissionMode_T yc;
    cell_wrap_10_FlightMissionMode_T yd;
    cell_wrap_10_FlightMissionMode_T ye;
    cell_wrap_22_FlightMissionMode_p_T motionTypes[28];
    cell_wrap_22_FlightMissionMode_p_T b;
    real_T g[16];
    real_T ml[16];
    real_T ml1[16];
    real_T s[16];
    real_T b_goalPose[4];
    real_T b_startPose[4];
    real_T ml1_0[4];
    real_T b_a;
    real_T b_fpa;
    real_T h;
    real_T mt;
    real_T mtr;
    ib.f1.size[0] = 1;
    ib.f1.size[1] = 1;
    ib.f1.data[0] = 'L';
    jb.f1.size[0] = 1;
    jb.f1.size[1] = 1;
    jb.f1.data[0] = 'S';
    kb.f1.size[0] = 1;
    kb.f1.size[1] = 1;
    kb.f1.data[0] = 'L';
    lb.f1.size[0] = 1;
    lb.f1.size[1] = 1;
    lb.f1.data[0] = 'N';
    b.f1[0] = ib;
    b.f1[1] = jb;
    b.f1[2] = kb;
    b.f1[3] = lb;
    mb.f1.size[0] = 1;
    mb.f1.size[1] = 1;
    mb.f1.data[0] = 'L';
    nb.f1.size[0] = 1;
    nb.f1.size[1] = 1;
    nb.f1.data[0] = 'S';
    ob.f1.size[0] = 1;
    ob.f1.size[1] = 1;
    ob.f1.data[0] = 'R';
    pb.f1.size[0] = 1;
    pb.f1.size[1] = 1;
    pb.f1.data[0] = 'N';
    qb.f1.size[0] = 1;
    qb.f1.size[1] = 1;
    qb.f1.data[0] = 'R';
    rb.f1.size[0] = 1;
    rb.f1.size[1] = 1;
    rb.f1.data[0] = 'S';
    sb.f1.size[0] = 1;
    sb.f1.size[1] = 1;
    sb.f1.data[0] = 'L';
    tb.f1.size[0] = 1;
    tb.f1.size[1] = 1;
    tb.f1.data[0] = 'N';
    ub.f1.size[0] = 1;
    ub.f1.size[1] = 1;
    ub.f1.data[0] = 'R';
    vb.f1.size[0] = 1;
    vb.f1.size[1] = 1;
    vb.f1.data[0] = 'S';
    wb.f1.size[0] = 1;
    wb.f1.size[1] = 1;
    wb.f1.data[0] = 'R';
    xb.f1.size[0] = 1;
    xb.f1.size[1] = 1;
    xb.f1.data[0] = 'N';
    yb.f1.size[0] = 1;
    yb.f1.size[1] = 1;
    yb.f1.data[0] = 'R';
    ac.f1.size[0] = 1;
    ac.f1.size[1] = 1;
    ac.f1.data[0] = 'L';
    bc.f1.size[0] = 1;
    bc.f1.size[1] = 1;
    bc.f1.data[0] = 'R';
    cc.f1.size[0] = 1;
    cc.f1.size[1] = 1;
    cc.f1.data[0] = 'N';
    dc.f1.size[0] = 1;
    dc.f1.size[1] = 1;
    dc.f1.data[0] = 'L';
    ec.f1.size[0] = 1;
    ec.f1.size[1] = 1;
    ec.f1.data[0] = 'R';
    fc.f1.size[0] = 1;
    fc.f1.size[1] = 1;
    fc.f1.data[0] = 'L';
    gc.f1.size[0] = 1;
    gc.f1.size[1] = 1;
    gc.f1.data[0] = 'N';
    hc.f1.size[0] = 1;
    hc.f1.size[1] = 2;
    ic.f1.size[0] = 1;
    ic.f1.size[1] = 1;
    ic.f1.data[0] = 'L';
    jc.f1.size[0] = 1;
    jc.f1.size[1] = 1;
    jc.f1.data[0] = 'S';
    kc.f1.size[0] = 1;
    kc.f1.size[1] = 1;
    kc.f1.data[0] = 'L';
    lc.f1.size[0] = 1;
    lc.f1.size[1] = 2;
    mc.f1.size[0] = 1;
    mc.f1.size[1] = 1;
    mc.f1.data[0] = 'L';
    nc.f1.size[0] = 1;
    nc.f1.size[1] = 1;
    nc.f1.data[0] = 'S';
    oc.f1.size[0] = 1;
    oc.f1.size[1] = 1;
    oc.f1.data[0] = 'R';
    pc.f1.size[0] = 1;
    pc.f1.size[1] = 2;
    qc.f1.size[0] = 1;
    qc.f1.size[1] = 1;
    qc.f1.data[0] = 'R';
    rc.f1.size[0] = 1;
    rc.f1.size[1] = 1;
    rc.f1.data[0] = 'S';
    sc.f1.size[0] = 1;
    sc.f1.size[1] = 1;
    sc.f1.data[0] = 'L';
    tc.f1.size[0] = 1;
    tc.f1.size[1] = 2;
    uc.f1.size[0] = 1;
    uc.f1.size[1] = 1;
    uc.f1.data[0] = 'R';
    vc.f1.size[0] = 1;
    vc.f1.size[1] = 1;
    vc.f1.data[0] = 'S';
    wc.f1.size[0] = 1;
    wc.f1.size[1] = 1;
    wc.f1.data[0] = 'R';
    xc.f1.size[0] = 1;
    xc.f1.size[1] = 2;
    yc.f1.size[0] = 1;
    yc.f1.size[1] = 1;
    yc.f1.data[0] = 'R';
    ad.f1.size[0] = 1;
    ad.f1.size[1] = 1;
    ad.f1.data[0] = 'L';
    bd.f1.size[0] = 1;
    bd.f1.size[1] = 1;
    bd.f1.data[0] = 'R';
    cd.f1.size[0] = 1;
    cd.f1.size[1] = 2;
    dd.f1.size[0] = 1;
    dd.f1.size[1] = 1;
    dd.f1.data[0] = 'L';
    ed.f1.size[0] = 1;
    ed.f1.size[1] = 1;
    ed.f1.data[0] = 'R';
    fd.f1.size[0] = 1;
    fd.f1.size[1] = 1;
    fd.f1.data[0] = 'L';
    gd.f1.size[0] = 1;
    gd.f1.size[1] = 1;
    gd.f1.data[0] = 'L';
    hd.f1.size[0] = 1;
    hd.f1.size[1] = 1;
    hd.f1.data[0] = 'S';
    id.f1.size[0] = 1;
    id.f1.size[1] = 1;
    id.f1.data[0] = 'L';
    jd.f1.size[0] = 1;
    jd.f1.size[1] = 2;
    kd.f1.size[0] = 1;
    kd.f1.size[1] = 1;
    kd.f1.data[0] = 'L';
    ld.f1.size[0] = 1;
    ld.f1.size[1] = 1;
    ld.f1.data[0] = 'S';
    md.f1.size[0] = 1;
    md.f1.size[1] = 1;
    md.f1.data[0] = 'R';
    nd.f1.size[0] = 1;
    nd.f1.size[1] = 2;
    od.f1.size[0] = 1;
    od.f1.size[1] = 1;
    od.f1.data[0] = 'R';
    pd.f1.size[0] = 1;
    pd.f1.size[1] = 1;
    pd.f1.data[0] = 'S';
    qd.f1.size[0] = 1;
    qd.f1.size[1] = 1;
    qd.f1.data[0] = 'L';
    rd.f1.size[0] = 1;
    rd.f1.size[1] = 2;
    sd.f1.size[0] = 1;
    sd.f1.size[1] = 1;
    sd.f1.data[0] = 'R';
    td.f1.size[0] = 1;
    td.f1.size[1] = 1;
    td.f1.data[0] = 'S';
    ud.f1.size[0] = 1;
    ud.f1.size[1] = 1;
    ud.f1.data[0] = 'R';
    vd.f1.size[0] = 1;
    vd.f1.size[1] = 2;
    wd.f1.size[0] = 1;
    wd.f1.size[1] = 1;
    wd.f1.data[0] = 'R';
    xd.f1.size[0] = 1;
    xd.f1.size[1] = 1;
    xd.f1.data[0] = 'L';
    yd.f1.size[0] = 1;
    yd.f1.size[1] = 1;
    yd.f1.data[0] = 'R';
    ae.f1.size[0] = 1;
    ae.f1.size[1] = 2;
    be.f1.size[0] = 1;
    be.f1.size[1] = 1;
    be.f1.data[0] = 'L';
    ce.f1.size[0] = 1;
    ce.f1.size[1] = 1;
    ce.f1.data[0] = 'R';
    de.f1.size[0] = 1;
    de.f1.size[1] = 1;
    de.f1.data[0] = 'L';
    ee.f1.size[0] = 1;
    ee.f1.size[1] = 2;
    hc.f1.data[0] = 'H';
    lc.f1.data[0] = 'H';
    pc.f1.data[0] = 'H';
    tc.f1.data[0] = 'H';
    xc.f1.data[0] = 'H';
    cd.f1.data[0] = 'H';
    jd.f1.data[0] = 'H';
    nd.f1.data[0] = 'H';
    rd.f1.data[0] = 'H';
    vd.f1.data[0] = 'H';
    ae.f1.data[0] = 'H';
    ee.f1.data[0] = 'H';
    hc.f1.data[1] = 'l';
    lc.f1.data[1] = 'l';
    pc.f1.data[1] = 'r';
    tc.f1.data[1] = 'r';
    xc.f1.data[1] = 'r';
    cd.f1.data[1] = 'l';
    jd.f1.data[1] = 'l';
    nd.f1.data[1] = 'r';
    rd.f1.data[1] = 'l';
    vd.f1.data[1] = 'r';
    ae.f1.data[1] = 'r';
    ee.f1.data[1] = 'l';
    fe.f1.size[0] = 1;
    fe.f1.size[1] = 1;
    fe.f1.data[0] = 'L';
    ge.f1.size[0] = 1;
    ge.f1.size[1] = 1;
    ge.f1.data[0] = 'R';
    he.f1.size[0] = 1;
    he.f1.size[1] = 1;
    he.f1.data[0] = 'S';
    ie.f1.size[0] = 1;
    ie.f1.size[1] = 1;
    ie.f1.data[0] = 'L';
    je.f1.size[0] = 1;
    je.f1.size[1] = 1;
    je.f1.data[0] = 'L';
    ke.f1.size[0] = 1;
    ke.f1.size[1] = 1;
    ke.f1.data[0] = 'R';
    le.f1.size[0] = 1;
    le.f1.size[1] = 1;
    le.f1.data[0] = 'S';
    me.f1.size[0] = 1;
    me.f1.size[1] = 1;
    me.f1.data[0] = 'R';
    ne.f1.size[0] = 1;
    ne.f1.size[1] = 1;
    ne.f1.data[0] = 'L';
    oe.f1.size[0] = 1;
    oe.f1.size[1] = 1;
    oe.f1.data[0] = 'R';
    pe.f1.size[0] = 1;
    pe.f1.size[1] = 1;
    pe.f1.data[0] = 'L';
    qe.f1.size[0] = 1;
    qe.f1.size[1] = 1;
    qe.f1.data[0] = 'R';
    re.f1.size[0] = 1;
    re.f1.size[1] = 1;
    re.f1.data[0] = 'R';
    se.f1.size[0] = 1;
    se.f1.size[1] = 1;
    se.f1.data[0] = 'L';
    te.f1.size[0] = 1;
    te.f1.size[1] = 1;
    te.f1.data[0] = 'S';
    ue.f1.size[0] = 1;
    ue.f1.size[1] = 1;
    ue.f1.data[0] = 'R';
    ve.f1.size[0] = 1;
    ve.f1.size[1] = 1;
    ve.f1.data[0] = 'R';
    we.f1.size[0] = 1;
    we.f1.size[1] = 1;
    we.f1.data[0] = 'L';
    xe.f1.size[0] = 1;
    xe.f1.size[1] = 1;
    xe.f1.data[0] = 'R';
    ye.f1.size[0] = 1;
    ye.f1.size[1] = 1;
    ye.f1.data[0] = 'L';
    af.f1.size[0] = 1;
    af.f1.size[1] = 1;
    af.f1.data[0] = 'R';
    bf.f1.size[0] = 1;
    bf.f1.size[1] = 1;
    bf.f1.data[0] = 'L';
    cf.f1.size[0] = 1;
    cf.f1.size[1] = 1;
    cf.f1.data[0] = 'S';
    df.f1.size[0] = 1;
    df.f1.size[1] = 1;
    df.f1.data[0] = 'L';
    ef.f1.size[0] = 1;
    ef.f1.size[1] = 1;
    ef.f1.data[0] = 'L';
    ff.f1.size[0] = 1;
    ff.f1.size[1] = 1;
    ff.f1.data[0] = 'S';
    gf.f1.size[0] = 1;
    gf.f1.size[1] = 1;
    gf.f1.data[0] = 'R';
    hf.f1.size[0] = 1;
    hf.f1.size[1] = 1;
    hf.f1.data[0] = 'L';
    jf.f1.size[0] = 1;
    jf.f1.size[1] = 1;
    jf.f1.data[0] = 'R';
    kf.f1.size[0] = 1;
    kf.f1.size[1] = 1;
    kf.f1.data[0] = 'S';
    lf.f1.size[0] = 1;
    lf.f1.size[1] = 1;
    lf.f1.data[0] = 'R';
    mf.f1.size[0] = 1;
    mf.f1.size[1] = 1;
    mf.f1.data[0] = 'L';
    nf.f1.size[0] = 1;
    nf.f1.size[1] = 1;
    nf.f1.data[0] = 'L';
    of.f1.size[0] = 1;
    of.f1.size[1] = 1;
    of.f1.data[0] = 'S';
    pf.f1.size[0] = 1;
    pf.f1.size[1] = 1;
    pf.f1.data[0] = 'L';
    qf.f1.size[0] = 1;
    qf.f1.size[1] = 1;
    qf.f1.data[0] = 'R';
    rf.f1.size[0] = 1;
    rf.f1.size[1] = 1;
    rf.f1.data[0] = 'R';
    sf.f1.size[0] = 1;
    sf.f1.size[1] = 1;
    sf.f1.data[0] = 'S';
    tf.f1.size[0] = 1;
    tf.f1.size[1] = 1;
    tf.f1.data[0] = 'L';
    uf.f1.size[0] = 1;
    uf.f1.size[1] = 1;
    uf.f1.data[0] = 'R';
    motionTypes[0] = b;
    b_obj_UAVDubinsBuildableObj =
        FlightMissionMode_uavDubinsBuildable_uavDubinsBuildable_n(obj->AirSpeed,
        obj->MaxRollAngle, obj->FlightPathAngleLimit, dpt_data, dpt_size);
    b_startPose[0] = startPose[0];
    b_goalPose[0] = goalPose[0];
    b_startPose[1] = startPose[1];
    b_goalPose[1] = goalPose[1];
    b_startPose[2] = startPose[2];
    b_goalPose[2] = goalPose[2];
    b_startPose[3] = startPose[3];
    b_goalPose[3] = goalPose[3];
    uavDubinsDistanceCodegen_real64(b_obj_UAVDubinsBuildableObj, &b_startPose[0],
        1U, &b_goalPose[0], 1U, true, turningRadius, &s[0], &g[0], &b_fpa, &b_a,
        &mtr, &h, &mt, &ml[0]);
    for (int32_T i{0}; i < 4; i++) {
        int32_T ml1_tmp;
        ml1_tmp = static_cast<int32_T>(i << 2);
        ml1[ml1_tmp] = ml[i];
        ml1[static_cast<int32_T>(ml1_tmp + 1)] = ml[static_cast<int32_T>(i + 4)];
        ml1[static_cast<int32_T>(ml1_tmp + 2)] = ml[static_cast<int32_T>(i + 8)];
        ml1[static_cast<int32_T>(ml1_tmp + 3)] = ml[static_cast<int32_T>(i + 12)];
    }

    if (mt + 1.0 == 2.0) {
        motionTypes[0].f1[0] = mb;
        motionTypes[0].f1[1] = nb;
        motionTypes[0].f1[2] = ob;
        motionTypes[0].f1[3] = pb;
    }

    if (mt + 1.0 == 3.0) {
        motionTypes[0].f1[0] = qb;
        motionTypes[0].f1[1] = rb;
        motionTypes[0].f1[2] = sb;
        motionTypes[0].f1[3] = tb;
    }

    if (mt + 1.0 == 4.0) {
        motionTypes[0].f1[0] = ub;
        motionTypes[0].f1[1] = vb;
        motionTypes[0].f1[2] = wb;
        motionTypes[0].f1[3] = xb;
    }

    if (mt + 1.0 == 5.0) {
        motionTypes[0].f1[0] = yb;
        motionTypes[0].f1[1] = ac;
        motionTypes[0].f1[2] = bc;
        motionTypes[0].f1[3] = cc;
    }

    if (mt + 1.0 == 6.0) {
        motionTypes[0].f1[0] = dc;
        motionTypes[0].f1[1] = ec;
        motionTypes[0].f1[2] = fc;
        motionTypes[0].f1[3] = gc;
    }

    if (mt + 1.0 == 7.0) {
        motionTypes[0].f1[0] = hc;
        motionTypes[0].f1[1] = ic;
        motionTypes[0].f1[2] = jc;
        motionTypes[0].f1[3] = kc;
    }

    if (mt + 1.0 == 8.0) {
        motionTypes[0].f1[0] = lc;
        motionTypes[0].f1[1] = mc;
        motionTypes[0].f1[2] = nc;
        motionTypes[0].f1[3] = oc;
    }

    if (mt + 1.0 == 9.0) {
        motionTypes[0].f1[0] = pc;
        motionTypes[0].f1[1] = qc;
        motionTypes[0].f1[2] = rc;
        motionTypes[0].f1[3] = sc;
    }

    if (mt + 1.0 == 10.0) {
        motionTypes[0].f1[0] = tc;
        motionTypes[0].f1[1] = uc;
        motionTypes[0].f1[2] = vc;
        motionTypes[0].f1[3] = wc;
    }

    if (mt + 1.0 == 11.0) {
        motionTypes[0].f1[0] = xc;
        motionTypes[0].f1[1] = yc;
        motionTypes[0].f1[2] = ad;
        motionTypes[0].f1[3] = bd;
    }

    if (mt + 1.0 == 12.0) {
        motionTypes[0].f1[0] = cd;
        motionTypes[0].f1[1] = dd;
        motionTypes[0].f1[2] = ed;
        motionTypes[0].f1[3] = fd;
    }

    if (mt + 1.0 == 13.0) {
        motionTypes[0].f1[0] = gd;
        motionTypes[0].f1[1] = hd;
        motionTypes[0].f1[2] = id;
        motionTypes[0].f1[3] = jd;
    }

    if (mt + 1.0 == 14.0) {
        motionTypes[0].f1[0] = kd;
        motionTypes[0].f1[1] = ld;
        motionTypes[0].f1[2] = md;
        motionTypes[0].f1[3] = nd;
    }

    if (mt + 1.0 == 15.0) {
        motionTypes[0].f1[0] = od;
        motionTypes[0].f1[1] = pd;
        motionTypes[0].f1[2] = qd;
        motionTypes[0].f1[3] = rd;
    }

    if (mt + 1.0 == 16.0) {
        motionTypes[0].f1[0] = sd;
        motionTypes[0].f1[1] = td;
        motionTypes[0].f1[2] = ud;
        motionTypes[0].f1[3] = vd;
    }

    if (mt + 1.0 == 17.0) {
        motionTypes[0].f1[0] = wd;
        motionTypes[0].f1[1] = xd;
        motionTypes[0].f1[2] = yd;
        motionTypes[0].f1[3] = ae;
    }

    if (mt + 1.0 == 18.0) {
        motionTypes[0].f1[0] = be;
        motionTypes[0].f1[1] = ce;
        motionTypes[0].f1[2] = de;
        motionTypes[0].f1[3] = ee;
    }

    if (mt + 1.0 == 19.0) {
        motionTypes[0].f1[0] = fe;
        motionTypes[0].f1[1] = ge;
        motionTypes[0].f1[2] = he;
        motionTypes[0].f1[3] = ie;
    }

    if (mt + 1.0 == 20.0) {
        motionTypes[0].f1[0] = je;
        motionTypes[0].f1[1] = ke;
        motionTypes[0].f1[2] = le;
        motionTypes[0].f1[3] = me;
    }

    if (mt + 1.0 == 21.0) {
        motionTypes[0].f1[0] = ne;
        motionTypes[0].f1[1] = oe;
        motionTypes[0].f1[2] = pe;
        motionTypes[0].f1[3] = qe;
    }

    if (mt + 1.0 == 22.0) {
        motionTypes[0].f1[0] = re;
        motionTypes[0].f1[1] = se;
        motionTypes[0].f1[2] = te;
        motionTypes[0].f1[3] = ue;
    }

    if (mt + 1.0 == 23.0) {
        motionTypes[0].f1[0] = ve;
        motionTypes[0].f1[1] = we;
        motionTypes[0].f1[2] = xe;
        motionTypes[0].f1[3] = ye;
    }

    if (mt + 1.0 == 24.0) {
        motionTypes[0].f1[0] = af;
        motionTypes[0].f1[1] = bf;
        motionTypes[0].f1[2] = cf;
        motionTypes[0].f1[3] = df;
    }

    if (mt + 1.0 == 25.0) {
        motionTypes[0].f1[0] = ef;
        motionTypes[0].f1[1] = ff;
        motionTypes[0].f1[2] = gf;
        motionTypes[0].f1[3] = hf;
    }

    if (mt + 1.0 == 26.0) {
        motionTypes[0].f1[0] = jf;
        motionTypes[0].f1[1] = kf;
        motionTypes[0].f1[2] = lf;
        motionTypes[0].f1[3] = mf;
    }

    if (mt + 1.0 == 27.0) {
        motionTypes[0].f1[0] = nf;
        motionTypes[0].f1[1] = of;
        motionTypes[0].f1[2] = pf;
        motionTypes[0].f1[3] = qf;
    }

    if (mt + 1.0 == 28.0) {
        motionTypes[0].f1[0] = rf;
        motionTypes[0].f1[1] = sf;
        motionTypes[0].f1[2] = tf;
        motionTypes[0].f1[3] = uf;
    }

    b_startPose[0] = s[0];
    b_goalPose[0] = g[0];
    ml1_0[0] = ml1[0];
    b_startPose[1] = s[1];
    b_goalPose[1] = g[1];
    ml1_0[1] = ml1[4];
    b_startPose[2] = s[2];
    b_goalPose[2] = g[2];
    ml1_0[2] = ml1[8];
    b_startPose[3] = s[3];
    b_goalPose[3] = g[3];
    ml1_0[3] = ml1[12];
    FlightMissionMode_uavDubinsPathSegment_uavDubinsPathSegment_o3u(b_startPose,
        b_goalPose, b_fpa, b_a, mtr, h, motionTypes[0].f1, ml1_0, pathSegObjs);
    ml1_0[0] = ml1[0];
    ml1_0[1] = ml1[4];
    ml1_0[2] = ml1[8];
    ml1_0[3] = ml1[12];
    *pathCosts = sum_4Il0TNcY(ml1_0);
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_strcmp_op2(const cell_wrap_10_FlightMissionMode_T
    a[4], boolean_T b_bool[4])
{
    b_bool[0] = false;
    if ((a[0].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[0].f1.data[0] != 'N') ^ 1)))) {
        b_bool[0] = true;
    }

    b_bool[1] = false;
    if ((a[1].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[1].f1.data[0] != 'N') ^ 1)))) {
        b_bool[1] = true;
    }

    b_bool[2] = false;
    if ((a[2].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[2].f1.data[0] != 'N') ^ 1)))) {
        b_bool[2] = true;
    }

    b_bool[3] = false;
    if ((a[3].f1.size[1] == 1) && (static_cast<boolean_T>(static_cast<int32_T>
            ((a[3].f1.data[0] != 'N') ^ 1)))) {
        b_bool[3] = true;
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_uavDubinsPathSegment_interpolate_f(const real_T
    b_this_StartPose[4], const real_T b_this_GoalPose[4], real_T
    b_this_FlightPathAngle, real_T b_this_AirSpeed, real_T
    b_this_MinTurningRadius, real_T b_this_HelixRadius, const
    cell_wrap_10_FlightMissionMode_T b_this_MotionTypes[4], const real_T
    b_this_MotionLengths[4], real_T b_this_Length,
    emxArray_real_T_FlightMissionMode_T *samples,
    emxArray_real_T_FlightMissionMode_T *poses)
{
    emxArray_boolean_T_FlightMissionMode_T *tempSamplesIndex;
    emxArray_boolean_T_FlightMissionMode_T *tempSamplesIndex_0;
    emxArray_int32_T_FlightMissionMode_T *ab;
    emxArray_real_T_FlightMissionMode_T *S;
    emxArray_real_T_FlightMissionMode_T *S_0;
    emxArray_real_T_FlightMissionMode_T *d_x;
    emxArray_real_T_FlightMissionMode_T *ns;
    emxArray_real_T_FlightMissionMode_T *p;
    emxArray_real_T_FlightMissionMode_T *tempSamples;
    emxArray_real_T_FlightMissionMode_T *z;
    real_T state[6];
    real_T TransformMatrix[4];
    real_T tempMotionLength_data[4];
    real_T transLength_data[4];
    int32_T tempMotionLength_size[2];
    int32_T transLength_size[2];
    boolean_T tmp[4];
    poses->size[0] = 0;
    poses->size[1] = 6;
    if ((static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>(std::
            isnan(b_this_Length)) ^ 1))) && (samples->size[1] != 0)) {
        real_T b_b_tmp;
        real_T intermediateLength;
        real_T startIndex;
        real_T tempStartPose_idx_2;
        int32_T loop_ub;
        int32_T poses_0;
        int32_T tempMotionLength_data_tmp;
        tempStartPose_idx_2 = -b_this_StartPose[2];
        tempMotionLength_data_tmp = static_cast<int32_T>(poses->size[0] *
            poses->size[1]);
        poses->size[0] = samples->size[1];
        poses->size[1] = 6;
        FlightMissionMode_emxEnsureCapacity_real_T_c(poses,
            tempMotionLength_data_tmp);
        loop_ub = static_cast<int32_T>(static_cast<int32_T>(samples->size[1] * 6)
            - 1);
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <= loop_ub;
             tempMotionLength_data_tmp++) {
            poses->data[tempMotionLength_data_tmp] = 0.0;
        }

        b_b_tmp = std::cos(std::abs(b_this_FlightPathAngle));
        tempMotionLength_data_tmp = static_cast<int32_T>(samples->size[0] *
            samples->size[1]);
        samples->size[0] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_c(samples,
            tempMotionLength_data_tmp);
        loop_ub = static_cast<int32_T>(samples->size[1] - 1);
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <= loop_ub;
             tempMotionLength_data_tmp++) {
            samples->data[tempMotionLength_data_tmp] *= b_b_tmp;
        }

        TransformMatrix[0] = b_this_MotionLengths[0] * b_b_tmp;
        TransformMatrix[1] = b_this_MotionLengths[1] * b_b_tmp;
        TransformMatrix[2] = b_this_MotionLengths[2] * b_b_tmp;
        tempMotionLength_size[0] = 1;
        tempMotionLength_size[1] = 4;
        tempMotionLength_data[0] = TransformMatrix[0];
        tempMotionLength_data[1] = TransformMatrix[1];
        tempMotionLength_data[2] = TransformMatrix[2];
        tempMotionLength_data[3] = b_this_MotionLengths[3] * b_b_tmp;
        FlightMissionMode_strcmp_op2(b_this_MotionTypes, tmp);
        if (FlightMissionMode_any_i(tmp)) {
            tempMotionLength_size[0] = 1;
            tempMotionLength_size[1] = 3;
            tempMotionLength_data[0] = TransformMatrix[0];
            tempMotionLength_data[1] = TransformMatrix[1];
            tempMotionLength_data[2] = TransformMatrix[2];
        }

        FlightMissionMode_useConstantDim_h(tempMotionLength_data,
            tempMotionLength_size, transLength_data, transLength_size);
        FlightMissionMode_sort_mkw(samples);
        intermediateLength = 0.0;
        startIndex = 1.0;
        state[0] = b_this_StartPose[0];
        state[1] = -b_this_StartPose[1];
        state[3] = -b_this_StartPose[3];
        poses_0 = 0;
        FlightMissionMode_emxInit_boolean_T_c(&tempSamplesIndex, 2);
        FlightMissionMode_emxInit_real_T1_o(&tempSamples, 1);
        FlightMissionMode_emxInit_real_T1_o(&S, 1);
        FlightMissionMode_emxInit_real_T_h(&ns, 2);
        FlightMissionMode_emxInit_real_T1_o(&z, 1);
        FlightMissionMode_emxInit_real_T_h(&p, 2);
        FlightMissionMode_emxInit_real_T1_o(&d_x, 1);
        FlightMissionMode_emxInit_int32_T_k(&ab, 2);
        FlightMissionMode_emxInit_boolean_T_c(&tempSamplesIndex_0, 2);
        FlightMissionMode_emxInit_real_T_h(&S_0, 2);
        while (poses_0 <= static_cast<int32_T>(tempMotionLength_size[1] - 1)) {
            real_T radius;
            real_T samples_0;
            if (static_cast<int32_T>(poses_0 + 1) == 1) {
                tempMotionLength_data_tmp = static_cast<int32_T>
                    (tempSamplesIndex->size[0] * tempSamplesIndex->size[1]);
                tempSamplesIndex->size[0] = 1;
                tempSamplesIndex->size[1] = samples->size[1];
                FlightMissionMode_emxEnsureCapacity_boolean_T_f(tempSamplesIndex,
                    tempMotionLength_data_tmp);
                loop_ub = static_cast<int32_T>(samples->size[1] - 1);
                radius = (intermediateLength + tempMotionLength_data[0]) +
                    1.0E-6;
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     loop_ub; tempMotionLength_data_tmp++) {
                    samples_0 = samples->data[tempMotionLength_data_tmp];
                    tempSamplesIndex->data[tempMotionLength_data_tmp] =
                        static_cast<boolean_T>(static_cast<int32_T>((samples_0 >=
                        intermediateLength) & (samples_0 <= radius)));
                }
            } else {
                tempMotionLength_data_tmp = static_cast<int32_T>
                    (tempSamplesIndex->size[0] * tempSamplesIndex->size[1]);
                tempSamplesIndex->size[0] = 1;
                tempSamplesIndex->size[1] = samples->size[1];
                FlightMissionMode_emxEnsureCapacity_boolean_T_f(tempSamplesIndex,
                    tempMotionLength_data_tmp);
                loop_ub = static_cast<int32_T>(samples->size[1] - 1);
                radius = (intermediateLength + tempMotionLength_data[poses_0]) +
                    1.0E-6;
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     loop_ub; tempMotionLength_data_tmp++) {
                    samples_0 = samples->data[tempMotionLength_data_tmp];
                    tempSamplesIndex->data[tempMotionLength_data_tmp] =
                        static_cast<boolean_T>(static_cast<int32_T>((samples_0 >
                        intermediateLength) & (samples_0 <= radius)));
                }
            }

            tempMotionLength_data_tmp = static_cast<int32_T>
                (tempSamplesIndex_0->size[0] * tempSamplesIndex_0->size[1]);
            tempSamplesIndex_0->size[0] = 1;
            tempSamplesIndex_0->size[1] = tempSamplesIndex->size[1];
            FlightMissionMode_emxEnsureCapacity_boolean_T_f(tempSamplesIndex_0,
                tempMotionLength_data_tmp);
            loop_ub = tempSamplesIndex->size[1];
            for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                    static_cast<int32_T>(loop_ub - 1); tempMotionLength_data_tmp
                    ++) {
                tempSamplesIndex_0->data[tempMotionLength_data_tmp] =
                    tempSamplesIndex->data[tempMotionLength_data_tmp];
            }

            FlightMissionMode_eml_find_l(tempSamplesIndex_0, ab);
            if (static_cast<boolean_T>(static_cast<int32_T>(static_cast<int32_T>
                    (FlightMissionMode_strcmp_op2l(b_this_MotionTypes[poses_0].
                    f1.data, b_this_MotionTypes[poses_0].f1.size)) ^ 1))) {
                real_T TransformMatrix_tmp;
                int32_T count;
                int32_T tempMotionLength_data_tmp_0;
                radius = b_this_MinTurningRadius;
                if (FlightMissionMode_strcmp_op2lj(b_this_MotionTypes[poses_0].
                        f1.data, b_this_MotionTypes[poses_0].f1.size)) {
                    radius = b_this_HelixRadius;
                } else if (FlightMissionMode_strcmp_op2ljy
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size)) {
                    radius = b_this_HelixRadius;
                }

                count = 0;
                tempMotionLength_data_tmp = tempSamples->size[0];
                tempSamples->size[0] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T1_g(tempSamples,
                    tempMotionLength_data_tmp);
                tempSamples->data[0] = 0.0;
                if (ab->size[1] != 0) {
                    tempMotionLength_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = static_cast<int32_T>(ab->size[1] + 1);
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(tempSamples,
                        tempMotionLength_data_tmp);
                    loop_ub = ab->size[1];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] = 0.0;
                    }

                    count = ab->size[1];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] =
                            samples->data[static_cast<int32_T>(ab->
                            data[tempMotionLength_data_tmp] - 1)];
                    }

                    count = ab->size[1];
                    loop_ub = static_cast<int32_T>(ab->size[1] - 1);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        samples->data[static_cast<int32_T>(ab->
                            data[tempMotionLength_data_tmp] - 1)] = -1.0;
                    }
                }

                tempSamples->data[count] = transLength_data[poses_0];
                tempMotionLength_data_tmp = S->size[0];
                S->size[0] = tempSamples->size[0];
                FlightMissionMode_emxEnsureCapacity_real_T1_g(S,
                    tempMotionLength_data_tmp);
                loop_ub = tempSamples->size[0];
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     static_cast<int32_T>(loop_ub - 1);
                        tempMotionLength_data_tmp++) {
                    S->data[tempMotionLength_data_tmp] = (tempSamples->
                        data[tempMotionLength_data_tmp] - intermediateLength) /
                        radius;
                }

                tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0] *
                    ns->size[1]);
                ns->size[0] = S->size[0];
                ns->size[1] = 6;
                FlightMissionMode_emxEnsureCapacity_real_T_c(ns,
                    tempMotionLength_data_tmp);
                loop_ub = static_cast<int32_T>(static_cast<int32_T>(S->size[0] *
                    6) - 1);
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     loop_ub; tempMotionLength_data_tmp++) {
                    ns->data[tempMotionLength_data_tmp] = 0.0;
                }

                tempMotionLength_data_tmp = z->size[0];
                z->size[0] = tempSamples->size[0];
                FlightMissionMode_emxEnsureCapacity_real_T1_g(z,
                    tempMotionLength_data_tmp);
                loop_ub = tempSamples->size[0];
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                     static_cast<int32_T>(loop_ub - 1);
                        tempMotionLength_data_tmp++) {
                    z->data[tempMotionLength_data_tmp] = tempStartPose_idx_2 +
                        tempSamples->data[tempMotionLength_data_tmp];
                }

                samples_0 = std::sin(state[3]);
                TransformMatrix_tmp = std::cos(state[3]);
                TransformMatrix[0] = TransformMatrix_tmp;
                TransformMatrix[2] = samples_0;
                TransformMatrix[1] = -samples_0;
                TransformMatrix[3] = TransformMatrix_tmp;
                if (b_this_Length != 0.0) {
                    samples_0 = -b_this_GoalPose[2] - tempStartPose_idx_2;
                    TransformMatrix_tmp = b_this_Length * b_b_tmp;
                    tempMotionLength_data_tmp = z->size[0];
                    z->size[0] = tempSamples->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(z,
                        tempMotionLength_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        z->data[tempMotionLength_data_tmp] = tempSamples->
                            data[tempMotionLength_data_tmp] /
                            TransformMatrix_tmp * samples_0 +
                            tempStartPose_idx_2;
                    }
                }

                if (FlightMissionMode_strcmp_op2lj(b_this_MotionTypes[poses_0].
                        f1.data, b_this_MotionTypes[poses_0].f1.size) ||
                        FlightMissionMode_strcmp_op2ljyn
                        (b_this_MotionTypes[poses_0].f1.data,
                         b_this_MotionTypes[poses_0].f1.size)) {
                    real_T state_0;
                    real_T state_1;
                    tempMotionLength_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(tempSamples,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        tempSamples->data[count] = std::sin(tempSamples->
                            data[count]);
                    }

                    tempMotionLength_data_tmp = d_x->size[0];
                    d_x->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(d_x,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        d_x->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        d_x->data[count] = std::cos(d_x->data[count]);
                    }

                    tempMotionLength_data_tmp = static_cast<int32_T>(S_0->size[0]
                        * S_0->size[1]);
                    S_0->size[0] = tempSamples->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(S_0,
                        tempMotionLength_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[tempMotionLength_data_tmp] = tempSamples->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = d_x->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + tempSamples->size[0])] = 1.0 - d_x->
                            data[tempMotionLength_data_tmp];
                    }

                    FlightMissionMode_mtimes_g(S_0, TransformMatrix, p);
                    samples_0 = rt_atan2d_snf(b_this_AirSpeed * b_this_AirSpeed,
                        9.8 * radius);
                    TransformMatrix_tmp = state[0];
                    state_0 = state[1];
                    state_1 = state[3];
                    count = S->size[0];
                    tempMotionLength_data_tmp_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0]
                        * ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(ns,
                        tempMotionLength_data_tmp);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[tempMotionLength_data_tmp] = p->
                            data[tempMotionLength_data_tmp] * radius +
                            TransformMatrix_tmp;
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + ns->size[0])] = p->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + p->size[0])] * radius +
                            state_0;
                    }

                    loop_ub = z->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 3))] = state_1
                            + S->data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (tempMotionLength_data_tmp_0 - 1);
                            tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 5))] =
                            -samples_0;
                    }
                } else if (FlightMissionMode_strcmp_op2ljy
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size) ||
                           FlightMissionMode_strcmp_op2ljyna
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size)) {
                    real_T state_0;
                    real_T state_1;
                    tempMotionLength_data_tmp = tempSamples->size[0];
                    tempSamples->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(tempSamples,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        tempSamples->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        tempSamples->data[count] = std::sin(tempSamples->
                            data[count]);
                    }

                    tempMotionLength_data_tmp = d_x->size[0];
                    d_x->size[0] = S->size[0];
                    FlightMissionMode_emxEnsureCapacity_real_T1_g(d_x,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        d_x->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (count = 0; count <= static_cast<int32_T>(S->size[0] - 1);
                         count = static_cast<int32_T>(count + 1)) {
                        d_x->data[count] = std::cos(d_x->data[count]);
                    }

                    tempMotionLength_data_tmp = static_cast<int32_T>(S_0->size[0]
                        * S_0->size[1]);
                    S_0->size[0] = tempSamples->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(S_0,
                        tempMotionLength_data_tmp);
                    loop_ub = tempSamples->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[tempMotionLength_data_tmp] = tempSamples->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = d_x->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + tempSamples->size[0])] = d_x->
                            data[tempMotionLength_data_tmp] - 1.0;
                    }

                    FlightMissionMode_mtimes_g(S_0, TransformMatrix, p);
                    samples_0 = rt_atan2d_snf(b_this_AirSpeed * b_this_AirSpeed,
                        9.8 * radius);
                    TransformMatrix_tmp = state[0];
                    state_0 = state[1];
                    state_1 = state[3];
                    count = S->size[0];
                    tempMotionLength_data_tmp_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0]
                        * ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(ns,
                        tempMotionLength_data_tmp);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[tempMotionLength_data_tmp] = p->
                            data[tempMotionLength_data_tmp] * radius +
                            TransformMatrix_tmp;
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + ns->size[0])] = p->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + p->size[0])] * radius +
                            state_0;
                    }

                    loop_ub = z->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempMotionLength_data_tmp];
                    }

                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 3))] = state_1
                            - S->data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (tempMotionLength_data_tmp_0 - 1);
                            tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 5))] =
                            samples_0;
                    }
                } else if (FlightMissionMode_strcmp_op2ljynac
                           (b_this_MotionTypes[poses_0].f1.data,
                            b_this_MotionTypes[poses_0].f1.size)) {
                    real_T state_0;
                    int32_T S_idx_0;
                    count = S->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(S_0->size[0]
                        * S_0->size[1]);
                    S_0->size[0] = S->size[0];
                    S_0->size[1] = 2;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(S_0,
                        tempMotionLength_data_tmp);
                    loop_ub = S->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        S_0->data[tempMotionLength_data_tmp] = S->
                            data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        S_0->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + S->size[0])] = 0.0;
                    }

                    FlightMissionMode_mtimes_g(S_0, TransformMatrix, p);
                    TransformMatrix_tmp = state[0];
                    state_0 = state[1];
                    count = S->size[0];
                    tempMotionLength_data_tmp_0 = S->size[0];
                    S_idx_0 = S->size[0];
                    loop_ub = p->size[0];
                    tempMotionLength_data_tmp = static_cast<int32_T>(ns->size[0]
                        * ns->size[1]);
                    ns->size[0] = p->size[0];
                    ns->size[1] = 6;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(ns,
                        tempMotionLength_data_tmp);
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[tempMotionLength_data_tmp] = p->
                            data[tempMotionLength_data_tmp] * radius +
                            TransformMatrix_tmp;
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + ns->size[0])] = p->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + p->size[0])] * radius +
                            state_0;
                    }

                    loop_ub = z->size[0];
                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (loop_ub - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 1))] = z->
                            data[tempMotionLength_data_tmp];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (count - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 3))] = state[3];
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (tempMotionLength_data_tmp_0 - 1);
                            tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] << 2))] =
                            b_this_FlightPathAngle;
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= static_cast<int32_T>
                            (S_idx_0 - 1); tempMotionLength_data_tmp++) {
                        ns->data[static_cast<int32_T>(tempMotionLength_data_tmp
                            + static_cast<int32_T>(ns->size[0] * 5))] = 0.0;
                    }
                }

                if (ab->size[1] != 0) {
                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp < 6;
                            tempMotionLength_data_tmp++) {
                        for (tempMotionLength_data_tmp_0 = 0;
                                tempMotionLength_data_tmp_0 <= loop_ub;
                                tempMotionLength_data_tmp_0++) {
                            poses->data[static_cast<int32_T>(static_cast<int32_T>
                                (static_cast<int32_T>(count +
                                tempMotionLength_data_tmp_0) +
                                 static_cast<int32_T>(poses->size[0] *
                                tempMotionLength_data_tmp)) - 1)] = ns->data[
                                static_cast<int32_T>(static_cast<int32_T>
                                (ns->size[0] * tempMotionLength_data_tmp) +
                                tempMotionLength_data_tmp_0)];
                        }
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>
                            (count + tempMotionLength_data_tmp) - 1)] = ns->
                            data[tempMotionLength_data_tmp];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count +
                            tempMotionLength_data_tmp) + poses->size[0]) - 1)] =
                            -ns->data[static_cast<int32_T>
                            (tempMotionLength_data_tmp + ns->size[0])];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count +
                            tempMotionLength_data_tmp) + static_cast<int32_T>
                            (poses->size[0] << 1)) - 1)] = -ns->data[
                            static_cast<int32_T>(static_cast<int32_T>(ns->size[0]
                            << 1) + tempMotionLength_data_tmp)];
                    }

                    if (startIndex > (startIndex + static_cast<real_T>(ab->size
                            [1])) - 1.0) {
                        count = 1;
                    } else {
                        count = static_cast<int32_T>(startIndex);
                    }

                    if (1 > static_cast<int32_T>(ns->size[0] - 1)) {
                        loop_ub = -1;
                    } else {
                        loop_ub = static_cast<int32_T>(ns->size[0] - 2);
                    }

                    for (tempMotionLength_data_tmp = 0;
                            tempMotionLength_data_tmp <= loop_ub;
                            tempMotionLength_data_tmp++) {
                        poses->data[static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(count +
                            tempMotionLength_data_tmp) + static_cast<int32_T>
                            (poses->size[0] * 3)) - 1)] = -ns->data[static_cast<
                            int32_T>(static_cast<int32_T>(ns->size[0] * 3) +
                                     tempMotionLength_data_tmp)];
                    }
                }

                count = ns->size[0];
                for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <
                        6; tempMotionLength_data_tmp++) {
                    state[tempMotionLength_data_tmp] = ns->data
                        [static_cast<int32_T>(static_cast<int32_T>
                        (static_cast<int32_T>(ns->size[0] *
                        tempMotionLength_data_tmp) + count) - 1)];
                }

                startIndex += static_cast<real_T>(ab->size[1]);
            }

            intermediateLength += tempMotionLength_data[poses_0];
            poses_0 = static_cast<int32_T>(poses_0 + 1);
        }

        FlightMissionMode_emxFree_real_T_n(&S_0);
        FlightMissionMode_emxFree_boolean_T_n(&tempSamplesIndex_0);
        FlightMissionMode_emxFree_int32_T_a(&ab);
        FlightMissionMode_emxFree_real_T_n(&d_x);
        FlightMissionMode_emxFree_real_T_n(&p);
        FlightMissionMode_emxFree_real_T_n(&z);
        FlightMissionMode_emxFree_real_T_n(&ns);
        FlightMissionMode_emxFree_real_T_n(&S);
        FlightMissionMode_emxFree_boolean_T_n(&tempSamplesIndex);
        loop_ub = poses->size[0];
        tempMotionLength_data_tmp = tempSamples->size[0];
        tempSamples->size[0] = poses->size[0];
        FlightMissionMode_emxEnsureCapacity_real_T1_g(tempSamples,
            tempMotionLength_data_tmp);
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                static_cast<int32_T>(loop_ub - 1); tempMotionLength_data_tmp++)
        {
            tempSamples->data[tempMotionLength_data_tmp] = poses->data[
                static_cast<int32_T>(static_cast<int32_T>(poses->size[0] * 3) +
                tempMotionLength_data_tmp)];
        }

        FlightMissionMode_wrapToPi_f(tempSamples);
        loop_ub = tempSamples->size[0];
        for (tempMotionLength_data_tmp = 0; tempMotionLength_data_tmp <=
                static_cast<int32_T>(loop_ub - 1); tempMotionLength_data_tmp++)
        {
            poses->data[static_cast<int32_T>(tempMotionLength_data_tmp +
                static_cast<int32_T>(poses->size[0] * 3))] = tempSamples->
                data[tempMotionLength_data_tmp];
        }

        FlightMissionMode_emxFree_real_T_n(&tempSamples);
    }
}

// Function for MATLAB Function: '<S122>/WayPointGenerator'
static void FlightMissionMode_genSegWP_p(const
    uavDubinsConnection_FlightMissionMode_T *connectionObj, const real_T start[4],
    const real_T ende[4], real_T b_stepSize, emxArray_real_T_FlightMissionMode_T
    *segWayPoints)
{
    emxArray_real_T_FlightMissionMode_T *lengths;
    emxArray_real_T_FlightMissionMode_T *poses;
    uavDubinsPathSegment_FlightMissionMode_b_T pathSegObj;
    real_T b_a__1_data[28];
    real_T iia_data_0[28];
    real_T a__1;
    int32_T iia_data[28];
    int32_T b_a__1_size[2];
    int32_T ib_size;
    int32_T iia_size;
    int32_T nm1d2;

    // '<S171>:1:57'
    FlightMissionMode_do_vectors_m(b_a__1_data, b_a__1_size, iia_data, &nm1d2,
        &ib_size);
    iia_size = nm1d2;
    for (ib_size = 0; ib_size <= static_cast<int32_T>(nm1d2 - 1); ib_size++) {
        iia_data_0[ib_size] = static_cast<real_T>(iia_data[ib_size]);
    }

    FlightMissionMode_do_vectors_m3(iia_data_0, &iia_size, b_a__1_data,
        b_a__1_size, iia_data, &nm1d2, &ib_size);
    for (ib_size = 0; ib_size <= static_cast<int32_T>(nm1d2 - 1); ib_size++) {
        iia_data_0[ib_size] = static_cast<real_T>(iia_data[ib_size]);
    }

    FlightMissionMode_sort_mk(iia_data_0, &nm1d2);
    for (ib_size = 0; ib_size <= static_cast<int32_T>(nm1d2 - 1); ib_size++) {
        b_a__1_data[ib_size] = iia_data_0[ib_size] - 1.0;
    }

    FlightMissionMode_uavDubinsBuiltins_connect_o(connectionObj, start, ende,
        connectionObj->MinTurningRadius, b_a__1_data, &nm1d2, &pathSegObj, &a__1);

    // '<S171>:1:60'
    // '<S171>:1:61'
    a__1 = pathSegObj.Length / std::round(pathSegObj.Length / b_stepSize);

    // '<S171>:1:62'
    FlightMissionMode_emxInit_real_T_h(&lengths, 2);
    if (std::isnan(a__1)) {
        nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
        lengths->size[0] = 1;
        lengths->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_c(lengths, nm1d2);
        lengths->data[0] = (rtNaN);
    } else if (std::isnan(pathSegObj.Length)) {
        nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
        lengths->size[0] = 1;
        lengths->size[1] = 1;
        FlightMissionMode_emxEnsureCapacity_real_T_c(lengths, nm1d2);
        lengths->data[0] = (rtNaN);
    } else if (a__1 == 0.0) {
        lengths->size[0] = 1;
        lengths->size[1] = 0;
    } else if ((0.0 < pathSegObj.Length) && (a__1 < 0.0)) {
        lengths->size[0] = 1;
        lengths->size[1] = 0;
    } else if ((pathSegObj.Length < 0.0) && (a__1 > 0.0)) {
        lengths->size[0] = 1;
        lengths->size[1] = 0;
    } else {
        boolean_T guard1{ false };

        guard1 = false;
        if (std::isinf(pathSegObj.Length)) {
            if (std::isinf(a__1)) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_c(lengths, nm1d2);
                lengths->data[0] = (rtNaN);
            } else if (0.0 == pathSegObj.Length) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_c(lengths, nm1d2);
                lengths->data[0] = (rtNaN);
            } else {
                guard1 = true;
            }
        } else {
            guard1 = true;
        }

        if (guard1) {
            if (std::isinf(a__1)) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = 1;
                FlightMissionMode_emxEnsureCapacity_real_T_c(lengths, nm1d2);
                lengths->data[0] = 0.0;
            } else if (std::floor(a__1) == a__1) {
                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                iia_size = static_cast<int32_T>(std::floor(pathSegObj.Length /
                    a__1));
                lengths->size[1] = static_cast<int32_T>(iia_size + 1);
                FlightMissionMode_emxEnsureCapacity_real_T_c(lengths, nm1d2);
                for (ib_size = 0; ib_size <= iia_size; ib_size++) {
                    lengths->data[ib_size] = a__1 * static_cast<real_T>(ib_size);
                }
            } else {
                real_T apnd;
                real_T cdiff;
                real_T ndbl;
                ndbl = std::floor(pathSegObj.Length / a__1 + 0.5);
                apnd = ndbl * a__1;
                if (a__1 > 0.0) {
                    cdiff = apnd - pathSegObj.Length;
                } else {
                    cdiff = pathSegObj.Length - apnd;
                }

                if (std::abs(cdiff) < 4.4408920985006262E-16 * std::fmax(0.0,
                        std::abs(pathSegObj.Length))) {
                    ndbl++;
                    apnd = pathSegObj.Length;
                } else if (cdiff > 0.0) {
                    apnd = (ndbl - 1.0) * a__1;
                } else {
                    ndbl++;
                }

                if (ndbl >= 0.0) {
                    ib_size = static_cast<int32_T>(static_cast<int32_T>(ndbl) -
                        1);
                } else {
                    ib_size = -1;
                }

                nm1d2 = static_cast<int32_T>(lengths->size[0] * lengths->size[1]);
                lengths->size[0] = 1;
                lengths->size[1] = static_cast<int32_T>(ib_size + 1);
                FlightMissionMode_emxEnsureCapacity_real_T_c(lengths, nm1d2);
                if (static_cast<int32_T>(ib_size + 1) > 0) {
                    lengths->data[0] = 0.0;
                    if (static_cast<int32_T>(ib_size + 1) > 1) {
                        lengths->data[ib_size] = apnd;
                        nm1d2 = static_cast<int32_T>(ib_size / 2);
                        for (iia_size = 1; static_cast<int32_T>(iia_size - 1) <=
                             static_cast<int32_T>(nm1d2 - 2); iia_size =
                                static_cast<int32_T>(iia_size + 1)) {
                            ndbl = static_cast<real_T>(iia_size) * a__1;
                            lengths->data[iia_size] = ndbl;
                            lengths->data[static_cast<int32_T>(ib_size -
                                iia_size)] = apnd - ndbl;
                        }

                        if (static_cast<int32_T>(nm1d2 << 1) == ib_size) {
                            lengths->data[nm1d2] = apnd / 2.0;
                        } else {
                            ndbl = static_cast<real_T>(nm1d2) * a__1;
                            lengths->data[nm1d2] = ndbl;
                            lengths->data[static_cast<int32_T>(nm1d2 + 1)] =
                                apnd - ndbl;
                        }
                    }
                }
            }
        }
    }

    FlightMissionMode_emxInit_real_T_h(&poses, 2);

    // '<S171>:1:65'
    FlightMissionMode_uavDubinsPathSegment_interpolate_f(pathSegObj.StartPose,
        pathSegObj.GoalPose, pathSegObj.FlightPathAngle, pathSegObj.AirSpeed,
        pathSegObj.MinTurningRadius, pathSegObj.HelixRadius,
        pathSegObj.MotionTypes, pathSegObj.MotionLengths, pathSegObj.Length,
        lengths, poses);

    // '<S171>:1:66'
    iia_size = poses->size[0];
    nm1d2 = static_cast<int32_T>(segWayPoints->size[0] * segWayPoints->size[1]);
    segWayPoints->size[0] = poses->size[0];
    segWayPoints->size[1] = 3;
    FlightMissionMode_emxEnsureCapacity_real_T_c(segWayPoints, nm1d2);
    FlightMissionMode_emxFree_real_T_n(&lengths);
    for (ib_size = 0; ib_size < 3; ib_size++) {
        for (nm1d2 = 0; nm1d2 <= static_cast<int32_T>(iia_size - 1); nm1d2++) {
            segWayPoints->data[static_cast<int32_T>(nm1d2 + static_cast<int32_T>
                (segWayPoints->size[0] * ib_size))] = poses->data
                [static_cast<int32_T>(static_cast<int32_T>(poses->size[0] *
                ib_size) + nm1d2)];
        }
    }

    FlightMissionMode_emxFree_real_T_n(&poses);
}

// System initialize for referenced model: 'FlightMissionMode'
void FlightMissionMode_Init(FixedWingGuidanceBus *rty_GuidanceCmds, real_T
    rty_InitialState[8], DW_FlightMissionMode_f_T *localDW)
{
    // Start for SwitchCase: '<Root>/Switch Case'
    localDW->SwitchCase_ActiveSubsystem = -1;

    // SystemInitialize for IfAction SubSystem: '<Root>/Mode1_CirclingNav'
    // Constant: '<S36>/Constant'
    FlightMissionMode_OrbitFollower_Init(&localDW->OrbitFollower);

    // End of SystemInitialize for SubSystem: '<Root>/Mode1_CirclingNav'

    // SystemInitialize for IfAction SubSystem: '<Root>/Mode11_CircDispNav'
    // Constant: '<S11>/Constant'
    FlightMissionMode_OrbitFollower_Init(&localDW->OrbitFollower_l);

    // End of SystemInitialize for SubSystem: '<Root>/Mode11_CircDispNav'

    // SystemInitialize for IfAction SubSystem: '<Root>/Mode2_HorzFrmnNav'
    // SystemInitialize for Enabled SubSystem: '<S118>/WayPointGenerator'
    FlightMissionMode_RotateATMissionHdg_Init(&localDW->RotateATMissionHdg);

    // End of SystemInitialize for SubSystem: '<S118>/WayPointGenerator'

    // Constant: '<S118>/LookAheadDis'
    FlightMissionMode_WaypointFollower_Init(&localDW->WaypointFollower);

    // End of SystemInitialize for SubSystem: '<Root>/Mode2_HorzFrmnNav'

    // SystemInitialize for IfAction SubSystem: '<Root>/Mode22_CustomFrmnNav'
    // SystemInitialize for Enabled SubSystem: '<S61>/WayPointGenerator'
    FlightMissionMode_RotateATMissionHdg_Init(&localDW->RotateATMissionHdg_d);

    // End of SystemInitialize for SubSystem: '<S61>/WayPointGenerator'

    // Constant: '<S61>/LookAheadDis'
    FlightMissionMode_WaypointFollower_Init(&localDW->WaypointFollower_d);

    // End of SystemInitialize for SubSystem: '<Root>/Mode22_CustomFrmnNav'

    // SystemInitialize for IfAction SubSystem: '<Root>/Mode3_RunWayNav'
    // SystemInitialize for Enabled SubSystem: '<S175>/WayPointGenerator'
    FlightMissionMode_RotateATMissionHdg_Init(&localDW->RotateUpward);
    FlightMissionMode_RotateATMissionHdg_Init(&localDW->RotateATRunWayHdg);
    FlightMissionMode_RotateATMissionHdg_Init(&localDW->RotateATMissionHdg_m);

    // End of SystemInitialize for SubSystem: '<S175>/WayPointGenerator'

    // SystemInitialize for Atomic SubSystem: '<S175>/SegmentSwitch'
    FlightMissionMode_SegmentSwitch_Init(localDW->MergeLookAheadP_j,
        &localDW->MergeDesiredCourse_p, &localDW->RunWayLineMode_n,
        &localDW->SegmentSwitch);

    // End of SystemInitialize for SubSystem: '<S175>/SegmentSwitch'
    // End of SystemInitialize for SubSystem: '<Root>/Mode3_RunWayNav'

    // SystemInitialize for IfAction SubSystem: '<Root>/Mode4_ProtLine'
    // SystemInitialize for Enabled SubSystem: '<S216>/WayPointGenerator'
    FlightMissionMode_RotateATMissionHdg_Init(&localDW->RotateATRunWayHdg_k);
    FlightMissionMode_RotateATMissionHdg_Init(&localDW->RotateATMissionHdg_k);

    // End of SystemInitialize for SubSystem: '<S216>/WayPointGenerator'

    // SystemInitialize for Atomic SubSystem: '<S216>/SegmentSwitch'
    FlightMissionMode_SegmentSwitch_Init(localDW->MergeLookAheadP,
        &localDW->MergeDesiredCourse, &localDW->RunWayLineMode,
        &localDW->SegmentSwitch_p);

    // End of SystemInitialize for SubSystem: '<S216>/SegmentSwitch'
    // End of SystemInitialize for SubSystem: '<Root>/Mode4_ProtLine'

    // SystemInitialize for IfAction SubSystem: '<Root>/Mode5_NewRunWay'
    // SystemInitialize for Enabled SubSystem: '<S257>/WayPointGenerator'
    FlightMissionMode_RotateATMissionHdg_Init(&localDW->RotateUpward_d);
    FlightMissionMode_RotateATMissionHdg_Init(&localDW->RotateATMissionHdg_dd);

    // End of SystemInitialize for SubSystem: '<S257>/WayPointGenerator'

    // Constant: '<S257>/LookAheadDis'
    FlightMissionMode_WaypointFollower_Init(&localDW->WaypointFollower_dd);

    // End of SystemInitialize for SubSystem: '<Root>/Mode5_NewRunWay'
    std::memset(rty_GuidanceCmds, 0, sizeof(FixedWingGuidanceBus));

    // SystemInitialize for Merge: '<Root>/MergeInitialState'
    std::memset(&rty_InitialState[0], 0, static_cast<uint32_T>(sizeof(real_T) <<
                 3U));
}

// System reset for referenced model: 'FlightMissionMode'
void FlightMissionMode_Reset(DW_FlightMissionMode_f_T *localDW)
{
    // SystemReset for Chart: '<Root>/PreemptableMissionModeSelector'
    localDW->is_GuidanceLogic = FlightMissionMode_IN_NO_ACTIVE_CHILD_g;
    localDW->is_active_c2_FlightMissionMode = 0U;
    localDW->FlightMission = MissionModes_None;
}

// Disable for referenced model: 'FlightMissionMode'
void FlightMissionMode_Disable(DW_FlightMissionMode_f_T *localDW)
{
    // Disable for SwitchCase: '<Root>/Switch Case'
    switch (localDW->SwitchCase_ActiveSubsystem) {
      case 0:
      case 1:
      case 7:
        break;

      case 2:
        // Disable for Enabled SubSystem: '<S118>/WayPointGenerator'
        localDW->WayPointGenerator_MODE_h = false;

        // End of Disable for SubSystem: '<S118>/WayPointGenerator'
        break;

      case 3:
        // Disable for Enabled SubSystem: '<S61>/WayPointGenerator'
        localDW->WayPointGenerator_MODE_d = false;

        // End of Disable for SubSystem: '<S61>/WayPointGenerator'
        break;

      case 4:
        // Disable for Enabled SubSystem: '<S175>/WayPointGenerator'
        localDW->WayPointGenerator_MODE_k = false;

        // End of Disable for SubSystem: '<S175>/WayPointGenerator'

        // Disable for Atomic SubSystem: '<S175>/SegmentSwitch'
        FlightMissionMode_SegmentSwitch_Disable(&localDW->SegmentSwitch);

        // End of Disable for SubSystem: '<S175>/SegmentSwitch'
        break;

      case 5:
        // Disable for Enabled SubSystem: '<S216>/WayPointGenerator'
        localDW->WayPointGenerator_MODE_m = false;

        // End of Disable for SubSystem: '<S216>/WayPointGenerator'

        // Disable for Atomic SubSystem: '<S216>/SegmentSwitch'
        FlightMissionMode_SegmentSwitch_Disable(&localDW->SegmentSwitch_p);

        // End of Disable for SubSystem: '<S216>/SegmentSwitch'
        break;

      case 6:
        // Disable for Enabled SubSystem: '<S257>/WayPointGenerator'
        localDW->WayPointGenerator_MODE = false;

        // End of Disable for SubSystem: '<S257>/WayPointGenerator'
        break;
    }

    localDW->SwitchCase_ActiveSubsystem = -1;

    // End of Disable for SwitchCase: '<Root>/Switch Case'
}

// Outputs for referenced model: 'FlightMissionMode'
void FlightMissionMode(const boolean_T *rtu_startFlight, const MissionModes
                       *rtu_mode, const Location *rtu_PrevLocation, const
                       Location *rtu_Location, const Parameters *rtu_Parameters,
                       const Location *rtu_StartPosition, const int32_T
                       *rtu_Reset, const int32_T *rtu_FormationIDX, const
                       int32_T *rtu_MissionUAV, const real_T rtu_Pose[4], real_T
                       *rty_thisTaskStatus, FixedWingGuidanceBus
                       *rty_GuidanceCmds, real_T rty_InitialState[8],
                       DW_FlightMissionMode_f_T *localDW)
{
    // local block i/o variables
    real_T rtb_TmpSignalConversionAtRotateUpwardInport1[3];
    real_T rtb_TmpSignalConversionAtRotateATMissionHdgInport1[3];
    real_T rtb_TmpSignalConversionAtRotateATRunWayHdgInport1[3];
    real_T rtb_TmpSignalConversionAtRotateATMissionHdgInport1_j[3];
    real_T rtb_nedWayPoint_CoreSubsysCanOut[300];
    real_T rtb_RotateRunway[300];
    real_T rtb_RotateIndivWayPoint[300];
    real_T rtb_TmpSignalConversionAtRotateUpwardInport1_k[3];
    real_T rtb_TmpSignalConversionAtRotateATRunWayHdgInport1_l[3];
    real_T rtb_TmpSignalConversionAtRotateATMissionHdgInport1_p[3];
    real_T rtb_ImpSel_InsertedFor_RawRunWay_at_outport_0_k[300];
    real_T rtb_nedWayPoint_CoreSubsysCanOut_b[300];
    real_T rtb_MatrixMultiply_d[300];
    real_T rtb_y_l[300];
    real_T rtb_TmpSignalConversionAtRotateATMissionHdgInport1_g[3];
    real_T rtb_TmpSignalConversionAtRotateATMissionHdgInport1_i[3];
    real_T rtb_Param1_k;
    real_T rtb_TmpSignalConversionAtOrbitFollowerInport2[3];
    real_T rtb_Param2_k;
    real_T rtb_TmpSignalConversionAtOrbitFollowerInport2_f[3];
    real_T rtb_Param1_jk;
    real_T rtb_Param2_i;
    real_T rtb_y_f[300];
    static const uint8_T c[500]{ 3U, 3U, 3U, 3U, 3U, 3U, 3U, 3U, 3U, 3U, 6U, 6U,
        6U, 6U, 6U, 6U, 6U, 6U, 6U, 6U, 8U, 8U, 8U, 8U, 8U, 8U, 8U, 8U, 8U, 8U,
        11U, 11U, 11U, 11U, 11U, 11U, 11U, 11U, 11U, 11U, 13U, 13U, 13U, 13U,
        13U, 13U, 13U, 13U, 13U, 13U, 16U, 16U, 16U, 16U, 16U, 16U, 16U, 16U,
        16U, 16U, 18U, 18U, 18U, 18U, 18U, 19U, 18U, 18U, 19U, 19U, 21U, 21U,
        21U, 21U, 21U, 21U, 21U, 21U, 21U, 22U, 24U, 23U, 23U, 24U, 23U, 24U,
        24U, 24U, 24U, 24U, 26U, 26U, 26U, 26U, 26U, 26U, 26U, 27U, 27U, 27U,
        28U, 28U, 29U, 29U, 29U, 29U, 29U, 29U, 29U, 29U, 32U, 31U, 31U, 32U,
        31U, 32U, 32U, 32U, 32U, 32U, 34U, 33U, 34U, 34U, 34U, 35U, 34U, 34U,
        34U, 34U, 37U, 37U, 36U, 37U, 37U, 37U, 37U, 37U, 37U, 37U, 40U, 39U,
        39U, 39U, 39U, 40U, 39U, 39U, 40U, 40U, 42U, 41U, 41U, 42U, 42U, 43U,
        42U, 42U, 42U, 42U, 44U, 44U, 44U, 44U, 44U, 45U, 44U, 45U, 45U, 45U,
        47U, 46U, 47U, 47U, 47U, 47U, 47U, 47U, 47U, 47U, 50U, 49U, 49U, 49U,
        50U, 50U, 50U, 50U, 50U, 50U, 53U, 52U, 52U, 52U, 52U, 53U, 52U, 52U,
        52U, 53U, 54U, 54U, 54U, 55U, 54U, 55U, 55U, 55U, 55U, 55U, 57U, 56U,
        57U, 58U, 58U, 58U, 57U, 57U, 57U, 58U, 59U, 59U, 59U, 60U, 60U, 61U,
        60U, 60U, 60U, 60U, 63U, 61U, 62U, 63U, 62U, 63U, 62U, 63U, 62U, 63U,
        66U, 65U, 65U, 65U, 65U, 66U, 65U, 65U, 65U, 65U, 68U, 67U, 68U, 68U,
        68U, 68U, 68U, 67U, 67U, 68U, 69U, 69U, 70U, 70U, 70U, 71U, 71U, 70U,
        70U, 70U, 73U, 72U, 73U, 73U, 72U, 74U, 73U, 73U, 72U, 72U, 74U, 75U,
        75U, 76U, 75U, 76U, 76U, 75U, 75U, 75U, 77U, 77U, 78U, 78U, 78U, 79U,
        78U, 78U, 77U, 77U, 79U, 79U, 80U, 81U, 80U, 82U, 80U, 80U, 80U, 80U,
        82U, 84U, 82U, 83U, 83U, 84U, 83U, 83U, 82U, 82U, 86U, 85U, 85U, 86U,
        86U, 87U, 86U, 85U, 85U, 84U, 87U, 89U, 88U, 88U, 88U, 89U, 88U, 88U,
        87U, 87U, 92U, 90U, 93U, 91U, 90U, 92U, 90U, 90U, 89U, 89U, 92U, 93U,
        93U, 94U, 93U, 94U, 93U, 92U, 92U, 92U, 97U, 96U, 96U, 96U, 96U, 97U,
        95U, 95U, 94U, 92U, 99U, 100U, 98U, 99U, 98U, 100U, 98U, 97U, 97U, 92U,
        102U, 100U, 100U, 101U, 101U, 102U, 100U, 100U, 99U, 92U, 102U, 103U,
        103U, 104U, 103U, 105U, 103U, 102U, 102U, 92U, 107U, 108U, 106U, 106U,
        106U, 107U, 105U, 105U, 102U, 92U, 110U, 107U, 109U, 109U, 108U, 110U,
        108U, 107U, 102U, 92U, 113U, 111U, 110U, 112U, 111U, 112U, 110U, 109U,
        102U, 92U, 115U, 113U, 113U, 114U, 113U, 115U, 113U, 112U, 102U, 92U,
        115U, 116U, 116U, 117U, 115U, 117U, 115U, 114U, 102U, 92U, 120U, 118U,
        118U, 120U, 118U, 120U, 117U, 114U, 102U, 92U, 120U, 121U, 121U, 122U,
        121U, 122U, 120U, 114U, 102U, 92U, 125U, 124U, 123U, 125U, 123U, 124U,
        122U, 114U, 102U, 92U, 129U, 126U, 127U, 127U, 126U, 127U, 125U, 114U,
        102U, 92U, 130U, 128U, 129U, 130U, 128U, 129U, 127U, 114U, 102U, 92U };

    emxArray_real_T_FlightMissionMode_T *CheckPoints;
    emxArray_real_T_FlightMissionMode_T *dummyWayPoint;
    emxArray_real_T_FlightMissionMode_T *dummyWayPoint_0;
    emxArray_real_T_FlightMissionMode_T *numberGroup;
    emxArray_real_T_FlightMissionMode_T *segWayPoints;
    uavDubinsConnection_FlightMissionMode_T lobj_0_DubinsObj;
    uavDubinsConnection_FlightMissionMode_a_T lobj_0_DubinsObj_0;
    real_T rtb_MatrixConcatenate[9];
    real_T tmp[9];
    real_T CheckPoints_0[4];
    real_T CheckPoints_1[4];
    real_T rtb_RelPrevPos_b_0[3];
    real_T rtb_RelPrevPos_b_1[3];
    real_T rtb_ReshapeRowVecStartpose_d[3];
    real_T rtb_ReshapeRowVec_j[3];
    real_T rtb_Switch_n;
    int32_T numberGroup_0[2];
    int8_T ii_data;
    int8_T rtAction;
    int8_T rtPrevAction;

    // Chart: '<Root>/PreemptableMissionModeSelector'
    // Gateway: PreemptableMissionModeSelector
    // During: PreemptableMissionModeSelector
    if (static_cast<uint32_T>(localDW->is_active_c2_FlightMissionMode) == 0U) {
        // Entry: PreemptableMissionModeSelector
        localDW->is_active_c2_FlightMissionMode = 1U;

        // Entry Internal: PreemptableMissionModeSelector
        // Transition: '<S9>:2'
        // Entry Internal 'GuidanceLogic': '<S9>:1'
        // Transition: '<S9>:152'
        localDW->is_GuidanceLogic = FlightMissionMode_IN_WaitToStart;
        localDW->FlightMission = MissionModes_WaitToStart;

        // Entry 'WaitToStart': '<S9>:151'

        // During 'GuidanceLogic': '<S9>:1'
    } else if (*rtu_Reset != 0) {
        // Transition: '<S9>:241'
        switch (*rtu_mode) {
          case MissionModes_CircNav:
            // Transition: '<S9>:264'
            // Transition: '<S9>:253'
            FlightMissionMode_exit_internal_GuidanceLogic(localDW);
            localDW->is_GuidanceLogic = FlightMissionMode_IN_CircNav;
            localDW->FlightMission = MissionModes_CircNav;
            break;

          case MissionModes_CircDispNav:
            // Transition: '<S9>:267'
            // Transition: '<S9>:269'
            // Transition: '<S9>:250'
            FlightMissionMode_exit_internal_GuidanceLogic(localDW);
            localDW->is_GuidanceLogic = FlightMissionMode_IN_CircDispNav;
            localDW->FlightMission = MissionModes_CircDispNav;
            break;

          case MissionModes_HorzFrmnNav:
            // Transition: '<S9>:266'
            // Transition: '<S9>:245'
            // Transition: '<S9>:246'
            FlightMissionMode_exit_internal_GuidanceLogic(localDW);
            localDW->is_GuidanceLogic = FlightMissionMode_IN_HorzFrmnNav;
            localDW->FlightMission = MissionModes_HorzFrmnNav;
            break;

          case MissionModes_CustomFrmnNav:
            // Transition: '<S9>:258'
            // Transition: '<S9>:242'
            // Transition: '<S9>:243'
            FlightMissionMode_exit_internal_GuidanceLogic(localDW);
            localDW->is_GuidanceLogic = FlightMissionMode_IN_CustomFrmnNav;
            localDW->FlightMission = MissionModes_CustomFrmnNav;
            break;

          case MissionModes_RunWayNav:
            // Transition: '<S9>:265'
            // Transition: '<S9>:256'
            // Transition: '<S9>:244'
            FlightMissionMode_exit_internal_GuidanceLogic(localDW);
            localDW->is_GuidanceLogic = FlightMissionMode_IN_RunWayNav;
            localDW->FlightMission = MissionModes_RunWayNav;
            break;

          case MissionModes_ProtLine:
            // Transition: '<S9>:257'
            // Transition: '<S9>:247'
            // Transition: '<S9>:248'
            FlightMissionMode_exit_internal_GuidanceLogic(localDW);
            localDW->is_GuidanceLogic = FlightMissionMode_IN_ProtLine;
            localDW->FlightMission = MissionModes_ProtLine;
            break;

          case MissionModes_NewRunWay:
            // Transition: '<S9>:260'
            // Transition: '<S9>:251'
            // Transition: '<S9>:252'
            FlightMissionMode_exit_internal_GuidanceLogic(localDW);
            localDW->is_GuidanceLogic = FlightMissionMode_IN_NewRunWay;
            localDW->FlightMission = MissionModes_NewRunWay;
            break;

          default:
            // Transition: '<S9>:263'
            FlightMissionMode_exit_internal_GuidanceLogic(localDW);
            localDW->is_GuidanceLogic = FlightMissionMode_IN_WaitToStart;
            localDW->FlightMission = MissionModes_WaitToStart;

            // Entry 'WaitToStart': '<S9>:151'
            break;
        }
    } else {
        switch (localDW->is_GuidanceLogic) {
          case FlightMissionMode_IN_CircDispNav:
            // During 'CircDispNav': '<S9>:230'
            break;

          case FlightMissionMode_IN_CircNav:
            // During 'CircNav': '<S9>:233'
            break;

          case FlightMissionMode_IN_CustomFrmnNav:
            // During 'CustomFrmnNav': '<S9>:235'
            break;

          case FlightMissionMode_IN_HorzFrmnNav:
            // During 'HorzFrmnNav': '<S9>:234'
            break;

          case FlightMissionMode_IN_NewRunWay:
            // During 'NewRunWay': '<S9>:228'
            break;

          case FlightMissionMode_IN_ProtLine:
            // During 'ProtLine': '<S9>:221'
            break;

          case FlightMissionMode_IN_RunWayNav:
            // During 'RunWayNav': '<S9>:227'
            break;

          default:
            // During 'WaitToStart': '<S9>:151'
            if (*rtu_startFlight) {
                // Transition: '<S9>:255'
                switch (*rtu_mode) {
                  case MissionModes_CircNav:
                    // Transition: '<S9>:264'
                    // Transition: '<S9>:253'
                    localDW->is_GuidanceLogic = FlightMissionMode_IN_CircNav;
                    localDW->FlightMission = MissionModes_CircNav;
                    break;

                  case MissionModes_CircDispNav:
                    // Transition: '<S9>:267'
                    // Transition: '<S9>:269'
                    // Transition: '<S9>:250'
                    localDW->is_GuidanceLogic = FlightMissionMode_IN_CircDispNav;
                    localDW->FlightMission = MissionModes_CircDispNav;
                    break;

                  case MissionModes_HorzFrmnNav:
                    // Transition: '<S9>:266'
                    // Transition: '<S9>:245'
                    // Transition: '<S9>:246'
                    localDW->is_GuidanceLogic = FlightMissionMode_IN_HorzFrmnNav;
                    localDW->FlightMission = MissionModes_HorzFrmnNav;
                    break;

                  case MissionModes_CustomFrmnNav:
                    // Transition: '<S9>:258'
                    // Transition: '<S9>:242'
                    // Transition: '<S9>:243'
                    localDW->is_GuidanceLogic =
                        FlightMissionMode_IN_CustomFrmnNav;
                    localDW->FlightMission = MissionModes_CustomFrmnNav;
                    break;

                  case MissionModes_RunWayNav:
                    // Transition: '<S9>:265'
                    // Transition: '<S9>:256'
                    // Transition: '<S9>:244'
                    localDW->is_GuidanceLogic = FlightMissionMode_IN_RunWayNav;
                    localDW->FlightMission = MissionModes_RunWayNav;
                    break;

                  case MissionModes_ProtLine:
                    // Transition: '<S9>:257'
                    // Transition: '<S9>:247'
                    // Transition: '<S9>:248'
                    localDW->is_GuidanceLogic = FlightMissionMode_IN_ProtLine;
                    localDW->FlightMission = MissionModes_ProtLine;
                    break;

                  case MissionModes_NewRunWay:
                    // Transition: '<S9>:260'
                    // Transition: '<S9>:251'
                    // Transition: '<S9>:252'
                    localDW->is_GuidanceLogic = FlightMissionMode_IN_NewRunWay;
                    localDW->FlightMission = MissionModes_NewRunWay;
                    break;

                  default:
                    // Transition: '<S9>:263'
                    localDW->is_GuidanceLogic = FlightMissionMode_IN_WaitToStart;
                    localDW->FlightMission = MissionModes_WaitToStart;

                    // Entry 'WaitToStart': '<S9>:151'
                    break;
                }
            }
            break;
        }
    }

    // End of Chart: '<Root>/PreemptableMissionModeSelector'

    // SwitchCase: '<Root>/Switch Case'
    rtPrevAction = localDW->SwitchCase_ActiveSubsystem;
    switch (localDW->FlightMission) {
      case MissionModes_CircNav:
        rtAction = 0;
        break;

      case MissionModes_CircDispNav:
        rtAction = 1;
        break;

      case MissionModes_HorzFrmnNav:
        rtAction = 2;
        break;

      case MissionModes_CustomFrmnNav:
        rtAction = 3;
        break;

      case MissionModes_RunWayNav:
        rtAction = 4;
        break;

      case MissionModes_ProtLine:
        rtAction = 5;
        break;

      case MissionModes_NewRunWay:
        rtAction = 6;
        break;

      default:
        rtAction = 7;
        break;
    }

    localDW->SwitchCase_ActiveSubsystem = rtAction;
    if (static_cast<int32_T>(rtPrevAction) != static_cast<int32_T>(rtAction)) {
        switch (rtPrevAction) {
          case 0:
          case 1:
          case 7:
            break;

          case 2:
            // Disable for Enabled SubSystem: '<S118>/WayPointGenerator'
            localDW->WayPointGenerator_MODE_h = false;

            // End of Disable for SubSystem: '<S118>/WayPointGenerator'
            break;

          case 3:
            // Disable for Enabled SubSystem: '<S61>/WayPointGenerator'
            localDW->WayPointGenerator_MODE_d = false;

            // End of Disable for SubSystem: '<S61>/WayPointGenerator'
            break;

          case 4:
            // Disable for Enabled SubSystem: '<S175>/WayPointGenerator'
            localDW->WayPointGenerator_MODE_k = false;

            // End of Disable for SubSystem: '<S175>/WayPointGenerator'

            // Disable for Atomic SubSystem: '<S175>/SegmentSwitch'
            FlightMissionMode_SegmentSwitch_Disable(&localDW->SegmentSwitch);

            // End of Disable for SubSystem: '<S175>/SegmentSwitch'
            break;

          case 5:
            // Disable for Enabled SubSystem: '<S216>/WayPointGenerator'
            localDW->WayPointGenerator_MODE_m = false;

            // End of Disable for SubSystem: '<S216>/WayPointGenerator'

            // Disable for Atomic SubSystem: '<S216>/SegmentSwitch'
            FlightMissionMode_SegmentSwitch_Disable(&localDW->SegmentSwitch_p);

            // End of Disable for SubSystem: '<S216>/SegmentSwitch'
            break;

          case 6:
            // Disable for Enabled SubSystem: '<S257>/WayPointGenerator'
            localDW->WayPointGenerator_MODE = false;

            // End of Disable for SubSystem: '<S257>/WayPointGenerator'
            break;
        }
    }

    FlightMissionMode_emxInit_real_T_h(&CheckPoints, 2);
    FlightMissionMode_emxInit_real_T_h(&dummyWayPoint, 2);
    FlightMissionMode_emxInit_real_T_h(&segWayPoints, 2);
    FlightMissionMode_emxInit_real_T_h(&dummyWayPoint_0, 2);

    // SwitchCase: '<Root>/Switch Case' incorporates:
    //   Constant: '<S118>/LookAheadDis'
    //   Constant: '<S11>/Constant'
    //   Constant: '<S257>/LookAheadDis'
    //   Constant: '<S36>/Constant'
    //   Constant: '<S61>/LookAheadDis'
    //   MATLAB Function: '<S122>/WayPointGenerator'
    //   MATLAB Function: '<S260>/WayPointGenerator'
    //   MATLAB Function: '<S65>/WayPointGenerator'

    switch (rtAction) {
      case 0:
        {
            real_T rtb_ClockwiseRotation_m;
            real_T rtb_Down2Up_c;
            real_T rtb_Map2Radian;
            real_T rtb_Sum1_k_idx_1;
            real_T rtb_Sum_ip;
            real_T rtb_Switch_p;
            int32_T i;
            int32_T rtb_Bias_f;
            if (static_cast<int32_T>(rtAction) != static_cast<int32_T>
                    (rtPrevAction)) {
                // SystemReset for IfAction SubSystem: '<Root>/Mode1_CirclingNav' incorporates:
                //   ActionPort: '<S2>/Action Port'

                // SystemReset for SwitchCase: '<Root>/Switch Case'
                FlightMissionMode_OrbitFollower_Reset(&localDW->OrbitFollower);

                // End of SystemReset for SubSystem: '<Root>/Mode1_CirclingNav'
            }

            // Outputs for IfAction SubSystem: '<Root>/Mode1_CirclingNav' incorporates:
            //   ActionPort: '<S2>/Action Port'

            // Bias: '<S36>/Bias'
            rtb_Bias_f = *rtu_MissionUAV;

            // DataTypeConversion: '<S36>/CastToDouble'
            rtb_ClockwiseRotation_m = static_cast<real_T>(*rtu_FormationIDX);

            // Product: '<S36>/Divide' incorporates:
            //   Constant: '<S36>/two_pi'

            rtb_Map2Radian = 6.2831853071795862 / static_cast<real_T>
                (*rtu_MissionUAV);

            // Product: '<S36>/Map2Radian' incorporates:
            //   Bias: '<S36>/Bias'
            //   Gain: '<S36>/HalveMissionUAV'
            //   Sum: '<S36>/Minus'

            rtb_Map2Radian *= rtb_ClockwiseRotation_m - static_cast<real_T>(
                static_cast<int32_T>(rtb_Bias_f + 1)) * 0.5;

            // Switch: '<S51>/Switch' incorporates:
            //   Abs: '<S51>/Abs'
            //   Bias: '<S51>/Bias'
            //   Bias: '<S51>/Bias1'
            //   Constant: '<S51>/Constant2'
            //   Constant: '<S52>/Constant'
            //   DataStoreRead: '<S36>/LatitudeGCS'
            //   Math: '<S51>/Math Function1'
            //   RelationalOperator: '<S52>/Compare'

            if (std::abs(LatitudeGCS) > 180.0) {
                rtb_Switch_p = rt_modd_snf(LatitudeGCS + 180.0, 360.0) + -180.0;
            } else {
                rtb_Switch_p = LatitudeGCS;
            }

            // End of Switch: '<S51>/Switch'

            // Abs: '<S48>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Switch_p);

            // Switch: '<S48>/Switch' incorporates:
            //   Bias: '<S48>/Bias'
            //   Bias: '<S48>/Bias1'
            //   Constant: '<S39>/Constant'
            //   Constant: '<S39>/Constant1'
            //   Constant: '<S50>/Constant'
            //   Gain: '<S48>/Gain'
            //   Product: '<S48>/Divide1'
            //   RelationalOperator: '<S50>/Compare'
            //   Switch: '<S39>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S48>/Sign1'
                if (rtb_Switch_p < 0.0) {
                    rtb_Switch_p = -1.0;
                } else if (rtb_Switch_p > 0.0) {
                    rtb_Switch_p = 1.0;
                } else if (rtb_Switch_p == 0.0) {
                    rtb_Switch_p = 0.0;
                } else {
                    rtb_Switch_p = (rtNaN);
                }

                // End of Signum: '<S48>/Sign1'
                rtb_Switch_p *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S48>/Switch'

            // Sum: '<S39>/Sum' incorporates:
            //   DataStoreRead: '<S36>/LongitudeGCS'

            rtb_Switch_n = static_cast<real_T>(i) + LongitudeGCS;

            // Switch: '<S49>/Switch' incorporates:
            //   Abs: '<S49>/Abs'
            //   Bias: '<S49>/Bias'
            //   Bias: '<S49>/Bias1'
            //   Constant: '<S49>/Constant2'
            //   Constant: '<S53>/Constant'
            //   Math: '<S49>/Math Function1'
            //   RelationalOperator: '<S53>/Compare'

            if (std::abs(rtb_Switch_n) > 180.0) {
                rtb_Switch_n = rt_modd_snf(rtb_Switch_n + 180.0, 360.0) + -180.0;
            }

            // End of Switch: '<S49>/Switch'

            // Sum: '<S37>/Sum1'
            rtb_ClockwiseRotation_m = rtu_Location->Lat - rtb_Switch_p;
            rtb_Sum1_k_idx_1 = rtu_Location->Lon - rtb_Switch_n;

            // Switch: '<S45>/Switch' incorporates:
            //   Abs: '<S45>/Abs'
            //   Bias: '<S45>/Bias'
            //   Bias: '<S45>/Bias1'
            //   Constant: '<S45>/Constant2'
            //   Constant: '<S46>/Constant'
            //   Math: '<S45>/Math Function1'
            //   RelationalOperator: '<S46>/Compare'

            if (std::abs(rtb_ClockwiseRotation_m) > 180.0) {
                rtb_Switch_n = rt_modd_snf(rtb_ClockwiseRotation_m + 180.0,
                    360.0) + -180.0;
            } else {
                rtb_Switch_n = rtb_ClockwiseRotation_m;
            }

            // End of Switch: '<S45>/Switch'

            // Abs: '<S42>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Switch_n);

            // Switch: '<S42>/Switch' incorporates:
            //   Bias: '<S42>/Bias'
            //   Bias: '<S42>/Bias1'
            //   Constant: '<S38>/Constant'
            //   Constant: '<S38>/Constant1'
            //   Constant: '<S44>/Constant'
            //   Gain: '<S42>/Gain'
            //   Product: '<S42>/Divide1'
            //   RelationalOperator: '<S44>/Compare'
            //   Switch: '<S38>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S42>/Sign1'
                if (rtb_Switch_n < 0.0) {
                    rtb_Switch_n = -1.0;
                } else if (rtb_Switch_n > 0.0) {
                    rtb_Switch_n = 1.0;
                } else if (rtb_Switch_n == 0.0) {
                    rtb_Switch_n = 0.0;
                } else {
                    rtb_Switch_n = (rtNaN);
                }

                // End of Signum: '<S42>/Sign1'
                rtb_Switch_n *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S42>/Switch'

            // Sum: '<S38>/Sum'
            rtb_Sum_ip = static_cast<real_T>(i) + rtb_Sum1_k_idx_1;

            // Switch: '<S43>/Switch' incorporates:
            //   Abs: '<S43>/Abs'
            //   Bias: '<S43>/Bias'
            //   Bias: '<S43>/Bias1'
            //   Constant: '<S43>/Constant2'
            //   Constant: '<S47>/Constant'
            //   Math: '<S43>/Math Function1'
            //   RelationalOperator: '<S47>/Compare'

            if (std::abs(rtb_Sum_ip) > 180.0) {
                rtb_Sum_ip = rt_modd_snf(rtb_Sum_ip + 180.0, 360.0) + -180.0;
            }

            // End of Switch: '<S43>/Switch'

            // UnitConversion: '<S41>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ClockwiseRotation_m = 0.017453292519943295 * rtb_Switch_n;
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtb_Sum_ip;

            // UnitConversion: '<S56>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Switch_p *= 0.017453292519943295;

            // Trigonometry: '<S57>/Trigonometric Function1'
            rtb_Sum_ip = std::sin(rtb_Switch_p);

            // Sum: '<S57>/Sum1' incorporates:
            //   Constant: '<S57>/Constant'
            //   Product: '<S57>/Product1'

            rtb_Sum_ip = 1.0 - 0.0066943799901413295 * rtb_Sum_ip * rtb_Sum_ip;

            // Product: '<S55>/Product1' incorporates:
            //   Constant: '<S55>/Constant1'
            //   Sqrt: '<S55>/sqrt'

            rtb_Switch_n = 6.378137E+6 / std::sqrt(rtb_Sum_ip);

            // Product: '<S40>/dNorth' incorporates:
            //   Constant: '<S55>/Constant2'
            //   Product: '<S55>/Product3'
            //   Trigonometry: '<S55>/Trigonometric Function1'

            rtb_Sum_ip = rtb_ClockwiseRotation_m / rt_atan2d_snf(1.0,
                rtb_Switch_n * 0.99330562000985867 / rtb_Sum_ip);

            // Product: '<S40>/dEast' incorporates:
            //   Constant: '<S55>/Constant3'
            //   Product: '<S55>/Product4'
            //   Trigonometry: '<S55>/Trigonometric Function'
            //   Trigonometry: '<S55>/Trigonometric Function2'

            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Switch_n = 1.0 / rt_atan2d_snf(1.0, rtb_Switch_n * std::cos
                (rtb_Switch_p)) * rtb_Sum1_k_idx_1;

            // Sum: '<S40>/Sum2' incorporates:
            //   Product: '<S40>/x*cos'
            //   Product: '<S40>/y*sin'

            rtb_Switch_p = rtb_Switch_n * 0.0 + rtb_Sum_ip;

            // Sum: '<S40>/Sum3' incorporates:
            //   Product: '<S40>/x*sin'
            //   Product: '<S40>/y*cos'

            rtb_ClockwiseRotation_m = rtb_Switch_n - rtb_Sum_ip * 0.0;

            // Sum: '<S37>/Sum' incorporates:
            //   DataStoreRead: '<S36>/AltitudeGCS'
            //   Gain: '<S36>/inverse'

            rtb_Down2Up_c = rtu_Location->Alt + -AltitudeGCS;

            // SignalConversion generated from: '<S36>/Orbit Follower' incorporates:
            //   UnaryMinus: '<S37>/Ze2height'

            rtb_TmpSignalConversionAtOrbitFollowerInport2_f[0] = rtb_Switch_p;
            rtb_TmpSignalConversionAtOrbitFollowerInport2_f[1] =
                rtb_ClockwiseRotation_m;
            rtb_TmpSignalConversionAtOrbitFollowerInport2_f[2] = -rtb_Down2Up_c;

            // DataTypeConversion: '<S36>/Param1'
            rtb_Param1_jk = static_cast<real_T>(rtu_Parameters->Param1);

            // DataTypeConversion: '<S36>/Param2'
            rtb_Param2_i = static_cast<real_T>(rtu_Parameters->Param2);
            FlightMissionMode_OrbitFollower(rtu_Pose,
                rtb_TmpSignalConversionAtOrbitFollowerInport2_f, rtb_Param1_jk,
                rtb_Param2_i, 1.0, &localDW->OrbitFollower);

            // BusCreator: '<S36>/GuidanceCMDBusCreator' incorporates:
            //   Constant: '<S36>/Constant'
            //   DataTypeConversion: '<S36>/Param3'
            //   Gain: '<S36>/Down2Height'

            rty_GuidanceCmds->Height = -localDW->OrbitFollower.OrbitFollower_o1
                [2];
            rty_GuidanceCmds->AirSpeed = static_cast<real_T>
                (rtu_Parameters->Param4);
            rty_GuidanceCmds->HeadingAngle =
                localDW->OrbitFollower.OrbitFollower_o2;

            // Reshape: '<S36>/Reshape' incorporates:
            //   Bias: '<S36>/ClockwiseRotation'
            //   Constant: '<S36>/InitialFlightPathAngle'
            //   Constant: '<S36>/InitialRollAngle'
            //   Constant: '<S36>/InitialRollAngleRate'
            //   DataTypeConversion: '<S36>/Param3'
            //   Product: '<S36>/EastDis'
            //   Product: '<S36>/NorthDis'
            //   Sum: '<S36>/SumInitEast'
            //   Sum: '<S36>/SumInitNorth'
            //   Trigonometry: '<S36>/Cos'
            //   Trigonometry: '<S36>/Sin'
            //   UnaryMinus: '<S37>/Ze2height'

            rty_InitialState[0] = std::cos(rtb_Map2Radian) * rtb_Param1_jk +
                rtb_Switch_p;
            rty_InitialState[1] = rtb_Param1_jk * std::sin(rtb_Map2Radian) +
                rtb_ClockwiseRotation_m;
            rty_InitialState[2] = rtb_Down2Up_c;
            rty_InitialState[3] = static_cast<real_T>(rtu_Parameters->Param4);
            rty_InitialState[4] = rtb_Map2Radian + 1.5707963267948966;
            rty_InitialState[5] = 0.0;
            rty_InitialState[6] = 0.0;
            rty_InitialState[7] = 0.0;

            // SignalConversion generated from: '<S36>/Orbit Follower'
            *rty_thisTaskStatus = localDW->OrbitFollower.OrbitFollower_o6;

            // End of Outputs for SubSystem: '<Root>/Mode1_CirclingNav'
        }
        break;

      case 1:
        {
            real_T rtb_ClockwiseRotation_m;
            real_T rtb_Down2Up_c;
            real_T rtb_Map2Radian;
            real_T rtb_Sum1_k_idx_1;
            real_T rtb_Sum_ip;
            real_T rtb_Switch_p;
            int32_T i;
            if (static_cast<int32_T>(rtAction) != static_cast<int32_T>
                    (rtPrevAction)) {
                // SystemReset for IfAction SubSystem: '<Root>/Mode11_CircDispNav' incorporates:
                //   ActionPort: '<S1>/Action Port'

                // SystemReset for SwitchCase: '<Root>/Switch Case'
                FlightMissionMode_OrbitFollower_Reset(&localDW->OrbitFollower_l);

                // End of SystemReset for SubSystem: '<Root>/Mode11_CircDispNav' 
            }

            // Outputs for IfAction SubSystem: '<Root>/Mode11_CircDispNav' incorporates:
            //   ActionPort: '<S1>/Action Port'

            // DataTypeConversion: '<S11>/Param1'
            rtb_Param1_k = static_cast<real_T>(rtu_Parameters->Param1);

            // Product: '<S11>/Divide'
            rtb_Map2Radian = rtu_StartPosition->Lat / rtb_Param1_k;

            // Switch: '<S26>/Switch' incorporates:
            //   Abs: '<S26>/Abs'
            //   Bias: '<S26>/Bias'
            //   Bias: '<S26>/Bias1'
            //   Constant: '<S26>/Constant2'
            //   Constant: '<S27>/Constant'
            //   DataStoreRead: '<S11>/LatitudeGCS'
            //   Math: '<S26>/Math Function1'
            //   RelationalOperator: '<S27>/Compare'

            if (std::abs(LatitudeGCS) > 180.0) {
                rtb_Switch_p = rt_modd_snf(LatitudeGCS + 180.0, 360.0) + -180.0;
            } else {
                rtb_Switch_p = LatitudeGCS;
            }

            // End of Switch: '<S26>/Switch'

            // Abs: '<S23>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Switch_p);

            // Switch: '<S23>/Switch' incorporates:
            //   Bias: '<S23>/Bias'
            //   Bias: '<S23>/Bias1'
            //   Constant: '<S14>/Constant'
            //   Constant: '<S14>/Constant1'
            //   Constant: '<S25>/Constant'
            //   Gain: '<S23>/Gain'
            //   Product: '<S23>/Divide1'
            //   RelationalOperator: '<S25>/Compare'
            //   Switch: '<S14>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S23>/Sign1'
                if (rtb_Switch_p < 0.0) {
                    rtb_Switch_p = -1.0;
                } else if (rtb_Switch_p > 0.0) {
                    rtb_Switch_p = 1.0;
                } else if (rtb_Switch_p == 0.0) {
                    rtb_Switch_p = 0.0;
                } else {
                    rtb_Switch_p = (rtNaN);
                }

                // End of Signum: '<S23>/Sign1'
                rtb_Switch_p *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S23>/Switch'

            // Sum: '<S14>/Sum' incorporates:
            //   DataStoreRead: '<S11>/LongitudeGCS'

            rtb_Switch_n = static_cast<real_T>(i) + LongitudeGCS;

            // Switch: '<S24>/Switch' incorporates:
            //   Abs: '<S24>/Abs'
            //   Bias: '<S24>/Bias'
            //   Bias: '<S24>/Bias1'
            //   Constant: '<S24>/Constant2'
            //   Constant: '<S28>/Constant'
            //   Math: '<S24>/Math Function1'
            //   RelationalOperator: '<S28>/Compare'

            if (std::abs(rtb_Switch_n) > 180.0) {
                rtb_Switch_n = rt_modd_snf(rtb_Switch_n + 180.0, 360.0) + -180.0;
            }

            // End of Switch: '<S24>/Switch'

            // Sum: '<S12>/Sum1'
            rtb_ClockwiseRotation_m = rtu_Location->Lat - rtb_Switch_p;
            rtb_Sum1_k_idx_1 = rtu_Location->Lon - rtb_Switch_n;

            // Switch: '<S20>/Switch' incorporates:
            //   Abs: '<S20>/Abs'
            //   Bias: '<S20>/Bias'
            //   Bias: '<S20>/Bias1'
            //   Constant: '<S20>/Constant2'
            //   Constant: '<S21>/Constant'
            //   Math: '<S20>/Math Function1'
            //   RelationalOperator: '<S21>/Compare'

            if (std::abs(rtb_ClockwiseRotation_m) > 180.0) {
                rtb_Switch_n = rt_modd_snf(rtb_ClockwiseRotation_m + 180.0,
                    360.0) + -180.0;
            } else {
                rtb_Switch_n = rtb_ClockwiseRotation_m;
            }

            // End of Switch: '<S20>/Switch'

            // Abs: '<S17>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Switch_n);

            // Switch: '<S17>/Switch' incorporates:
            //   Bias: '<S17>/Bias'
            //   Bias: '<S17>/Bias1'
            //   Constant: '<S13>/Constant'
            //   Constant: '<S13>/Constant1'
            //   Constant: '<S19>/Constant'
            //   Gain: '<S17>/Gain'
            //   Product: '<S17>/Divide1'
            //   RelationalOperator: '<S19>/Compare'
            //   Switch: '<S13>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S17>/Sign1'
                if (rtb_Switch_n < 0.0) {
                    rtb_Switch_n = -1.0;
                } else if (rtb_Switch_n > 0.0) {
                    rtb_Switch_n = 1.0;
                } else if (rtb_Switch_n == 0.0) {
                    rtb_Switch_n = 0.0;
                } else {
                    rtb_Switch_n = (rtNaN);
                }

                // End of Signum: '<S17>/Sign1'
                rtb_Switch_n *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S17>/Switch'

            // Sum: '<S13>/Sum'
            rtb_Sum_ip = static_cast<real_T>(i) + rtb_Sum1_k_idx_1;

            // Switch: '<S18>/Switch' incorporates:
            //   Abs: '<S18>/Abs'
            //   Bias: '<S18>/Bias'
            //   Bias: '<S18>/Bias1'
            //   Constant: '<S18>/Constant2'
            //   Constant: '<S22>/Constant'
            //   Math: '<S18>/Math Function1'
            //   RelationalOperator: '<S22>/Compare'

            if (std::abs(rtb_Sum_ip) > 180.0) {
                rtb_Sum_ip = rt_modd_snf(rtb_Sum_ip + 180.0, 360.0) + -180.0;
            }

            // End of Switch: '<S18>/Switch'

            // UnitConversion: '<S16>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ClockwiseRotation_m = 0.017453292519943295 * rtb_Switch_n;
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtb_Sum_ip;

            // UnitConversion: '<S31>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Switch_p *= 0.017453292519943295;

            // Trigonometry: '<S32>/Trigonometric Function1'
            rtb_Sum_ip = std::sin(rtb_Switch_p);

            // Sum: '<S32>/Sum1' incorporates:
            //   Constant: '<S32>/Constant'
            //   Product: '<S32>/Product1'

            rtb_Sum_ip = 1.0 - 0.0066943799901413295 * rtb_Sum_ip * rtb_Sum_ip;

            // Product: '<S30>/Product1' incorporates:
            //   Constant: '<S30>/Constant1'
            //   Sqrt: '<S30>/sqrt'

            rtb_Switch_n = 6.378137E+6 / std::sqrt(rtb_Sum_ip);

            // Product: '<S15>/dNorth' incorporates:
            //   Constant: '<S30>/Constant2'
            //   Product: '<S30>/Product3'
            //   Trigonometry: '<S30>/Trigonometric Function1'

            rtb_Sum_ip = rtb_ClockwiseRotation_m / rt_atan2d_snf(1.0,
                rtb_Switch_n * 0.99330562000985867 / rtb_Sum_ip);

            // Product: '<S15>/dEast' incorporates:
            //   Constant: '<S30>/Constant3'
            //   Product: '<S30>/Product4'
            //   Trigonometry: '<S30>/Trigonometric Function'
            //   Trigonometry: '<S30>/Trigonometric Function2'

            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Switch_n = 1.0 / rt_atan2d_snf(1.0, rtb_Switch_n * std::cos
                (rtb_Switch_p)) * rtb_Sum1_k_idx_1;

            // Sum: '<S15>/Sum2' incorporates:
            //   Product: '<S15>/x*cos'
            //   Product: '<S15>/y*sin'

            rtb_Switch_p = rtb_Switch_n * 0.0 + rtb_Sum_ip;

            // Sum: '<S15>/Sum3' incorporates:
            //   Product: '<S15>/x*sin'
            //   Product: '<S15>/y*cos'

            rtb_ClockwiseRotation_m = rtb_Switch_n - rtb_Sum_ip * 0.0;

            // Sum: '<S12>/Sum' incorporates:
            //   DataStoreRead: '<S11>/AltitudeGCS'
            //   Gain: '<S11>/inverse'

            rtb_Down2Up_c = rtu_Location->Alt + -AltitudeGCS;

            // Sum: '<S11>/SumUp' incorporates:
            //   UnaryMinus: '<S12>/Ze2height'

            rtb_Down2Up_c += rtu_StartPosition->Alt;

            // SignalConversion generated from: '<S11>/Orbit Follower' incorporates:
            //   Gain: '<S11>/Up2Down'

            rtb_TmpSignalConversionAtOrbitFollowerInport2[0] = rtb_Switch_p;
            rtb_TmpSignalConversionAtOrbitFollowerInport2[1] =
                rtb_ClockwiseRotation_m;
            rtb_TmpSignalConversionAtOrbitFollowerInport2[2] = -rtb_Down2Up_c;

            // DataTypeConversion: '<S11>/Param2'
            rtb_Param2_k = static_cast<real_T>(rtu_Parameters->Param2);
            FlightMissionMode_OrbitFollower(rtu_Pose,
                rtb_TmpSignalConversionAtOrbitFollowerInport2, rtb_Param1_k,
                rtb_Param2_k, 1.0, &localDW->OrbitFollower_l);

            // BusCreator: '<S11>/GuidanceCMDBusCreator' incorporates:
            //   Constant: '<S11>/Constant'
            //   DataTypeConversion: '<S11>/Param3'
            //   Gain: '<S11>/Down2Height'

            rty_GuidanceCmds->Height =
                -localDW->OrbitFollower_l.OrbitFollower_o1[2];
            rty_GuidanceCmds->AirSpeed = static_cast<real_T>
                (rtu_Parameters->Param4);
            rty_GuidanceCmds->HeadingAngle =
                localDW->OrbitFollower_l.OrbitFollower_o2;

            // Reshape: '<S11>/Reshape' incorporates:
            //   Bias: '<S11>/ClockwiseRotation'
            //   Constant: '<S11>/InitialFlightPathAngle'
            //   Constant: '<S11>/InitialRollAngle'
            //   Constant: '<S11>/InitialRollAngleRate'
            //   DataTypeConversion: '<S11>/Param3'
            //   Product: '<S11>/EastDis'
            //   Product: '<S11>/NorthDis'
            //   Sum: '<S11>/SumInitEast'
            //   Sum: '<S11>/SumInitNorth'
            //   Trigonometry: '<S11>/Cos'
            //   Trigonometry: '<S11>/Sin'

            rty_InitialState[0] = std::cos(rtb_Map2Radian) * rtb_Param1_k +
                rtb_Switch_p;
            rty_InitialState[1] = rtb_Param1_k * std::sin(rtb_Map2Radian) +
                rtb_ClockwiseRotation_m;
            rty_InitialState[2] = rtb_Down2Up_c;
            rty_InitialState[3] = static_cast<real_T>(rtu_Parameters->Param4);
            rty_InitialState[4] = rtb_Map2Radian + 1.5707963267948966;
            rty_InitialState[5] = 0.0;
            rty_InitialState[6] = 0.0;
            rty_InitialState[7] = 0.0;

            // SignalConversion generated from: '<S11>/Orbit Follower'
            *rty_thisTaskStatus = localDW->OrbitFollower_l.OrbitFollower_o6;

            // End of Outputs for SubSystem: '<Root>/Mode11_CircDispNav'
        }
        break;

      case 2:
        {
            real_T rtb_ClockwiseRotation_m;
            real_T rtb_Down2Up_c;
            real_T rtb_Map2Radian;
            real_T rtb_Sum1_k_idx_1;
            real_T rtb_Sum_ip;
            real_T rtb_Switch_j2;
            real_T rtb_Switch_l0;
            real_T rtb_Switch_p;
            real_T rtb_ZeroBasedIdx;
            int32_T i;
            boolean_T rtb_Compare_f1;
            boolean_T rtb_Compare_ky;
            boolean_T rtb_Compare_ni;
            if (static_cast<int32_T>(rtAction) != static_cast<int32_T>
                    (rtPrevAction)) {
                // SystemReset for IfAction SubSystem: '<Root>/Mode2_HorzFrmnNav' incorporates:
                //   ActionPort: '<S5>/Action Port'

                // SystemReset for SwitchCase: '<Root>/Switch Case'
                FlightMissionMode_WaypointFollower_Reset
                    (&localDW->WaypointFollower);

                // End of SystemReset for SubSystem: '<Root>/Mode2_HorzFrmnNav'
            }

            // Outputs for IfAction SubSystem: '<Root>/Mode2_HorzFrmnNav' incorporates:
            //   ActionPort: '<S5>/Action Port'

            // Sum: '<S120>/Sum' incorporates:
            //   DataStoreRead: '<S118>/AltitudeGCS'
            //   Gain: '<S118>/inverse'

            rtb_ClockwiseRotation_m = rtu_Location->Alt + -AltitudeGCS;

            // DataTypeConversion: '<S118>/CastToDouble'
            rtb_ZeroBasedIdx = static_cast<real_T>(*rtu_FormationIDX);

            // Sum: '<S118>/Minus' incorporates:
            //   Constant: '<S118>/One2ZeroIdx'

            rtb_ZeroBasedIdx--;

            // Gain: '<S118>/Gain' incorporates:
            //   Constant: '<S118>/Three'
            //   Math: '<S118>/ModRunWayLayer'

            rtb_Map2Radian = 15.0 * rt_modd_snf(rtb_ZeroBasedIdx, 3.0);

            // Sum: '<S118>/BiasMissionAlt' incorporates:
            //   UnaryMinus: '<S120>/Ze2height'

            rtb_Switch_p = -rtb_ClockwiseRotation_m - rtb_Map2Radian;

            // Sum: '<S148>/Sum' incorporates:
            //   DataStoreRead: '<S121>/PrevAltitudeGCS'
            //   Gain: '<S121>/PrevInverse'

            rtb_ClockwiseRotation_m = rtu_PrevLocation->Alt + -AltitudeGCS;

            // Sum: '<S118>/BiasPrevAlt' incorporates:
            //   UnaryMinus: '<S148>/Ze2height'

            rtb_Map2Radian = -rtb_ClockwiseRotation_m - rtb_Map2Radian;

            // RelationalOperator: '<S146>/Compare' incorporates:
            //   Constant: '<S146>/Constant'

            rtb_Compare_ky = (rtu_PrevLocation->Lat == 0.0);

            // RelationalOperator: '<S147>/Compare' incorporates:
            //   Constant: '<S147>/Constant'

            rtb_Compare_ni = (rtu_PrevLocation->Lon == 0.0);

            // RelationalOperator: '<S145>/Compare' incorporates:
            //   Constant: '<S145>/Constant'

            rtb_Compare_f1 = (rtu_PrevLocation->Alt == 0.0);

            // Logic: '<S121>/AND'
            rtb_Compare_ky = static_cast<boolean_T>(static_cast<int32_T>(
                static_cast<int32_T>(static_cast<boolean_T>(static_cast<int32_T>
                (static_cast<int32_T>(rtb_Compare_ky) & static_cast<int32_T>
                 (rtb_Compare_ni)))) & static_cast<int32_T>(rtb_Compare_f1)));

            // Abs: '<S162>/Abs' incorporates:
            //   Abs: '<S136>/Abs'
            //   DataStoreRead: '<S121>/PrevLatitudeGCS'

            rtb_Switch_j2 = std::abs(LatitudeGCS);

            // Switch: '<S162>/Switch' incorporates:
            //   Abs: '<S162>/Abs'
            //   Bias: '<S162>/Bias'
            //   Bias: '<S162>/Bias1'
            //   Constant: '<S162>/Constant2'
            //   Constant: '<S163>/Constant'
            //   DataStoreRead: '<S121>/PrevLatitudeGCS'
            //   Math: '<S162>/Math Function1'
            //   RelationalOperator: '<S163>/Compare'

            if (rtb_Switch_j2 > 180.0) {
                rtb_Switch_n = rt_modd_snf(LatitudeGCS + 180.0, 360.0) + -180.0;
            } else {
                rtb_Switch_n = LatitudeGCS;
            }

            // End of Switch: '<S162>/Switch'

            // Abs: '<S159>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Switch_n);

            // Switch: '<S159>/Switch' incorporates:
            //   Bias: '<S159>/Bias'
            //   Bias: '<S159>/Bias1'
            //   Constant: '<S150>/Constant'
            //   Constant: '<S150>/Constant1'
            //   Constant: '<S161>/Constant'
            //   Gain: '<S159>/Gain'
            //   Product: '<S159>/Divide1'
            //   RelationalOperator: '<S161>/Compare'
            //   Switch: '<S150>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S159>/Sign1'
                if (rtb_Switch_n < 0.0) {
                    rtb_Switch_n = -1.0;
                } else if (rtb_Switch_n > 0.0) {
                    rtb_Switch_n = 1.0;
                } else if (rtb_Switch_n == 0.0) {
                    rtb_Switch_n = 0.0;
                } else {
                    rtb_Switch_n = (rtNaN);
                }

                // End of Signum: '<S159>/Sign1'
                rtb_Switch_n *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S159>/Switch'

            // Sum: '<S150>/Sum' incorporates:
            //   DataStoreRead: '<S121>/PrevLongitudeGCS'

            rtb_Sum_ip = static_cast<real_T>(i) + LongitudeGCS;

            // Switch: '<S160>/Switch' incorporates:
            //   Abs: '<S160>/Abs'
            //   Bias: '<S160>/Bias'
            //   Bias: '<S160>/Bias1'
            //   Constant: '<S160>/Constant2'
            //   Constant: '<S164>/Constant'
            //   Math: '<S160>/Math Function1'
            //   RelationalOperator: '<S164>/Compare'

            if (std::abs(rtb_Sum_ip) > 180.0) {
                rtb_Sum_ip = rt_modd_snf(rtb_Sum_ip + 180.0, 360.0) + -180.0;
            }

            // End of Switch: '<S160>/Switch'

            // Sum: '<S148>/Sum1'
            rtb_ClockwiseRotation_m = rtu_PrevLocation->Lat - rtb_Switch_n;
            rtb_Sum1_k_idx_1 = rtu_PrevLocation->Lon - rtb_Sum_ip;

            // Switch: '<S156>/Switch' incorporates:
            //   Abs: '<S156>/Abs'
            //   Bias: '<S156>/Bias'
            //   Bias: '<S156>/Bias1'
            //   Constant: '<S156>/Constant2'
            //   Constant: '<S157>/Constant'
            //   Math: '<S156>/Math Function1'
            //   RelationalOperator: '<S157>/Compare'

            if (std::abs(rtb_ClockwiseRotation_m) > 180.0) {
                rtb_Sum_ip = rt_modd_snf(rtb_ClockwiseRotation_m + 180.0, 360.0)
                    + -180.0;
            } else {
                rtb_Sum_ip = rtb_ClockwiseRotation_m;
            }

            // End of Switch: '<S156>/Switch'

            // Abs: '<S153>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Sum_ip);

            // Switch: '<S153>/Switch' incorporates:
            //   Bias: '<S153>/Bias'
            //   Bias: '<S153>/Bias1'
            //   Constant: '<S149>/Constant'
            //   Constant: '<S149>/Constant1'
            //   Constant: '<S155>/Constant'
            //   Gain: '<S153>/Gain'
            //   Product: '<S153>/Divide1'
            //   RelationalOperator: '<S155>/Compare'
            //   Switch: '<S149>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S153>/Sign1'
                if (rtb_Sum_ip < 0.0) {
                    rtb_Sum_ip = -1.0;
                } else if (rtb_Sum_ip > 0.0) {
                    rtb_Sum_ip = 1.0;
                } else if (rtb_Sum_ip == 0.0) {
                    rtb_Sum_ip = 0.0;
                } else {
                    rtb_Sum_ip = (rtNaN);
                }

                // End of Signum: '<S153>/Sign1'
                rtb_Sum_ip *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S153>/Switch'

            // Sum: '<S149>/Sum'
            rtb_Switch_l0 = static_cast<real_T>(i) + rtb_Sum1_k_idx_1;

            // Switch: '<S154>/Switch' incorporates:
            //   Abs: '<S154>/Abs'
            //   Bias: '<S154>/Bias'
            //   Bias: '<S154>/Bias1'
            //   Constant: '<S154>/Constant2'
            //   Constant: '<S158>/Constant'
            //   Math: '<S154>/Math Function1'
            //   RelationalOperator: '<S158>/Compare'

            if (std::abs(rtb_Switch_l0) > 180.0) {
                rtb_Switch_l0 = rt_modd_snf(rtb_Switch_l0 + 180.0, 360.0) +
                    -180.0;
            }

            // End of Switch: '<S154>/Switch'

            // UnitConversion: '<S152>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ClockwiseRotation_m = 0.017453292519943295 * rtb_Sum_ip;
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtb_Switch_l0;

            // UnitConversion: '<S167>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Switch_n *= 0.017453292519943295;

            // Trigonometry: '<S168>/Trigonometric Function1'
            rtb_Switch_l0 = std::sin(rtb_Switch_n);

            // Sum: '<S168>/Sum1' incorporates:
            //   Constant: '<S168>/Constant'
            //   Product: '<S168>/Product1'

            rtb_Switch_l0 = 1.0 - 0.0066943799901413295 * rtb_Switch_l0 *
                rtb_Switch_l0;

            // Product: '<S166>/Product1' incorporates:
            //   Constant: '<S166>/Constant1'
            //   Sqrt: '<S166>/sqrt'

            rtb_Sum_ip = 6.378137E+6 / std::sqrt(rtb_Switch_l0);

            // Product: '<S151>/dNorth' incorporates:
            //   Constant: '<S166>/Constant2'
            //   Product: '<S166>/Product3'
            //   Trigonometry: '<S166>/Trigonometric Function1'

            rtb_Switch_l0 = rtb_ClockwiseRotation_m / rt_atan2d_snf(1.0,
                rtb_Sum_ip * 0.99330562000985867 / rtb_Switch_l0);

            // Product: '<S151>/dEast' incorporates:
            //   Constant: '<S166>/Constant3'
            //   Product: '<S166>/Product4'
            //   Trigonometry: '<S166>/Trigonometric Function'
            //   Trigonometry: '<S166>/Trigonometric Function2'

            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Sum_ip = 1.0 / rt_atan2d_snf(1.0, rtb_Sum_ip * std::cos
                (rtb_Switch_n)) * rtb_Sum1_k_idx_1;

            // Sum: '<S151>/Sum2' incorporates:
            //   Product: '<S151>/x*cos'
            //   Product: '<S151>/y*sin'

            rtb_Switch_n = rtb_Sum_ip * 0.0 + rtb_Switch_l0;

            // Sum: '<S151>/Sum3' incorporates:
            //   Product: '<S151>/x*sin'
            //   Product: '<S151>/y*cos'

            rtb_Down2Up_c = rtb_Sum_ip - rtb_Switch_l0 * 0.0;

            // Switch: '<S136>/Switch' incorporates:
            //   Bias: '<S136>/Bias'
            //   Bias: '<S136>/Bias1'
            //   Constant: '<S136>/Constant2'
            //   Constant: '<S137>/Constant'
            //   DataStoreRead: '<S118>/LatitudeGCS'
            //   Math: '<S136>/Math Function1'
            //   RelationalOperator: '<S137>/Compare'

            if (rtb_Switch_j2 > 180.0) {
                rtb_Switch_j2 = rt_modd_snf(LatitudeGCS + 180.0, 360.0) + -180.0;
            } else {
                rtb_Switch_j2 = LatitudeGCS;
            }

            // End of Switch: '<S136>/Switch'

            // Abs: '<S133>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Switch_j2);

            // Switch: '<S133>/Switch' incorporates:
            //   Bias: '<S133>/Bias'
            //   Bias: '<S133>/Bias1'
            //   Constant: '<S124>/Constant'
            //   Constant: '<S124>/Constant1'
            //   Constant: '<S135>/Constant'
            //   Gain: '<S133>/Gain'
            //   Product: '<S133>/Divide1'
            //   RelationalOperator: '<S135>/Compare'
            //   Switch: '<S124>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S133>/Sign1'
                if (rtb_Switch_j2 < 0.0) {
                    rtb_Switch_j2 = -1.0;
                } else if (rtb_Switch_j2 > 0.0) {
                    rtb_Switch_j2 = 1.0;
                } else if (rtb_Switch_j2 == 0.0) {
                    rtb_Switch_j2 = 0.0;
                } else {
                    rtb_Switch_j2 = (rtNaN);
                }

                // End of Signum: '<S133>/Sign1'
                rtb_Switch_j2 *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S133>/Switch'

            // Sum: '<S124>/Sum' incorporates:
            //   DataStoreRead: '<S118>/LongitudeGCS'

            rtb_Switch_l0 = static_cast<real_T>(i) + LongitudeGCS;

            // Switch: '<S134>/Switch' incorporates:
            //   Abs: '<S134>/Abs'
            //   Bias: '<S134>/Bias'
            //   Bias: '<S134>/Bias1'
            //   Constant: '<S134>/Constant2'
            //   Constant: '<S138>/Constant'
            //   Math: '<S134>/Math Function1'
            //   RelationalOperator: '<S138>/Compare'

            if (std::abs(rtb_Switch_l0) > 180.0) {
                rtb_Switch_l0 = rt_modd_snf(rtb_Switch_l0 + 180.0, 360.0) +
                    -180.0;
            }

            // End of Switch: '<S134>/Switch'

            // Sum: '<S120>/Sum1'
            rtb_ClockwiseRotation_m = rtu_Location->Lat - rtb_Switch_j2;
            rtb_Sum1_k_idx_1 = rtu_Location->Lon - rtb_Switch_l0;

            // Switch: '<S130>/Switch' incorporates:
            //   Abs: '<S130>/Abs'
            //   Bias: '<S130>/Bias'
            //   Bias: '<S130>/Bias1'
            //   Constant: '<S130>/Constant2'
            //   Constant: '<S131>/Constant'
            //   Math: '<S130>/Math Function1'
            //   RelationalOperator: '<S131>/Compare'

            if (std::abs(rtb_ClockwiseRotation_m) > 180.0) {
                rtb_Switch_l0 = rt_modd_snf(rtb_ClockwiseRotation_m + 180.0,
                    360.0) + -180.0;
            } else {
                rtb_Switch_l0 = rtb_ClockwiseRotation_m;
            }

            // End of Switch: '<S130>/Switch'

            // Abs: '<S127>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Switch_l0);

            // Switch: '<S127>/Switch' incorporates:
            //   Bias: '<S127>/Bias'
            //   Bias: '<S127>/Bias1'
            //   Constant: '<S123>/Constant'
            //   Constant: '<S123>/Constant1'
            //   Constant: '<S129>/Constant'
            //   Gain: '<S127>/Gain'
            //   Product: '<S127>/Divide1'
            //   RelationalOperator: '<S129>/Compare'
            //   Switch: '<S123>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S127>/Sign1'
                if (rtb_Switch_l0 < 0.0) {
                    rtb_Switch_l0 = -1.0;
                } else if (rtb_Switch_l0 > 0.0) {
                    rtb_Switch_l0 = 1.0;
                } else if (rtb_Switch_l0 == 0.0) {
                    rtb_Switch_l0 = 0.0;
                } else {
                    rtb_Switch_l0 = (rtNaN);
                }

                // End of Signum: '<S127>/Sign1'
                rtb_Switch_l0 *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S127>/Switch'

            // Sum: '<S123>/Sum'
            rtb_Sum_ip = static_cast<real_T>(i) + rtb_Sum1_k_idx_1;

            // Switch: '<S128>/Switch' incorporates:
            //   Abs: '<S128>/Abs'
            //   Bias: '<S128>/Bias'
            //   Bias: '<S128>/Bias1'
            //   Constant: '<S128>/Constant2'
            //   Constant: '<S132>/Constant'
            //   Math: '<S128>/Math Function1'
            //   RelationalOperator: '<S132>/Compare'

            if (std::abs(rtb_Sum_ip) > 180.0) {
                rtb_Sum_ip = rt_modd_snf(rtb_Sum_ip + 180.0, 360.0) + -180.0;
            }

            // End of Switch: '<S128>/Switch'

            // UnitConversion: '<S126>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ClockwiseRotation_m = 0.017453292519943295 * rtb_Switch_l0;
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtb_Sum_ip;

            // UnitConversion: '<S141>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Switch_j2 *= 0.017453292519943295;

            // Trigonometry: '<S142>/Trigonometric Function1'
            rtb_Switch_l0 = std::sin(rtb_Switch_j2);

            // Sum: '<S142>/Sum1' incorporates:
            //   Constant: '<S142>/Constant'
            //   Product: '<S142>/Product1'

            rtb_Switch_l0 = 1.0 - 0.0066943799901413295 * rtb_Switch_l0 *
                rtb_Switch_l0;

            // Product: '<S140>/Product1' incorporates:
            //   Constant: '<S140>/Constant1'
            //   Sqrt: '<S140>/sqrt'

            rtb_Sum_ip = 6.378137E+6 / std::sqrt(rtb_Switch_l0);

            // Product: '<S125>/dNorth' incorporates:
            //   Constant: '<S140>/Constant2'
            //   Product: '<S140>/Product3'
            //   Trigonometry: '<S140>/Trigonometric Function1'

            rtb_Switch_l0 = rtb_ClockwiseRotation_m / rt_atan2d_snf(1.0,
                rtb_Sum_ip * 0.99330562000985867 / rtb_Switch_l0);

            // Product: '<S125>/dEast' incorporates:
            //   Constant: '<S140>/Constant3'
            //   Product: '<S140>/Product4'
            //   Trigonometry: '<S140>/Trigonometric Function'
            //   Trigonometry: '<S140>/Trigonometric Function2'

            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Switch_j2 = 1.0 / rt_atan2d_snf(1.0, rtb_Sum_ip * std::cos
                (rtb_Switch_j2)) * rtb_Sum1_k_idx_1;

            // Sum: '<S125>/Sum2' incorporates:
            //   Product: '<S125>/x*cos'
            //   Product: '<S125>/y*sin'

            rtb_Sum_ip = rtb_Switch_j2 * 0.0 + rtb_Switch_l0;

            // Sum: '<S125>/Sum3' incorporates:
            //   Product: '<S125>/x*sin'
            //   Product: '<S125>/y*cos'

            rtb_Switch_j2 -= rtb_Switch_l0 * 0.0;

            // Product: '<S118>/Map2Radian' incorporates:
            //   DataTypeConversion: '<S118>/Param3'

            rtb_Switch_l0 = static_cast<real_T>(rtu_Parameters->Param3) *
                rtb_ZeroBasedIdx;

            // Gain: '<S119>/Gain1'
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtu_Location->degHDG;

            // Outputs for Enabled SubSystem: '<S118>/WayPointGenerator' incorporates:
            //   EnablePort: '<S122>/Enable'

            if (*rtu_Reset > 0) {
                int32_T iacol;
                int32_T ibcol;
                int32_T k;
                int32_T nrows;
                int32_T nrowx;
                int32_T rtb_Bias_f;
                localDW->WayPointGenerator_MODE_h = true;

                // Product: '<S122>/ProductScanWidth' incorporates:
                //   DataTypeConversion: '<S118>/Param3'

                rtb_ClockwiseRotation_m = static_cast<real_T>
                    (rtu_Parameters->Param3) * static_cast<real_T>
                    (*rtu_MissionUAV);

                // Reshape: '<S122>/ReshapeRowVec'
                rtb_ReshapeRowVec_j[0] = rtb_Sum_ip;
                rtb_ReshapeRowVec_j[1] = rtb_Switch_j2;
                rtb_ReshapeRowVec_j[2] = rtb_Switch_p;

                // SignalConversion generated from: '<S122>/RotateATMissionHdg' incorporates:
                //   Constant: '<S122>/Zero'

                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_i[0] =
                    rtb_Sum1_k_idx_1;
                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_i[1] = 0.0;
                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_i[2] = 0.0;
                FlightMissionMode_RotateATMissionHdg
                    (rtb_TmpSignalConversionAtRotateATMissionHdgInport1_i,
                     &localDW->RotateATMissionHdg);

                // MATLAB Function: '<S122>/WayPointGenerator' incorporates:
                //   DataTypeConversion: '<S118>/Param2'

                // MATLAB Function 'Mode2_HorzFrmnNav/Mode2_Variant/Mode2/WayPointGenerator/WayPointGenerator': '<S171>:1' 
                // '<S171>:1:29'
                // '<S171>:1:3'
                rtb_ClockwiseRotation_m = std::ceil(static_cast<real_T>
                    (rtu_Parameters->Param2) / rtb_ClockwiseRotation_m);

                // '<S171>:1:4'
                rtb_ZeroBasedIdx = static_cast<real_T>(rtu_Parameters->Param2) /
                    rtb_ClockwiseRotation_m;

                // '<S171>:1:6'
                lobj_0_DubinsObj.FlightPathAngleLimit[0] = -0.175;
                lobj_0_DubinsObj.FlightPathAngleLimit[1] = 0.175;
                lobj_0_DubinsObj.MaxRollAngle = 0.3490658503988659;
                lobj_0_DubinsObj.AirSpeed = 35.0;
                lobj_0_DubinsObj.MinTurningRadius = 343.43467743182782;

                // '<S171>:1:9'
                iacol = static_cast<int32_T>(CheckPoints->size[0] *
                    CheckPoints->size[1]);

                // MATLAB Function: '<S122>/WayPointGenerator'
                CheckPoints->size[0] = static_cast<int32_T>
                    (rtb_ClockwiseRotation_m * 2.0);
                CheckPoints->size[1] = 4;
                FlightMissionMode_emxEnsureCapacity_real_T_c(CheckPoints, iacol);

                // MATLAB Function: '<S122>/WayPointGenerator' incorporates:
                //   DataTypeConversion: '<S118>/Param1'

                ibcol = static_cast<int32_T>(static_cast<int32_T>
                    (static_cast<int32_T>(rtb_ClockwiseRotation_m * 2.0) << 2) -
                    1);
                for (i = 0; i <= ibcol; i++) {
                    CheckPoints->data[i] = 0.0;
                }

                // '<S171>:1:10'
                for (rtb_Bias_f = 0; rtb_Bias_f <= static_cast<int32_T>(
                        static_cast<int32_T>(rtb_ClockwiseRotation_m) - 1);
                        rtb_Bias_f = static_cast<int32_T>(rtb_Bias_f + 1)) {
                    // '<S171>:1:10'
                    if (rt_remd_snf(static_cast<real_T>(rtb_Bias_f) + 1.0, 2.0) ==
                        1.0) {
                        real_T rtb_RightNorth;

                        // '<S171>:1:11'
                        // '<S171>:1:12'
                        i = static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(rtb_Bias_f + 1) << 1) - 2);
                        rtb_RightNorth = ((static_cast<real_T>(rtb_Bias_f) + 1.0)
                                          - 1.0) * rtb_ZeroBasedIdx;
                        CheckPoints->data[i] = rtb_RightNorth;
                        CheckPoints->data[static_cast<int32_T>(i +
                            CheckPoints->size[0])] = 0.0;
                        CheckPoints->data[static_cast<int32_T>(i +
                            static_cast<int32_T>(CheckPoints->size[0] << 1))] =
                            0.0;
                        CheckPoints->data[static_cast<int32_T>(i +
                            static_cast<int32_T>(CheckPoints->size[0] * 3))] =
                            1.5707963267948966;

                        // '<S171>:1:14'
                        i = static_cast<int32_T>(static_cast<int32_T>(
                            static_cast<int32_T>(rtb_Bias_f + 1) << 1) - 1);
                        CheckPoints->data[i] = rtb_RightNorth;
                        CheckPoints->data[static_cast<int32_T>(i +
                            CheckPoints->size[0])] = static_cast<real_T>
                            (rtu_Parameters->Param1);
                        CheckPoints->data[static_cast<int32_T>(i +
                            static_cast<int32_T>(CheckPoints->size[0] << 1))] =
                            0.0;
                        CheckPoints->data[static_cast<int32_T>(i +
                            static_cast<int32_T>(CheckPoints->size[0] * 3))] =
                            1.5707963267948966;
                    } else {
                        real_T rtb_RightNorth;

                        // '<S171>:1:17'
                        i = static_cast<int32_T>(static_cast<int32_T>(rtb_Bias_f
                            + 1) << 1);
                        rtb_RightNorth = ((static_cast<real_T>(rtb_Bias_f) + 1.0)
                                          - 1.0) * rtb_ZeroBasedIdx;
                        CheckPoints->data[static_cast<int32_T>(i - 2)] =
                            rtb_RightNorth;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(i + CheckPoints->size[0]) - 2)]
                            = static_cast<real_T>(rtu_Parameters->Param1);
                        CheckPoints->data[static_cast<int32_T>(static_cast<
                            int32_T>(i + static_cast<int32_T>(CheckPoints->size
                            [0] << 1)) - 2)] = 0.0;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(i + static_cast<int32_T>
                              (CheckPoints->size[0] * 3)) - 2)] =
                            -1.5707963267948966;

                        // '<S171>:1:19'
                        CheckPoints->data[static_cast<int32_T>(i - 1)] =
                            rtb_RightNorth;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(i + CheckPoints->size[0]) - 1)]
                            = 0.0;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(i + static_cast<int32_T>
                              (CheckPoints->size[0] << 1)) - 1)] = 0.0;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(i + static_cast<int32_T>
                              (CheckPoints->size[0] * 3)) - 1)] =
                            -1.5707963267948966;
                    }
                }

                // '<S171>:1:25'
                iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                    dummyWayPoint->size[1]);

                // MATLAB Function: '<S122>/WayPointGenerator'
                dummyWayPoint->size[0] = 1;
                dummyWayPoint->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                    iacol);

                // MATLAB Function: '<S122>/WayPointGenerator'
                dummyWayPoint->data[0] = 0.0;
                dummyWayPoint->data[1] = 0.0;
                dummyWayPoint->data[2] = 0.0;

                // '<S171>:1:28'
                for (rtb_Bias_f = 0; rtb_Bias_f <= static_cast<int32_T>
                        (CheckPoints->size[0] - 2); rtb_Bias_f =
                        static_cast<int32_T>(rtb_Bias_f + 1)) {
                    // '<S171>:1:28'
                    // '<S171>:1:29'
                    CheckPoints_0[0] = CheckPoints->data[rtb_Bias_f];
                    CheckPoints_1[0] = CheckPoints->data[static_cast<int32_T>
                        (rtb_Bias_f + 1)];
                    CheckPoints_0[1] = CheckPoints->data[static_cast<int32_T>
                        (rtb_Bias_f + CheckPoints->size[0])];
                    CheckPoints_1[1] = CheckPoints->data[static_cast<int32_T>(
                        static_cast<int32_T>(rtb_Bias_f + CheckPoints->size[0])
                        + 1)];
                    CheckPoints_0[2] = CheckPoints->data[static_cast<int32_T>(
                        static_cast<int32_T>(CheckPoints->size[0] << 1) +
                        rtb_Bias_f)];
                    CheckPoints_1[2] = CheckPoints->data[static_cast<int32_T>(
                        static_cast<int32_T>(static_cast<int32_T>
                        (CheckPoints->size[0] << 1) + rtb_Bias_f) + 1)];
                    CheckPoints_0[3] = CheckPoints->data[static_cast<int32_T>(
                        static_cast<int32_T>(CheckPoints->size[0] * 3) +
                        rtb_Bias_f)];
                    CheckPoints_1[3] = CheckPoints->data[static_cast<int32_T>(
                        static_cast<int32_T>(static_cast<int32_T>
                        (CheckPoints->size[0] * 3) + rtb_Bias_f) + 1)];
                    FlightMissionMode_genSegWP_p(&lobj_0_DubinsObj,
                        CheckPoints_0, CheckPoints_1, 100.0, segWayPoints);
                    iacol = static_cast<int32_T>(dummyWayPoint_0->size[0] *
                        dummyWayPoint_0->size[1]);
                    dummyWayPoint_0->size[0] = static_cast<int32_T>
                        (dummyWayPoint->size[0] + segWayPoints->size[0]);
                    dummyWayPoint_0->size[1] = 3;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint_0,
                        iacol);
                    ibcol = dummyWayPoint->size[0];
                    for (i = 0; i < 3; i++) {
                        for (iacol = 0; iacol <= static_cast<int32_T>(ibcol - 1);
                             iacol++) {
                            dummyWayPoint_0->data[static_cast<int32_T>(iacol +
                                static_cast<int32_T>(dummyWayPoint_0->size[0] *
                                i))] = dummyWayPoint->data[static_cast<int32_T>(
                                static_cast<int32_T>(dummyWayPoint->size[0] * i)
                                + iacol)];
                        }
                    }

                    ibcol = segWayPoints->size[0];
                    for (i = 0; i < 3; i++) {
                        for (iacol = 0; iacol <= static_cast<int32_T>(ibcol - 1);
                             iacol++) {
                            dummyWayPoint_0->data[static_cast<int32_T>(
                                static_cast<int32_T>(iacol + dummyWayPoint->
                                size[0]) + static_cast<int32_T>
                                (dummyWayPoint_0->size[0] * i))] =
                                segWayPoints->data[static_cast<int32_T>(
                                static_cast<int32_T>(segWayPoints->size[0] * i)
                                + iacol)];
                        }
                    }

                    iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                        dummyWayPoint->size[1]);
                    dummyWayPoint->size[0] = dummyWayPoint_0->size[0];
                    dummyWayPoint->size[1] = 3;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                        iacol);
                    ibcol = static_cast<int32_T>(dummyWayPoint_0->size[0] * 3);
                    for (i = 0; i <= static_cast<int32_T>(ibcol - 1); i++) {
                        dummyWayPoint->data[i] = dummyWayPoint_0->data[i];
                    }
                }

                // '<S171>:1:34'
                CheckPoints_0[0] = CheckPoints->data[static_cast<int32_T>
                    (CheckPoints->size[0] - 1)];
                CheckPoints_1[0] = CheckPoints->data[0];
                CheckPoints_0[1] = CheckPoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(CheckPoints->size[0] +
                    CheckPoints->size[0]) - 1)];
                CheckPoints_1[1] = CheckPoints->data[CheckPoints->size[0]];
                CheckPoints_0[2] = CheckPoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>(CheckPoints->size
                    [0] << 1) + CheckPoints->size[0]) - 1)];
                CheckPoints_1[2] = CheckPoints->data[static_cast<int32_T>
                    (CheckPoints->size[0] << 1)];
                CheckPoints_0[3] = CheckPoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>(CheckPoints->size
                    [0] * 3) + CheckPoints->size[0]) - 1)];
                CheckPoints_1[3] = CheckPoints->data[static_cast<int32_T>
                    (CheckPoints->size[0] * 3)];
                FlightMissionMode_genSegWP_p(&lobj_0_DubinsObj, CheckPoints_0,
                    CheckPoints_1, 100.0, segWayPoints);

                // '<S171>:1:36'
                iacol = static_cast<int32_T>(dummyWayPoint_0->size[0] *
                    dummyWayPoint_0->size[1]);

                // MATLAB Function: '<S122>/WayPointGenerator'
                dummyWayPoint_0->size[0] = static_cast<int32_T>
                    (dummyWayPoint->size[0] + segWayPoints->size[0]);
                dummyWayPoint_0->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint_0,
                    iacol);

                // MATLAB Function: '<S122>/WayPointGenerator'
                ibcol = dummyWayPoint->size[0];
                rtb_Bias_f = segWayPoints->size[0];
                for (i = 0; i < 3; i++) {
                    for (iacol = 0; iacol <= static_cast<int32_T>(ibcol - 1);
                            iacol++) {
                        dummyWayPoint_0->data[static_cast<int32_T>(iacol +
                            static_cast<int32_T>(dummyWayPoint_0->size[0] * i))]
                            = dummyWayPoint->data[static_cast<int32_T>(
                            static_cast<int32_T>(dummyWayPoint->size[0] * i) +
                            iacol)];
                    }

                    for (iacol = 0; iacol <= static_cast<int32_T>(rtb_Bias_f - 1);
                         iacol++) {
                        dummyWayPoint_0->data[static_cast<int32_T>
                            (static_cast<int32_T>(iacol + dummyWayPoint->size[0])
                             + static_cast<int32_T>(dummyWayPoint_0->size[0] * i))]
                            = segWayPoints->data[static_cast<int32_T>(
                            static_cast<int32_T>(segWayPoints->size[0] * i) +
                            iacol)];
                    }
                }

                iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                    dummyWayPoint->size[1]);

                // MATLAB Function: '<S122>/WayPointGenerator'
                dummyWayPoint->size[0] = dummyWayPoint_0->size[0];
                dummyWayPoint->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                    iacol);

                // MATLAB Function: '<S122>/WayPointGenerator'
                ibcol = static_cast<int32_T>(dummyWayPoint_0->size[0] * 3);
                for (i = 0; i <= static_cast<int32_T>(ibcol - 1); i++) {
                    dummyWayPoint->data[i] = dummyWayPoint_0->data[i];
                }

                // '<S171>:1:39'
                nrowx = static_cast<int32_T>(dummyWayPoint->size[0] - 2);
                nrows = static_cast<int32_T>(dummyWayPoint->size[0] - 1);
                for (i = 0; i <= nrowx; i = static_cast<int32_T>(i + 1)) {
                    dummyWayPoint->data[i] = dummyWayPoint->data
                        [static_cast<int32_T>(i + 1)];
                }

                for (i = 0; i <= nrowx; i = static_cast<int32_T>(i + 1)) {
                    dummyWayPoint->data[static_cast<int32_T>(i +
                        dummyWayPoint->size[0])] = dummyWayPoint->data[
                        static_cast<int32_T>(static_cast<int32_T>(i +
                        dummyWayPoint->size[0]) + 1)];
                }

                for (i = 0; i <= nrowx; i = static_cast<int32_T>(i + 1)) {
                    dummyWayPoint->data[static_cast<int32_T>(i +
                        static_cast<int32_T>(dummyWayPoint->size[0] << 1))] =
                        dummyWayPoint->data[static_cast<int32_T>
                        (static_cast<int32_T>(static_cast<int32_T>
                          (dummyWayPoint->size[0] << 1) + i) + 1)];
                }

                if (1 > nrows) {
                    ibcol = -1;
                } else {
                    ibcol = nrowx;
                }

                iacol = static_cast<int32_T>(segWayPoints->size[0] *
                    segWayPoints->size[1]);

                // MATLAB Function: '<S122>/WayPointGenerator'
                segWayPoints->size[0] = static_cast<int32_T>(ibcol + 1);
                segWayPoints->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(segWayPoints, iacol);

                // MATLAB Function: '<S122>/WayPointGenerator'
                for (i = 0; i < 3; i++) {
                    for (iacol = 0; iacol <= ibcol; iacol++) {
                        segWayPoints->data[static_cast<int32_T>(iacol +
                            static_cast<int32_T>(segWayPoints->size[0] * i))] =
                            dummyWayPoint->data[static_cast<int32_T>(
                            static_cast<int32_T>(dummyWayPoint->size[0] * i) +
                            iacol)];
                    }
                }

                // '<S171>:1:40'
                if (1 > nrows) {
                    i = -1;
                    nrowx = -1;
                } else {
                    i = nrowx;
                }

                rtb_ClockwiseRotation_m = std::ceil(10240.0 / static_cast<real_T>
                    (static_cast<int32_T>(i + 1)));
                iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                    dummyWayPoint->size[1]);

                // MATLAB Function: '<S122>/WayPointGenerator'
                dummyWayPoint->size[0] = static_cast<int32_T>
                    (static_cast<int32_T>(nrowx + 1) * static_cast<int32_T>
                     (rtb_ClockwiseRotation_m));
                dummyWayPoint->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                    iacol);

                // MATLAB Function: '<S122>/WayPointGenerator'
                nrows = segWayPoints->size[0];
                for (nrowx = 0; nrowx <= static_cast<int32_T>
                        (static_cast<int32_T>(rtb_ClockwiseRotation_m) - 1);
                        nrowx = static_cast<int32_T>(nrowx + 1)) {
                    ibcol = static_cast<int32_T>(static_cast<int32_T>(nrowx *
                        nrows) + -1);
                    for (k = 1; static_cast<int32_T>(k - 1) <=
                            static_cast<int32_T>(nrows - 1); k =
                            static_cast<int32_T>(k + 1)) {
                        dummyWayPoint->data[static_cast<int32_T>(ibcol + k)] =
                            segWayPoints->data[static_cast<int32_T>(k - 1)];
                    }
                }

                i = static_cast<int32_T>(static_cast<int32_T>(segWayPoints->
                    size[0] * static_cast<int32_T>(rtb_ClockwiseRotation_m)) - 1);
                for (nrowx = 0; nrowx <= static_cast<int32_T>
                        (static_cast<int32_T>(rtb_ClockwiseRotation_m) - 1);
                        nrowx = static_cast<int32_T>(nrowx + 1)) {
                    ibcol = static_cast<int32_T>(static_cast<int32_T>(nrowx *
                        nrows) + i);
                    for (k = 1; static_cast<int32_T>(k - 1) <=
                            static_cast<int32_T>(nrows - 1); k =
                            static_cast<int32_T>(k + 1)) {
                        dummyWayPoint->data[static_cast<int32_T>(ibcol + k)] =
                            segWayPoints->data[static_cast<int32_T>(static_cast<
                            int32_T>(nrows + k) - 1)];
                    }
                }

                iacol = static_cast<int32_T>(segWayPoints->size[0] << 1);
                i = static_cast<int32_T>(static_cast<int32_T>(static_cast<
                    int32_T>(segWayPoints->size[0] * static_cast<int32_T>
                             (rtb_ClockwiseRotation_m)) << 1) - 1);
                for (nrowx = 0; nrowx <= static_cast<int32_T>(static_cast<
                        int32_T>(rtb_ClockwiseRotation_m) - 1); nrowx =
                        static_cast<int32_T>(nrowx + 1)) {
                    ibcol = static_cast<int32_T>(static_cast<int32_T>(nrowx *
                        nrows) + i);
                    for (k = 1; static_cast<int32_T>(k - 1) <=
                            static_cast<int32_T>(nrows - 1); k =
                            static_cast<int32_T>(k + 1)) {
                        dummyWayPoint->data[static_cast<int32_T>(ibcol + k)] =
                            segWayPoints->data[static_cast<int32_T>(static_cast<
                            int32_T>(iacol + k) - 1)];
                    }
                }

                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(rtb_Compare_ky)
                      ^ 1))) {
                    // Reshape: '<S118>/Reshape2Row' incorporates:
                    //   Sum: '<S118>/RelPrevPos'

                    // '<S171>:1:42'
                    // '<S171>:1:44'
                    rtb_RelPrevPos_b_0[0] = rtb_Down2Up_c - rtb_Switch_j2;
                    rtb_RelPrevPos_b_0[1] = rtb_Switch_n - rtb_Sum_ip;
                    rtb_RelPrevPos_b_0[2] = rtb_Map2Radian - rtb_Switch_p;

                    // Product: '<S122>/RotateRelPrevPos' incorporates:
                    //   MATLABSystem: '<S122>/RotateATMissionHdg'

                    rt_mrdivide_U1d1x3_U2d3x3_Yd1x3_snf(rtb_RelPrevPos_b_0,
                        localDW->RotateATMissionHdg.RotateATMissionHdg,
                        rtb_ReshapeRowVecStartpose_d);
                    CheckPoints_1[0] = rtb_ReshapeRowVecStartpose_d[0];
                    CheckPoints_1[1] = rtb_ReshapeRowVecStartpose_d[1];
                    CheckPoints_1[2] = rtb_ReshapeRowVecStartpose_d[2];
                    CheckPoints_1[3] = 1.5707963267948966;
                    CheckPoints_0[0] = CheckPoints->data[0];
                    CheckPoints_0[1] = CheckPoints->data[CheckPoints->size[0]];
                    CheckPoints_0[2] = CheckPoints->data[static_cast<int32_T>
                        (CheckPoints->size[0] << 1)];
                    CheckPoints_0[3] = CheckPoints->data[static_cast<int32_T>
                        (CheckPoints->size[0] * 3)];
                    FlightMissionMode_genSegWP_p(&lobj_0_DubinsObj,
                        CheckPoints_1, CheckPoints_0, 100.0, segWayPoints);

                    // '<S171>:1:46'
                    iacol = static_cast<int32_T>(dummyWayPoint_0->size[0] *
                        dummyWayPoint_0->size[1]);
                    dummyWayPoint_0->size[0] = static_cast<int32_T>
                        (segWayPoints->size[0] + dummyWayPoint->size[0]);
                    dummyWayPoint_0->size[1] = 3;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint_0,
                        iacol);
                    ibcol = segWayPoints->size[0];
                    rtb_Bias_f = dummyWayPoint->size[0];
                    for (i = 0; i < 3; i++) {
                        for (iacol = 0; iacol <= static_cast<int32_T>(ibcol - 1);
                             iacol++) {
                            dummyWayPoint_0->data[static_cast<int32_T>(iacol +
                                static_cast<int32_T>(dummyWayPoint_0->size[0] *
                                i))] = segWayPoints->data[static_cast<int32_T>(
                                static_cast<int32_T>(segWayPoints->size[0] * i)
                                + iacol)];
                        }

                        for (iacol = 0; iacol <= static_cast<int32_T>(rtb_Bias_f
                              - 1); iacol++) {
                            dummyWayPoint_0->data[static_cast<int32_T>(
                                static_cast<int32_T>(iacol + segWayPoints->size
                                [0]) + static_cast<int32_T>
                                (dummyWayPoint_0->size[0] * i))] =
                                dummyWayPoint->data[static_cast<int32_T>(
                                static_cast<int32_T>(dummyWayPoint->size[0] * i)
                                + iacol)];
                        }
                    }

                    iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                        dummyWayPoint->size[1]);
                    dummyWayPoint->size[0] = dummyWayPoint_0->size[0];
                    dummyWayPoint->size[1] = 3;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                        iacol);
                    ibcol = static_cast<int32_T>(dummyWayPoint_0->size[0] * 3);
                    for (i = 0; i <= static_cast<int32_T>(ibcol - 1); i++) {
                        dummyWayPoint->data[i] = dummyWayPoint_0->data[i];
                    }
                }

                // '<S171>:1:50'
                for (i = 0; i < 3; i++) {
                    for (iacol = 0; iacol < 10240; iacol++) {
                        localDW->WayPoint_i[static_cast<int32_T>(iacol +
                            static_cast<int32_T>(10240 * i))] =
                            dummyWayPoint->data[static_cast<int32_T>(
                            static_cast<int32_T>(dummyWayPoint->size[0] * i) +
                            iacol)];
                    }
                }

                // MATLAB Function: '<S122>/biasWayPoint'
                // MATLAB Function 'biasWayPoint': '<S173>:1'
                // '<S173>:1:4'
                for (i = 0; i < 10240; i++) {
                    localDW->rtb_WayPoint_i_m[i] = localDW->WayPoint_i[i] +
                        rtb_Switch_l0;
                    localDW->rtb_WayPoint_i_m[static_cast<int32_T>(i + 10240)] =
                        localDW->WayPoint_i[static_cast<int32_T>(i + 10240)];
                    localDW->rtb_WayPoint_i_m[static_cast<int32_T>(i + 20480)] =
                        localDW->WayPoint_i[static_cast<int32_T>(i + 20480)];
                }

                // End of MATLAB Function: '<S122>/biasWayPoint'

                // Product: '<S122>/RotateIndivWayPoint' incorporates:
                //   MATLABSystem: '<S122>/RotateATMissionHdg'

                for (i = 0; i < 3; i++) {
                    for (iacol = 0; iacol < 10240; iacol++) {
                        rtb_Bias_f = static_cast<int32_T>(static_cast<int32_T>
                            (10240 * i) + iacol);
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] = 0.0;
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg.RotateATMissionHdg[
                            static_cast<int32_T>(3 * i)] *
                            localDW->rtb_WayPoint_i_m[iacol];
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg.RotateATMissionHdg[
                            static_cast<int32_T>(static_cast<int32_T>(3 * i) + 1)]
                            * localDW->rtb_WayPoint_i_m[static_cast<int32_T>
                            (iacol + 10240)];
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg.RotateATMissionHdg[
                            static_cast<int32_T>(static_cast<int32_T>(3 * i) + 2)]
                            * localDW->rtb_WayPoint_i_m[static_cast<int32_T>
                            (iacol + 20480)];
                    }
                }

                // End of Product: '<S122>/RotateIndivWayPoint'

                // MATLAB Function: '<S122>/biasNED'
                FlightMissionMode_biasNED(rtb_ReshapeRowVec_j,
                    localDW->RotateIndivWayPoint_g, localDW->nedWayPoint_l,
                    &localDW->sf_biasNED);
            } else {
                localDW->WayPointGenerator_MODE_h = false;
            }

            // End of Outputs for SubSystem: '<S118>/WayPointGenerator'
            FlightMissionMode_WaypointFollower(rtu_Pose, localDW->nedWayPoint_l,
                200.0, &localDW->WaypointFollower);

            // DataTypeConversion: '<S118>/Cast To Double' incorporates:
            //   Constant: '<S118>/LookAheadDis'
            //   MATLAB Function: '<S122>/WayPointGenerator'

            *rty_thisTaskStatus = static_cast<real_T>
                (localDW->WaypointFollower.WaypointFollower_o5);

            // BusCreator: '<S118>/GuidanceCMDBusCreator' incorporates:
            //   DataTypeConversion: '<S118>/Param4'
            //   Gain: '<S118>/Down2Height'

            rty_GuidanceCmds->Height =
                -localDW->WaypointFollower.WaypointFollower_o1[2];
            rty_GuidanceCmds->AirSpeed = static_cast<real_T>
                (rtu_Parameters->Param4);
            rty_GuidanceCmds->HeadingAngle =
                localDW->WaypointFollower.WaypointFollower_o2;

            // Switch: '<S118>/SwitchNorth' incorporates:
            //   Switch: '<S118>/SwitchEast'

            if (rtb_Compare_ky) {
                rtb_Switch_n = rtb_Sum_ip;
                rtb_Down2Up_c = rtb_Switch_j2;
            }

            // End of Switch: '<S118>/SwitchNorth'

            // Reshape: '<S118>/Reshape' incorporates:
            //   Bias: '<S118>/Rotate90deg'
            //   Product: '<S118>/ProductEast'
            //   Product: '<S118>/ProductNorth'
            //   Sum: '<S118>/SumInitEast'
            //   Sum: '<S118>/SumInitNorth'
            //   Trigonometry: '<S118>/Cos'
            //   Trigonometry: '<S118>/Sin'

            rty_InitialState[0] = std::cos(rtb_Sum1_k_idx_1 + 1.5707963267948966)
                * rtb_Switch_l0 + rtb_Switch_n;
            rty_InitialState[1] = std::sin(rtb_Sum1_k_idx_1 + 1.5707963267948966)
                * rtb_Switch_l0 + rtb_Down2Up_c;

            // Switch: '<S118>/SwitchAlt'
            if (rtb_Compare_ky) {
                // Reshape: '<S118>/Reshape' incorporates:
                //   Gain: '<S118>/Down2Up'

                rty_InitialState[2] = -rtb_Switch_p;
            } else {
                // Reshape: '<S118>/Reshape' incorporates:
                //   Gain: '<S118>/Down2Up'

                rty_InitialState[2] = -rtb_Map2Radian;
            }

            // End of Switch: '<S118>/SwitchAlt'

            // Reshape: '<S118>/Reshape' incorporates:
            //   Constant: '<S118>/InitialFlightPathAngle'
            //   Constant: '<S118>/InitialRollAngle'
            //   Constant: '<S118>/InitialRollAngleRate'
            //   DataTypeConversion: '<S118>/Param4'

            rty_InitialState[3] = static_cast<real_T>(rtu_Parameters->Param4);
            rty_InitialState[4] = rtb_Sum1_k_idx_1;
            rty_InitialState[5] = 0.0;
            rty_InitialState[6] = 0.0;
            rty_InitialState[7] = 0.0;

            // End of Outputs for SubSystem: '<Root>/Mode2_HorzFrmnNav'
        }
        break;

      case 3:
        {
            real_T rtb_ClockwiseRotation_m;
            real_T rtb_Down2Up_c;
            real_T rtb_Map2Radian;
            real_T rtb_RightNorth;
            real_T rtb_Sum1_k_idx_1;
            real_T rtb_Sum_ip;
            real_T rtb_Switch_j2;
            real_T rtb_Switch_l0;
            real_T rtb_Switch_p;
            real_T rtb_ZeroBasedIdx;
            int32_T i;
            boolean_T rtb_Compare_f1;
            boolean_T rtb_Compare_ky;
            boolean_T rtb_Compare_ni;
            if (static_cast<int32_T>(rtAction) != static_cast<int32_T>
                    (rtPrevAction)) {
                // SystemReset for IfAction SubSystem: '<Root>/Mode22_CustomFrmnNav' incorporates:
                //   ActionPort: '<S3>/Action Port'

                // SystemReset for SwitchCase: '<Root>/Switch Case'
                FlightMissionMode_WaypointFollower_Reset
                    (&localDW->WaypointFollower_d);

                // End of SystemReset for SubSystem: '<Root>/Mode22_CustomFrmnNav' 
            }

            // Outputs for IfAction SubSystem: '<Root>/Mode22_CustomFrmnNav' incorporates:
            //   ActionPort: '<S3>/Action Port'

            // RelationalOperator: '<S89>/Compare' incorporates:
            //   Constant: '<S89>/Constant'

            rtb_Compare_ky = (rtu_PrevLocation->Lat == 0.0);

            // RelationalOperator: '<S90>/Compare' incorporates:
            //   Constant: '<S90>/Constant'

            rtb_Compare_ni = (rtu_PrevLocation->Lon == 0.0);

            // RelationalOperator: '<S88>/Compare' incorporates:
            //   Constant: '<S88>/Constant'

            rtb_Compare_f1 = (rtu_PrevLocation->Alt == 0.0);

            // Logic: '<S64>/AND'
            rtb_Compare_ky = static_cast<boolean_T>(static_cast<int32_T>(
                static_cast<int32_T>(static_cast<boolean_T>(static_cast<int32_T>
                (static_cast<int32_T>(rtb_Compare_ky) & static_cast<int32_T>
                 (rtb_Compare_ni)))) & static_cast<int32_T>(rtb_Compare_f1)));

            // Abs: '<S105>/Abs' incorporates:
            //   Abs: '<S79>/Abs'
            //   DataStoreRead: '<S64>/PrevLatitudeGCS'

            rtb_Switch_j2 = std::abs(LatitudeGCS);

            // Switch: '<S105>/Switch' incorporates:
            //   Abs: '<S105>/Abs'
            //   Bias: '<S105>/Bias'
            //   Bias: '<S105>/Bias1'
            //   Constant: '<S105>/Constant2'
            //   Constant: '<S106>/Constant'
            //   DataStoreRead: '<S64>/PrevLatitudeGCS'
            //   Math: '<S105>/Math Function1'
            //   RelationalOperator: '<S106>/Compare'

            if (rtb_Switch_j2 > 180.0) {
                rtb_Map2Radian = rt_modd_snf(LatitudeGCS + 180.0, 360.0) +
                    -180.0;
            } else {
                rtb_Map2Radian = LatitudeGCS;
            }

            // End of Switch: '<S105>/Switch'

            // Abs: '<S102>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Map2Radian);

            // Switch: '<S102>/Switch' incorporates:
            //   Bias: '<S102>/Bias'
            //   Bias: '<S102>/Bias1'
            //   Constant: '<S104>/Constant'
            //   Constant: '<S93>/Constant'
            //   Constant: '<S93>/Constant1'
            //   Gain: '<S102>/Gain'
            //   Product: '<S102>/Divide1'
            //   RelationalOperator: '<S104>/Compare'
            //   Switch: '<S93>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S102>/Sign1'
                if (rtb_Map2Radian < 0.0) {
                    rtb_Map2Radian = -1.0;
                } else if (rtb_Map2Radian > 0.0) {
                    rtb_Map2Radian = 1.0;
                } else if (rtb_Map2Radian == 0.0) {
                    rtb_Map2Radian = 0.0;
                } else {
                    rtb_Map2Radian = (rtNaN);
                }

                // End of Signum: '<S102>/Sign1'
                rtb_Map2Radian *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S102>/Switch'

            // Sum: '<S93>/Sum' incorporates:
            //   DataStoreRead: '<S64>/PrevLongitudeGCS'

            rtb_Down2Up_c = static_cast<real_T>(i) + LongitudeGCS;

            // Switch: '<S103>/Switch' incorporates:
            //   Abs: '<S103>/Abs'
            //   Bias: '<S103>/Bias'
            //   Bias: '<S103>/Bias1'
            //   Constant: '<S103>/Constant2'
            //   Constant: '<S107>/Constant'
            //   Math: '<S103>/Math Function1'
            //   RelationalOperator: '<S107>/Compare'

            if (std::abs(rtb_Down2Up_c) > 180.0) {
                rtb_Down2Up_c = rt_modd_snf(rtb_Down2Up_c + 180.0, 360.0) +
                    -180.0;
            }

            // End of Switch: '<S103>/Switch'

            // Sum: '<S91>/Sum1'
            rtb_ClockwiseRotation_m = rtu_PrevLocation->Lat - rtb_Map2Radian;
            rtb_Sum1_k_idx_1 = rtu_PrevLocation->Lon - rtb_Down2Up_c;

            // Switch: '<S99>/Switch' incorporates:
            //   Abs: '<S99>/Abs'
            //   Bias: '<S99>/Bias'
            //   Bias: '<S99>/Bias1'
            //   Constant: '<S100>/Constant'
            //   Constant: '<S99>/Constant2'
            //   Math: '<S99>/Math Function1'
            //   RelationalOperator: '<S100>/Compare'

            if (std::abs(rtb_ClockwiseRotation_m) > 180.0) {
                rtb_Down2Up_c = rt_modd_snf(rtb_ClockwiseRotation_m + 180.0,
                    360.0) + -180.0;
            } else {
                rtb_Down2Up_c = rtb_ClockwiseRotation_m;
            }

            // End of Switch: '<S99>/Switch'

            // Abs: '<S96>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Down2Up_c);

            // Switch: '<S96>/Switch' incorporates:
            //   Bias: '<S96>/Bias'
            //   Bias: '<S96>/Bias1'
            //   Constant: '<S92>/Constant'
            //   Constant: '<S92>/Constant1'
            //   Constant: '<S98>/Constant'
            //   Gain: '<S96>/Gain'
            //   Product: '<S96>/Divide1'
            //   RelationalOperator: '<S98>/Compare'
            //   Switch: '<S92>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S96>/Sign1'
                if (rtb_Down2Up_c < 0.0) {
                    rtb_Down2Up_c = -1.0;
                } else if (rtb_Down2Up_c > 0.0) {
                    rtb_Down2Up_c = 1.0;
                } else if (rtb_Down2Up_c == 0.0) {
                    rtb_Down2Up_c = 0.0;
                } else {
                    rtb_Down2Up_c = (rtNaN);
                }

                // End of Signum: '<S96>/Sign1'
                rtb_Down2Up_c *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S96>/Switch'

            // Sum: '<S92>/Sum'
            rtb_ZeroBasedIdx = static_cast<real_T>(i) + rtb_Sum1_k_idx_1;

            // Switch: '<S97>/Switch' incorporates:
            //   Abs: '<S97>/Abs'
            //   Bias: '<S97>/Bias'
            //   Bias: '<S97>/Bias1'
            //   Constant: '<S101>/Constant'
            //   Constant: '<S97>/Constant2'
            //   Math: '<S97>/Math Function1'
            //   RelationalOperator: '<S101>/Compare'

            if (std::abs(rtb_ZeroBasedIdx) > 180.0) {
                rtb_ZeroBasedIdx = rt_modd_snf(rtb_ZeroBasedIdx + 180.0, 360.0)
                    + -180.0;
            }

            // End of Switch: '<S97>/Switch'

            // UnitConversion: '<S95>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ClockwiseRotation_m = 0.017453292519943295 * rtb_Down2Up_c;
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtb_ZeroBasedIdx;

            // UnitConversion: '<S110>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Map2Radian *= 0.017453292519943295;

            // Trigonometry: '<S111>/Trigonometric Function1'
            rtb_ZeroBasedIdx = std::sin(rtb_Map2Radian);

            // Sum: '<S111>/Sum1' incorporates:
            //   Constant: '<S111>/Constant'
            //   Product: '<S111>/Product1'

            rtb_ZeroBasedIdx = 1.0 - 0.0066943799901413295 * rtb_ZeroBasedIdx *
                rtb_ZeroBasedIdx;

            // Product: '<S109>/Product1' incorporates:
            //   Constant: '<S109>/Constant1'
            //   Sqrt: '<S109>/sqrt'

            rtb_Down2Up_c = 6.378137E+6 / std::sqrt(rtb_ZeroBasedIdx);

            // Product: '<S94>/dNorth' incorporates:
            //   Constant: '<S109>/Constant2'
            //   Product: '<S109>/Product3'
            //   Trigonometry: '<S109>/Trigonometric Function1'

            rtb_ZeroBasedIdx = rtb_ClockwiseRotation_m / rt_atan2d_snf(1.0,
                rtb_Down2Up_c * 0.99330562000985867 / rtb_ZeroBasedIdx);

            // Product: '<S94>/dEast' incorporates:
            //   Constant: '<S109>/Constant3'
            //   Product: '<S109>/Product4'
            //   Trigonometry: '<S109>/Trigonometric Function'
            //   Trigonometry: '<S109>/Trigonometric Function2'

            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Down2Up_c = 1.0 / rt_atan2d_snf(1.0, rtb_Down2Up_c * std::cos
                (rtb_Map2Radian)) * rtb_Sum1_k_idx_1;

            // Sum: '<S94>/Sum2' incorporates:
            //   Product: '<S94>/x*cos'
            //   Product: '<S94>/y*sin'

            rtb_Map2Radian = rtb_Down2Up_c * 0.0 + rtb_ZeroBasedIdx;

            // Sum: '<S94>/Sum3' incorporates:
            //   Product: '<S94>/x*sin'
            //   Product: '<S94>/y*cos'

            rtb_Switch_n = rtb_Down2Up_c - rtb_ZeroBasedIdx * 0.0;

            // Sum: '<S91>/Sum' incorporates:
            //   DataStoreRead: '<S64>/PrevAltitudeGCS'
            //   Gain: '<S64>/PrevInverse'

            rtb_Switch_p = rtu_PrevLocation->Alt + -AltitudeGCS;

            // Switch: '<S79>/Switch' incorporates:
            //   Bias: '<S79>/Bias'
            //   Bias: '<S79>/Bias1'
            //   Constant: '<S79>/Constant2'
            //   Constant: '<S80>/Constant'
            //   DataStoreRead: '<S61>/LatitudeGCS'
            //   Math: '<S79>/Math Function1'
            //   RelationalOperator: '<S80>/Compare'

            if (rtb_Switch_j2 > 180.0) {
                rtb_ZeroBasedIdx = rt_modd_snf(LatitudeGCS + 180.0, 360.0) +
                    -180.0;
            } else {
                rtb_ZeroBasedIdx = LatitudeGCS;
            }

            // End of Switch: '<S79>/Switch'

            // Abs: '<S76>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_ZeroBasedIdx);

            // Switch: '<S76>/Switch' incorporates:
            //   Bias: '<S76>/Bias'
            //   Bias: '<S76>/Bias1'
            //   Constant: '<S67>/Constant'
            //   Constant: '<S67>/Constant1'
            //   Constant: '<S78>/Constant'
            //   Gain: '<S76>/Gain'
            //   Product: '<S76>/Divide1'
            //   RelationalOperator: '<S78>/Compare'
            //   Switch: '<S67>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S76>/Sign1'
                if (rtb_ZeroBasedIdx < 0.0) {
                    rtb_ZeroBasedIdx = -1.0;
                } else if (rtb_ZeroBasedIdx > 0.0) {
                    rtb_ZeroBasedIdx = 1.0;
                } else if (rtb_ZeroBasedIdx == 0.0) {
                    rtb_ZeroBasedIdx = 0.0;
                } else {
                    rtb_ZeroBasedIdx = (rtNaN);
                }

                // End of Signum: '<S76>/Sign1'
                rtb_ZeroBasedIdx *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S76>/Switch'

            // Sum: '<S67>/Sum' incorporates:
            //   DataStoreRead: '<S61>/LongitudeGCS'

            rtb_Down2Up_c = static_cast<real_T>(i) + LongitudeGCS;

            // Switch: '<S77>/Switch' incorporates:
            //   Abs: '<S77>/Abs'
            //   Bias: '<S77>/Bias'
            //   Bias: '<S77>/Bias1'
            //   Constant: '<S77>/Constant2'
            //   Constant: '<S81>/Constant'
            //   Math: '<S77>/Math Function1'
            //   RelationalOperator: '<S81>/Compare'

            if (std::abs(rtb_Down2Up_c) > 180.0) {
                rtb_Down2Up_c = rt_modd_snf(rtb_Down2Up_c + 180.0, 360.0) +
                    -180.0;
            }

            // End of Switch: '<S77>/Switch'

            // Sum: '<S63>/Sum1'
            rtb_ClockwiseRotation_m = rtu_Location->Lat - rtb_ZeroBasedIdx;
            rtb_Sum1_k_idx_1 = rtu_Location->Lon - rtb_Down2Up_c;

            // Switch: '<S73>/Switch' incorporates:
            //   Abs: '<S73>/Abs'
            //   Bias: '<S73>/Bias'
            //   Bias: '<S73>/Bias1'
            //   Constant: '<S73>/Constant2'
            //   Constant: '<S74>/Constant'
            //   Math: '<S73>/Math Function1'
            //   RelationalOperator: '<S74>/Compare'

            if (std::abs(rtb_ClockwiseRotation_m) > 180.0) {
                rtb_Down2Up_c = rt_modd_snf(rtb_ClockwiseRotation_m + 180.0,
                    360.0) + -180.0;
            } else {
                rtb_Down2Up_c = rtb_ClockwiseRotation_m;
            }

            // End of Switch: '<S73>/Switch'

            // Abs: '<S70>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Down2Up_c);

            // Switch: '<S70>/Switch' incorporates:
            //   Bias: '<S70>/Bias'
            //   Bias: '<S70>/Bias1'
            //   Constant: '<S66>/Constant'
            //   Constant: '<S66>/Constant1'
            //   Constant: '<S72>/Constant'
            //   Gain: '<S70>/Gain'
            //   Product: '<S70>/Divide1'
            //   RelationalOperator: '<S72>/Compare'
            //   Switch: '<S66>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S70>/Sign1'
                if (rtb_Down2Up_c < 0.0) {
                    rtb_Down2Up_c = -1.0;
                } else if (rtb_Down2Up_c > 0.0) {
                    rtb_Down2Up_c = 1.0;
                } else if (rtb_Down2Up_c == 0.0) {
                    rtb_Down2Up_c = 0.0;
                } else {
                    rtb_Down2Up_c = (rtNaN);
                }

                // End of Signum: '<S70>/Sign1'
                rtb_Down2Up_c *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S70>/Switch'

            // Sum: '<S66>/Sum'
            rtb_Switch_j2 = static_cast<real_T>(i) + rtb_Sum1_k_idx_1;

            // Switch: '<S71>/Switch' incorporates:
            //   Abs: '<S71>/Abs'
            //   Bias: '<S71>/Bias'
            //   Bias: '<S71>/Bias1'
            //   Constant: '<S71>/Constant2'
            //   Constant: '<S75>/Constant'
            //   Math: '<S71>/Math Function1'
            //   RelationalOperator: '<S75>/Compare'

            if (std::abs(rtb_Switch_j2) > 180.0) {
                rtb_Switch_j2 = rt_modd_snf(rtb_Switch_j2 + 180.0, 360.0) +
                    -180.0;
            }

            // End of Switch: '<S71>/Switch'

            // UnitConversion: '<S69>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ClockwiseRotation_m = 0.017453292519943295 * rtb_Down2Up_c;
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtb_Switch_j2;

            // UnitConversion: '<S84>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ZeroBasedIdx *= 0.017453292519943295;

            // Trigonometry: '<S85>/Trigonometric Function1'
            rtb_Switch_j2 = std::sin(rtb_ZeroBasedIdx);

            // Sum: '<S85>/Sum1' incorporates:
            //   Constant: '<S85>/Constant'
            //   Product: '<S85>/Product1'

            rtb_Switch_j2 = 1.0 - 0.0066943799901413295 * rtb_Switch_j2 *
                rtb_Switch_j2;

            // Product: '<S83>/Product1' incorporates:
            //   Constant: '<S83>/Constant1'
            //   Sqrt: '<S83>/sqrt'

            rtb_Down2Up_c = 6.378137E+6 / std::sqrt(rtb_Switch_j2);

            // Product: '<S68>/dNorth' incorporates:
            //   Constant: '<S83>/Constant2'
            //   Product: '<S83>/Product3'
            //   Trigonometry: '<S83>/Trigonometric Function1'

            rtb_Switch_j2 = rtb_ClockwiseRotation_m / rt_atan2d_snf(1.0,
                rtb_Down2Up_c * 0.99330562000985867 / rtb_Switch_j2);

            // Product: '<S68>/dEast' incorporates:
            //   Constant: '<S83>/Constant3'
            //   Product: '<S83>/Product4'
            //   Trigonometry: '<S83>/Trigonometric Function'
            //   Trigonometry: '<S83>/Trigonometric Function2'

            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ZeroBasedIdx = 1.0 / rt_atan2d_snf(1.0, rtb_Down2Up_c * std::cos
                (rtb_ZeroBasedIdx)) * rtb_Sum1_k_idx_1;

            // Sum: '<S68>/Sum2' incorporates:
            //   Product: '<S68>/x*cos'
            //   Product: '<S68>/y*sin'

            rtb_Down2Up_c = rtb_ZeroBasedIdx * 0.0 + rtb_Switch_j2;

            // Sum: '<S68>/Sum3' incorporates:
            //   Product: '<S68>/x*sin'
            //   Product: '<S68>/y*cos'

            rtb_Switch_j2 = rtb_ZeroBasedIdx - rtb_Switch_j2 * 0.0;

            // Sum: '<S63>/Sum' incorporates:
            //   DataStoreRead: '<S61>/AltitudeGCS'
            //   Gain: '<S61>/inverse'

            rtb_Switch_l0 = rtu_Location->Alt + -AltitudeGCS;

            // Gain: '<S61>/Up2Down'
            rtb_Sum_ip = -rtu_StartPosition->Alt;

            // Sum: '<S61>/Sum' incorporates:
            //   UnaryMinus: '<S63>/Ze2height'

            rtb_ClockwiseRotation_m = -rtb_Switch_l0 + rtb_Sum_ip;

            // Sum: '<S61>/RelPrevPos' incorporates:
            //   UnaryMinus: '<S91>/Ze2height'

            rtb_RelPrevPos_b_0[2] = -rtb_Switch_p - rtb_ClockwiseRotation_m;

            // Gain: '<S62>/Gain1'
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtu_Location->degHDG;

            // Outputs for Enabled SubSystem: '<S61>/WayPointGenerator' incorporates:
            //   EnablePort: '<S65>/Enable'

            if (*rtu_Reset > 0) {
                int32_T iacol;
                int32_T ibcol;
                int32_T k;
                int32_T nrows;
                int32_T nrowx;
                int32_T rtb_Bias_f;
                localDW->WayPointGenerator_MODE_d = true;

                // Product: '<S65>/ProductScanWidth' incorporates:
                //   DataTypeConversion: '<S61>/Param3'

                rtb_Sum_ip = static_cast<real_T>(rtu_Parameters->Param3) *
                    static_cast<real_T>(*rtu_MissionUAV);

                // Reshape: '<S65>/ReshapeRowVec'
                rtb_ReshapeRowVec_j[0] = rtb_Down2Up_c;
                rtb_ReshapeRowVec_j[1] = rtb_Switch_j2;
                rtb_ReshapeRowVec_j[2] = rtb_ClockwiseRotation_m;

                // SignalConversion generated from: '<S65>/RotateATMissionHdg' incorporates:
                //   Constant: '<S65>/Zero'

                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_g[0] =
                    rtb_Sum1_k_idx_1;
                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_g[1] = 0.0;
                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_g[2] = 0.0;
                FlightMissionMode_RotateATMissionHdg
                    (rtb_TmpSignalConversionAtRotateATMissionHdgInport1_g,
                     &localDW->RotateATMissionHdg_d);

                // MATLAB Function: '<S65>/WayPointGenerator' incorporates:
                //   DataTypeConversion: '<S61>/Param2'

                // MATLAB Function 'Mode22_CustomFrmnNav/Mode22_Variant/Mode22/WayPointGenerator/WayPointGenerator': '<S114>:1' 
                // '<S114>:1:29'
                // '<S114>:1:3'
                rtb_ClockwiseRotation_m = std::ceil(static_cast<real_T>
                    (rtu_Parameters->Param2) / rtb_Sum_ip);

                // '<S114>:1:4'
                rtb_ZeroBasedIdx = static_cast<real_T>(rtu_Parameters->Param2) /
                    rtb_ClockwiseRotation_m;

                // '<S114>:1:6'
                lobj_0_DubinsObj.FlightPathAngleLimit[0] = -0.175;
                lobj_0_DubinsObj.FlightPathAngleLimit[1] = 0.175;
                lobj_0_DubinsObj.MaxRollAngle = 0.3490658503988659;
                lobj_0_DubinsObj.AirSpeed = 35.0;
                lobj_0_DubinsObj.MinTurningRadius = 343.43467743182782;

                // '<S114>:1:9'
                i = static_cast<int32_T>(rtb_ClockwiseRotation_m * 2.0);
                iacol = static_cast<int32_T>(CheckPoints->size[0] *
                    CheckPoints->size[1]);

                // MATLAB Function: '<S65>/WayPointGenerator'
                CheckPoints->size[0] = i;
                CheckPoints->size[1] = 4;
                FlightMissionMode_emxEnsureCapacity_real_T_c(CheckPoints, iacol);

                // MATLAB Function: '<S65>/WayPointGenerator' incorporates:
                //   DataTypeConversion: '<S61>/Param1'

                ibcol = static_cast<int32_T>(static_cast<int32_T>(i << 2) - 1);
                for (iacol = 0; iacol <= ibcol; iacol++) {
                    CheckPoints->data[iacol] = 0.0;
                }

                // '<S114>:1:10'
                for (rtb_Bias_f = 0; rtb_Bias_f <= static_cast<int32_T>(
                        static_cast<int32_T>(rtb_ClockwiseRotation_m) - 1);
                        rtb_Bias_f = static_cast<int32_T>(rtb_Bias_f + 1)) {
                    // '<S114>:1:10'
                    if (rt_remd_snf(static_cast<real_T>(rtb_Bias_f) + 1.0, 2.0) ==
                        1.0) {
                        // '<S114>:1:11'
                        // '<S114>:1:12'
                        nrowx = static_cast<int32_T>(static_cast<int32_T>
                            (rtb_Bias_f + 1) << 1);
                        rtb_RightNorth = ((static_cast<real_T>(rtb_Bias_f) + 1.0)
                                          - 1.0) * rtb_ZeroBasedIdx;
                        CheckPoints->data[static_cast<int32_T>(nrowx - 2)] =
                            rtb_RightNorth;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(nrowx + CheckPoints->size[0])
                             - 2)] = 0.0;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(nrowx + static_cast<int32_T>
                              (CheckPoints->size[0] << 1)) - 2)] = 0.0;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(nrowx + static_cast<int32_T>
                              (CheckPoints->size[0] * 3)) - 2)] =
                            1.5707963267948966;

                        // '<S114>:1:14'
                        CheckPoints->data[static_cast<int32_T>(nrowx - 1)] =
                            rtb_RightNorth;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(nrowx + CheckPoints->size[0])
                             - 1)] = static_cast<real_T>(rtu_Parameters->Param1);
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(nrowx + static_cast<int32_T>
                              (CheckPoints->size[0] << 1)) - 1)] = 0.0;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(nrowx + static_cast<int32_T>
                              (CheckPoints->size[0] * 3)) - 1)] =
                            1.5707963267948966;
                    } else {
                        // '<S114>:1:17'
                        i = static_cast<int32_T>(static_cast<int32_T>(rtb_Bias_f
                            + 1) << 1);
                        rtb_RightNorth = ((static_cast<real_T>(rtb_Bias_f) + 1.0)
                                          - 1.0) * rtb_ZeroBasedIdx;
                        CheckPoints->data[static_cast<int32_T>(i - 2)] =
                            rtb_RightNorth;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(i + CheckPoints->size[0]) - 2)]
                            = static_cast<real_T>(rtu_Parameters->Param1);
                        CheckPoints->data[static_cast<int32_T>(static_cast<
                            int32_T>(i + static_cast<int32_T>(CheckPoints->size
                            [0] << 1)) - 2)] = 0.0;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(i + static_cast<int32_T>
                              (CheckPoints->size[0] * 3)) - 2)] =
                            -1.5707963267948966;

                        // '<S114>:1:19'
                        CheckPoints->data[static_cast<int32_T>(i - 1)] =
                            rtb_RightNorth;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(i + CheckPoints->size[0]) - 1)]
                            = 0.0;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(i + static_cast<int32_T>
                              (CheckPoints->size[0] << 1)) - 1)] = 0.0;
                        CheckPoints->data[static_cast<int32_T>
                            (static_cast<int32_T>(i + static_cast<int32_T>
                              (CheckPoints->size[0] * 3)) - 1)] =
                            -1.5707963267948966;
                    }
                }

                // '<S114>:1:25'
                iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                    dummyWayPoint->size[1]);

                // MATLAB Function: '<S65>/WayPointGenerator'
                dummyWayPoint->size[0] = 1;
                dummyWayPoint->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                    iacol);

                // MATLAB Function: '<S65>/WayPointGenerator'
                dummyWayPoint->data[0] = 0.0;
                dummyWayPoint->data[1] = 0.0;
                dummyWayPoint->data[2] = 0.0;

                // '<S114>:1:28'
                for (rtb_Bias_f = 0; rtb_Bias_f <= static_cast<int32_T>
                        (CheckPoints->size[0] - 2); rtb_Bias_f =
                        static_cast<int32_T>(rtb_Bias_f + 1)) {
                    // '<S114>:1:28'
                    // '<S114>:1:29'
                    CheckPoints_0[0] = CheckPoints->data[rtb_Bias_f];
                    CheckPoints_1[0] = CheckPoints->data[static_cast<int32_T>
                        (rtb_Bias_f + 1)];
                    CheckPoints_0[1] = CheckPoints->data[static_cast<int32_T>
                        (rtb_Bias_f + CheckPoints->size[0])];
                    CheckPoints_1[1] = CheckPoints->data[static_cast<int32_T>(
                        static_cast<int32_T>(rtb_Bias_f + CheckPoints->size[0])
                        + 1)];
                    CheckPoints_0[2] = CheckPoints->data[static_cast<int32_T>(
                        static_cast<int32_T>(CheckPoints->size[0] << 1) +
                        rtb_Bias_f)];
                    CheckPoints_1[2] = CheckPoints->data[static_cast<int32_T>(
                        static_cast<int32_T>(static_cast<int32_T>
                        (CheckPoints->size[0] << 1) + rtb_Bias_f) + 1)];
                    CheckPoints_0[3] = CheckPoints->data[static_cast<int32_T>(
                        static_cast<int32_T>(CheckPoints->size[0] * 3) +
                        rtb_Bias_f)];
                    CheckPoints_1[3] = CheckPoints->data[static_cast<int32_T>(
                        static_cast<int32_T>(static_cast<int32_T>
                        (CheckPoints->size[0] * 3) + rtb_Bias_f) + 1)];
                    FlightMissionMode_genSegWP_p(&lobj_0_DubinsObj,
                        CheckPoints_0, CheckPoints_1, 100.0, segWayPoints);
                    iacol = static_cast<int32_T>(dummyWayPoint_0->size[0] *
                        dummyWayPoint_0->size[1]);
                    dummyWayPoint_0->size[0] = static_cast<int32_T>
                        (dummyWayPoint->size[0] + segWayPoints->size[0]);
                    dummyWayPoint_0->size[1] = 3;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint_0,
                        iacol);
                    ibcol = dummyWayPoint->size[0];
                    for (i = 0; i < 3; i++) {
                        for (iacol = 0; iacol <= static_cast<int32_T>(ibcol - 1);
                             iacol++) {
                            dummyWayPoint_0->data[static_cast<int32_T>(iacol +
                                static_cast<int32_T>(dummyWayPoint_0->size[0] *
                                i))] = dummyWayPoint->data[static_cast<int32_T>(
                                static_cast<int32_T>(dummyWayPoint->size[0] * i)
                                + iacol)];
                        }
                    }

                    ibcol = segWayPoints->size[0];
                    for (i = 0; i < 3; i++) {
                        for (iacol = 0; iacol <= static_cast<int32_T>(ibcol - 1);
                             iacol++) {
                            dummyWayPoint_0->data[static_cast<int32_T>(
                                static_cast<int32_T>(iacol + dummyWayPoint->
                                size[0]) + static_cast<int32_T>
                                (dummyWayPoint_0->size[0] * i))] =
                                segWayPoints->data[static_cast<int32_T>(
                                static_cast<int32_T>(segWayPoints->size[0] * i)
                                + iacol)];
                        }
                    }

                    iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                        dummyWayPoint->size[1]);
                    dummyWayPoint->size[0] = dummyWayPoint_0->size[0];
                    dummyWayPoint->size[1] = 3;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                        iacol);
                    ibcol = static_cast<int32_T>(dummyWayPoint_0->size[0] * 3);
                    for (i = 0; i <= static_cast<int32_T>(ibcol - 1); i++) {
                        dummyWayPoint->data[i] = dummyWayPoint_0->data[i];
                    }
                }

                // '<S114>:1:34'
                CheckPoints_0[0] = CheckPoints->data[static_cast<int32_T>
                    (CheckPoints->size[0] - 1)];
                CheckPoints_1[0] = CheckPoints->data[0];
                CheckPoints_0[1] = CheckPoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(CheckPoints->size[0] +
                    CheckPoints->size[0]) - 1)];
                CheckPoints_1[1] = CheckPoints->data[CheckPoints->size[0]];
                CheckPoints_0[2] = CheckPoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>(CheckPoints->size
                    [0] << 1) + CheckPoints->size[0]) - 1)];
                CheckPoints_1[2] = CheckPoints->data[static_cast<int32_T>
                    (CheckPoints->size[0] << 1)];
                CheckPoints_0[3] = CheckPoints->data[static_cast<int32_T>(
                    static_cast<int32_T>(static_cast<int32_T>(CheckPoints->size
                    [0] * 3) + CheckPoints->size[0]) - 1)];
                CheckPoints_1[3] = CheckPoints->data[static_cast<int32_T>
                    (CheckPoints->size[0] * 3)];
                FlightMissionMode_genSegWP_p(&lobj_0_DubinsObj, CheckPoints_0,
                    CheckPoints_1, 100.0, segWayPoints);

                // '<S114>:1:36'
                iacol = static_cast<int32_T>(dummyWayPoint_0->size[0] *
                    dummyWayPoint_0->size[1]);

                // MATLAB Function: '<S65>/WayPointGenerator'
                dummyWayPoint_0->size[0] = static_cast<int32_T>
                    (dummyWayPoint->size[0] + segWayPoints->size[0]);
                dummyWayPoint_0->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint_0,
                    iacol);

                // MATLAB Function: '<S65>/WayPointGenerator'
                ibcol = dummyWayPoint->size[0];
                rtb_Bias_f = segWayPoints->size[0];
                for (i = 0; i < 3; i++) {
                    for (iacol = 0; iacol <= static_cast<int32_T>(ibcol - 1);
                            iacol++) {
                        dummyWayPoint_0->data[static_cast<int32_T>(iacol +
                            static_cast<int32_T>(dummyWayPoint_0->size[0] * i))]
                            = dummyWayPoint->data[static_cast<int32_T>(
                            static_cast<int32_T>(dummyWayPoint->size[0] * i) +
                            iacol)];
                    }

                    for (iacol = 0; iacol <= static_cast<int32_T>(rtb_Bias_f - 1);
                         iacol++) {
                        dummyWayPoint_0->data[static_cast<int32_T>
                            (static_cast<int32_T>(iacol + dummyWayPoint->size[0])
                             + static_cast<int32_T>(dummyWayPoint_0->size[0] * i))]
                            = segWayPoints->data[static_cast<int32_T>(
                            static_cast<int32_T>(segWayPoints->size[0] * i) +
                            iacol)];
                    }
                }

                iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                    dummyWayPoint->size[1]);

                // MATLAB Function: '<S65>/WayPointGenerator'
                dummyWayPoint->size[0] = dummyWayPoint_0->size[0];
                dummyWayPoint->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                    iacol);

                // MATLAB Function: '<S65>/WayPointGenerator'
                ibcol = static_cast<int32_T>(dummyWayPoint_0->size[0] * 3);
                for (i = 0; i <= static_cast<int32_T>(ibcol - 1); i++) {
                    dummyWayPoint->data[i] = dummyWayPoint_0->data[i];
                }

                // '<S114>:1:39'
                rtb_Bias_f = static_cast<int32_T>(std::ceil(10240.0 /
                    static_cast<real_T>(dummyWayPoint->size[0])));
                iacol = static_cast<int32_T>(segWayPoints->size[0] *
                    segWayPoints->size[1]);

                // MATLAB Function: '<S65>/WayPointGenerator'
                segWayPoints->size[0] = dummyWayPoint->size[0];
                segWayPoints->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(segWayPoints, iacol);

                // MATLAB Function: '<S65>/WayPointGenerator'
                ibcol = static_cast<int32_T>(dummyWayPoint->size[0] * 3);
                for (i = 0; i <= static_cast<int32_T>(ibcol - 1); i++) {
                    segWayPoints->data[i] = dummyWayPoint->data[i];
                }

                iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                    dummyWayPoint->size[1]);

                // MATLAB Function: '<S65>/WayPointGenerator'
                dummyWayPoint->size[0] = static_cast<int32_T>
                    (dummyWayPoint->size[0] * rtb_Bias_f);
                dummyWayPoint->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                    iacol);

                // MATLAB Function: '<S65>/WayPointGenerator'
                nrows = segWayPoints->size[0];
                for (nrowx = 0; nrowx <= static_cast<int32_T>(rtb_Bias_f - 1);
                        nrowx = static_cast<int32_T>(nrowx + 1)) {
                    ibcol = static_cast<int32_T>(static_cast<int32_T>(nrowx *
                        nrows) + -1);
                    for (k = 1; static_cast<int32_T>(k - 1) <=
                            static_cast<int32_T>(nrows - 1); k =
                            static_cast<int32_T>(k + 1)) {
                        dummyWayPoint->data[static_cast<int32_T>(ibcol + k)] =
                            segWayPoints->data[static_cast<int32_T>(k - 1)];
                    }
                }

                i = static_cast<int32_T>(static_cast<int32_T>(segWayPoints->
                    size[0] * rtb_Bias_f) - 1);
                for (nrowx = 0; nrowx <= static_cast<int32_T>(rtb_Bias_f - 1);
                        nrowx = static_cast<int32_T>(nrowx + 1)) {
                    ibcol = static_cast<int32_T>(static_cast<int32_T>(nrowx *
                        nrows) + i);
                    for (k = 1; static_cast<int32_T>(k - 1) <=
                            static_cast<int32_T>(nrows - 1); k =
                            static_cast<int32_T>(k + 1)) {
                        dummyWayPoint->data[static_cast<int32_T>(ibcol + k)] =
                            segWayPoints->data[static_cast<int32_T>(static_cast<
                            int32_T>(nrows + k) - 1)];
                    }
                }

                iacol = static_cast<int32_T>(segWayPoints->size[0] << 1);
                i = static_cast<int32_T>(static_cast<int32_T>(static_cast<
                    int32_T>(segWayPoints->size[0] * rtb_Bias_f) << 1) - 1);
                for (nrowx = 0; nrowx <= static_cast<int32_T>(rtb_Bias_f - 1);
                        nrowx = static_cast<int32_T>(nrowx + 1)) {
                    ibcol = static_cast<int32_T>(static_cast<int32_T>(nrowx *
                        nrows) + i);
                    for (k = 1; static_cast<int32_T>(k - 1) <=
                            static_cast<int32_T>(nrows - 1); k =
                            static_cast<int32_T>(k + 1)) {
                        dummyWayPoint->data[static_cast<int32_T>(ibcol + k)] =
                            segWayPoints->data[static_cast<int32_T>(static_cast<
                            int32_T>(iacol + k) - 1)];
                    }
                }

                // '<S114>:1:40'
                nrowx = static_cast<int32_T>(dummyWayPoint->size[0] - 2);
                nrows = static_cast<int32_T>(dummyWayPoint->size[0] - 1);
                for (i = 0; i <= nrowx; i = static_cast<int32_T>(i + 1)) {
                    dummyWayPoint->data[i] = dummyWayPoint->data
                        [static_cast<int32_T>(i + 1)];
                }

                for (i = 0; i <= nrowx; i = static_cast<int32_T>(i + 1)) {
                    dummyWayPoint->data[static_cast<int32_T>(i +
                        dummyWayPoint->size[0])] = dummyWayPoint->data[
                        static_cast<int32_T>(static_cast<int32_T>(i +
                        dummyWayPoint->size[0]) + 1)];
                }

                for (i = 0; i <= nrowx; i = static_cast<int32_T>(i + 1)) {
                    dummyWayPoint->data[static_cast<int32_T>(i +
                        static_cast<int32_T>(dummyWayPoint->size[0] << 1))] =
                        dummyWayPoint->data[static_cast<int32_T>
                        (static_cast<int32_T>(static_cast<int32_T>
                          (dummyWayPoint->size[0] << 1) + i) + 1)];
                }

                if (1 > nrows) {
                    nrowx = -1;
                    i = -1;
                } else {
                    i = nrowx;
                }

                ibcol = static_cast<int32_T>(i + 1);
                for (iacol = 0; iacol < 3; iacol++) {
                    for (rtb_Bias_f = 0; rtb_Bias_f <= static_cast<int32_T>
                            (ibcol - 1); rtb_Bias_f++) {
                        dummyWayPoint->data[static_cast<int32_T>(rtb_Bias_f +
                            static_cast<int32_T>(static_cast<int32_T>(nrowx + 1)
                            * iacol))] = dummyWayPoint->data[static_cast<int32_T>
                            (static_cast<int32_T>(dummyWayPoint->size[0] * iacol)
                             + rtb_Bias_f)];
                    }
                }

                iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                    dummyWayPoint->size[1]);

                // MATLAB Function: '<S65>/WayPointGenerator'
                dummyWayPoint->size[0] = static_cast<int32_T>(nrowx + 1);
                dummyWayPoint->size[1] = 3;
                FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                    iacol);

                // MATLAB Function: '<S65>/WayPointGenerator'
                if (static_cast<boolean_T>(static_cast<int32_T>
                                           (static_cast<int32_T>(rtb_Compare_ky)
                      ^ 1))) {
                    // Reshape: '<S61>/Reshape2Row' incorporates:
                    //   Sum: '<S61>/RelPrevPos'

                    // '<S114>:1:42'
                    // '<S114>:1:44'
                    rtb_RelPrevPos_b_1[0] = rtb_Switch_n - rtb_Switch_j2;
                    rtb_RelPrevPos_b_1[1] = rtb_Map2Radian - rtb_Down2Up_c;
                    rtb_RelPrevPos_b_1[2] = rtb_RelPrevPos_b_0[2];

                    // Product: '<S65>/RotateRelPrevPos' incorporates:
                    //   MATLABSystem: '<S65>/RotateATMissionHdg'

                    rt_mrdivide_U1d1x3_U2d3x3_Yd1x3_snf(rtb_RelPrevPos_b_1,
                        localDW->RotateATMissionHdg_d.RotateATMissionHdg,
                        rtb_ReshapeRowVecStartpose_d);
                    CheckPoints_1[0] = rtb_ReshapeRowVecStartpose_d[0];
                    CheckPoints_1[1] = rtb_ReshapeRowVecStartpose_d[1];
                    CheckPoints_1[2] = rtb_ReshapeRowVecStartpose_d[2];
                    CheckPoints_1[3] = 1.5707963267948966;
                    CheckPoints_0[0] = CheckPoints->data[0];
                    CheckPoints_0[1] = CheckPoints->data[CheckPoints->size[0]];
                    CheckPoints_0[2] = CheckPoints->data[static_cast<int32_T>
                        (CheckPoints->size[0] << 1)];
                    CheckPoints_0[3] = CheckPoints->data[static_cast<int32_T>
                        (CheckPoints->size[0] * 3)];
                    FlightMissionMode_genSegWP_p(&lobj_0_DubinsObj,
                        CheckPoints_1, CheckPoints_0, 100.0, segWayPoints);

                    // '<S114>:1:46'
                    iacol = static_cast<int32_T>(dummyWayPoint_0->size[0] *
                        dummyWayPoint_0->size[1]);
                    dummyWayPoint_0->size[0] = static_cast<int32_T>(static_cast<
                        int32_T>(segWayPoints->size[0] + i) + 1);
                    dummyWayPoint_0->size[1] = 3;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint_0,
                        iacol);
                    rtb_Bias_f = segWayPoints->size[0];
                    for (i = 0; i < 3; i++) {
                        for (iacol = 0; iacol <= static_cast<int32_T>(rtb_Bias_f
                              - 1); iacol++) {
                            dummyWayPoint_0->data[static_cast<int32_T>(iacol +
                                static_cast<int32_T>(dummyWayPoint_0->size[0] *
                                i))] = segWayPoints->data[static_cast<int32_T>(
                                static_cast<int32_T>(segWayPoints->size[0] * i)
                                + iacol)];
                        }

                        for (iacol = 0; iacol <= static_cast<int32_T>(ibcol - 1);
                             iacol++) {
                            dummyWayPoint_0->data[static_cast<int32_T>(
                                static_cast<int32_T>(iacol + segWayPoints->size
                                [0]) + static_cast<int32_T>
                                (dummyWayPoint_0->size[0] * i))] =
                                dummyWayPoint->data[static_cast<int32_T>(
                                static_cast<int32_T>(dummyWayPoint->size[0] * i)
                                + iacol)];
                        }
                    }

                    iacol = static_cast<int32_T>(dummyWayPoint->size[0] *
                        dummyWayPoint->size[1]);
                    dummyWayPoint->size[0] = dummyWayPoint_0->size[0];
                    dummyWayPoint->size[1] = 3;
                    FlightMissionMode_emxEnsureCapacity_real_T_c(dummyWayPoint,
                        iacol);
                    ibcol = static_cast<int32_T>(dummyWayPoint_0->size[0] * 3);
                    for (i = 0; i <= static_cast<int32_T>(ibcol - 1); i++) {
                        dummyWayPoint->data[i] = dummyWayPoint_0->data[i];
                    }
                }

                // '<S114>:1:50'
                for (i = 0; i < 3; i++) {
                    for (iacol = 0; iacol < 10240; iacol++) {
                        localDW->RotateIndivWayPoint_g[static_cast<int32_T>
                            (iacol + static_cast<int32_T>(10240 * i))] =
                            dummyWayPoint->data[static_cast<int32_T>(
                            static_cast<int32_T>(dummyWayPoint->size[0] * i) +
                            iacol)];
                    }
                }

                // MATLAB Function: '<S65>/biasWayPoint'
                // MATLAB Function 'biasWayPoint': '<S116>:1'
                // '<S116>:1:4'
                for (i = 0; i < 10240; i++) {
                    localDW->WayPoint_i[i] = localDW->RotateIndivWayPoint_g[i] +
                        rtu_StartPosition->Lon;
                    localDW->WayPoint_i[static_cast<int32_T>(i + 10240)] =
                        localDW->RotateIndivWayPoint_g[static_cast<int32_T>(i +
                        10240)];
                    localDW->WayPoint_i[static_cast<int32_T>(i + 20480)] =
                        localDW->RotateIndivWayPoint_g[static_cast<int32_T>(i +
                        20480)];
                }

                // End of MATLAB Function: '<S65>/biasWayPoint'

                // Product: '<S65>/RotateIndivWayPoint' incorporates:
                //   MATLABSystem: '<S65>/RotateATMissionHdg'

                for (i = 0; i < 3; i++) {
                    for (iacol = 0; iacol < 10240; iacol++) {
                        rtb_Bias_f = static_cast<int32_T>(static_cast<int32_T>
                            (10240 * i) + iacol);
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] = 0.0;
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg_d.RotateATMissionHdg[
                            static_cast<int32_T>(3 * i)] * localDW->
                            WayPoint_i[iacol];
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg_d.RotateATMissionHdg[
                            static_cast<int32_T>(static_cast<int32_T>(3 * i) + 1)]
                            * localDW->WayPoint_i[static_cast<int32_T>(iacol +
                            10240)];
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg_d.RotateATMissionHdg[
                            static_cast<int32_T>(static_cast<int32_T>(3 * i) + 2)]
                            * localDW->WayPoint_i[static_cast<int32_T>(iacol +
                            20480)];
                    }
                }

                // End of Product: '<S65>/RotateIndivWayPoint'

                // MATLAB Function: '<S65>/biasNED1'
                FlightMissionMode_biasNED(rtb_ReshapeRowVec_j,
                    localDW->RotateIndivWayPoint_g, localDW->nedWayPoint_e,
                    &localDW->sf_biasNED1);
            } else {
                localDW->WayPointGenerator_MODE_d = false;
            }

            // End of Outputs for SubSystem: '<S61>/WayPointGenerator'
            FlightMissionMode_WaypointFollower(rtu_Pose, localDW->nedWayPoint_e,
                200.0, &localDW->WaypointFollower_d);

            // DataTypeConversion: '<S61>/Cast To Double' incorporates:
            //   Constant: '<S61>/LookAheadDis'
            //   MATLAB Function: '<S65>/WayPointGenerator'

            *rty_thisTaskStatus = static_cast<real_T>
                (localDW->WaypointFollower_d.WaypointFollower_o5);

            // Product: '<S61>/FrontEast' incorporates:
            //   Trigonometry: '<S61>/FrontSin'

            rtb_ClockwiseRotation_m = std::sin(rtb_Sum1_k_idx_1) *
                rtu_StartPosition->Lat;

            // Product: '<S61>/FrontNorth' incorporates:
            //   Trigonometry: '<S61>/FrontCos'

            rtb_ZeroBasedIdx = std::cos(rtb_Sum1_k_idx_1) *
                rtu_StartPosition->Lat;

            // BusCreator: '<S61>/GuidanceCMDBusCreator' incorporates:
            //   DataTypeConversion: '<S61>/Param4'
            //   Gain: '<S61>/Down2Height'

            rty_GuidanceCmds->Height =
                -localDW->WaypointFollower_d.WaypointFollower_o1[2];
            rty_GuidanceCmds->AirSpeed = static_cast<real_T>
                (rtu_Parameters->Param4);
            rty_GuidanceCmds->HeadingAngle =
                localDW->WaypointFollower_d.WaypointFollower_o2;

            // Product: '<S61>/RightNorth' incorporates:
            //   Bias: '<S61>/Rotate90deg'
            //   Trigonometry: '<S61>/RightCos'

            rtb_RightNorth = std::cos(rtb_Sum1_k_idx_1 + 1.5707963267948966) *
                rtu_StartPosition->Lon;

            // Product: '<S61>/RightEast' incorporates:
            //   Bias: '<S61>/Rotate90deg'
            //   Trigonometry: '<S61>/RightSin'

            rtb_Sum_ip = std::sin(rtb_Sum1_k_idx_1 + 1.5707963267948966) *
                rtu_StartPosition->Lon;

            // Switch: '<S61>/SwitchAlt' incorporates:
            //   Switch: '<S61>/SwitchNorth'
            //   UnaryMinus: '<S63>/Ze2height'
            //   UnaryMinus: '<S91>/Ze2height'

            if (rtb_Compare_ky) {
                rtb_Switch_p = -rtb_Switch_l0;
                rtb_Map2Radian = rtb_Down2Up_c;
            } else {
                rtb_Switch_p = -rtb_Switch_p;
            }

            // End of Switch: '<S61>/SwitchAlt'

            // Sum: '<S61>/SumHeight' incorporates:
            //   Gain: '<S61>/Down2Up'

            rtb_Switch_l0 = rtu_StartPosition->Alt + -rtb_Switch_p;

            // Reshape: '<S61>/Reshape' incorporates:
            //   Sum: '<S61>/SumInitNorth'

            rty_InitialState[0] = (rtb_Map2Radian + rtb_RightNorth) +
                rtb_ZeroBasedIdx;

            // Switch: '<S61>/SwitchEast'
            if (rtb_Compare_ky) {
                rtb_Switch_n = rtb_Switch_j2;
            }

            // End of Switch: '<S61>/SwitchEast'

            // Reshape: '<S61>/Reshape' incorporates:
            //   Constant: '<S61>/InitialFlightPathAngle'
            //   Constant: '<S61>/InitialRollAngle'
            //   Constant: '<S61>/InitialRollAngleRate'
            //   DataTypeConversion: '<S61>/Param4'
            //   Sum: '<S61>/SumInitEast'

            rty_InitialState[1] = (rtb_Switch_n + rtb_ClockwiseRotation_m) +
                rtb_Sum_ip;
            rty_InitialState[2] = rtb_Switch_l0;
            rty_InitialState[3] = static_cast<real_T>(rtu_Parameters->Param4);
            rty_InitialState[4] = rtb_Sum1_k_idx_1;
            rty_InitialState[5] = 0.0;
            rty_InitialState[6] = 0.0;
            rty_InitialState[7] = 0.0;

            // End of Outputs for SubSystem: '<Root>/Mode22_CustomFrmnNav'
        }
        break;

      case 4:
        {
            real_T rtb_ClockwiseRotation_m;
            real_T rtb_Down2Up_c;
            real_T rtb_Map2Radian;
            real_T rtb_Sum1_k_idx_1;
            real_T rtb_Sum_ip;
            real_T rtb_Switch_p;
            int32_T i;
            if (static_cast<int32_T>(rtAction) != static_cast<int32_T>
                    (rtPrevAction)) {
                // SystemReset for IfAction SubSystem: '<Root>/Mode3_RunWayNav' incorporates:
                //   ActionPort: '<S6>/Action Port'

                // SystemReset for Atomic SubSystem: '<S175>/SegmentSwitch'
                // SystemReset for SwitchCase: '<Root>/Switch Case'
                FlightMissionMode_SegmentSwitch_Reset(&localDW->RunWayLineMode_n,
                    &localDW->SegmentSwitch);

                // End of SystemReset for SubSystem: '<S175>/SegmentSwitch'
                // End of SystemReset for SubSystem: '<Root>/Mode3_RunWayNav'
            }

            // Outputs for IfAction SubSystem: '<Root>/Mode3_RunWayNav' incorporates:
            //   ActionPort: '<S6>/Action Port'

            // Switch: '<S193>/Switch' incorporates:
            //   Abs: '<S193>/Abs'
            //   Bias: '<S193>/Bias'
            //   Bias: '<S193>/Bias1'
            //   Constant: '<S193>/Constant2'
            //   Constant: '<S194>/Constant'
            //   DataStoreRead: '<S175>/LatitudeGCS'
            //   Math: '<S193>/Math Function1'
            //   RelationalOperator: '<S194>/Compare'

            if (std::abs(LatitudeGCS) > 180.0) {
                rtb_Down2Up_c = rt_modd_snf(LatitudeGCS + 180.0, 360.0) + -180.0;
            } else {
                rtb_Down2Up_c = LatitudeGCS;
            }

            // End of Switch: '<S193>/Switch'

            // Abs: '<S190>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Down2Up_c);

            // Switch: '<S190>/Switch' incorporates:
            //   Bias: '<S190>/Bias'
            //   Bias: '<S190>/Bias1'
            //   Constant: '<S181>/Constant'
            //   Constant: '<S181>/Constant1'
            //   Constant: '<S192>/Constant'
            //   Gain: '<S190>/Gain'
            //   Product: '<S190>/Divide1'
            //   RelationalOperator: '<S192>/Compare'
            //   Switch: '<S181>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S190>/Sign1'
                if (rtb_Down2Up_c < 0.0) {
                    rtb_Down2Up_c = -1.0;
                } else if (rtb_Down2Up_c > 0.0) {
                    rtb_Down2Up_c = 1.0;
                } else if (rtb_Down2Up_c == 0.0) {
                    rtb_Down2Up_c = 0.0;
                } else {
                    rtb_Down2Up_c = (rtNaN);
                }

                // End of Signum: '<S190>/Sign1'
                rtb_Down2Up_c *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S190>/Switch'

            // Sum: '<S181>/Sum' incorporates:
            //   DataStoreRead: '<S175>/LongitudeGCS'

            rtb_Map2Radian = static_cast<real_T>(i) + LongitudeGCS;

            // Switch: '<S191>/Switch' incorporates:
            //   Abs: '<S191>/Abs'
            //   Bias: '<S191>/Bias'
            //   Bias: '<S191>/Bias1'
            //   Constant: '<S191>/Constant2'
            //   Constant: '<S195>/Constant'
            //   Math: '<S191>/Math Function1'
            //   RelationalOperator: '<S195>/Compare'

            if (std::abs(rtb_Map2Radian) > 180.0) {
                rtb_Map2Radian = rt_modd_snf(rtb_Map2Radian + 180.0, 360.0) +
                    -180.0;
            }

            // End of Switch: '<S191>/Switch'

            // Sum: '<S177>/Sum1'
            rtb_ClockwiseRotation_m = rtu_Location->Lat - rtb_Down2Up_c;
            rtb_Sum1_k_idx_1 = rtu_Location->Lon - rtb_Map2Radian;

            // Switch: '<S187>/Switch' incorporates:
            //   Abs: '<S187>/Abs'
            //   Bias: '<S187>/Bias'
            //   Bias: '<S187>/Bias1'
            //   Constant: '<S187>/Constant2'
            //   Constant: '<S188>/Constant'
            //   Math: '<S187>/Math Function1'
            //   RelationalOperator: '<S188>/Compare'

            if (std::abs(rtb_ClockwiseRotation_m) > 180.0) {
                rtb_Map2Radian = rt_modd_snf(rtb_ClockwiseRotation_m + 180.0,
                    360.0) + -180.0;
            } else {
                rtb_Map2Radian = rtb_ClockwiseRotation_m;
            }

            // End of Switch: '<S187>/Switch'

            // Abs: '<S184>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Map2Radian);

            // Switch: '<S184>/Switch' incorporates:
            //   Bias: '<S184>/Bias'
            //   Bias: '<S184>/Bias1'
            //   Constant: '<S180>/Constant'
            //   Constant: '<S180>/Constant1'
            //   Constant: '<S186>/Constant'
            //   Gain: '<S184>/Gain'
            //   Product: '<S184>/Divide1'
            //   RelationalOperator: '<S186>/Compare'
            //   Switch: '<S180>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S184>/Sign1'
                if (rtb_Map2Radian < 0.0) {
                    rtb_Map2Radian = -1.0;
                } else if (rtb_Map2Radian > 0.0) {
                    rtb_Map2Radian = 1.0;
                } else if (rtb_Map2Radian == 0.0) {
                    rtb_Map2Radian = 0.0;
                } else {
                    rtb_Map2Radian = (rtNaN);
                }

                // End of Signum: '<S184>/Sign1'
                rtb_Map2Radian *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S184>/Switch'

            // Sum: '<S180>/Sum'
            rtb_Switch_p = static_cast<real_T>(i) + rtb_Sum1_k_idx_1;

            // Switch: '<S185>/Switch' incorporates:
            //   Abs: '<S185>/Abs'
            //   Bias: '<S185>/Bias'
            //   Bias: '<S185>/Bias1'
            //   Constant: '<S185>/Constant2'
            //   Constant: '<S189>/Constant'
            //   Math: '<S185>/Math Function1'
            //   RelationalOperator: '<S189>/Compare'

            if (std::abs(rtb_Switch_p) > 180.0) {
                rtb_Switch_p = rt_modd_snf(rtb_Switch_p + 180.0, 360.0) + -180.0;
            }

            // End of Switch: '<S185>/Switch'

            // UnitConversion: '<S183>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ClockwiseRotation_m = 0.017453292519943295 * rtb_Map2Radian;
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtb_Switch_p;

            // UnitConversion: '<S198>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Down2Up_c *= 0.017453292519943295;

            // Trigonometry: '<S199>/Trigonometric Function1'
            rtb_Switch_p = std::sin(rtb_Down2Up_c);

            // Sum: '<S199>/Sum1' incorporates:
            //   Constant: '<S199>/Constant'
            //   Product: '<S199>/Product1'

            rtb_Switch_p = 1.0 - 0.0066943799901413295 * rtb_Switch_p *
                rtb_Switch_p;

            // Product: '<S197>/Product1' incorporates:
            //   Constant: '<S197>/Constant1'
            //   Sqrt: '<S197>/sqrt'

            rtb_Map2Radian = 6.378137E+6 / std::sqrt(rtb_Switch_p);

            // Product: '<S182>/dNorth' incorporates:
            //   Constant: '<S197>/Constant2'
            //   Product: '<S197>/Product3'
            //   Trigonometry: '<S197>/Trigonometric Function1'

            rtb_Switch_p = rtb_ClockwiseRotation_m / rt_atan2d_snf(1.0,
                rtb_Map2Radian * 0.99330562000985867 / rtb_Switch_p);

            // Product: '<S182>/dEast' incorporates:
            //   Constant: '<S197>/Constant3'
            //   Product: '<S197>/Product4'
            //   Trigonometry: '<S197>/Trigonometric Function'
            //   Trigonometry: '<S197>/Trigonometric Function2'

            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Map2Radian = 1.0 / rt_atan2d_snf(1.0, rtb_Map2Radian * std::cos
                (rtb_Down2Up_c)) * rtb_Sum1_k_idx_1;

            // Sum: '<S177>/Sum' incorporates:
            //   DataStoreRead: '<S175>/AltitudeGCS'
            //   Gain: '<S175>/inverse'

            rtb_Down2Up_c = rtu_Location->Alt + -AltitudeGCS;

            // Gain: '<S176>/Gain1'
            rtb_Sum_ip = 0.017453292519943295 * rtu_Location->degHDG;

            // Outputs for Enabled SubSystem: '<S175>/WayPointGenerator' incorporates:
            //   EnablePort: '<S179>/Enable'

            if (*rtu_Reset > 0) {
                real_T rtb_Switch_j2;
                real_T rtb_ZeroBasedIdx;
                int32_T iacol;
                int32_T rtb_Bias_f;
                localDW->WayPointGenerator_MODE_k = true;

                // DataTypeConversion: '<S179>/DoubleMissionUAV'
                rtb_ZeroBasedIdx = static_cast<real_T>(*rtu_MissionUAV);

                // DataTypeConversion: '<S179>/Cast To Double'
                rtb_Switch_j2 = static_cast<real_T>(*rtu_FormationIDX);

                // MATLAB Function: '<S179>/StartPointGenerator' incorporates:
                //   DataTypeConversion: '<S175>/Param3'

                FlightMissionMode_StartPointGenerator(static_cast<real_T>
                    (rtu_Parameters->Param3), rtb_ZeroBasedIdx, rtb_Switch_j2,
                    &localDW->MatrixConcatenateWayPoint_g[1200],
                    localDW->startPose_o);

                // Gain: '<S179>/InterLayerDis' incorporates:
                //   Constant: '<S179>/Three'
                //   DataTypeConversion: '<S175>/Param5'
                //   Math: '<S179>/ModRunWayLayer'

                rtb_ZeroBasedIdx = 0.0 * rt_modd_snf(static_cast<real_T>
                    (rtu_Parameters->Param5), 3.0);

                // Product: '<S179>/IndivRunwayRotAng' incorporates:
                //   DataTypeConversion: '<S175>/Param2'
                //   DataTypeConversion: '<S175>/Param5'
                //   Gain: '<S208>/Gain1'

                rtb_Switch_j2 = 0.017453292519943295 * static_cast<real_T>
                    (rtu_Parameters->Param2) * static_cast<real_T>
                    (rtu_Parameters->Param5);

                // MATLAB Function: '<S179>/WayPointGenerator' incorporates:
                //   DataTypeConversion: '<S175>/Param3'

                FlightMissionMode_WayPointGenerator(static_cast<real_T>
                    (rtu_Parameters->Param3),
                    &localDW->MatrixConcatenateWayPoint_g[0],
                    &localDW->MatrixConcatenateWayPoint_g[300],
                    &localDW->MatrixConcatenateWayPoint_g[600],
                    &localDW->MatrixConcatenateWayPoint_g[900], 100.0);

                // SignalConversion generated from: '<S179>/RotateUpward' incorporates:
                //   Constant: '<S179>/Constant'
                //   Constant: '<S179>/Zero'

                rtb_TmpSignalConversionAtRotateUpwardInport1_k[0] = 0.0;
                rtb_TmpSignalConversionAtRotateUpwardInport1_k[1] =
                    -0.034906585039886591;
                rtb_TmpSignalConversionAtRotateUpwardInport1_k[2] = 0.0;
                FlightMissionMode_RotateATMissionHdg
                    (rtb_TmpSignalConversionAtRotateUpwardInport1_k,
                     &localDW->RotateUpward);

                // SignalConversion generated from: '<S179>/RotateATRunWayHdg' incorporates:
                //   Constant: '<S179>/Zero'

                rtb_TmpSignalConversionAtRotateATRunWayHdgInport1_l[0] =
                    rtb_Switch_j2;
                rtb_TmpSignalConversionAtRotateATRunWayHdgInport1_l[1] = 0.0;
                rtb_TmpSignalConversionAtRotateATRunWayHdgInport1_l[2] = 0.0;
                FlightMissionMode_RotateATMissionHdg
                    (rtb_TmpSignalConversionAtRotateATRunWayHdgInport1_l,
                     &localDW->RotateATRunWayHdg);

                // SignalConversion generated from: '<S179>/RotateATMissionHdg' incorporates:
                //   Constant: '<S179>/Zero'

                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_p[0] =
                    rtb_Sum_ip;
                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_p[1] = 0.0;
                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_p[2] = 0.0;
                FlightMissionMode_RotateATMissionHdg
                    (rtb_TmpSignalConversionAtRotateATMissionHdgInport1_p,
                     &localDW->RotateATMissionHdg_m);

                // Product: '<S179>/MatrixProduct' incorporates:
                //   MATLABSystem: '<S179>/RotateATMissionHdg'
                //   MATLABSystem: '<S179>/RotateATRunWayHdg'

                for (i = 0; i < 3; i++) {
                    for (iacol = 0; iacol < 3; iacol++) {
                        rtb_Bias_f = static_cast<int32_T>(static_cast<int32_T>(3
                            * i) + iacol);
                        tmp[rtb_Bias_f] = 0.0;
                        tmp[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg_m.RotateATMissionHdg[
                            static_cast<int32_T>(3 * i)] *
                            localDW->RotateATRunWayHdg.RotateATMissionHdg[iacol];
                        tmp[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg_m.RotateATMissionHdg[
                            static_cast<int32_T>(static_cast<int32_T>(3 * i) + 1)]
                            * localDW->RotateATRunWayHdg.RotateATMissionHdg[
                            static_cast<int32_T>(iacol + 3)];
                        tmp[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg_m.RotateATMissionHdg[
                            static_cast<int32_T>(static_cast<int32_T>(3 * i) + 2)]
                            * localDW->RotateATRunWayHdg.RotateATMissionHdg[
                            static_cast<int32_T>(iacol + 6)];
                    }
                }

                // Outputs for Iterator SubSystem: '<S179>/TransformWayPoint' incorporates:
                //   ForEach: '<S210>/For Each'

                for (i = 0; i < 3; i++) {
                    // Product: '<S210>/MatrixMultiply' incorporates:
                    //   MATLABSystem: '<S179>/RotateUpward'

                    for (iacol = 0; iacol < 3; iacol++) {
                        rtb_Bias_f = static_cast<int32_T>(static_cast<int32_T>(3
                            * i) + iacol);
                        rtb_MatrixConcatenate[rtb_Bias_f] = 0.0;
                        rtb_MatrixConcatenate[rtb_Bias_f] += tmp
                            [static_cast<int32_T>(3 * i)] *
                            localDW->RotateUpward.RotateATMissionHdg[iacol];
                        rtb_MatrixConcatenate[rtb_Bias_f] += tmp[static_cast<
                            int32_T>(static_cast<int32_T>(3 * i) + 1)] *
                            localDW->RotateUpward.RotateATMissionHdg[
                            static_cast<int32_T>(iacol + 3)];
                        rtb_MatrixConcatenate[rtb_Bias_f] += tmp
                            [static_cast<int32_T>(static_cast<int32_T>(3 * i) +
                            2)] * localDW->RotateUpward.RotateATMissionHdg[
                            static_cast<int32_T>(iacol + 6)];
                    }
                }

                // End of Outputs for SubSystem: '<S179>/TransformWayPoint'

                // Sum: '<S179>/BiasStartPose1' incorporates:
                //   DataTypeConversion: '<S175>/Param1'

                rtb_Switch_n = localDW->startPose_o[0];
                rtb_ClockwiseRotation_m = localDW->startPose_o[1] -
                    static_cast<real_T>(rtu_Parameters->Param1);
                rtb_Sum1_k_idx_1 = localDW->startPose_o[2] - rtb_ZeroBasedIdx;

                // Product: '<S179>/MatrixProduct'
                for (i = 0; i < 3; i++) {
                    rtb_RelPrevPos_b_0[i] = (rtb_MatrixConcatenate[static_cast<
                        int32_T>(static_cast<int32_T>(3 * i) + 1)] *
                        rtb_ClockwiseRotation_m + rtb_MatrixConcatenate[
                        static_cast<int32_T>(3 * i)] * rtb_Switch_n) +
                        rtb_MatrixConcatenate[static_cast<int32_T>(static_cast<
                        int32_T>(3 * i) + 2)] * rtb_Sum1_k_idx_1;
                }

                // Reshape: '<S179>/Reshape' incorporates:
                //   Constant: '<S179>/Zero'
                //   DataTypeConversion: '<S175>/Param1'

                rtb_ReshapeRowVec_j[0] = 0.0;
                rtb_ReshapeRowVec_j[1] = static_cast<real_T>
                    (rtu_Parameters->Param1);
                rtb_ReshapeRowVec_j[2] = rtb_ZeroBasedIdx;

                // Reshape: '<S179>/ReshapeRowVecStartpose' incorporates:
                //   Product: '<S182>/x*cos'
                //   Product: '<S182>/x*sin'
                //   Product: '<S182>/y*cos'
                //   Product: '<S182>/y*sin'
                //   Sum: '<S182>/Sum2'
                //   Sum: '<S182>/Sum3'
                //   UnaryMinus: '<S177>/Ze2height'

                rtb_ReshapeRowVecStartpose_d[0] = rtb_Map2Radian * 0.0 +
                    rtb_Switch_p;
                rtb_ReshapeRowVecStartpose_d[1] = rtb_Map2Radian - rtb_Switch_p *
                    0.0;
                rtb_ReshapeRowVecStartpose_d[2] = -rtb_Down2Up_c;

                // Sum: '<S179>/Sum' incorporates:
                //   Bias: '<S179>/Bias'
                //   Gain: '<S179>/Invert'

                localDW->Sum_i = (rtb_Sum_ip + rtb_Switch_j2) +
                    -(localDW->startPose_o[3] + -1.5707963267948966);

                // Outputs for Iterator SubSystem: '<S179>/TransformWayPoint' incorporates:
                //   ForEach: '<S210>/For Each'

                for (int32_T nrowx{0}; nrowx < 5; nrowx++) {
                    for (i = 0; i < 3; i++) {
                        // ForEachSliceSelector generated from: '<S210>/RawRunWay' incorporates:
                        //   Concatenate: '<S179>/Matrix Concatenate WayPoint'

                        std::memcpy
                            (&rtb_ImpSel_InsertedFor_RawRunWay_at_outport_0_k[
                             static_cast<int32_T>(i * 100)],
                             &localDW->MatrixConcatenateWayPoint_g[static_cast<
                             int32_T>(static_cast<int32_T>(nrowx * 300) +
                                      static_cast<int32_T>(i * 100))],
                             static_cast<uint32_T>(100U * sizeof(real_T)));
                    }

                    // MATLAB Function: '<S210>/minus'
                    FlightMissionMode_minus
                        (rtb_ImpSel_InsertedFor_RawRunWay_at_outport_0_k,
                         rtb_ReshapeRowVec_j, rtb_y_l);
                    for (i = 0; i < 100; i++) {
                        for (iacol = 0; iacol < 3; iacol++) {
                            // Product: '<S210>/MatrixMultiply'
                            rtb_Bias_f = static_cast<int32_T>
                                (static_cast<int32_T>(100 * iacol) + i);
                            rtb_MatrixMultiply_d[rtb_Bias_f] = 0.0;
                            rtb_MatrixMultiply_d[rtb_Bias_f] +=
                                rtb_MatrixConcatenate[static_cast<int32_T>(3 *
                                iacol)] * rtb_y_l[i];
                            rtb_MatrixMultiply_d[rtb_Bias_f] +=
                                rtb_MatrixConcatenate[static_cast<int32_T>(
                                static_cast<int32_T>(3 * iacol) + 1)] * rtb_y_l[
                                static_cast<int32_T>(i + 100)];
                            rtb_MatrixMultiply_d[rtb_Bias_f] +=
                                rtb_MatrixConcatenate[static_cast<int32_T>(
                                static_cast<int32_T>(3 * iacol) + 2)] * rtb_y_l[
                                static_cast<int32_T>(i + 200)];
                        }
                    }

                    // MATLAB Function: '<S210>/biasNED'
                    FlightMissionMode_biasNED_j(rtb_ReshapeRowVecStartpose_d,
                        rtb_MatrixMultiply_d, rtb_nedWayPoint_CoreSubsysCanOut_b);

                    // ForEachSliceAssignment generated from: '<S210>/nedWayPoint' 
                    for (i = 0; i < 3; i++) {
                        std::memcpy
                            (&localDW->ImpAsg_InsertedFor_nedWayPoint_at_inport_0_c
                             [static_cast<int32_T>(static_cast<int32_T>(nrowx *
                               300) + static_cast<int32_T>(i * 100))],
                             &rtb_nedWayPoint_CoreSubsysCanOut_b
                             [static_cast<int32_T>(i * 100)],
                             static_cast<uint32_T>(100U * sizeof(real_T)));
                    }
                }

                // End of Outputs for SubSystem: '<S179>/TransformWayPoint'

                // MATLAB Function: '<S179>/biasNEDstartpose'
                FlightMissionMode_biasNEDstartpose(rtb_ReshapeRowVecStartpose_d,
                    rtb_RelPrevPos_b_0, localDW->nedWayPoint_m);
            } else {
                localDW->WayPointGenerator_MODE_k = false;
            }

            // End of Outputs for SubSystem: '<S175>/WayPointGenerator'

            // Outputs for Atomic SubSystem: '<S175>/SegmentSwitch'
            FlightMissionMode_SegmentSwitch(rtu_Reset, rtu_Pose,
                localDW->ImpAsg_InsertedFor_nedWayPoint_at_inport_0_c,
                localDW->MergeLookAheadP_j, &localDW->MergeDesiredCourse_p,
                &localDW->RunWayLineMode_n, 200.0, &localDW->SegmentSwitch);

            // End of Outputs for SubSystem: '<S175>/SegmentSwitch'

            // DataTypeConversion: '<S175>/Cast To Double'
            *rty_thisTaskStatus = static_cast<real_T>(static_cast<int32_T>
                (localDW->RunWayLineMode_n));

            // BusCreator: '<S175>/GuidanceCMDBusCreator1' incorporates:
            //   DataTypeConversion: '<S175>/Param4'
            //   Gain: '<S175>/Down2Height1'

            rty_GuidanceCmds->Height = -localDW->MergeLookAheadP_j[2];
            rty_GuidanceCmds->AirSpeed = static_cast<real_T>
                (rtu_Parameters->Param4);
            rty_GuidanceCmds->HeadingAngle = localDW->MergeDesiredCourse_p;

            // Reshape: '<S175>/Reshape' incorporates:
            //   Constant: '<S175>/InitialFlightPathAngle'
            //   Constant: '<S175>/InitialRollAngleRate'
            //   DataTypeConversion: '<S175>/Param4'
            //   Gain: '<S175>/Down2Up'

            rty_InitialState[0] = localDW->nedWayPoint_m[0];
            rty_InitialState[1] = localDW->nedWayPoint_m[1];
            rty_InitialState[2] = -localDW->nedWayPoint_m[2];
            rty_InitialState[3] = static_cast<real_T>(rtu_Parameters->Param4);
            rty_InitialState[4] = localDW->Sum_i;
            rty_InitialState[5] = 0.0;
            rty_InitialState[6] = localDW->startPose_o[4];
            rty_InitialState[7] = 0.0;

            // End of Outputs for SubSystem: '<Root>/Mode3_RunWayNav'
        }
        break;

      case 5:
        {
            real_T rtb_ClockwiseRotation_m;
            real_T rtb_Down2Up_c;
            real_T rtb_Map2Radian;
            real_T rtb_Sum1_k_idx_1;
            real_T rtb_Sum_ip;
            real_T rtb_Switch_p;
            int32_T i;
            if (static_cast<int32_T>(rtAction) != static_cast<int32_T>
                    (rtPrevAction)) {
                // SystemReset for IfAction SubSystem: '<Root>/Mode4_ProtLine' incorporates:
                //   ActionPort: '<S7>/Action Port'

                // SystemReset for Atomic SubSystem: '<S216>/SegmentSwitch'
                // SystemReset for SwitchCase: '<Root>/Switch Case'
                FlightMissionMode_SegmentSwitch_Reset(&localDW->RunWayLineMode,
                    &localDW->SegmentSwitch_p);

                // End of SystemReset for SubSystem: '<S216>/SegmentSwitch'
                // End of SystemReset for SubSystem: '<Root>/Mode4_ProtLine'
            }

            // Outputs for IfAction SubSystem: '<Root>/Mode4_ProtLine' incorporates:
            //   ActionPort: '<S7>/Action Port'

            // Switch: '<S234>/Switch' incorporates:
            //   Abs: '<S234>/Abs'
            //   Bias: '<S234>/Bias'
            //   Bias: '<S234>/Bias1'
            //   Constant: '<S234>/Constant2'
            //   Constant: '<S235>/Constant'
            //   DataStoreRead: '<S216>/LatitudeGCS'
            //   Math: '<S234>/Math Function1'
            //   RelationalOperator: '<S235>/Compare'

            if (std::abs(LatitudeGCS) > 180.0) {
                rtb_Down2Up_c = rt_modd_snf(LatitudeGCS + 180.0, 360.0) + -180.0;
            } else {
                rtb_Down2Up_c = LatitudeGCS;
            }

            // End of Switch: '<S234>/Switch'

            // Abs: '<S231>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Down2Up_c);

            // Switch: '<S231>/Switch' incorporates:
            //   Bias: '<S231>/Bias'
            //   Bias: '<S231>/Bias1'
            //   Constant: '<S222>/Constant'
            //   Constant: '<S222>/Constant1'
            //   Constant: '<S233>/Constant'
            //   Gain: '<S231>/Gain'
            //   Product: '<S231>/Divide1'
            //   RelationalOperator: '<S233>/Compare'
            //   Switch: '<S222>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S231>/Sign1'
                if (rtb_Down2Up_c < 0.0) {
                    rtb_Down2Up_c = -1.0;
                } else if (rtb_Down2Up_c > 0.0) {
                    rtb_Down2Up_c = 1.0;
                } else if (rtb_Down2Up_c == 0.0) {
                    rtb_Down2Up_c = 0.0;
                } else {
                    rtb_Down2Up_c = (rtNaN);
                }

                // End of Signum: '<S231>/Sign1'
                rtb_Down2Up_c *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S231>/Switch'

            // Sum: '<S222>/Sum' incorporates:
            //   DataStoreRead: '<S216>/LongitudeGCS'

            rtb_Map2Radian = static_cast<real_T>(i) + LongitudeGCS;

            // Switch: '<S232>/Switch' incorporates:
            //   Abs: '<S232>/Abs'
            //   Bias: '<S232>/Bias'
            //   Bias: '<S232>/Bias1'
            //   Constant: '<S232>/Constant2'
            //   Constant: '<S236>/Constant'
            //   Math: '<S232>/Math Function1'
            //   RelationalOperator: '<S236>/Compare'

            if (std::abs(rtb_Map2Radian) > 180.0) {
                rtb_Map2Radian = rt_modd_snf(rtb_Map2Radian + 180.0, 360.0) +
                    -180.0;
            }

            // End of Switch: '<S232>/Switch'

            // Sum: '<S218>/Sum1'
            rtb_ClockwiseRotation_m = rtu_Location->Lat - rtb_Down2Up_c;
            rtb_Sum1_k_idx_1 = rtu_Location->Lon - rtb_Map2Radian;

            // Switch: '<S228>/Switch' incorporates:
            //   Abs: '<S228>/Abs'
            //   Bias: '<S228>/Bias'
            //   Bias: '<S228>/Bias1'
            //   Constant: '<S228>/Constant2'
            //   Constant: '<S229>/Constant'
            //   Math: '<S228>/Math Function1'
            //   RelationalOperator: '<S229>/Compare'

            if (std::abs(rtb_ClockwiseRotation_m) > 180.0) {
                rtb_Map2Radian = rt_modd_snf(rtb_ClockwiseRotation_m + 180.0,
                    360.0) + -180.0;
            } else {
                rtb_Map2Radian = rtb_ClockwiseRotation_m;
            }

            // End of Switch: '<S228>/Switch'

            // Abs: '<S225>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Map2Radian);

            // Switch: '<S225>/Switch' incorporates:
            //   Bias: '<S225>/Bias'
            //   Bias: '<S225>/Bias1'
            //   Constant: '<S221>/Constant'
            //   Constant: '<S221>/Constant1'
            //   Constant: '<S227>/Constant'
            //   Gain: '<S225>/Gain'
            //   Product: '<S225>/Divide1'
            //   RelationalOperator: '<S227>/Compare'
            //   Switch: '<S221>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S225>/Sign1'
                if (rtb_Map2Radian < 0.0) {
                    rtb_Map2Radian = -1.0;
                } else if (rtb_Map2Radian > 0.0) {
                    rtb_Map2Radian = 1.0;
                } else if (rtb_Map2Radian == 0.0) {
                    rtb_Map2Radian = 0.0;
                } else {
                    rtb_Map2Radian = (rtNaN);
                }

                // End of Signum: '<S225>/Sign1'
                rtb_Map2Radian *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S225>/Switch'

            // Sum: '<S221>/Sum'
            rtb_Switch_p = static_cast<real_T>(i) + rtb_Sum1_k_idx_1;

            // Switch: '<S226>/Switch' incorporates:
            //   Abs: '<S226>/Abs'
            //   Bias: '<S226>/Bias'
            //   Bias: '<S226>/Bias1'
            //   Constant: '<S226>/Constant2'
            //   Constant: '<S230>/Constant'
            //   Math: '<S226>/Math Function1'
            //   RelationalOperator: '<S230>/Compare'

            if (std::abs(rtb_Switch_p) > 180.0) {
                rtb_Switch_p = rt_modd_snf(rtb_Switch_p + 180.0, 360.0) + -180.0;
            }

            // End of Switch: '<S226>/Switch'

            // UnitConversion: '<S224>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ClockwiseRotation_m = 0.017453292519943295 * rtb_Map2Radian;
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtb_Switch_p;

            // UnitConversion: '<S239>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Down2Up_c *= 0.017453292519943295;

            // Trigonometry: '<S240>/Trigonometric Function1'
            rtb_Switch_p = std::sin(rtb_Down2Up_c);

            // Sum: '<S240>/Sum1' incorporates:
            //   Constant: '<S240>/Constant'
            //   Product: '<S240>/Product1'

            rtb_Switch_p = 1.0 - 0.0066943799901413295 * rtb_Switch_p *
                rtb_Switch_p;

            // Product: '<S238>/Product1' incorporates:
            //   Constant: '<S238>/Constant1'
            //   Sqrt: '<S238>/sqrt'

            rtb_Map2Radian = 6.378137E+6 / std::sqrt(rtb_Switch_p);

            // Product: '<S223>/dNorth' incorporates:
            //   Constant: '<S238>/Constant2'
            //   Product: '<S238>/Product3'
            //   Trigonometry: '<S238>/Trigonometric Function1'

            rtb_Switch_p = rtb_ClockwiseRotation_m / rt_atan2d_snf(1.0,
                rtb_Map2Radian * 0.99330562000985867 / rtb_Switch_p);

            // Product: '<S223>/dEast' incorporates:
            //   Constant: '<S238>/Constant3'
            //   Product: '<S238>/Product4'
            //   Trigonometry: '<S238>/Trigonometric Function'
            //   Trigonometry: '<S238>/Trigonometric Function2'

            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Map2Radian = 1.0 / rt_atan2d_snf(1.0, rtb_Map2Radian * std::cos
                (rtb_Down2Up_c)) * rtb_Sum1_k_idx_1;

            // Sum: '<S218>/Sum' incorporates:
            //   DataStoreRead: '<S216>/AltitudeGCS'
            //   Gain: '<S216>/inverse'

            rtb_Down2Up_c = rtu_Location->Alt + -AltitudeGCS;

            // Gain: '<S217>/Gain1'
            rtb_Sum_ip = 0.017453292519943295 * rtu_Location->degHDG;

            // Outputs for Enabled SubSystem: '<S216>/WayPointGenerator' incorporates:
            //   EnablePort: '<S220>/Enable'

            if (*rtu_Reset > 0) {
                real_T rtb_Switch_j2;
                real_T rtb_Switch_l0;
                real_T rtb_ZeroBasedIdx;
                localDW->WayPointGenerator_MODE_m = true;

                // DataTypeConversion: '<S220>/DoubleFormationIDX'
                rtb_ZeroBasedIdx = static_cast<real_T>(*rtu_FormationIDX);

                // DataTypeConversion: '<S220>/DoubleMissionUAV'
                rtb_Switch_j2 = static_cast<real_T>(*rtu_MissionUAV);

                // MATLAB Function: '<S220>/StartPointGenerator' incorporates:
                //   Abs: '<S220>/Abs'
                //   DataTypeConversion: '<S216>/Param3'
                //   DataTypeConversion: '<S216>/Param6'
                //   Product: '<S220>/ProductOneSideUAV'

                FlightMissionMode_StartPointGenerator(static_cast<real_T>
                    (rtu_Parameters->Param3), rtb_Switch_j2 * static_cast<real_T>
                    (rtu_Parameters->Param6), std::abs(rtb_ZeroBasedIdx),
                    &localDW->MatrixConcatenateWayPoint_g[1200], &rtb_y_f[0]);

                // Signum: '<S220>/Sign'
                if (rtb_ZeroBasedIdx < 0.0) {
                    rtb_ZeroBasedIdx = -1.0;
                } else if (rtb_ZeroBasedIdx > 0.0) {
                    rtb_ZeroBasedIdx = 1.0;
                } else {
                    rtb_ZeroBasedIdx = 0.0;
                }

                // End of Signum: '<S220>/Sign'

                // Product: '<S220>/ProductFlipStartPose' incorporates:
                //   Gain: '<S220>/RevFlip'

                localDW->ProductFlipStartPose[0] = rtb_y_f[0] *
                    -rtb_ZeroBasedIdx;
                localDW->ProductFlipStartPose[1] = rtb_y_f[1];
                localDW->ProductFlipStartPose[2] = rtb_y_f[2];
                localDW->ProductFlipStartPose[3] = rtb_y_f[3];
                localDW->ProductFlipStartPose[4] = rtb_y_f[4];

                // Product: '<S220>/ProductRotAng' incorporates:
                //   DataTypeConversion: '<S216>/Param2'
                //   DataTypeConversion: '<S216>/Param6'
                //   Gain: '<S249>/Gain1'
                //   Product: '<S220>/ProductFlipRotAng'

                rtb_Switch_l0 = 0.017453292519943295 * static_cast<real_T>
                    (rtu_Parameters->Param2) * rtb_ZeroBasedIdx *
                    static_cast<real_T>(rtu_Parameters->Param6);

                // SignalConversion generated from: '<S220>/RotateATRunWayHdg' incorporates:
                //   Constant: '<S220>/Zero'

                rtb_TmpSignalConversionAtRotateATRunWayHdgInport1[0] =
                    rtb_Switch_l0;
                rtb_TmpSignalConversionAtRotateATRunWayHdgInport1[1] = 0.0;
                rtb_TmpSignalConversionAtRotateATRunWayHdgInport1[2] = 0.0;
                FlightMissionMode_RotateATMissionHdg
                    (rtb_TmpSignalConversionAtRotateATRunWayHdgInport1,
                     &localDW->RotateATRunWayHdg_k);

                // Product: '<S220>/ProductFlipXbias' incorporates:
                //   DataTypeConversion: '<S216>/Param1'
                //   DataTypeConversion: '<S216>/Param6'
                //   Product: '<S220>/ProductSepDis'

                rtb_Sum1_k_idx_1 = static_cast<real_T>(rtu_Parameters->Param6) *
                    static_cast<real_T>(rtu_Parameters->Param1) *
                    rtb_ZeroBasedIdx;

                // SignalConversion generated from: '<S220>/Matrix Concatenate' incorporates:
                //   Constant: '<S220>/Zeros'
                //   Gain: '<S220>/RevFlip'

                rtb_MatrixConcatenate[0] = -rtb_ZeroBasedIdx;
                rtb_MatrixConcatenate[1] = 0.0;
                rtb_MatrixConcatenate[2] = 0.0;

                // SignalConversion generated from: '<S220>/Matrix Concatenate' incorporates:
                //   Constant: '<S220>/One'
                //   Constant: '<S220>/Zeros'

                rtb_MatrixConcatenate[3] = 0.0;
                rtb_MatrixConcatenate[4] = 1.0;
                rtb_MatrixConcatenate[5] = 0.0;

                // SignalConversion generated from: '<S220>/Matrix Concatenate' incorporates:
                //   Constant: '<S220>/One'
                //   Constant: '<S220>/Zeros'

                rtb_MatrixConcatenate[6] = 0.0;
                rtb_MatrixConcatenate[7] = 0.0;
                rtb_MatrixConcatenate[8] = 1.0;

                // MATLAB Function: '<S220>/WayPointGenerator' incorporates:
                //   DataTypeConversion: '<S216>/Param3'

                FlightMissionMode_WayPointGenerator(static_cast<real_T>
                    (rtu_Parameters->Param3),
                    &localDW->MatrixConcatenateWayPoint_g[0],
                    &localDW->MatrixConcatenateWayPoint_g[300],
                    &localDW->MatrixConcatenateWayPoint_g[600],
                    &localDW->MatrixConcatenateWayPoint_g[900], 100.0);

                // Reshape: '<S220>/Reshape' incorporates:
                //   Constant: '<S220>/Zero'

                rtb_RelPrevPos_b_0[0] = rtb_Sum1_k_idx_1;
                rtb_RelPrevPos_b_0[1] = 0.0;
                rtb_RelPrevPos_b_0[2] = 0.0;

                // Reshape: '<S220>/ReshapeRowVec' incorporates:
                //   Product: '<S223>/x*cos'
                //   Product: '<S223>/x*sin'
                //   Product: '<S223>/y*cos'
                //   Product: '<S223>/y*sin'
                //   Reshape: '<S220>/ReshapeRowVecStartpose'
                //   Sum: '<S223>/Sum2'
                //   Sum: '<S223>/Sum3'
                //   UnaryMinus: '<S218>/Ze2height'

                rtb_ReshapeRowVec_j[0] = rtb_Map2Radian * 0.0 + rtb_Switch_p;
                rtb_ReshapeRowVec_j[1] = rtb_Map2Radian - rtb_Switch_p * 0.0;
                rtb_ReshapeRowVec_j[2] = -rtb_Down2Up_c;

                // SignalConversion generated from: '<S220>/RotateATMissionHdg' incorporates:
                //   Constant: '<S220>/Zero'

                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_j[0] =
                    rtb_Sum_ip;
                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_j[1] = 0.0;
                rtb_TmpSignalConversionAtRotateATMissionHdgInport1_j[2] = 0.0;
                FlightMissionMode_RotateATMissionHdg
                    (rtb_TmpSignalConversionAtRotateATMissionHdgInport1_j,
                     &localDW->RotateATMissionHdg_k);

                // Product: '<S220>/RotateRunwayStartpose' incorporates:
                //   MATLABSystem: '<S220>/RotateATRunWayHdg'

                for (i = 0; i < 3; i++) {
                    rtb_ReshapeRowVecStartpose_d[i] =
                        (localDW->RotateATRunWayHdg_k.RotateATMissionHdg[
                         static_cast<int32_T>(static_cast<int32_T>(3 * i) + 1)] *
                         localDW->ProductFlipStartPose[1] +
                         localDW->RotateATRunWayHdg_k.RotateATMissionHdg[
                         static_cast<int32_T>(3 * i)] *
                         localDW->ProductFlipStartPose[0]) +
                        localDW->RotateATRunWayHdg_k.RotateATMissionHdg[
                        static_cast<int32_T>(static_cast<int32_T>(3 * i) + 2)] *
                        localDW->ProductFlipStartPose[2];
                }

                // End of Product: '<S220>/RotateRunwayStartpose'

                // Sum: '<S220>/BiasStartPose'
                rtb_Switch_n = rtb_ReshapeRowVecStartpose_d[0] -
                    rtb_Sum1_k_idx_1;
                rtb_ClockwiseRotation_m = rtb_ReshapeRowVecStartpose_d[1];
                rtb_Sum1_k_idx_1 = rtb_ReshapeRowVecStartpose_d[2];

                // Product: '<S220>/RotateIndivWayPointStartpose' incorporates:
                //   MATLABSystem: '<S220>/RotateATMissionHdg'

                for (i = 0; i < 3; i++) {
                    rtb_ReshapeRowVecStartpose_d[i] =
                        (localDW->RotateATMissionHdg_k.RotateATMissionHdg[
                         static_cast<int32_T>(static_cast<int32_T>(3 * i) + 1)] *
                         rtb_ClockwiseRotation_m +
                         localDW->RotateATMissionHdg_k.RotateATMissionHdg[
                         static_cast<int32_T>(3 * i)] * rtb_Switch_n) +
                        localDW->RotateATMissionHdg_k.RotateATMissionHdg[
                        static_cast<int32_T>(static_cast<int32_T>(3 * i) + 2)] *
                        rtb_Sum1_k_idx_1;
                }

                // End of Product: '<S220>/RotateIndivWayPointStartpose'

                // Sum: '<S220>/Sum' incorporates:
                //   Bias: '<S220>/Bias'
                //   Product: '<S220>/ProductFlipStartHeading'

                localDW->Sum_e = (localDW->ProductFlipStartPose[3] +
                                  -1.5707963267948966) * rtb_ZeroBasedIdx +
                    (rtb_Sum_ip + rtb_Switch_l0);

                // Outputs for Iterator SubSystem: '<S220>/TransformWayPoint' incorporates:
                //   ForEach: '<S251>/For Each'

                for (int32_T ibcol{0}; ibcol < 5; ibcol++) {
                    int32_T iacol;
                    int32_T rtb_Bias_f;

                    // Product: '<S251>/ProductFlipRunWay' incorporates:
                    //   Concatenate: '<S220>/Matrix Concatenate'
                    //   Concatenate: '<S220>/Matrix Concatenate WayPoint'
                    //   ForEachSliceSelector generated from: '<S251>/RawRunWay'

                    for (i = 0; i < 100; i++) {
                        for (iacol = 0; iacol < 3; iacol++) {
                            int32_T nrowx;
                            rtb_Bias_f = static_cast<int32_T>
                                (static_cast<int32_T>(100 * iacol) + i);
                            rtb_y_f[rtb_Bias_f] = 0.0;

                            // ForEachSliceSelector generated from: '<S251>/RawRunWay' 
                            nrowx = static_cast<int32_T>(static_cast<int32_T>
                                (300 * ibcol) + i);
                            rtb_y_f[rtb_Bias_f] += rtb_MatrixConcatenate[
                                static_cast<int32_T>(3 * iacol)] *
                                localDW->MatrixConcatenateWayPoint_g[nrowx];
                            rtb_y_f[rtb_Bias_f] += rtb_MatrixConcatenate[
                                static_cast<int32_T>(static_cast<int32_T>(3 *
                                iacol) + 1)] *
                                localDW->MatrixConcatenateWayPoint_g[
                                static_cast<int32_T>(nrowx + 100)];
                            rtb_y_f[rtb_Bias_f] += rtb_MatrixConcatenate[
                                static_cast<int32_T>(static_cast<int32_T>(3 *
                                iacol) + 2)] *
                                localDW->MatrixConcatenateWayPoint_g[
                                static_cast<int32_T>(nrowx + 200)];
                        }
                    }

                    // End of Product: '<S251>/ProductFlipRunWay'
                    for (i = 0; i < 100; i++) {
                        for (iacol = 0; iacol < 3; iacol++) {
                            // Product: '<S251>/RotateRunway' incorporates:
                            //   MATLABSystem: '<S220>/RotateATRunWayHdg'

                            rtb_Bias_f = static_cast<int32_T>(static_cast<
                                int32_T>(100 * iacol) + i);
                            rtb_RotateRunway[rtb_Bias_f] = 0.0;
                            rtb_RotateRunway[rtb_Bias_f] +=
                                localDW->RotateATRunWayHdg_k.RotateATMissionHdg[
                                static_cast<int32_T>(3 * iacol)] * rtb_y_f[i];
                            rtb_RotateRunway[rtb_Bias_f] +=
                                localDW->RotateATRunWayHdg_k.RotateATMissionHdg[
                                static_cast<int32_T>(static_cast<int32_T>(3 *
                                iacol) + 1)] * rtb_y_f[static_cast<int32_T>(i +
                                100)];
                            rtb_RotateRunway[rtb_Bias_f] +=
                                localDW->RotateATRunWayHdg_k.RotateATMissionHdg[
                                static_cast<int32_T>(static_cast<int32_T>(3 *
                                iacol) + 2)] * rtb_y_f[static_cast<int32_T>(i +
                                200)];
                        }
                    }

                    // MATLAB Function: '<S251>/minus'
                    FlightMissionMode_minus(rtb_RotateRunway, rtb_RelPrevPos_b_0,
                                            rtb_y_f);
                    for (i = 0; i < 100; i++) {
                        for (iacol = 0; iacol < 3; iacol++) {
                            // Product: '<S251>/RotateIndivWayPoint' incorporates:
                            //   MATLABSystem: '<S220>/RotateATMissionHdg'

                            rtb_Bias_f = static_cast<int32_T>
                                (static_cast<int32_T>(100 * iacol) + i);
                            rtb_RotateIndivWayPoint[rtb_Bias_f] = 0.0;
                            rtb_RotateIndivWayPoint[rtb_Bias_f] +=
                                localDW->
                                RotateATMissionHdg_k.RotateATMissionHdg[
                                static_cast<int32_T>(3 * iacol)] * rtb_y_f[i];
                            rtb_RotateIndivWayPoint[rtb_Bias_f] +=
                                localDW->
                                RotateATMissionHdg_k.RotateATMissionHdg[
                                static_cast<int32_T>(static_cast<int32_T>(3 *
                                iacol) + 1)] * rtb_y_f[static_cast<int32_T>(i +
                                100)];
                            rtb_RotateIndivWayPoint[rtb_Bias_f] +=
                                localDW->
                                RotateATMissionHdg_k.RotateATMissionHdg[
                                static_cast<int32_T>(static_cast<int32_T>(3 *
                                iacol) + 2)] * rtb_y_f[static_cast<int32_T>(i +
                                200)];
                        }
                    }

                    // MATLAB Function: '<S251>/biasNED' incorporates:
                    //   Reshape: '<S220>/ReshapeRowVec'

                    FlightMissionMode_biasNED_j(rtb_ReshapeRowVec_j,
                        rtb_RotateIndivWayPoint,
                        rtb_nedWayPoint_CoreSubsysCanOut);

                    // ForEachSliceAssignment generated from: '<S251>/nedWayPoint' 
                    for (i = 0; i < 3; i++) {
                        std::memcpy
                            (&localDW->ImpAsg_InsertedFor_nedWayPoint_at_inport_0
                             [static_cast<int32_T>(static_cast<int32_T>(ibcol *
                               300) + static_cast<int32_T>(i * 100))],
                             &rtb_nedWayPoint_CoreSubsysCanOut
                             [static_cast<int32_T>(i * 100)],
                             static_cast<uint32_T>(100U * sizeof(real_T)));
                    }
                }

                // End of Outputs for SubSystem: '<S220>/TransformWayPoint'

                // MATLAB Function: '<S220>/biasNEDstartpose1'
                FlightMissionMode_biasNEDstartpose(rtb_ReshapeRowVec_j,
                    rtb_ReshapeRowVecStartpose_d, localDW->nedWayPoint_b);
            } else {
                localDW->WayPointGenerator_MODE_m = false;
            }

            // End of Outputs for SubSystem: '<S216>/WayPointGenerator'

            // Outputs for Atomic SubSystem: '<S216>/SegmentSwitch'
            FlightMissionMode_SegmentSwitch(rtu_Reset, rtu_Pose,
                localDW->ImpAsg_InsertedFor_nedWayPoint_at_inport_0,
                localDW->MergeLookAheadP, &localDW->MergeDesiredCourse,
                &localDW->RunWayLineMode, 200.0, &localDW->SegmentSwitch_p);

            // End of Outputs for SubSystem: '<S216>/SegmentSwitch'

            // DataTypeConversion: '<S216>/Cast To Double'
            *rty_thisTaskStatus = static_cast<real_T>(static_cast<int32_T>
                (localDW->RunWayLineMode));

            // BusCreator: '<S216>/GuidanceCMDBusCreator' incorporates:
            //   DataTypeConversion: '<S216>/Param5'
            //   Gain: '<S216>/Down2Height'

            rty_GuidanceCmds->Height = -localDW->MergeLookAheadP[2];
            rty_GuidanceCmds->AirSpeed = static_cast<real_T>
                (rtu_Parameters->Param5);
            rty_GuidanceCmds->HeadingAngle = localDW->MergeDesiredCourse;

            // Reshape: '<S216>/Reshape' incorporates:
            //   Constant: '<S216>/InitialFlightPathAngle'
            //   Constant: '<S216>/InitialRollAngleRate'
            //   DataTypeConversion: '<S216>/Param5'
            //   Gain: '<S216>/Down2Up'

            rty_InitialState[0] = localDW->nedWayPoint_b[0];
            rty_InitialState[1] = localDW->nedWayPoint_b[1];
            rty_InitialState[2] = -localDW->nedWayPoint_b[2];
            rty_InitialState[3] = static_cast<real_T>(rtu_Parameters->Param5);
            rty_InitialState[4] = localDW->Sum_e;
            rty_InitialState[5] = 0.0;
            rty_InitialState[6] = localDW->ProductFlipStartPose[4];
            rty_InitialState[7] = 0.0;

            // End of Outputs for SubSystem: '<Root>/Mode4_ProtLine'
        }
        break;

      case 6:
        {
            real_T rtb_ClockwiseRotation_m;
            real_T rtb_Down2Up_c;
            real_T rtb_Map2Radian;
            real_T rtb_Sum1_k_idx_1;
            real_T rtb_Sum_ip;
            real_T rtb_Switch_p;
            int32_T i;
            if (static_cast<int32_T>(rtAction) != static_cast<int32_T>
                    (rtPrevAction)) {
                // SystemReset for IfAction SubSystem: '<Root>/Mode5_NewRunWay' incorporates:
                //   ActionPort: '<S8>/Action Port'

                // SystemReset for SwitchCase: '<Root>/Switch Case'
                FlightMissionMode_WaypointFollower_Reset
                    (&localDW->WaypointFollower_dd);

                // End of SystemReset for SubSystem: '<Root>/Mode5_NewRunWay'
            }

            // Outputs for IfAction SubSystem: '<Root>/Mode5_NewRunWay' incorporates:
            //   ActionPort: '<S8>/Action Port'

            // Switch: '<S274>/Switch' incorporates:
            //   Abs: '<S274>/Abs'
            //   Bias: '<S274>/Bias'
            //   Bias: '<S274>/Bias1'
            //   Constant: '<S274>/Constant2'
            //   Constant: '<S275>/Constant'
            //   DataStoreRead: '<S257>/LatitudeGCS'
            //   Math: '<S274>/Math Function1'
            //   RelationalOperator: '<S275>/Compare'

            if (std::abs(LatitudeGCS) > 180.0) {
                rtb_Down2Up_c = rt_modd_snf(LatitudeGCS + 180.0, 360.0) + -180.0;
            } else {
                rtb_Down2Up_c = LatitudeGCS;
            }

            // End of Switch: '<S274>/Switch'

            // Abs: '<S271>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Down2Up_c);

            // Switch: '<S271>/Switch' incorporates:
            //   Bias: '<S271>/Bias'
            //   Bias: '<S271>/Bias1'
            //   Constant: '<S262>/Constant'
            //   Constant: '<S262>/Constant1'
            //   Constant: '<S273>/Constant'
            //   Gain: '<S271>/Gain'
            //   Product: '<S271>/Divide1'
            //   RelationalOperator: '<S273>/Compare'
            //   Switch: '<S262>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S271>/Sign1'
                if (rtb_Down2Up_c < 0.0) {
                    rtb_Down2Up_c = -1.0;
                } else if (rtb_Down2Up_c > 0.0) {
                    rtb_Down2Up_c = 1.0;
                } else if (rtb_Down2Up_c == 0.0) {
                    rtb_Down2Up_c = 0.0;
                } else {
                    rtb_Down2Up_c = (rtNaN);
                }

                // End of Signum: '<S271>/Sign1'
                rtb_Down2Up_c *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S271>/Switch'

            // Sum: '<S262>/Sum' incorporates:
            //   DataStoreRead: '<S257>/LongitudeGCS'

            rtb_Map2Radian = static_cast<real_T>(i) + LongitudeGCS;

            // Switch: '<S272>/Switch' incorporates:
            //   Abs: '<S272>/Abs'
            //   Bias: '<S272>/Bias'
            //   Bias: '<S272>/Bias1'
            //   Constant: '<S272>/Constant2'
            //   Constant: '<S276>/Constant'
            //   Math: '<S272>/Math Function1'
            //   RelationalOperator: '<S276>/Compare'

            if (std::abs(rtb_Map2Radian) > 180.0) {
                rtb_Map2Radian = rt_modd_snf(rtb_Map2Radian + 180.0, 360.0) +
                    -180.0;
            }

            // End of Switch: '<S272>/Switch'

            // Sum: '<S259>/Sum1'
            rtb_ClockwiseRotation_m = rtu_Location->Lat - rtb_Down2Up_c;
            rtb_Sum1_k_idx_1 = rtu_Location->Lon - rtb_Map2Radian;

            // Switch: '<S268>/Switch' incorporates:
            //   Abs: '<S268>/Abs'
            //   Bias: '<S268>/Bias'
            //   Bias: '<S268>/Bias1'
            //   Constant: '<S268>/Constant2'
            //   Constant: '<S269>/Constant'
            //   Math: '<S268>/Math Function1'
            //   RelationalOperator: '<S269>/Compare'

            if (std::abs(rtb_ClockwiseRotation_m) > 180.0) {
                rtb_Map2Radian = rt_modd_snf(rtb_ClockwiseRotation_m + 180.0,
                    360.0) + -180.0;
            } else {
                rtb_Map2Radian = rtb_ClockwiseRotation_m;
            }

            // End of Switch: '<S268>/Switch'

            // Abs: '<S265>/Abs1'
            rtb_ClockwiseRotation_m = std::abs(rtb_Map2Radian);

            // Switch: '<S265>/Switch' incorporates:
            //   Bias: '<S265>/Bias'
            //   Bias: '<S265>/Bias1'
            //   Constant: '<S261>/Constant'
            //   Constant: '<S261>/Constant1'
            //   Constant: '<S267>/Constant'
            //   Gain: '<S265>/Gain'
            //   Product: '<S265>/Divide1'
            //   RelationalOperator: '<S267>/Compare'
            //   Switch: '<S261>/Switch1'

            if (rtb_ClockwiseRotation_m > 90.0) {
                // Signum: '<S265>/Sign1'
                if (rtb_Map2Radian < 0.0) {
                    rtb_Map2Radian = -1.0;
                } else if (rtb_Map2Radian > 0.0) {
                    rtb_Map2Radian = 1.0;
                } else if (rtb_Map2Radian == 0.0) {
                    rtb_Map2Radian = 0.0;
                } else {
                    rtb_Map2Radian = (rtNaN);
                }

                // End of Signum: '<S265>/Sign1'
                rtb_Map2Radian *= -(rtb_ClockwiseRotation_m + -90.0) + 90.0;
                i = 180;
            } else {
                i = 0;
            }

            // End of Switch: '<S265>/Switch'

            // Sum: '<S261>/Sum'
            rtb_Switch_p = static_cast<real_T>(i) + rtb_Sum1_k_idx_1;

            // Switch: '<S266>/Switch' incorporates:
            //   Abs: '<S266>/Abs'
            //   Bias: '<S266>/Bias'
            //   Bias: '<S266>/Bias1'
            //   Constant: '<S266>/Constant2'
            //   Constant: '<S270>/Constant'
            //   Math: '<S266>/Math Function1'
            //   RelationalOperator: '<S270>/Compare'

            if (std::abs(rtb_Switch_p) > 180.0) {
                rtb_Switch_p = rt_modd_snf(rtb_Switch_p + 180.0, 360.0) + -180.0;
            }

            // End of Switch: '<S266>/Switch'

            // UnitConversion: '<S264>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_ClockwiseRotation_m = 0.017453292519943295 * rtb_Map2Radian;
            rtb_Sum1_k_idx_1 = 0.017453292519943295 * rtb_Switch_p;

            // UnitConversion: '<S279>/Unit Conversion'
            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Down2Up_c *= 0.017453292519943295;

            // Trigonometry: '<S280>/Trigonometric Function1'
            rtb_Switch_p = std::sin(rtb_Down2Up_c);

            // Sum: '<S280>/Sum1' incorporates:
            //   Constant: '<S280>/Constant'
            //   Product: '<S280>/Product1'

            rtb_Switch_p = 1.0 - 0.0066943799901413295 * rtb_Switch_p *
                rtb_Switch_p;

            // Product: '<S278>/Product1' incorporates:
            //   Constant: '<S278>/Constant1'
            //   Sqrt: '<S278>/sqrt'

            rtb_Map2Radian = 6.378137E+6 / std::sqrt(rtb_Switch_p);

            // Product: '<S263>/dNorth' incorporates:
            //   Constant: '<S278>/Constant2'
            //   Product: '<S278>/Product3'
            //   Trigonometry: '<S278>/Trigonometric Function1'

            rtb_Switch_p = rtb_ClockwiseRotation_m / rt_atan2d_snf(1.0,
                rtb_Map2Radian * 0.99330562000985867 / rtb_Switch_p);

            // Product: '<S263>/dEast' incorporates:
            //   Constant: '<S278>/Constant3'
            //   Product: '<S278>/Product4'
            //   Trigonometry: '<S278>/Trigonometric Function'
            //   Trigonometry: '<S278>/Trigonometric Function2'

            // Unit Conversion - from: deg to: rad
            // Expression: output = (0.0174533*input) + (0)
            rtb_Map2Radian = 1.0 / rt_atan2d_snf(1.0, rtb_Map2Radian * std::cos
                (rtb_Down2Up_c)) * rtb_Sum1_k_idx_1;

            // Sum: '<S259>/Sum' incorporates:
            //   DataStoreRead: '<S257>/AltitudeGCS'
            //   Gain: '<S257>/inverse'

            rtb_Down2Up_c = rtu_Location->Alt + -AltitudeGCS;

            // Gain: '<S258>/Gain1'
            rtb_Sum_ip = 0.017453292519943295 * rtu_Location->degHDG;

            // Outputs for Enabled SubSystem: '<S257>/WayPointGenerator' incorporates:
            //   EnablePort: '<S260>/Enable'

            if (*rtu_Reset > 0) {
                real_T rtb_Switch_j2;
                real_T rtb_Switch_l0;
                real_T rtb_ZeroBasedIdx;
                int32_T iacol;
                int32_T nrowx;
                int32_T rtb_Bias_f;
                boolean_T exitg1;
                localDW->WayPointGenerator_MODE = true;

                // DataTypeConversion: '<S260>/DoubleMissionUAV'
                rtb_ZeroBasedIdx = static_cast<real_T>(*rtu_MissionUAV);

                // DataTypeConversion: '<S260>/DoubleFormIDX'
                rtb_Switch_j2 = static_cast<real_T>(*rtu_FormationIDX);

                // MATLAB Function: '<S260>/WayPointGenerator'
                // MATLAB Function 'Mode5_NewRunWay/Mode5_Variant/Mode5/WayPointGenerator/WayPointGenerator': '<S284>:1' 
                // '<S284>:1:26'
                // '<S284>:1:16'
                // '<S284>:1:7'
                lobj_0_DubinsObj_0.FlightPathAngleLimit[0] = -0.175;
                lobj_0_DubinsObj_0.FlightPathAngleLimit[1] = 0.175;
                lobj_0_DubinsObj_0.MaxRollAngle = 0.3490658503988659;
                lobj_0_DubinsObj_0.AirSpeed = 35.0;

                // '<S284>:1:16'
                // '<S284>:1:26'
                // '<S284>:1:27'
                // '<S284>:1:28'
                rtb_Bias_f = 0;
                i = 1;
                nrowx = 50;
                exitg1 = false;
                while ((!exitg1) && (nrowx > 0)) {
                    if (static_cast<int32_T>(c[static_cast<int32_T>(static_cast<
                            int32_T>(static_cast<int32_T>(static_cast<int32_T>
                            (nrowx - 1) * 10) + static_cast<int32_T>(std::round(
                             static_cast<real_T>(rtu_Parameters->Param2)))) - 1)])
                        <= static_cast<int32_T>(rtb_ZeroBasedIdx)) {
                        rtb_Bias_f = 1;
                        ii_data = static_cast<int8_T>(nrowx);
                        exitg1 = true;
                    } else {
                        nrowx = static_cast<int32_T>(nrowx - 1);
                    }
                }

                if (rtb_Bias_f == 0) {
                    i = 0;
                }

                if (0 <= static_cast<int32_T>(i - 1)) {
                    rtb_Switch_n = static_cast<real_T>(ii_data);
                }

                FlightMissionMode_emxInitMatrix_cell_wrap_2
                    (localDW->motionType1List);
                FlightMissionMode_emxInitMatrix_cell_wrap_2
                    (localDW->motionType2List);
                FlightMissionMode_emxInit_real_T_h(&numberGroup, 2);

                // MATLAB Function: '<S260>/WayPointGenerator' incorporates:
                //   DataTypeConversion: '<S257>/Param3'

                // '<S284>:1:29'
                FlightMissionMode_idx_motionType(localDW->motionType1List,
                    localDW->motionType2List);

                // '<S284>:1:30'
                // '<S284>:1:31'
                // '<S284>:1:33'
                rtb_Switch_l0 = static_cast<real_T>(rtu_Parameters->Param3) /
                    2.0 + static_cast<real_T>(rtu_Parameters->Param3);

                // '<S284>:1:34'
                // '<S284>:1:35'
                // '<S284>:1:40'
                rtb_RelPrevPos_b_0[0] = -rtb_Switch_l0;
                rtb_RelPrevPos_b_0[1] = 0.0;
                rtb_RelPrevPos_b_0[2] = 0.0;
                iacol = static_cast<int32_T>(numberGroup->size[0] *
                    numberGroup->size[1]);

                // MATLAB Function: '<S260>/WayPointGenerator'
                numberGroup->size[0] = 1;
                numberGroup->size[1] = i;
                FlightMissionMode_emxEnsureCapacity_real_T_c(numberGroup, iacol);

                // MATLAB Function: '<S260>/WayPointGenerator' incorporates:
                //   DataTypeConversion: '<S257>/Param2'

                if (0 <= static_cast<int32_T>(i - 1)) {
                    numberGroup->data[0] = -(rtb_Switch_n - 1.0) / 2.0 *
                        static_cast<real_T>(rtu_Parameters->Param2);
                }

                FlightMissionMode_emxReserve_real_T(numberGroup, 1);
                for (rtb_Bias_f = 0; rtb_Bias_f < 2; rtb_Bias_f++) {
                    numberGroup_0[rtb_Bias_f] = (*(int32_T (*)[2])
                        numberGroup->size)[rtb_Bias_f];
                }

                // MATLAB Function: '<S260>/WayPointGenerator' incorporates:
                //   DataTypeConversion: '<S257>/Param2'
                //   DataTypeConversion: '<S257>/Param3'

                FlightMissionMode_NewRunwayTrajGen(&lobj_0_DubinsObj_0,
                    static_cast<real_T>(rtu_Parameters->Param3),
                    rtb_ZeroBasedIdx, rtb_Switch_j2, static_cast<real_T>
                    (rtu_Parameters->Param2), rtb_Switch_l0, rtb_RelPrevPos_b_0,
                    numberGroup->data, numberGroup_0, &rtb_Switch_n,
                    localDW->motionType1List[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>(rtb_Switch_n) - 1)
                     * 10) + static_cast<int32_T>(std::round(static_cast<real_T>
                    (rtu_Parameters->Param2)))) - 1)].f1,
                    localDW->motionType2List[static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>
                    (static_cast<int32_T>(static_cast<int32_T>(rtb_Switch_n) - 1)
                     * 10) + static_cast<int32_T>(std::round(static_cast<real_T>
                    (rtu_Parameters->Param2)))) - 1)].f1, localDW->WayPoint0,
                    localDW);

                // '<S284>:1:42'
                FlightMissionMode_emxFree_real_T_n(&numberGroup);
                FlightMissionMode_emxFreeMatrix_cell_wrap_2
                    (localDW->motionType2List);
                FlightMissionMode_emxFreeMatrix_cell_wrap_2
                    (localDW->motionType1List);

                // MATLAB Function: '<S260>/WayPointGenerator'
                for (i = 0; i < 5; i++) {
                    localDW->startPose[i] = localDW->WayPoint0
                        [static_cast<int32_T>(10240 * i)];
                }

                // SignalConversion generated from: '<S260>/RotateUpward' incorporates:
                //   Constant: '<S260>/Constant'
                //   Constant: '<S260>/Zero'

                // '<S284>:1:43'
                rtb_TmpSignalConversionAtRotateUpwardInport1[0] = 0.0;
                rtb_TmpSignalConversionAtRotateUpwardInport1[1] =
                    -0.034906585039886591;
                rtb_TmpSignalConversionAtRotateUpwardInport1[2] = 0.0;
                FlightMissionMode_RotateATMissionHdg
                    (rtb_TmpSignalConversionAtRotateUpwardInport1,
                     &localDW->RotateUpward_d);

                // SignalConversion generated from: '<S260>/RotateATMissi onHdg' incorporates:
                //   Constant: '<S260>/Zero'

                rtb_TmpSignalConversionAtRotateATMissionHdgInport1[0] =
                    rtb_Sum_ip;
                rtb_TmpSignalConversionAtRotateATMissionHdgInport1[1] = 0.0;
                rtb_TmpSignalConversionAtRotateATMissionHdgInport1[2] = 0.0;
                FlightMissionMode_RotateATMissionHdg
                    (rtb_TmpSignalConversionAtRotateATMissionHdgInport1,
                     &localDW->RotateATMissionHdg_dd);
                for (i = 0; i < 3; i++) {
                    for (iacol = 0; iacol < 3; iacol++) {
                        // Product: '<S260>/MatrixProduct' incorporates:
                        //   MATLABSystem: '<S260>/RotateATMissi onHdg'
                        //   MATLABSystem: '<S260>/RotateUpward'
                        //   Product: '<S283>/MatrixMultiply'

                        rtb_Bias_f = static_cast<int32_T>(static_cast<int32_T>(3
                            * i) + iacol);
                        rtb_MatrixConcatenate[rtb_Bias_f] = 0.0;
                        rtb_MatrixConcatenate[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg_dd.RotateATMissionHdg[
                            static_cast<int32_T>(3 * i)] *
                            localDW->RotateUpward_d.RotateATMissionHdg[iacol];
                        rtb_MatrixConcatenate[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg_dd.RotateATMissionHdg[
                            static_cast<int32_T>(static_cast<int32_T>(3 * i) + 1)]
                            * localDW->RotateUpward_d.RotateATMissionHdg[
                            static_cast<int32_T>(iacol + 3)];
                        rtb_MatrixConcatenate[rtb_Bias_f] +=
                            localDW->RotateATMissionHdg_dd.RotateATMissionHdg[
                            static_cast<int32_T>(static_cast<int32_T>(3 * i) + 2)]
                            * localDW->RotateUpward_d.RotateATMissionHdg[
                            static_cast<int32_T>(iacol + 6)];
                    }
                }

                // Sum: '<S260>/BiasStartPose' incorporates:
                //   DataTypeConversion: '<S257>/Param1'

                rtb_Switch_n = localDW->startPose[0];
                rtb_ClockwiseRotation_m = localDW->startPose[1] -
                    static_cast<real_T>(rtu_Parameters->Param1);
                rtb_Sum1_k_idx_1 = localDW->startPose[2];

                // Reshape: '<S260>/Reshape' incorporates:
                //   Constant: '<S260>/Zero'
                //   DataTypeConversion: '<S257>/Param1'

                rtb_ReshapeRowVec_j[0] = 0.0;
                rtb_ReshapeRowVec_j[1] = static_cast<real_T>
                    (rtu_Parameters->Param1);
                rtb_ReshapeRowVec_j[2] = 0.0;

                // Reshape: '<S260>/ReshapeRowVecStartpose' incorporates:
                //   Product: '<S263>/x*cos'
                //   Product: '<S263>/x*sin'
                //   Product: '<S263>/y*cos'
                //   Product: '<S263>/y*sin'
                //   Sum: '<S263>/Sum2'
                //   Sum: '<S263>/Sum3'
                //   UnaryMinus: '<S259>/Ze2height'

                rtb_ReshapeRowVecStartpose_d[0] = rtb_Map2Radian * 0.0 +
                    rtb_Switch_p;
                rtb_ReshapeRowVecStartpose_d[1] = rtb_Map2Radian - rtb_Switch_p *
                    0.0;
                rtb_ReshapeRowVecStartpose_d[2] = -rtb_Down2Up_c;

                // Sum: '<S260>/Sum' incorporates:
                //   Bias: '<S260>/Bias'
                //   Gain: '<S260>/Invert'

                localDW->Sum = -(localDW->startPose[3] + -1.5707963267948966) +
                    rtb_Sum_ip;

                // MATLAB Function 'minus': '<S287>:1'
                // '<S287>:1:3'
                for (rtb_Bias_f = 0; rtb_Bias_f < 3; rtb_Bias_f++) {
                    // MATLAB Function: '<S283>/minus' incorporates:
                    //   MATLAB Function: '<S260>/WayPointGenerator'
                    //   Reshape: '<S260>/Reshape'

                    i = static_cast<int32_T>(rtb_Bias_f * 10240);
                    for (nrowx = 0; nrowx < 10240; nrowx++) {
                        localDW->WayPoint_i[static_cast<int32_T>(i + nrowx)] =
                            rtb_ReshapeRowVec_j[rtb_Bias_f];

                        // MATLAB Function: '<S260>/WayPointGenerator' incorporates:
                        //   Reshape: '<S260>/Reshape'

                        iacol = static_cast<int32_T>(static_cast<int32_T>(10240 *
                            rtb_Bias_f) + nrowx);
                        localDW->rtb_WayPoint_i_m[iacol] = localDW->
                            WayPoint0[iacol] - localDW->WayPoint_i[iacol];
                    }

                    // End of MATLAB Function: '<S283>/minus'
                    rtb_RelPrevPos_b_0[rtb_Bias_f] = (rtb_MatrixConcatenate[
                        static_cast<int32_T>(static_cast<int32_T>(3 * rtb_Bias_f)
                        + 1)] * rtb_ClockwiseRotation_m + rtb_MatrixConcatenate[
                        static_cast<int32_T>(3 * rtb_Bias_f)] * rtb_Switch_n) +
                        rtb_MatrixConcatenate[static_cast<int32_T>
                        (static_cast<int32_T>(3 * rtb_Bias_f) + 2)] *
                        rtb_Sum1_k_idx_1;
                }

                // Product: '<S283>/MatrixMultiply' incorporates:
                //   Product: '<S260>/MatrixProduct'

                for (i = 0; i < 3; i++) {
                    for (iacol = 0; iacol < 10240; iacol++) {
                        rtb_Bias_f = static_cast<int32_T>(static_cast<int32_T>
                            (10240 * i) + iacol);
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] = 0.0;
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] +=
                            rtb_MatrixConcatenate[static_cast<int32_T>(3 * i)] *
                            localDW->rtb_WayPoint_i_m[iacol];
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] +=
                            rtb_MatrixConcatenate[static_cast<int32_T>(
                            static_cast<int32_T>(3 * i) + 1)] *
                            localDW->rtb_WayPoint_i_m[static_cast<int32_T>(iacol
                            + 10240)];
                        localDW->RotateIndivWayPoint_g[rtb_Bias_f] +=
                            rtb_MatrixConcatenate[static_cast<int32_T>(
                            static_cast<int32_T>(3 * i) + 2)] *
                            localDW->rtb_WayPoint_i_m[static_cast<int32_T>(iacol
                            + 20480)];
                    }
                }

                // MATLAB Function: '<S283>/biasNED'
                FlightMissionMode_biasNED(rtb_ReshapeRowVecStartpose_d,
                    localDW->RotateIndivWayPoint_g, localDW->nedWayPoint_a,
                    &localDW->sf_biasNED_i);

                // MATLAB Function: '<S260>/biasNEDstartpose'
                FlightMissionMode_biasNEDstartpose(rtb_ReshapeRowVecStartpose_d,
                    rtb_RelPrevPos_b_0, localDW->nedWayPoint);
            } else {
                localDW->WayPointGenerator_MODE = false;
            }

            // End of Outputs for SubSystem: '<S257>/WayPointGenerator'
            FlightMissionMode_WaypointFollower(rtu_Pose, localDW->nedWayPoint_a,
                200.0, &localDW->WaypointFollower_dd);

            // DataTypeConversion: '<S257>/Cast To Double' incorporates:
            //   Constant: '<S257>/LookAheadDis'
            //   MATLAB Function: '<S260>/WayPointGenerator'

            *rty_thisTaskStatus = static_cast<real_T>
                (localDW->WaypointFollower_dd.WaypointFollower_o5);

            // BusCreator: '<S257>/GuidanceCMDBusCreator1' incorporates:
            //   DataTypeConversion: '<S257>/Param4'
            //   Gain: '<S257>/Down2Height1'

            rty_GuidanceCmds->Height =
                -localDW->WaypointFollower_dd.WaypointFollower_o1[2];
            rty_GuidanceCmds->AirSpeed = static_cast<real_T>
                (rtu_Parameters->Param4);
            rty_GuidanceCmds->HeadingAngle =
                localDW->WaypointFollower_dd.WaypointFollower_o2;

            // Reshape: '<S257>/Reshape' incorporates:
            //   Constant: '<S257>/InitialFlightPathAngle'
            //   Constant: '<S257>/InitialRollAngleRate'
            //   DataTypeConversion: '<S257>/Param4'
            //   Gain: '<S257>/Down2Up'

            rty_InitialState[0] = localDW->nedWayPoint[0];
            rty_InitialState[1] = localDW->nedWayPoint[1];
            rty_InitialState[2] = -localDW->nedWayPoint[2];
            rty_InitialState[3] = static_cast<real_T>(rtu_Parameters->Param4);
            rty_InitialState[4] = localDW->Sum;
            rty_InitialState[5] = 0.0;
            rty_InitialState[6] = localDW->startPose[4];
            rty_InitialState[7] = 0.0;

            // End of Outputs for SubSystem: '<Root>/Mode5_NewRunWay'
        }
        break;

      default:
        // Outputs for IfAction SubSystem: '<Root>/Mode255_WaitToStart' incorporates:
        //   ActionPort: '<S4>/Action Port'

        // SignalConversion generated from: '<S4>/thisTaskStatus'
        *rty_thisTaskStatus = 0.0;

        // SignalConversion generated from: '<S4>/GuidanceCmds'
        *rty_GuidanceCmds = FlightMissionMode_rtZFixedWingGuidanceBus;

        // SignalConversion generated from: '<S4>/InitialState '
        std::memset(&rty_InitialState[0], 0, static_cast<uint32_T>(sizeof(real_T)
                     << 3U));

        // End of Outputs for SubSystem: '<Root>/Mode255_WaitToStart'
        break;
    }

    FlightMissionMode_emxFree_real_T_n(&dummyWayPoint_0);
    FlightMissionMode_emxFree_real_T_n(&segWayPoints);
    FlightMissionMode_emxFree_real_T_n(&dummyWayPoint);
    FlightMissionMode_emxFree_real_T_n(&CheckPoints);
}

// Update for referenced model: 'FlightMissionMode'
void FlightMissionMode_Update(DW_FlightMissionMode_f_T *localDW)
{
    // Update for SwitchCase: '<Root>/Switch Case'
    switch (localDW->SwitchCase_ActiveSubsystem) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
        break;

      case 4:
        // Update for IfAction SubSystem: '<Root>/Mode3_RunWayNav' incorporates:
        //   ActionPort: '<S6>/Action Port'

        // Update for Atomic SubSystem: '<S175>/SegmentSwitch'
        FlightMissionMode_SegmentSwitch_Update(&localDW->SegmentSwitch);

        // End of Update for SubSystem: '<S175>/SegmentSwitch'
        // End of Update for SubSystem: '<Root>/Mode3_RunWayNav'
        break;

      case 5:
        // Update for IfAction SubSystem: '<Root>/Mode4_ProtLine' incorporates:
        //   ActionPort: '<S7>/Action Port'

        // Update for Atomic SubSystem: '<S216>/SegmentSwitch'
        FlightMissionMode_SegmentSwitch_Update(&localDW->SegmentSwitch_p);

        // End of Update for SubSystem: '<S216>/SegmentSwitch'
        // End of Update for SubSystem: '<Root>/Mode4_ProtLine'
        break;
    }

    // End of Update for SwitchCase: '<Root>/Switch Case'
}

// Model initialize function
void FlightMissionMode_initialize(const char_T **rt_errorStatus,
    RT_MODEL_FlightMissionMode_T *const FlightMissionMode_M)
{
    // Registration code

    // initialize non-finites
    rt_InitInfAndNaN(sizeof(real_T));

    // initialize error status
    rtmSetErrorStatusPointer(FlightMissionMode_M, rt_errorStatus);
}

//
// File trailer for generated code.
//
// [EOF]
//
